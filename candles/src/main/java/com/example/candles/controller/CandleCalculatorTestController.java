//package com.example.candles.controller;
//
//import com.example.candles.utils.CandleCalculatorUtil;
//import lombok.extern.slf4j.Slf4j;
//import org.springframework.http.ResponseEntity;
//import org.springframework.web.bind.annotation.*;
//
//import java.util.ArrayList;
//import java.util.List;
//import java.util.Map;
//
///**
// * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ç–∏–ª–∏—Ç–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ CandleCalculatorUtil
// */
//@RestController
//@RequestMapping("/api/candle-calculator")
//@Slf4j
//public class CandleCalculatorTestController {
//
//    /**
//     * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–≤–µ—á–µ–π –¥–ª—è –æ–¥–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
//     * <p>
//     * GET /api/candle-calculator/test?timeframe=1H&period=–º–µ—Å—è—Ü
//     */
//    @GetMapping("/test")
//    public ResponseEntity<?> testSingleCalculation(
//            @RequestParam String timeframe,
//            @RequestParam String period
//    ) {
//        log.info("üßÆ –¢–ï–°–¢ –†–ê–°–ß–ï–¢–ê: timeframe={}, period={}", timeframe, period);
//
//        try {
//            int candlesCount = CandleCalculatorUtil.calculateCandlesCount("", timeframe, period);
//            int allowedDifference = CandleCalculatorUtil.getAllowedDifference(timeframe, candlesCount);
//            String tolerance = CandleCalculatorUtil.getToleranceDescription(timeframe);
//            String details = CandleCalculatorUtil.getCalculationDetails(timeframe, period);
//
//            return ResponseEntity.ok(Map.of(
//                    "success", true,
//                    "timeframe", timeframe,
//                    "period", period,
//                    "candlesCount", candlesCount,
//                    "allowedDifference", allowedDifference,
//                    "tolerance", tolerance,
//                    "details", details
//            ));
//
//        } catch (Exception e) {
//            log.error("‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê: {}", e.getMessage(), e);
//            return ResponseEntity.ok(Map.of(
//                    "success", false,
//                    "error", e.getMessage()
//            ));
//        }
//    }
//
//    /**
//     * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
//     * <p>
//     * GET /api/candle-calculator/test-all
//     */
//    @GetMapping("/test-all")
//    public ResponseEntity<?> testAllCombinations() {
//        log.info("üßÆ –¢–ï–°–¢ –í–°–ï–• –ö–û–ú–ë–ò–ù–ê–¶–ò–ô");
//
//        String[] timeframes = {"1m", "5m", "15m", "1H", "4H", "1D", "1W", "1M"};
//        String[] periods = {"–¥–µ–Ω—å", "–Ω–µ–¥–µ–ª—è", "–º–µ—Å—è—Ü", "6 –º–µ—Å—è—Ü–µ–≤", "1 –≥–æ–¥", "2 –≥–æ–¥–∞", "3 –≥–æ–¥–∞"};
//
//        List<Map<String, Object>> results = new ArrayList<>();
//        int successCount = 0;
//        int errorCount = 0;
//
//        for (String timeframe : timeframes) {
//            for (String period : periods) {
//                try {
//                    int candlesCount = CandleCalculatorUtil.calculateCandlesCount("", timeframe, period);
//                    int allowedDifference = CandleCalculatorUtil.getAllowedDifference(timeframe, candlesCount);
//                    String tolerance = CandleCalculatorUtil.getToleranceDescription(timeframe);
//
//                    results.add(Map.of(
//                            "timeframe", timeframe,
//                            "period", period,
//                            "candlesCount", candlesCount,
//                            "allowedDifference", allowedDifference,
//                            "tolerance", tolerance,
//                            "success", true
//                    ));
//                    successCount++;
//
//                } catch (Exception e) {
//                    results.add(Map.of(
//                            "timeframe", timeframe,
//                            "period", period,
//                            "error", e.getMessage(),
//                            "success", false
//                    ));
//                    errorCount++;
//                    log.error("‚ùå –û–®–ò–ë–ö–ê –¥–ª—è {}+{}: {}", timeframe, period, e.getMessage());
//                }
//            }
//        }
//
//        log.info("‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù: —É—Å–ø–µ—à–Ω–æ {}, –æ—à–∏–±–æ–∫ {}", successCount, errorCount);
//
//        return ResponseEntity.ok(Map.of(
//                "success", true,
//                "totalTests", timeframes.length * periods.length,
//                "successCount", successCount,
//                "errorCount", errorCount,
//                "results", results
//        ));
//    }
//
//    /**
//     * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–≤–µ—á–µ–π
//     * <p>
//     * POST /api/candle-calculator/test-validation
//     * Body: {"timeframe": "1H", "expectedCount": 720, "actualCount": 721}
//     */
//    @PostMapping("/test-validation")
//    public ResponseEntity<?> testValidation(@RequestBody Map<String, Object> request) {
//        String timeframe = (String) request.get("timeframe");
//        int expectedCount = (Integer) request.get("expectedCount");
//        int actualCount = (Integer) request.get("actualCount");
//
//        log.info("üîç –¢–ï–°–¢ –í–ê–õ–ò–î–ê–¶–ò–ò: timeframe={}, expected={}, actual={}", timeframe, expectedCount, actualCount);
//
//        try {
//            boolean isValid = CandleCalculatorUtil.isValidCandlesCount(timeframe, expectedCount, actualCount);
//            int allowedDifference = CandleCalculatorUtil.getAllowedDifference(timeframe, expectedCount);
//            int actualDifference = Math.abs(actualCount - expectedCount);
//            String tolerance = CandleCalculatorUtil.getToleranceDescription(timeframe);
//
//            return ResponseEntity.ok(Map.of(
//                    "success", true,
//                    "timeframe", timeframe,
//                    "expectedCount", expectedCount,
//                    "actualCount", actualCount,
//                    "actualDifference", actualDifference,
//                    "allowedDifference", allowedDifference,
//                    "tolerance", tolerance,
//                    "isValid", isValid,
//                    "validation", isValid ? "‚úÖ –ü—Ä–æ—à–ª–∞" : "‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–∞"
//            ));
//
//        } catch (Exception e) {
//            log.error("‚ùå –û–®–ò–ë–ö–ê –í–ê–õ–ò–î–ê–¶–ò–ò: {}", e.getMessage(), e);
//            return ResponseEntity.ok(Map.of(
//                    "success", false,
//                    "error", e.getMessage()
//            ));
//        }
//    }
//
//    /**
//     * –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
//     * <p>
//     * GET /api/candle-calculator/examples
//     */
//    @GetMapping("/examples")
//    public ResponseEntity<?> getExamples() {
//        List<Map<String, Object>> examples = List.of(
//                Map.of(
//                        "description", "1 —á–∞—Å –∑–∞ –º–µ—Å—è—Ü",
//                        "timeframe", "1H",
//                        "period", "–º–µ—Å—è—Ü",
//                        "expectedCandles", "720 (30 –¥–Ω–µ–π * 24 —á–∞—Å–∞)",
//                        "tolerance", "¬±24 (1 –¥–µ–Ω—å)"
//                ),
//                Map.of(
//                        "description", "1 –¥–µ–Ω—å –∑–∞ –≥–æ–¥",
//                        "timeframe", "1D",
//                        "period", "1 –≥–æ–¥",
//                        "expectedCandles", "365 –¥–Ω–µ–π",
//                        "tolerance", "—Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ"
//                ),
//                Map.of(
//                        "description", "5 –º–∏–Ω—É—Ç –∑–∞ –Ω–µ–¥–µ–ª—é",
//                        "timeframe", "5m",
//                        "period", "–Ω–µ–¥–µ–ª—è",
//                        "expectedCandles", "2016 (7 * 24 * 12)",
//                        "tolerance", "¬±288 (1 –¥–µ–Ω—å)"
//                ),
//                Map.of(
//                        "description", "1 –Ω–µ–¥–µ–ª—è –∑–∞ 2 –≥–æ–¥–∞",
//                        "timeframe", "1W",
//                        "period", "2 –≥–æ–¥–∞",
//                        "expectedCandles", "104 (2 * 52)",
//                        "tolerance", "—Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ"
//                )
//        );
//
//        return ResponseEntity.ok(Map.of(
//                "success", true,
//                "examples", examples,
//                "supportedTimeframes", List.of("1m", "5m", "15m", "1H", "4H", "1D", "1W", "1M"),
//                "supportedPeriods", List.of("–¥–µ–Ω—å", "–Ω–µ–¥–µ–ª—è", "–º–µ—Å—è—Ü", "6 –º–µ—Å—è—Ü–µ–≤", "1 –≥–æ–¥", "2 –≥–æ–¥–∞", "3 –≥–æ–¥–∞"),
//                "toleranceRules", Map.of(
//                        "minutesAndHours", "–ú–∏–Ω—É—Ç–Ω—ã–µ (1m, 5m, 15m) –∏ —á–∞—Å–æ–≤—ã–µ (1H, 4H) —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã: –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å ¬±1 –¥–µ–Ω—å",
//                        "daysAndAbove", "–î–Ω–µ–≤–Ω—ã–µ –∏ –≤—ã—à–µ (1D, 1W, 1M): —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ 1:1"
//                )
//        ));
//    }
//}