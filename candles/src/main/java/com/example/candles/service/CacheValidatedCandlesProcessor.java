package com.example.candles.service;

import com.example.candles.repositories.CachedCandleRepository;
import com.example.candles.utils.CandleCalculatorUtil;
import com.example.shared.dto.Candle;
import com.example.shared.models.CachedCandle;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.time.Instant;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

/**
 * –°–µ—Ä–≤–∏—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π –∏–∑ –∫—ç—à–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
 * <p>
 * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
 * - –±–∏—Ä–∂–∞ (exchange)
 * - —Ç–∏–∫–µ—Ä (ticker)
 * - –¥–∞—Ç–∞ –î–û (untilDate) - –æ–±—Ä–µ–∑–∞–Ω–Ω–∞—è –¥–æ –Ω–∞—á–∞–ª–∞ –¥–Ω—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 2025-09-27T00:00:00Z
 * - —Ç–∞–π–º—Ñ—Ä–µ–π–º (timeframe) –≤ —Ñ–æ—Ä–º–∞—Ç–µ 1H, 1D, 1m...
 * - –ø–µ—Ä–∏–æ–¥ (period) –≤ –≤–∏–¥–µ "1year", "6months"...
 * <p>
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–≤—É—Ö—ç—Ç–∞–ø–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é:
 * 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–≤–µ—á–µ–π (—Å —É—á–µ—Ç–æ–º –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π)
 * 2. –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Ç–∞–π–º—à—Ç–∞–º–ø–æ–≤ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –º–µ–∂–¥—É —Å–≤–µ—á–∞–º–∏)
 * <p>
 * –ü—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–≥—Ä—É–∂–∞–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:
 * - –î–ª—è –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –¥–æ–≥—Ä—É–∑–∫–∞ –≤—Å–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
 * - –î–ª—è –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤ —Ç–∞–π–º—à—Ç–∞–º–ø–∞—Ö: —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –¥–æ–≥—Ä—É–∑–∫–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –¥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
 * <p>
 * –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç 100% –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ —Å–≤–µ—á–µ–π.
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class CacheValidatedCandlesProcessor {

    private final CachedCandleRepository cachedCandleRepository;
    private final CandlesLoaderProcessor candlesLoaderProcessor;
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–æ–≥—Ä—É–∑–∫–∏ –ø–æ —Ç–∏–∫–µ—Ä–∞–º –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–π —Å—Ä–µ–¥–µ
    private final ConcurrentHashMap<String, Object> tickerLocks = new ConcurrentHashMap<>();

    /**
     * –ì–ª–∞–≤–Ω—ã–π –ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –∏–∑ –∫—ç—à–∞
     * 
     * –ü–°–ï–í–î–û–ö–û–î –õ–û–ì–ò–ö–ò:
     * {
     *   –ë–õ–û–ö 1: –ü–û–î–ì–û–¢–û–í–ö–ê –ò –†–ê–°–ß–ï–¢–´
     *   {
     *     1.1. –í—ã—á–∏—Å–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–æ untilDate
     *     1.2. –ü–∞—Ä—Å–∏–º untilDate –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
     *   }
     *   
     *   –ë–õ–û–ö 2: –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –ò–ó –ö–≠–®–ê
     *   {
     *     2.1. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–∑ –ë–î –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–≤–µ—á–µ–π –î–û untilDate (ascending order)
     *     2.2. –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ expectedCount
     *   }
     *   
     *   –ë–õ–û–ö 3: –î–í–£–•–≠–¢–ê–ü–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø
     *   {
     *     3.1. –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É: —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ vs –æ–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
     *     3.2. –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏: –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞—Ö
     *   }
     *   
     *   –ë–õ–û–ö 4: –°–ò–°–¢–ï–ú–ê RETRY –° DOG–†–£–ó–ö–û–ô (–º–∞–∫—Å–∏–º—É–º 2 –ø–æ–ø—ã—Ç–∫–∏)
     *   {
     *     –ü–û–ö–ê (–≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞ –ò –ø–æ–ø—ã—Ç–∫–∏ –æ—Å—Ç–∞–ª–∏—Å—å) {
     *       4.1. –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—É –ø—Ä–æ–≤–∞–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     *       4.2. –ï–°–õ–ò –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ (—Ç–∏–∫–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π)
     *       4.3. –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ–≥—Ä—É–∑–∫—É –ø–æ –∫–ª—é—á—É ticker:timeframe:exchange
     *       4.4. –í–´–ë–û–† –¢–ò–ü–ê –î–û–ì–†–£–ó–ö–ò:
     *            –ï–°–õ–ò –µ—Å—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏ –≤ timestamps ‚Üí —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –¥–æ–≥—Ä—É–∑–∫–∞ –¥–ª—è gaps
     *            –ò–ù–ê–ß–ï ‚Üí –æ–±—ã—á–Ω–∞—è –ø–æ–ª–Ω–∞—è –¥–æ–≥—Ä—É–∑–∫–∞ —Å OKX API
     *       4.5. –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –ø–æ—Å–ª–µ –¥–æ–≥—Ä—É–∑–∫–∏
     *       4.6. –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
     *       4.7. –ï–°–õ–ò –¥–æ–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞ ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
     *     }
     *   }
     *   
     *   –ë–õ–û–ö 5: –í–û–ó–í–†–ê–¢ –†–ï–ó–£–õ–¨–¢–ê–¢–ê
     *   {
     *     5.1. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π
     *     5.2. –ü—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
     *   }
     * }
     */
    public List<Candle> getValidatedCandlesFromCache(String exchange, String ticker, String untilDate, String timeframe, String period) {
        log.debug("üîç –ö–≠–® –ó–ê–ü–†–û–°: –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {} –Ω–∞ –±–∏—Ä–∂–µ {}", ticker, exchange);
        log.debug("üìä –ü–ê–†–ê–ú–ï–¢–†–´: untilDate={}, timeframe={}, period={}", untilDate, timeframe, period);

        // –¢–∞–π–º—Ñ—Ä–µ–π–º –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ –º–µ—Ç–æ–¥—ã –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è race condition

        try {
            /*
             * –ë–õ–û–ö 1: –ü–û–î–ì–û–¢–û–í–ö–ê –ò –†–ê–°–ß–ï–¢–´
             * - –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ —Å–≤–µ—á–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–æ untilDate
             * - –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º untilDate –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å timestamp –≤ –ë–î
             */
            // –®–∞–≥ 1.1: –í—ã—á–∏—Å–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –° –£–ß–ï–¢–û–ú untilDate
            int expectedCandlesCount = CandleCalculatorUtil.calculateCandlesCountUntilDate(ticker, timeframe, period, untilDate);
            log.debug("üéØ –û–ñ–ò–î–ê–ù–ò–Ø: {} —Å–≤–µ—á–µ–π –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ '{}' —Å —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–º {} –¥–æ {}", expectedCandlesCount, period, timeframe, untilDate);

            // –®–∞–≥ 1.2: –ü–∞—Ä—Å–∏–º untilDate –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
            long untilTimestamp = parseUntilDate(untilDate);
            
            /*
             * –ë–õ–û–ö 2: –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –ò–ó –ö–≠–®–ê
             * - –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–∑ PostgreSQL –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–≤–µ—á–µ–π –î–û —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
             * - –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
             */
            // –®–∞–≥ 2.1: –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ –î–û untilDate –∏–∑ –∫—ç—à–∞ (PostgreSQL)
            List<Candle> cachedCandles = getCandlesFromCacheByActualRange(exchange, ticker, timeframe, expectedCandlesCount, untilTimestamp);

            /*
             * –ë–õ–û–ö 3: –î–í–£–•–≠–¢–ê–ü–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø
             * –≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å–≤–µ—á–µ–π)
             * –≠—Ç–∞–ø 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ (–Ω–µ—Ç –ª–∏ –ø—Ä–æ–ø—É—Å–∫–æ–≤)
             */
            // –®–∞–≥ 3.1: –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–≤–µ—á–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
            ValidationResult validationResult = validateCandlesByCount(cachedCandles, expectedCandlesCount, ticker, timeframe);

            // –®–∞–≥ 3.2: –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Ç–∞–π–º—à—Ç–∞–º–ø–æ–≤ —Å–≤–µ—á–µ–π (–ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏)
            TimestampValidationResult timestampValidation = validateCandlesConsistency(cachedCandles, timeframe, ticker);

            /*
             * –ë–õ–û–ö 4: –°–ò–°–¢–ï–ú–ê RETRY –° –î–û–ì–†–£–ó–ö–û–ô (–º–∞–∫—Å–∏–º—É–º 2 –ø–æ–ø—ã—Ç–∫–∏)
             * –ê–ª–≥–æ—Ä–∏—Ç–º:
             * 1. –ï–°–õ–ò –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ ‚Üí –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
             * 2. –ï–°–õ–ò –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞ ‚Üí –ø—ã—Ç–∞–µ–º—Å—è –¥–æ–≥—Ä—É–∑–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
             * 3. –ú–∞–∫—Å–∏–º—É–º 2 –ø–æ–ø—ã—Ç–∫–∏, –ø–æ—Å–ª–µ —á–µ–≥–æ —Å—á–∏—Ç–∞–µ–º —Ç–∏–∫–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º
             * 4. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ —Ç–∏–∫–µ—Ä—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –¥–æ–≥—Ä—É–∑–æ–∫
             */
            // –®–∞–≥ 4: –°–∏—Å—Ç–µ–º–∞ retry —Å –¥–æ–≥—Ä—É–∑–∫–æ–π (–º–∞–∫—Å–∏–º—É–º 2 –ø–æ–ø—ã—Ç–∫–∏)
            final int MAX_VALIDATION_ATTEMPTS = 2;
            for (int attempt = 1; attempt <= MAX_VALIDATION_ATTEMPTS; attempt++) {
                
                if (!validationResult.isValid || !timestampValidation.isValid) {
                    // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–≤–∞–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                    if (!validationResult.isValid) {
                        log.debug("‚ö†Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø –ö–û–õ–ò–ß–ï–°–¢–í–ê –ü–†–û–í–ê–õ–ï–ù–ê (–ø–æ–ø—ã—Ç–∫–∞ {}/{}): {} {}", attempt, MAX_VALIDATION_ATTEMPTS, ticker, validationResult.reason);
                    }
                    if (!timestampValidation.isValid) {
                        log.debug("‚ö†Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–ò –ü–†–û–í–ê–õ–ï–ù–ê (–ø–æ–ø—ã—Ç–∫–∞ {}/{}): {} {}", attempt, MAX_VALIDATION_ATTEMPTS, ticker, timestampValidation.reason);
                    }
                    
                    // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –Ω–µ –¥–µ–ª–∞–µ–º –¥–æ–≥—Ä—É–∑–∫—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
                    if (attempt == MAX_VALIDATION_ATTEMPTS) {
                        log.debug("‚ö†Ô∏è –ò–°–ß–ï–†–ü–ê–ù–´ –ü–û–ü–´–¢–ö–ò: {} –ú–∞–∫—Å–∏–º—É–º {} –ø–æ–ø—ã—Ç–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ - –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ä", ticker, MAX_VALIDATION_ATTEMPTS);
                        return List.of();
                    }
                    
                    log.debug("üîÑ –î–û–ì–†–£–ó–ö–ê (–ø–æ–ø—ã—Ç–∫–∞ {}/{}): –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}", attempt, MAX_VALIDATION_ATTEMPTS, ticker);

                    /*
                     * –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ü–û –¢–ò–ö–ï–†–£
                     * - –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ ticker:timeframe:exchange
                     * - –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–æ–≥—Ä—É–∑–∫—É –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ —Ç–∏–∫–µ—Ä–∞ –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
                     * - –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ OKX
                     */
                    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–æ–≥—Ä—É–∑–∫—É –ø–æ —Ç–∏–∫–µ—Ä—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ OKX API
                    String lockKey = ticker + ":" + timeframe + ":" + exchange;
                    Object lock = tickerLocks.computeIfAbsent(lockKey, k -> new Object());
                    
                    int loadedCount;
                    synchronized (lock) {
                        log.debug("üîí –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –ó–∞—Ö–≤–∞—Ç–∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –¥–æ–≥—Ä—É–∑–∫–∏ —Ç–∏–∫–µ—Ä–∞ {}", ticker);
                        
                        /*
                         * –í–´–ë–û–† –¢–ò–ü–ê –î–û–ì–†–£–ó–ö–ò –í –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –û–¢ –ü–†–û–ë–õ–ï–ú–´:
                         * –°–ª—É—á–∞–π 1: –ï—Å—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏ –≤ —Ç–∞–π–º—à—Ç–∞–º–ø–∞—Ö ‚Üí —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –¥–æ–≥—Ä—É–∑–∫–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è gaps
                         * –°–ª—É—á–∞–π 2: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–µ—á–µ–π ‚Üí –ø–æ–ª–Ω–∞—è –¥–æ–≥—Ä—É–∑–∫–∞ –≤—Å–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                         */
                        // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏ –≤ —Ç–∞–π–º—à—Ç–∞–º–ø–∞—Ö - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –¥–æ–≥—Ä—É–∑–∫—É
                        if (!timestampValidation.isValid && !timestampValidation.gaps.isEmpty()) {
                            loadedCount = loadMissingCandlesForGaps(timestampValidation.gaps, exchange, ticker, timeframe, period, untilDate);
                        } else {
                            // –û–±—ã—á–Ω–∞—è –¥–æ–≥—Ä—É–∑–∫–∞ –¥–ª—è –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
                            loadedCount = candlesLoaderProcessor.loadAndSaveCandles(exchange, ticker, untilDate, timeframe, period);
                        }
                        
                        log.debug("üîì –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –û—Å–≤–æ–±–æ–¥–∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {} (–∑–∞–≥—Ä—É–∂–µ–Ω–æ {} —Å–≤–µ—á–µ–π)", ticker, loadedCount);
                    }
                    
                    /*
                     * –û–ë–†–ê–ë–û–¢–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê –î–û–ì–†–£–ó–ö–ò:
                     * –£—Å–ø–µ—Ö: –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
                     * –ü—Ä–æ–≤–∞–ª: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ (—Ç–∏–∫–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π)
                     */
                    if (loadedCount > 0) {
                        log.debug("‚úÖ –î–û–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê (–ø–æ–ø—ã—Ç–∫–∞ {}/{}): –ó–∞–≥—Ä—É–∂–µ–Ω–æ {} —Å–≤–µ—á–µ–π, –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∏–∑ –∫—ç—à–∞", attempt, MAX_VALIDATION_ATTEMPTS, loadedCount);

                        // –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∏–∑ –∫—ç—à–∞ –ø–æ—Å–ª–µ –¥–æ–≥—Ä—É–∑–∫–∏ –î–û untilDate
                        cachedCandles = getCandlesFromCacheByActualRange(exchange, ticker, timeframe, expectedCandlesCount, untilTimestamp);
                        validationResult = validateCandlesByCount(cachedCandles, expectedCandlesCount, ticker, timeframe);
                        timestampValidation = validateCandlesConsistency(cachedCandles, timeframe, ticker);

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ - –µ—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ, —Ü–∏–∫–ª –ø—Ä–µ—Ä–≤–µ—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                        // –ï—Å–ª–∏ –ø–ª–æ—Ö–æ - –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ (–µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ø—ã—Ç–∫–∏)
                    } else {
                        log.error("‚ùå –î–û–ì–†–£–ó–ö–ê –ü–†–û–í–ê–õ–ï–ù–ê (–ø–æ–ø—ã—Ç–∫–∞ {}/{}): –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {} - –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ä", attempt, MAX_VALIDATION_ATTEMPTS, ticker);
                        return List.of(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å—Ä–∞–∑—É
                    }
                } else {
                    /*
                     * –£–°–ü–ï–®–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø:
                     * - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É
                     * - –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã
                     * - –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ retry
                     */
                    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ - –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                    break;
                }
            }

            /*
             * –ë–õ–û–ö 5: –í–û–ó–í–†–ê–¢ –†–ï–ó–£–õ–¨–¢–ê–¢–ê
             * - –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π
             * - –í—Å–µ —Å–≤–µ—á–∏ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
             */
            // –®–∞–≥ 5: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏
            log.debug("‚úÖ –ö–≠–® –†–ï–ó–£–õ–¨–¢–ê–¢: –í–æ–∑–≤—Ä–∞—â–∞–µ–º {} –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}", cachedCandles.size(), ticker);
            return cachedCandles;

        } catch (Exception e) {
            /*
             * –û–ë–†–ê–ë–û–¢–ö–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –û–®–ò–ë–û–ö:
             * - –û—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞, –ë–î, —Å–µ—Ç–∏
             * - –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
             */
            log.error("üí• –ö–≠–® –û–®–ò–ë–ö–ê: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}: {}", ticker, e.getMessage(), e);
            return List.of();
        }
    }

//    /**
//     * –í—ã—á–∏—Å–ª—è–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
//     */
//    private ExpectedParameters calculateExpectedParameters(String ticker, String untilDate, String timeframe, String period) {
//        log.info("üìê –†–ê–°–ß–ï–¢ –ü–ê–†–ê–ú–ï–¢–†–û–í: untilDate={}, timeframe={}, period={}", untilDate, timeframe, period);
//
//        // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É "–¥–æ"
//        long untilTimestamp = parseUntilDate(untilDate);
//
//        // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
//        int candlesCount = calculateCandlesCount(ticker, timeframe, period);
//
//        // –í—ã—á–∏—Å–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è —Å—Ç–∞—Ä–µ–π—à–µ–π —Å–≤–µ—á–∏
//        long timeframeDurationMs = getTimeframeDurationInMillis(timeframe);
//        // –ù–æ–≤–µ–π—à–∞—è —Å–≤–µ—á–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ù–ê –û–î–ò–ù –î–ï–ù–¨ –†–ê–ù–¨–®–ï untilDate (–∏—Å–∫–ª—é—á–∞–µ–º –≥—Ä–∞–Ω–∏—á–Ω—É—é —Ç–æ—á–∫—É)
//        long expectedNewestTime = untilTimestamp - (24 * 60 * 60 * 1000L); // -1 –¥–µ–Ω—å
//        // –°—Ç–∞—Ä–µ–π—à–∞—è —Å–≤–µ—á–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç –Ω–æ–≤–µ–π—à–µ–π
//        long expectedOldestTime = expectedNewestTime - ((candlesCount - 1) * timeframeDurationMs);
//
//        return new ExpectedParameters(candlesCount, expectedOldestTime, expectedNewestTime);
//    }

    /**
     * –ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 2025-09-27T00:00:00Z –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
     */
    private long parseUntilDate(String untilDate) {
        try {
            return Instant.parse(untilDate).toEpochMilli();
        } catch (Exception e) {
            log.error("‚ùå –û–®–ò–ë–ö–ê –ü–ê–†–°–ò–ù–ì–ê –î–ê–¢–´: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É {}: {}", untilDate, e.getMessage());
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∫–∞–∫ fallback
            return System.currentTimeMillis();
        }
    }

//    /**
//     * –í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –∏—Å—Ö–æ–¥—è –∏–∑ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –∏ –ø–µ—Ä–∏–æ–¥–∞
//     */
//    private int calculateCandlesCount(String ticker, String timeframe, String period) {
//        return CandleCalculatorUtil.calculateCandlesCount(ticker, timeframe, period);
//    }


    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
     */
    private long getTimeframeDurationInMillis(String timeframe) {
        return switch (timeframe) {
            case "1m" -> 60 * 1000L;                    // 1 –º–∏–Ω—É—Ç–∞
            case "5m" -> 5 * 60 * 1000L;                // 5 –º–∏–Ω—É—Ç
            case "15m" -> 15 * 60 * 1000L;              // 15 –º–∏–Ω—É—Ç
            case "1H" -> 60 * 60 * 1000L;               // 1 —á–∞—Å
            case "4H" -> 4 * 60 * 60 * 1000L;           // 4 —á–∞—Å–∞
            case "1D" -> 24 * 60 * 60 * 1000L;          // 1 –¥–µ–Ω—å
            case "1W" -> 7 * 24 * 60 * 60 * 1000L;      // 1 –Ω–µ–¥–µ–ª—è
            case "1M" -> 30L * 24 * 60 * 60 * 1000L;    // 1 –º–µ—Å—è—Ü (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
            default -> {
                log.warn("‚ö†Ô∏è –ù–ï–ò–ó–í–ï–°–¢–ù–´–ô –¢–ê–ô–ú–§–†–ï–ô–ú: {}, –∏—Å–ø–æ–ª—å–∑—É–µ–º 1H", timeframe);
                yield 60 * 60 * 1000L;
            }
        };
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏ –∏–∑ –∫—ç—à–∞ –ø–æ —Ä–µ–∞–ª—å–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É, –æ—Ç—Ç–∞–ª–∫–∏–≤–∞—è—Å—å –æ—Ç untilDate
     */
    private List<Candle> getCandlesFromCacheByActualRange(String exchange, String ticker, String timeframe, int expectedCount, long untilTimestamp) {
        log.debug("üóÉÔ∏è –ö–≠–® –ó–ê–ü–†–û–°: –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ {} —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {} –î–û –¥–∞—Ç—ã {}",
                expectedCount, ticker, formatTimestamp(untilTimestamp));

        try {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–≤–µ—á–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞ –î–û untilDate, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏
            List<CachedCandle> cachedCandles = cachedCandleRepository
                    .findByTickerAndTimeframeAndExchangeAndTimestampLessThanOrderByTimestampDesc(
                            ticker, timeframe, exchange, untilTimestamp);

            log.debug("üîç –ö–≠–® –ü–û–ò–°–ö: –ù–∞–π–¥–µ–Ω–æ {} —Å–≤–µ—á–µ–π –≤ –ë–î –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {} –î–û –¥–∞—Ç—ã {}",
                    cachedCandles.size(), ticker, formatTimestamp(untilTimestamp));

            // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π (–î–û untilDate)
            List<CachedCandle> limitedCandles = cachedCandles.stream()
                    .limit(expectedCount)
                    .collect(Collectors.toList());

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
            limitedCandles.sort((a, b) -> Long.compare(a.getTimestamp(), b.getTimestamp()));

            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Candle
            List<Candle> candles = limitedCandles.stream()
                    .map(CachedCandle::toCandle)
                    .collect(Collectors.toList());

            log.debug("‚úÖ –ö–≠–® –û–¢–í–ï–¢: –ü–æ–ª—É—á–µ–Ω–æ {} —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {} –∏–∑ –∫—ç—à–∞ –î–û untilDate", candles.size(), ticker);

            if (!candles.isEmpty()) {
                long actualOldest = candles.get(0).getTimestamp();
                long actualNewest = candles.get(candles.size() - 1).getTimestamp();
                log.debug("üìÖ –§–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –î–ò–ê–ü–ê–ó–û–ù –ò–ó –ö–≠–®–ê: {} - {}",
                        formatTimestamp(actualOldest), formatTimestamp(actualNewest));
                log.debug("üîç –ü–†–û–í–ï–†–ö–ê UNTILDATE: –ù–æ–≤–µ–π—à–∞—è —Å–≤–µ—á–∞ {} < untilDate {} = {}",
                        formatTimestamp(actualNewest), formatTimestamp(untilTimestamp), 
                        actualNewest < untilTimestamp);
            }

            return candles;

        } catch (Exception e) {
            log.error("‚ùå –ö–≠–® –û–®–ò–ë–ö–ê: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}: {}", ticker, e.getMessage(), e);
            return List.of();
        }
    }

//    /**
//     * –ü–æ–ª—É—á–∞–µ—Ç —Å–≤–µ—á–∏ –∏–∑ –∫—ç—à–∞ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤)
//     */
//    private List<Candle> getCandlesFromCache(String exchange, String ticker, String timeframe, int limit, long expectedOldestTime, long expectedNewestTime) {
//        log.info("üóÉÔ∏è –ö–≠–® –ó–ê–ü–†–û–°: –ü–æ–ª—É—á–∞–µ–º {} —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {} –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ {} - {}",
//                limit, ticker, formatTimestamp(expectedOldestTime), formatTimestamp(expectedNewestTime));
//
//        try {
//            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –Ω–∞–ø—Ä—è–º—É—é - timestamp –≤ –ë–î —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
//            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É –≤–º–µ—Å—Ç–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
//            List<CachedCandle> cachedCandles = cachedCandleRepository
//                    .findByTickerAndTimeframeAndExchangeAndTimestampBetweenOrderByTimestampAsc(
//                            ticker, timeframe, exchange, expectedOldestTime, expectedNewestTime);
//
//            log.info("üîç –ö–≠–® –ü–û–ò–°–ö: –ü–æ–ª—É—á–µ–Ω–æ {} —Å–≤–µ—á–µ–π –∏–∑ –∫—ç—à–∞ –ø–æ —Ç–æ—á–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É {} - {}",
//                    cachedCandles.size(), formatTimestamp(expectedOldestTime), formatTimestamp(expectedNewestTime));
//
//            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Candle (—É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é timestamp)
//            List<Candle> candles = cachedCandles.stream()
//                    .map(CachedCandle::toCandle)
//                    .collect(Collectors.toList());
//
//            log.debug("‚úÖ –ö–≠–® –û–¢–í–ï–¢: –ü–æ–ª—É—á–µ–Ω–æ {} —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {} –∏–∑ –∫—ç—à–∞ –ø–æ —Ç–æ—á–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É", candles.size(), ticker);
//
//            if (!candles.isEmpty()) {
//                long actualOldest = candles.get(0).getTimestamp();
//                long actualNewest = candles.get(candles.size() - 1).getTimestamp();
//                log.debug("üìÖ –§–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –î–ò–ê–ü–ê–ó–û–ù –ò–ó –ö–≠–®–ê: {} - {}",
//                        formatTimestamp(actualOldest), formatTimestamp(actualNewest));
//            }
//
//            return candles;
//
//        } catch (Exception e) {
//            log.error("‚ùå –ö–≠–® –û–®–ò–ë–ö–ê: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}: {}", ticker, e.getMessage(), e);
//            return List.of();
//        }
//    }

//    /**
//     * –§–∏–ª—å—Ç—Ä—É–µ—Ç —Å–≤–µ—á–∏ —Ç–æ—á–Ω–æ –¥–æ untilDate –∏ –±–µ—Ä–µ—Ç –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
//     */
//    private List<Candle> filterCandlesUntilDate(List<Candle> candles, long untilTimestamp, int expectedCount, String timeframe) {
//        if (candles.isEmpty()) {
//            log.warn("‚ö†Ô∏è –§–ò–õ–¨–¢–† UNTILDATE: –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å");
//            return candles;
//        }
//
//        log.info("üîç –§–ò–õ–¨–¢–† UNTILDATE: –§–∏–ª—å—Ç—Ä—É–µ–º {} —Å–≤–µ—á–µ–π –¥–æ –¥–∞—Ç—ã {}", candles.size(), formatTimestamp(untilTimestamp));
//
//        // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–≤–µ—á–∏ —Å—Ç—Ä–æ–≥–æ –î–û untilDate (–Ω–µ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
//        List<Candle> filteredCandles = candles.stream()
//                .filter(candle -> candle.getTimestamp() < untilTimestamp)
//                .collect(Collectors.toList());
//
//        log.info("üîç –§–ò–õ–¨–¢–† –†–ï–ó–£–õ–¨–¢–ê–¢: –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ –æ—Å—Ç–∞–ª–æ—Å—å {} —Å–≤–µ—á–µ–π", filteredCandles.size());
//
//        // –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å –±–æ–ª—å—à–µ —á–µ–º –Ω—É–∂–Ω–æ - –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–≤–µ—á–µ–π
//        if (filteredCandles.size() > expectedCount) {
//            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ N, –∑–∞—Ç–µ–º —Å–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
//            List<Candle> lastNCandles = filteredCandles.stream()
//                    .sorted((a, b) -> Long.compare(b.getTimestamp(), a.getTimestamp())) // –ü–æ —É–±—ã–≤–∞–Ω–∏—é
//                    .limit(expectedCount)
//                    .sorted((a, b) -> Long.compare(a.getTimestamp(), b.getTimestamp())) // –û–±—Ä–∞—Ç–Ω–æ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
//                    .collect(Collectors.toList());
//
//            log.info("üîç –§–ò–õ–¨–¢–† –û–ë–†–ï–ó–ö–ê: –í–∑—è–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {} —Å–≤–µ—á–µ–π –∏–∑ {} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö", expectedCount, filteredCandles.size());
//            filteredCandles = lastNCandles;
//        }
//
//        if (!filteredCandles.isEmpty()) {
//            long actualOldest = filteredCandles.get(0).getTimestamp();
//            long actualNewest = filteredCandles.get(filteredCandles.size() - 1).getTimestamp();
//            log.info("üìÖ –§–ò–ù–ê–õ–¨–ù–´–ô –î–ò–ê–ü–ê–ó–û–ù –ü–û–°–õ–ï –§–ò–õ–¨–¢–†–ê: {} - {}",
//                    formatTimestamp(actualOldest), formatTimestamp(actualNewest));
//
//            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ untilDate
//            if (actualNewest >= untilTimestamp) {
//                log.warn("‚ö†Ô∏è –§–ò–õ–¨–¢–† –ü–†–û–ë–õ–ï–ú–ê: –ù–æ–≤–µ–π—à–∞—è —Å–≤–µ—á–∞ {} >= untilDate {}",
//                        formatTimestamp(actualNewest), formatTimestamp(untilTimestamp));
//            } else {
//                log.info("‚úÖ –§–ò–õ–¨–¢–† –ü–†–û–í–ï–†–ö–ê: –ù–æ–≤–µ–π—à–∞—è —Å–≤–µ—á–∞ {} < untilDate {} - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
//                        formatTimestamp(actualNewest), formatTimestamp(untilTimestamp));
//            }
//        }
//
//        return filteredCandles;
//    }

    /**
     * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Ç–∞–π–º—à—Ç–∞–º–ø–æ–≤ —Å–≤–µ—á–µ–π - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞—Ö
     * @param candles —Å–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é timestamp)
     * @param timeframe —Ç–∞–π–º—Ñ—Ä–µ–π–º (1m, 5m, 15m, 1H, 4H, 1D –∏ —Ç.–¥.)
     * @param ticker –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
     * @return —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–ø—É—Å–∫–∞—Ö
     */
    private TimestampValidationResult validateCandlesConsistency(List<Candle> candles, String timeframe, String ticker) {
        log.debug("üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –¢–ê–ô–ú–®–¢–ê–ú–ü–û–í: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ {} —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {} —Å —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–º {}",
                candles.size(), ticker, timeframe);
        
        if (candles == null || candles.isEmpty()) {
            log.warn("‚ö†Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø –¢–ê–ô–ú–®–¢–ê–ú–ü–û–í: –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π –ø—É—Å—Ç –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}", ticker);
            return new TimestampValidationResult(true, "–°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π –ø—É—Å—Ç", List.of());
        }
        
        if (candles.size() < 2) {
            log.warn("‚ö†Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø –¢–ê–ô–ú–®–¢–ê–ú–ü–û–í: –°–ª–∏—à–∫–æ–º –º–∞–ª–æ —Å–≤–µ—á–µ–π ({}) –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Ç–∏–∫–µ—Ä–∞ {}",
                    candles.size(), ticker);
            return new TimestampValidationResult(true, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–µ—á–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏", List.of());
        }
        
        long timeframeDurationMs = getTimeframeDurationInMillis(timeframe);
        List<TimestampGap> gaps = new ArrayList<>();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É —Å–æ—Å–µ–¥–Ω–∏–º–∏ —Å–≤–µ—á–∞–º–∏
        for (int i = 1; i < candles.size(); i++) {
            long previousTimestamp = candles.get(i - 1).getTimestamp();
            long currentTimestamp = candles.get(i).getTimestamp();
            long actualInterval = currentTimestamp - previousTimestamp;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º—É (—Å –Ω–µ–±–æ–ª—å—à–æ–π –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å—é)
            if (Math.abs(actualInterval - timeframeDurationMs) > timeframeDurationMs * 0.1) { // 10% –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
                long missedCandles = (actualInterval / timeframeDurationMs) - 1;
                if (missedCandles > 0) {
                    TimestampGap gap = new TimestampGap(
                            previousTimestamp, 
                            currentTimestamp, 
                            (int) missedCandles,
                            i - 1, // –ø–æ–∑–∏—Ü–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–≤–µ—á–∏
                            i      // –ø–æ–∑–∏—Ü–∏—è —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏
                    );
                    gaps.add(gap);
                    
                    log.warn("‚ö†Ô∏è –ü–†–û–ü–£–°–ö –°–í–ï–ß–ï–ô: –ú–µ–∂–¥—É –ø–æ–∑–∏—Ü–∏—è–º–∏ {} –∏ {} –Ω–∞–π–¥–µ–Ω –ø—Ä–æ–ø—É—Å–∫ –≤ {} —Å–≤–µ—á–µ–π. " +
                            "–ü—Ä–µ–¥—ã–¥—É—â–∞—è: {}, —Ç–µ–∫—É—â–∞—è: {}, –æ–∂–∏–¥–∞–µ–º—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {} –º—Å, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π: {} –º—Å",
                            i - 1, i, missedCandles,
                            formatTimestamp(previousTimestamp), formatTimestamp(currentTimestamp),
                            timeframeDurationMs, actualInterval);
                }
            }
        }
        
        if (gaps.isEmpty()) {
            log.debug("‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –¢–ê–ô–ú–®–¢–ê–ú–ü–û–í: –°–≤–µ—á–∏ –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {} –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏. " +
                    "–í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º—É {}", ticker, timeframe);
            return new TimestampValidationResult(true, "–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Ç–∞–π–º—à—Ç–∞–º–ø–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞", gaps);
        } else {
            int totalMissedCandles = gaps.stream().mapToInt(TimestampGap::getMissedCandlesCount).sum();
            String reason = String.format("–ù–∞–π–¥–µ–Ω–æ %d –ø—Ä–æ–ø—É—Å–∫–æ–≤ —Å –æ–±—â–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Å–≤–µ—á–µ–π: %d", 
                    gaps.size(), totalMissedCandles);
            log.warn("‚ö†Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø –¢–ê–ô–ú–®–¢–ê–ú–ü–û–í: {}", reason);
            
            // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞
            for (int i = 0; i < gaps.size(); i++) {
                TimestampGap gap = gaps.get(i);
                log.warn("‚ö†Ô∏è –ü–†–û–ü–£–°–ö #{}: {} –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Å–≤–µ—á–µ–π –º–µ–∂–¥—É {} –∏ {}", 
                        i + 1, gap.getMissedCandlesCount(),
                        formatTimestamp(gap.getStartTimestamp()), formatTimestamp(gap.getEndTimestamp()));
            }
            
            return new TimestampValidationResult(false, reason, gaps);
        }
    }

    /**
     * –î–æ–≥—Ä—É–∂–∞–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å–≤–µ—á–∏ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤ —Ç–∞–π–º—à—Ç–∞–º–ø–∞—Ö
     * @param gaps —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
     * @param exchange –±–∏—Ä–∂–∞
     * @param ticker —Ç–∏–∫–µ—Ä
     * @param timeframe —Ç–∞–π–º—Ñ—Ä–µ–π–º
     * @param period –ø–µ—Ä–∏–æ–¥
     * @param untilDate –¥–∞—Ç–∞ –¥–æ –∫–æ—Ç–æ—Ä–æ–π –∑–∞–≥—Ä—É–∂–∞—Ç—å
     * @return –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π
     */
    private int loadMissingCandlesForGaps(List<TimestampGap> gaps, String exchange, String ticker, 
                                         String timeframe, String period, String untilDate) {
        if (gaps.isEmpty()) {
            log.info("‚úÖ –î–û–ì–†–£–ó–ö–ê –ü–†–û–ü–£–°–ö–û–í: –ù–µ—Ç –ø—Ä–æ–ø—É—Å–∫–æ–≤ –¥–ª—è –¥–æ–≥—Ä—É–∑–∫–∏ —Ç–∏–∫–µ—Ä–∞ {}", ticker);
            return 0;
        }
        
        log.info("üîÑ –î–û–ì–†–£–ó–ö–ê –ü–†–û–ü–£–°–ö–û–í: –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–≥—Ä—É–∑–∫—É –¥–ª—è {} –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤ —Ç–∏–∫–µ—Ä–µ {}", gaps.size(), ticker);
        
        int totalLoadedCandles = 0;
        int maxRetries = 3; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–æ–≥—Ä—É–∑–∫–∏
        
        for (int attempt = 1; attempt <= maxRetries; attempt++) {
            log.info("üîÑ –ü–û–ü–´–¢–ö–ê #{}: –î–æ–≥—Ä—É–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}", attempt, ticker);
            
            // –î–µ–ª–∞–µ–º –æ–±—â—É—é –¥–æ–≥—Ä—É–∑–∫—É –≤—Å–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ - —ç—Ç–æ –ø—Ä–æ—â–µ –∏ –Ω–∞–¥—ë–∂–Ω–µ–µ
            // —á–µ–º –ø—ã—Ç–∞—Ç—å—Å—è –¥–æ–≥—Ä—É–∂–∞—Ç—å –∫–∞–∂–¥—ã–π –ø—Ä–æ–ø—É—Å–∫ –æ—Ç–¥–µ–ª—å–Ω–æ
            int loadedCount = candlesLoaderProcessor.loadAndSaveCandles(exchange, ticker, untilDate, timeframe, period);
            
            if (loadedCount > 0) {
                log.info("‚úÖ –ü–û–ü–´–¢–ö–ê #{}: –ó–∞–≥—Ä—É–∂–µ–Ω–æ {} —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}", attempt, loadedCount, ticker);
                totalLoadedCandles += loadedCount;
                
                // –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ –¥–æ–≥—Ä—É–∑–∫–∏
                long untilTimestamp = parseUntilDate(untilDate);
                int expectedCandlesCount = CandleCalculatorUtil.calculateCandlesCountUntilDate(ticker, timeframe, period, untilDate);
                List<Candle> reloadedCandles = getCandlesFromCacheByActualRange(exchange, ticker, timeframe, expectedCandlesCount, untilTimestamp);
                
                TimestampValidationResult revalidationResult = validateCandlesConsistency(reloadedCandles, timeframe, ticker);
                
                if (revalidationResult.isValid) {
                    log.info("‚úÖ –ü–û–ü–´–¢–ö–ê #{}: –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {} –ø–æ—Å–ª–µ –¥–æ–≥—Ä—É–∑–∫–∏", attempt, ticker);
                    break;
                } else {
                    log.warn("‚ö†Ô∏è –ü–û–ü–´–¢–ö–ê #{}: –û—Å—Ç–∞–ª–∏—Å—å –ø—Ä–æ–ø—É—Å–∫–∏ –ø–æ—Å–ª–µ –¥–æ–≥—Ä—É–∑–∫–∏ –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}: {}", 
                            attempt, ticker, revalidationResult.reason);
                    
                    if (attempt == maxRetries) {
                        log.error("‚ùå –î–û–ì–†–£–ó–ö–ê –ü–†–û–ü–£–°–ö–û–í: –ò—Å—á–µ—Ä–ø–∞–Ω—ã –ø–æ–ø—ã—Ç–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}. " +
                                "–û—Å—Ç–∞–µ—Ç—Å—è {} –ø—Ä–æ–ø—É—Å–∫–æ–≤", ticker, revalidationResult.gaps.size());
                    } else {
                        log.info("üîÑ –ü–û–í–¢–û–†–ù–ê–Ø –ü–û–ü–´–¢–ö–ê: –ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –¥–æ–≥—Ä—É–∑–∫–∞ –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}", ticker);
                    }
                }
            } else {
                log.warn("‚ö†Ô∏è –ü–û–ü–´–¢–ö–ê #{}: –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–≥—Ä—É–∑–∏—Ç—å —Å–≤–µ—á–∏ –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {} (–ø–æ–ª—É—á–µ–Ω–æ 0 —Å–≤–µ—á–µ–π)", attempt, ticker);
                
                if (attempt == maxRetries) {
                    log.error("‚ùå –î–û–ì–†–£–ó–ö–ê –ü–†–û–ü–£–°–ö–û–í: –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–≥—Ä—É–∑–∏—Ç—å —Å–≤–µ—á–∏ –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {} –∑–∞ {} –ø–æ–ø—ã—Ç–æ–∫", ticker, maxRetries);
                }
            }
        }
        
        log.info("üìä –ò–¢–û–ì–û –î–û–ì–†–£–ó–ö–ê –ü–†–û–ü–£–°–ö–û–í: –ó–∞–≥—Ä—É–∂–µ–Ω–æ {} —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {} –∑–∞ {} –ø–æ–ø—ã—Ç–æ–∫", 
                totalLoadedCandles, ticker, Math.min(maxRetries, totalLoadedCandles > 0 ? 1 : maxRetries));
        
        return totalLoadedCandles;
    }

    /**
     * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å–≤–µ—á–∏ —Ç–æ–ª—å–∫–æ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞)
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —É–≤–µ–ª–∏—á–µ–Ω–Ω—É—é –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –¥–ª—è —Å–ª—É—á–∞–µ–≤ —Å untilDate
     */
    private ValidationResult validateCandlesByCount(List<Candle> candles, int expectedCount, String ticker, String timeframe) {
        log.debug("üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –ö–≠–®–∞: –ü—Ä–æ–≤–µ—Ä—è–µ–º {} —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}", candles.size(), ticker);

        // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å –¥–æ–ø—É—Å—Ç–∏–º—ã–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º
        int allowedDifference = CandleCalculatorUtil.getAllowedDifferenceWithUntilDate(timeframe, expectedCount);
        int actualDifference = Math.abs(candles.size() - expectedCount);
        
        if (actualDifference > allowedDifference) {
            String tolerance = CandleCalculatorUtil.getToleranceDescription(timeframe) + " + untilDate –±—É—Ñ–µ—Ä";
            String reason = String.format("–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å–≤–µ—á–µ–π –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º–æ–µ: –æ–∂–∏–¥–∞–ª–æ—Å—å %d, –ø–æ–ª—É—á–µ–Ω–æ %d (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ %d > –¥–æ–ø—É—Å—Ç–∏–º–æ–µ %d, %s)",
                    expectedCount, candles.size(), actualDifference, allowedDifference, tolerance);
            log.debug("‚ö†Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø –ö–û–õ–ò–ß–ï–°–¢–í–ê: {} {}", ticker, reason);
            return new ValidationResult(false, reason);
        }

        log.debug("‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê: –°–≤–µ—á–∏ –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {} –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å untilDate (–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ {})", ticker, allowedDifference);
        return new ValidationResult(true, "–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å untilDate —É—Å–ø–µ—à–Ω–∞");
    }

//    /**
//     * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ —Å–≤–µ—á–∏ (–ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞)
//     */
//    private ValidationResult validateCachedCandles(List<Candle> candles, ExpectedParameters expected, String ticker) {
//        log.info("üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –ö–≠–®–∞: –ü—Ä–æ–≤–µ—Ä—è–µ–º {} —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}", candles.size(), ticker);
//
//        // –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ—á–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–∑ —É—Ç–∏–ª–∏—Ç–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
//        if (!CandleCalculatorUtil.isValidCandlesCount(currentTimeframe, expected.candlesCount, candles.size())) {
//            int allowedDifference = CandleCalculatorUtil.getAllowedDifference(currentTimeframe, expected.candlesCount);
//            int actualDifference = Math.abs(candles.size() - expected.candlesCount);
//            String tolerance = CandleCalculatorUtil.getToleranceDescription(currentTimeframe);
//
//            String reason = String.format("–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å–≤–µ—á–µ–π –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º–æ–µ: –æ–∂–∏–¥–∞–ª–æ—Å—å %d, –ø–æ–ª—É—á–µ–Ω–æ %d (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ %d > –¥–æ–ø—É—Å—Ç–∏–º–æ–µ %d, %s)",
//                    expected.candlesCount, candles.size(), actualDifference, allowedDifference, tolerance);
//            log.warn("‚ö†Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø –ö–û–õ–ò–ß–ï–°–¢–í–ê: {}", reason);
//            return new ValidationResult(false, reason);
//        }
//
//        // –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤–µ—á–∏)
//        if (!candles.isEmpty()) {
//            long actualOldestTime = candles.get(0).getTimestamp();          // –ü–µ—Ä–≤–∞—è = —Å–∞–º–∞—è —Å—Ç–∞—Ä–∞—è (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é)
//            long actualNewestTime = candles.get(candles.size() - 1).getTimestamp(); // –ü–æ—Å–ª–µ–¥–Ω—è—è = —Å–∞–º–∞—è –Ω–æ–≤–∞—è
//
//            log.info("üìÖ –§–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –î–ò–ê–ü–ê–ó–û–ù: {} - {}",
//                    formatTimestamp(actualOldestTime), formatTimestamp(actualNewestTime));
//            log.info("üìÖ –û–ñ–ò–î–ê–ï–ú–´–ô –î–ò–ê–ü–ê–ó–û–ù: {} - {}",
//                    formatTimestamp(expected.expectedOldestTime), formatTimestamp(expected.expectedNewestTime));
//
//            // –î–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –≤ 1% –æ—Ç –æ–±—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
//            long totalPeriod = expected.expectedNewestTime - expected.expectedOldestTime;
//            long allowedDifference = Math.max(totalPeriod / 100, 60 * 60 * 1000L); // –ú–∏–Ω–∏–º—É–º 1 —á–∞—Å
//
//            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä–µ–π—à—É—é —Å–≤–µ—á—É
//            long oldestTimeDiff = Math.abs(actualOldestTime - expected.expectedOldestTime);
//            if (oldestTimeDiff > allowedDifference) {
//                String reason = String.format("–î–∏–∞–ø–∞–∑–æ–Ω —Å—ä–µ—Ö–∞–ª: —Å—Ç–∞—Ä–µ–π—à–∞—è —Å–≤–µ—á–∞ %s –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π %s (—Ä–∞–∑–Ω–∏—Ü–∞ %d –º—Å)",
//                        formatTimestamp(actualOldestTime), formatTimestamp(expected.expectedOldestTime), oldestTimeDiff);
//                log.warn("‚ö†Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø –î–ò–ê–ü–ê–ó–û–ù–ê: {}", reason);
//                return new ValidationResult(false, reason);
//            }
//
//            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤–µ–π—à—É—é —Å–≤–µ—á—É
//            long newestTimeDiff = Math.abs(actualNewestTime - expected.expectedNewestTime);
//            if (newestTimeDiff > allowedDifference) {
//                String reason = String.format("–î–∏–∞–ø–∞–∑–æ–Ω —Å—ä–µ—Ö–∞–ª: –Ω–æ–≤–µ–π—à–∞—è —Å–≤–µ—á–∞ %s –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π %s (—Ä–∞–∑–Ω–∏—Ü–∞ %d –º—Å)",
//                        formatTimestamp(actualNewestTime), formatTimestamp(expected.expectedNewestTime), newestTimeDiff);
//                log.warn("‚ö†Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø –î–ò–ê–ü–ê–ó–û–ù–ê: {}", reason);
//                return new ValidationResult(false, reason);
//            }
//        }
//
//        log.info("‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê: –°–≤–µ—á–∏ –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {} –ø—Ä–æ—à–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏", ticker);
//        return new ValidationResult(true, "–í–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞");
//    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç timestamp –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
     */
    private String formatTimestamp(long timestamp) {
        try {
            if (timestamp > 9999999999L) {
                // –ú–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
                return Instant.ofEpochMilli(timestamp).toString();
            } else {
                // –°–µ–∫—É–Ω–¥—ã
                return Instant.ofEpochSecond(timestamp).toString();
            }
        } catch (Exception e) {
            return String.valueOf(timestamp);
        }
    }

//    /**
//     * –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–∂–∏–¥–∞–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
//     */
//    private static class ExpectedParameters {
//        final int candlesCount;
//        final long expectedOldestTime;
//        final long expectedNewestTime;
//
//        ExpectedParameters(int candlesCount, long expectedOldestTime, long expectedNewestTime) {
//            this.candlesCount = candlesCount;
//            this.expectedOldestTime = expectedOldestTime;
//            this.expectedNewestTime = expectedNewestTime;
//        }
//    }

    /**
     * –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     */
    private static class ValidationResult {
        final boolean isValid;
        final String reason;

        ValidationResult(boolean isValid, String reason) {
            this.isValid = isValid;
            this.reason = reason;
        }
    }

    /**
     * –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Ç–∞–π–º—à—Ç–∞–º–ø–æ–≤
     */
    private static class TimestampValidationResult {
        final boolean isValid;
        final String reason;
        final List<TimestampGap> gaps;

        TimestampValidationResult(boolean isValid, String reason, List<TimestampGap> gaps) {
            this.isValid = isValid;
            this.reason = reason;
            this.gaps = gaps;
        }
    }

    /**
     * –ö–ª–∞—Å—Å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞—Ö —Å–≤–µ—á–µ–π
     */
    private static class TimestampGap {
        final long startTimestamp;
        final long endTimestamp;
        final int missedCandlesCount;
        final int startPosition;
        final int endPosition;

        TimestampGap(long startTimestamp, long endTimestamp, int missedCandlesCount, int startPosition, int endPosition) {
            this.startTimestamp = startTimestamp;
            this.endTimestamp = endTimestamp;
            this.missedCandlesCount = missedCandlesCount;
            this.startPosition = startPosition;
            this.endPosition = endPosition;
        }

        public long getStartTimestamp() {
            return startTimestamp;
        }

        public long getEndTimestamp() {
            return endTimestamp;
        }

        public int getMissedCandlesCount() {
            return missedCandlesCount;
        }

        public int getStartPosition() {
            return startPosition;
        }

        public int getEndPosition() {
            return endPosition;
        }
    }
}