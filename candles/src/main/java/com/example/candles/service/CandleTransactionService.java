package com.example.candles.service;

import com.example.candles.repositories.CachedCandleRepository;
import com.example.shared.dto.Candle;
import com.example.shared.models.CachedCandle;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.stream.Collectors;

/**
 * –û—Ç–¥–µ–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫—ç—à–µ–º
 * –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É self-invocation –≤ CandleCacheService
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class CandleTransactionService {

    private final CachedCandleRepository cachedCandleRepository;

    /**
     * –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≤–µ—á–µ–π –≤ –∫—ç—à
     * @return –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∞–ª—å–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –≤ –ë–î
     */
    @Transactional(rollbackFor = Exception.class)
    public int saveCandlesToCache(String ticker, String timeframe, String exchange,
                                   List<Candle> candles) {
        try {
            log.debug("üíæ –î–û–ë–ê–í–õ–Ø–ï–ú: {} —Å–≤–µ—á–µ–π –¥–ª—è {}/{}/{}",
                    candles.size(), ticker, timeframe, exchange);

            // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å Hibernate session

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—Ü–∏—è–º–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
            int batchSize = 1000;
            int totalProcessedCount = 0; // –û–±—â–∏–π —Å—á–µ—Ç—á–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π

            for (int i = 0; i < candles.size(); i += batchSize) {
                long batchStartTime = System.currentTimeMillis();
                List<Candle> batch = candles.subList(i, Math.min(i + batchSize, candles.size()));

                List<CachedCandle> cachedCandles = batch.stream()
                        .map(candle -> CachedCandle.fromCandle(candle, ticker, timeframe, exchange))
                        .toList();

                // –°—É–ø–µ—Ä-–±—ã—Å—Ç—Ä–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–∞—Ç—á–µ–≤—ã–π INSERT (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã)
                int processedCount = 0;
                
                try {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ native SQL –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å Hibernate session
                    for (CachedCandle cachedCandle : cachedCandles) {
                        try {
                            cachedCandleRepository.insertIgnoreDuplicates(
                                    cachedCandle.getTicker(),
                                    cachedCandle.getTimeframe(), 
                                    cachedCandle.getExchange(),
                                    cachedCandle.getTimestamp(),
                                    cachedCandle.getOpenPrice(),
                                    cachedCandle.getHighPrice(),
                                    cachedCandle.getLowPrice(),
                                    cachedCandle.getClosePrice(),
                                    cachedCandle.getVolume(),
                                    cachedCandle.getIsValid()
                            );
                            processedCount++;
                        } catch (Exception ex) {
                            // –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                        }
                    }
                    
                } catch (Exception e) {
                    log.debug("üîÑ BATCH processing error –¥–ª—è {}: {}", ticker, e.getMessage());
                    return 0;
                }
                
                log.info("üíæ BATCH SAVED: {} - –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {} —Å–≤–µ—á–µ–π –∑–∞ {} —Å–µ–∫", 
                        ticker, processedCount, (System.currentTimeMillis() - batchStartTime) / 1000);

                totalProcessedCount += processedCount; // –î–æ–±–∞–≤–ª—è–µ–º –∫ –æ–±—â–µ–º—É —Å—á–µ—Ç—á–∏–∫—É

                // –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è OutOfMemoryError
                if (i % 1000 == 0) { // –ö–∞–∂–¥—ã–µ 1K —Å–≤–µ—á–µ–π (–±—ã–ª–æ 5K)
                    System.gc();
                    try { Thread.sleep(50); } catch (Exception ignored) {} // –ü–∞—É–∑–∞ –¥–ª—è GC
                }
            }

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π
            if (totalProcessedCount > 0) {
                log.debug("üíæ –î–û–ë–ê–í–õ–ï–ù–û: {} —Å–≤–µ—á–µ–π –¥–ª—è {}/{}/{}", totalProcessedCount, ticker, timeframe, exchange);
            }

            return totalProcessedCount;

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø: –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–≤–µ—á–µ–π –¥–ª—è {} - –≤–µ—Ä–æ—è—Ç–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç—ã: {}", ticker, e.getMessage());
            return 0; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 0 –≤–º–µ—Å—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        }
    }

    /**
     * –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–µ—á–µ–π –≤ –∫—ç—à–µ
     * @return –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∞–ª—å–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –≤ –ë–î
     */
    @Transactional(rollbackFor = Exception.class)
    public int updateCandlesInCache(String ticker, String timeframe, String exchange,
                                     List<Candle> candles, long fromTimestamp) {
        try {
            log.debug("üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï: {} —Å–≤–µ—á–µ–π –¥–ª—è {}/{}/{} —Å timestamp {}",
                    candles.size(), ticker, timeframe, exchange, fromTimestamp);

            // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å Hibernate session

            // –¢–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–≤–µ—á–∏, —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç –¥—É–±–ª–∏
            List<CachedCandle> newCandles = candles.stream()
                    .filter(candle -> candle.getTimestamp() >= fromTimestamp)
                    .map(candle -> CachedCandle.fromCandle(candle, ticker, timeframe, exchange))
                    .collect(Collectors.toList());

            int addedCount = 0;
            if (!newCandles.isEmpty()) {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º INSERT ... ON CONFLICT DO NOTHING –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                for (CachedCandle cachedCandle : newCandles) {
                    try {
                        cachedCandleRepository.insertIgnoreDuplicates(
                                cachedCandle.getTicker(),
                                cachedCandle.getTimeframe(), 
                                cachedCandle.getExchange(),
                                cachedCandle.getTimestamp(),
                                cachedCandle.getOpenPrice(),
                                cachedCandle.getHighPrice(),
                                cachedCandle.getLowPrice(),
                                cachedCandle.getClosePrice(),
                                cachedCandle.getVolume(),
                                cachedCandle.getIsValid()
                        );
                        addedCount++; // –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –≤—Å—Ç–∞–≤–∫–∏
                    } catch (Exception e) {
                        // –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                    }
                }
            }

            if (addedCount > 0) {
                log.debug("üíæ –î–û–ë–ê–í–õ–ï–ù–û: {} –Ω–æ–≤—ã—Ö —Å–≤–µ—á–µ–π –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ {}/{}/{}", addedCount, ticker, timeframe, exchange);
            }

            return addedCount;

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø: –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–≤–µ—á–µ–π –¥–ª—è {} - –≤–µ—Ä–æ—è—Ç–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç—ã: {}", ticker, e.getMessage());
            return 0; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 0 –≤–º–µ—Å—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        }
    }
}