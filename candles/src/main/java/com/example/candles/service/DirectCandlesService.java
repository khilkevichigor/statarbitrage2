//package com.example.candles.service;
//
//import com.example.candles.client.OkxFeignClient;
//import com.example.shared.dto.Candle;
//import com.example.shared.dto.ExtendedCandlesRequest;
//import lombok.RequiredArgsConstructor;
//import lombok.extern.slf4j.Slf4j;
//import org.springframework.scheduling.annotation.Async;
//import org.springframework.stereotype.Service;
//
//import java.time.Instant;
//import java.util.*;
//import java.util.concurrent.*;
//import java.util.stream.Collectors;
//
///**
// * –°–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä—è–º–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–µ—á–µ–π —Å OKX –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—ç—à–∞
// * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
// */
//@Slf4j
//@Service
//@RequiredArgsConstructor
//public class DirectCandlesService {
//
//    private final OkxFeignClient okxFeignClient;
//    private final ExecutorService executorService = Executors.newFixedThreadPool(5);
//
//    /**
//     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–≤–µ—á–∏ –Ω–∞–ø—Ä—è–º—É—é —Å OKX –≤ 5 –ø–æ—Ç–æ–∫–æ–≤ —Å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–æ–π –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
//     */
//    public Map<String, List<Candle>> loadCandlesDirectly(ExtendedCandlesRequest request) {
//        log.info("üöÄ –ü–†–Ø–ú–ê–Ø –ó–ê–ì–†–£–ó–ö–ê: {} —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ {} –° OKX",
//                request.getCandleLimit(), request.getTimeframe());
//
//        long startTime = System.currentTimeMillis();
//
//        try {
//            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤
//            List<String> swapTickers = getTickersForLoading(request);
//
//            if (swapTickers.isEmpty()) {
//                log.warn("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ –ø—É—Å—Ç - –Ω–µ—á–µ–≥–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å");
//                return Map.of();
//            }
//
//            log.info("üìä –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è {} —Ç–∏–∫–µ—Ä–æ–≤ –≤ 5 –ø–æ—Ç–æ–∫–æ–≤", swapTickers.size());
//
//            // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π —Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
//            int adjustedCandleLimit = adjustCandleLimitForDirectLoading(request);
//
//            // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–∏–∫–µ—Ä—ã –Ω–∞ –±–∞—Ç—á–∏ –¥–ª—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
//            List<List<String>> batches = createBatches(swapTickers, 5);
//
//            // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
//            List<CompletableFuture<Map<String, List<Candle>>>> futures = new ArrayList<>();
//
//            for (int i = 0; i < batches.size(); i++) {
//                final int batchIndex = i;
//                final List<String> batch = batches.get(i);
//
//                CompletableFuture<Map<String, List<Candle>>> future = CompletableFuture.supplyAsync(() ->
//                    loadBatchDirectly(batch, request.getTimeframe(), adjustedCandleLimit, batchIndex + 1)
//                , executorService);
//
//                futures.add(future);
//            }
//
//            // –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
//            Map<String, List<Candle>> allResults = new HashMap<>();
//            for (CompletableFuture<Map<String, List<Candle>>> future : futures) {
//                try {
//                    Map<String, List<Candle>> batchResult = future.get(3, TimeUnit.HOURS); // –ú–∞–∫—Å–∏–º—É–º 3 —á–∞—Å–∞ –Ω–∞ –±–∞—Ç—á
//                    allResults.putAll(batchResult);
//                } catch (TimeoutException e) {
//                    log.error("‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞—Ç—á–∞: {}", e.getMessage());
//                } catch (Exception e) {
//                    log.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞—Ç—á–∞: {}", e.getMessage(), e);
//                }
//            }
//
//            // –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞: –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
//            Map<String, List<Candle>> finalResult = adjustTimestampsAndCount(allResults, request.getCandleLimit());
//
//            // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É
//            Map<String, List<Candle>> filteredResult = filterResultByOriginalRequest(finalResult, request);
//
//            long elapsed = System.currentTimeMillis() - startTime;
//            logLoadingResults(filteredResult, elapsed);
//
//            return filteredResult;
//
//        } catch (Exception e) {
//            long elapsed = System.currentTimeMillis() - startTime;
//            log.error("‚ùå –ü–†–Ø–ú–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π –∑–∞ {} –º—Å: {}", elapsed, e.getMessage(), e);
//            return Map.of();
//        }
//    }
//
//    /**
//     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
//     */
//    private List<String> getTickersForLoading(ExtendedCandlesRequest request) {
//        List<String> swapTickers;
//
//        if (request.getTickers() != null && !request.getTickers().isEmpty()) {
//            log.info("üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ {} —Ç–∏–∫–µ—Ä–æ–≤", request.getTickers().size());
//            swapTickers = new ArrayList<>(request.getTickers());
//
//            // –î–æ–±–∞–≤–ª—è–µ–º BTC-USDT-SWAP –∫–∞–∫ —ç—Ç–∞–ª–æ–Ω –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
//            if (!swapTickers.contains("BTC-USDT-SWAP")) {
//                swapTickers.add("BTC-USDT-SWAP");
//                log.info("üéØ –î–æ–±–∞–≤–ª–µ–Ω BTC-USDT-SWAP –∫–∞–∫ —ç—Ç–∞–ª–æ–Ω –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏");
//            }
//        } else {
//            log.info("üåê –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã —Å OKX");
//            swapTickers = okxFeignClient.getAllSwapTickers(true);
//
//            // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–∏–∫–µ—Ä—ã –∏–∑ excludeTickers –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
//            if (request.getExcludeTickers() != null && !request.getExcludeTickers().isEmpty()) {
//                log.info("‚ùå –ò—Å–∫–ª—é—á–∞–µ–º {} —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ –∑–∞–≥—Ä—É–∑–∫–∏", request.getExcludeTickers().size());
//                swapTickers = swapTickers.stream()
//                        .filter(ticker -> !request.getExcludeTickers().contains(ticker))
//                        .toList();
//                log.info("‚úÖ –ü–æ—Å–ª–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å {} —Ç–∏–∫–µ—Ä–æ–≤", swapTickers.size());
//            }
//        }
//
//        return swapTickers;
//    }
//
//    /**
//     * –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π —Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
//     */
//    private int adjustCandleLimitForDirectLoading(ExtendedCandlesRequest request) {
//        int originalLimit = request.getCandleLimit();
//
//        // –î–æ–±–∞–≤–ª—è–µ–º –±—É—Ñ–µ—Ä –¥–ª—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏
//        // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 2 —á–∞—Å–æ–≤
//        int bufferCandles = calculateBufferCandles(request.getTimeframe(), 2); // 2 —á–∞—Å–∞ –±—É—Ñ–µ—Ä
//
//        int adjustedLimit = originalLimit + bufferCandles;
//
//        if (bufferCandles > 0) {
//            log.info("‚è±Ô∏è –í–†–ï–ú–ï–ù–ù–ê–Ø –ö–û–†–†–ï–ö–¢–ò–†–û–í–ö–ê: {} ‚Üí {} —Å–≤–µ—á–µ–π (–±—É—Ñ–µ—Ä +{} –¥–ª—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏)",
//                    originalLimit, adjustedLimit, bufferCandles);
//        }
//
//        return adjustedLimit;
//    }
//
//    /**
//     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±—É—Ñ–µ—Ä —Å–≤–µ—á–µ–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—Å–æ–≤
//     */
//    private int calculateBufferCandles(String timeframe, int hours) {
//        return switch (timeframe) {
//            case "1m" -> hours * 60;        // 60 —Å–≤–µ—á–µ–π –≤ —á–∞—Å –¥–ª—è 1m
//            case "5m" -> hours * 12;        // 12 —Å–≤–µ—á–µ–π –≤ —á–∞—Å –¥–ª—è 5m
//            case "15m" -> hours * 4;        // 4 —Å–≤–µ—á–∏ –≤ —á–∞—Å –¥–ª—è 15m
//            case "1H" -> hours;             // 1 —Å–≤–µ—á–∞ –≤ —á–∞—Å –¥–ª—è 1H
//            case "4H" -> hours / 4;         // 1 —Å–≤–µ—á–∞ –≤ 4 —á–∞—Å–∞ –¥–ª—è 4H
//            case "1D", "1W", "1M" -> 0;     // –î–ª—è –±–æ–ª—å—à–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –±—É—Ñ–µ—Ä –Ω–µ –Ω—É–∂–µ–Ω
//            default -> hours;               // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞–∫ –¥–ª—è 1H
//        };
//    }
//
//    /**
//     * –°–æ–∑–¥–∞–µ—Ç –±–∞—Ç—á–∏ —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
//     */
//    private List<List<String>> createBatches(List<String> tickers, int batchCount) {
//        List<List<String>> batches = new ArrayList<>();
//        int batchSize = (int) Math.ceil((double) tickers.size() / batchCount);
//
//        for (int i = 0; i < tickers.size(); i += batchSize) {
//            int end = Math.min(i + batchSize, tickers.size());
//            batches.add(tickers.subList(i, end));
//        }
//
//        log.info("üì¶ –°–æ–∑–¥–∞–Ω–æ {} –±–∞—Ç—á–µ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (—Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {})", batches.size(), batchSize);
//        return batches;
//    }
//
//    /**
//     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–¥–∏–Ω –±–∞—Ç—á —Ç–∏–∫–µ—Ä–æ–≤
//     */
//    private Map<String, List<Candle>> loadBatchDirectly(List<String> tickerBatch, String timeframe, int candleLimit, int batchIndex) {
//        log.info("üîÑ –ü–æ—Ç–æ–∫ {}: –ó–∞–≥—Ä—É–∑–∫–∞ {} —Ç–∏–∫–µ—Ä–æ–≤ —Å OKX...", batchIndex, tickerBatch.size());
//
//        Map<String, List<Candle>> batchResults = new HashMap<>();
//        int successCount = 0;
//        int errorCount = 0;
//
//        for (String ticker : tickerBatch) {
//            try {
//                List<Candle> candles = okxFeignClient.getCandles(ticker, timeframe, candleLimit);
//
//                if (candles != null && !candles.isEmpty()) {
//                    batchResults.put(ticker, candles);
//                    successCount++;
//
//                    // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —Ç–∏–∫–µ—Ä–æ–≤
//                    if (successCount % 10 == 0) {
//                        log.debug("üîÑ –ü–æ—Ç–æ–∫ {}: –ó–∞–≥—Ä—É–∂–µ–Ω–æ {}/{} —Ç–∏–∫–µ—Ä–æ–≤", batchIndex, successCount, tickerBatch.size());
//                    }
//                } else {
//                    log.warn("‚ö†Ô∏è –ü–æ—Ç–æ–∫ {}: –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}", batchIndex, ticker);
//                    errorCount++;
//                }
//
//                // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ API
//                Thread.sleep(50);
//
//            } catch (Exception e) {
//                log.error("‚ùå –ü–æ—Ç–æ–∫ {}: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–∫–µ—Ä–∞ {}: {}", batchIndex, ticker, e.getMessage());
//                errorCount++;
//
//                // –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
//                try {
//                    Thread.sleep(100);
//                } catch (InterruptedException ie) {
//                    Thread.currentThread().interrupt();
//                    break;
//                }
//            }
//        }
//
//        log.info("‚úÖ –ü–æ—Ç–æ–∫ {} –∑–∞–≤–µ—Ä—à–µ–Ω: {} —É—Å–ø–µ—à–Ω–æ, {} –æ—à–∏–±–æ–∫ –∏–∑ {} —Ç–∏–∫–µ—Ä–æ–≤",
//                batchIndex, successCount, errorCount, tickerBatch.size());
//
//        return batchResults;
//    }
//
//    /**
//     * –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
//     */
//    private Map<String, List<Candle>> adjustTimestampsAndCount(Map<String, List<Candle>> loadedCandles, int targetCandleCount) {
//        if (loadedCandles.isEmpty()) {
//            return loadedCandles;
//        }
//
//        log.info("‚è±Ô∏è –ö–û–†–†–ï–ö–¢–ò–†–û–í–ö–ê –í–†–ï–ú–ï–ù–ù–´–• –î–ò–ê–ü–ê–ó–û–ù–û–í: —Ü–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π {}", targetCandleCount);
//
//        // –ù–∞—Ö–æ–¥–∏–º –æ–±—â–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤
//        // –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å–∞–º–æ–µ –ø–æ–∑–¥–Ω–µ–µ –Ω–∞—á–∞–ª–æ (–Ω–∞–∏–º–µ–Ω–µ–µ —Å—Ç–∞—Ä–∞—è –∏–∑ —Å—Ç–∞—Ä–µ–π—à–∏—Ö —Å–≤–µ—á–µ–π)
//        // –∏ —Å–∞–º—ã–π —Ä–∞–Ω–Ω–∏–π –∫–æ–Ω–µ—Ü (–Ω–∞–∏–º–µ–Ω–µ–µ –Ω–æ–≤–∞—è –∏–∑ –Ω–æ–≤–µ–π—à–∏—Ö —Å–≤–µ—á–µ–π)
//        long latestOldestTime = 0;  // –°–∞–º–∞—è –ø–æ–∑–¥–Ω—è—è –∏–∑ —Å—Ç–∞—Ä—ã—Ö —Å–≤–µ—á–µ–π (–ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª)
//        long earliestNewestTime = Long.MAX_VALUE;  // –°–∞–º–∞—è —Ä–∞–Ω–Ω—è—è –∏–∑ –Ω–æ–≤—ã—Ö —Å–≤–µ—á–µ–π (–ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ü–æ–≤)
//
//        for (List<Candle> candles : loadedCandles.values()) {
//            if (!candles.isEmpty()) {
//                // –°–≤–µ—á–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —É–±—ã–≤–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
//                long newestTime = candles.get(0).getTimestamp(); // –°–∞–º–∞—è –Ω–æ–≤–∞—è —Å–≤–µ—á–∞ (–ø–µ—Ä–≤–∞—è)
//                long oldestTime = candles.get(candles.size() - 1).getTimestamp(); // –°–∞–º–∞—è —Å—Ç–∞—Ä–∞—è —Å–≤–µ—á–∞ (–ø–æ—Å–ª–µ–¥–Ω—è—è)
//
//                // –î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–µ—Ä–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
//                if (oldestTime > latestOldestTime) latestOldestTime = oldestTime; // –ü–æ–∑–¥–Ω–µ–µ –Ω–∞—á–∞–ª–æ
//                if (newestTime < earliestNewestTime) earliestNewestTime = newestTime; // –†–∞–Ω–Ω–µ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ
//            }
//        }
//
//        log.info("üéØ –ù–∞–π–¥–µ–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {} - {}",
//                Instant.ofEpochSecond(latestOldestTime), Instant.ofEpochSecond(earliestNewestTime));
//
//        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∏ –æ–±—Ä–µ–∑–∞–µ–º –¥–æ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
//        Map<String, List<Candle>> adjustedCandles = new HashMap<>();
//        int validTickerCount = 0;
//
//        // –ï—Å–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –ø—Ä–æ—Å—Ç–æ –æ–±—Ä–µ–∑–∞–µ–º –±–µ–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
//        boolean shouldSynchronize = latestOldestTime > 0 && earliestNewestTime != Long.MAX_VALUE &&
//                                   earliestNewestTime >= latestOldestTime;
//
//        for (Map.Entry<String, List<Candle>> entry : loadedCandles.entrySet()) {
//            String ticker = entry.getKey();
//            List<Candle> candles = entry.getValue();
//
//            if (candles.isEmpty()) {
//                continue;
//            }
//
//            List<Candle> processedCandles;
//
//            if (shouldSynchronize) {
//                // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã - –±–µ—Ä–µ–º —Å–≤–µ—á–∏ —Ç–æ–ª—å–∫–æ –≤ –æ–±—â–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
//                final long finalLatestOldestTime = latestOldestTime;
//                final long finalEarliestNewestTime = earliestNewestTime;
//
//                processedCandles = candles.stream()
//                        .filter(candle -> candle.getTimestamp() >= finalLatestOldestTime &&
//                                         candle.getTimestamp() <= finalEarliestNewestTime)
//                        .limit(targetCandleCount)
//                        .toList();
//
//                log.debug("üîÑ {}: —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {} —Å–≤–µ—á–µ–π –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ {} - {}",
//                        ticker, processedCandles.size(),
//                        Instant.ofEpochSecond(finalLatestOldestTime),
//                        Instant.ofEpochSecond(finalEarliestNewestTime));
//            } else {
//                // –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–µ–∑–∫–∞ –±–µ–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
//                processedCandles = candles.stream()
//                        .limit(targetCandleCount)
//                        .toList();
//
//                log.debug("üîÑ {}: –æ–±—Ä–µ–∑–∞–Ω–æ –¥–æ {} —Å–≤–µ—á–µ–π –±–µ–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏", ticker, processedCandles.size());
//            }
//
//            if (!processedCandles.isEmpty()) {
//                adjustedCandles.put(ticker, processedCandles);
//                validTickerCount++;
//            }
//        }
//
//        log.info("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {} –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ —Å {} —Å–≤–µ—á–∞–º–∏ –∫–∞–∂–¥—ã–π",
//                validTickerCount, targetCandleCount);
//
//        return adjustedCandles;
//    }
//
//    /**
//     * –§–∏–ª—å—Ç—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É
//     */
//    private Map<String, List<Candle>> filterResultByOriginalRequest(Map<String, List<Candle>> allResults, ExtendedCandlesRequest request) {
//        // –ï—Å–ª–∏ –±—ã–ª–∏ —É–∫–∞–∑–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Ö (–∏—Å–∫–ª—é—á–∞—è BTC —ç—Ç–∞–ª–æ–Ω –µ—Å–ª–∏ –æ–Ω –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω)
//        if (request.getTickers() != null && !request.getTickers().isEmpty()) {
//            Map<String, List<Candle>> filteredResult = allResults.entrySet().stream()
//                    .filter(entry -> request.getTickers().contains(entry.getKey()))
//                    .collect(Collectors.toMap(
//                            Map.Entry::getKey,
//                            Map.Entry::getValue
//                    ));
//
//            log.info("üéØ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º {} –∏–∑ {} —Ç–∏–∫–µ—Ä–æ–≤",
//                    filteredResult.size(), allResults.size());
//            return filteredResult;
//        }
//
//        return allResults;
//    }
//
//    /**
//     * –õ–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏
//     */
//    private void logLoadingResults(Map<String, List<Candle>> result, long elapsedMs) {
//        if (result != null && !result.isEmpty()) {
//            int totalCandles = result.values().stream().mapToInt(List::size).sum();
//            int avgCandles = totalCandles / result.size();
//
//            log.info("üöÄ –ü–†–Ø–ú–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {} –º—Å ({} –º–∏–Ω)! –ü–æ–ª—É—á–µ–Ω–æ {} —Ç–∏–∫–µ—Ä–æ–≤ —Å–æ —Å—Ä–µ–¥–Ω–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º {} —Å–≤–µ—á–µ–π (–≤—Å–µ–≥–æ {} —Å–≤–µ—á–µ–π)",
//                    elapsedMs, elapsedMs / 60000, result.size(), avgCandles, totalCandles);
//
//            // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–Ω—è–ª–∞ –æ—á–µ–Ω—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
//            if (elapsedMs > 300000) { // –ë–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç
//                log.warn("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–Ω—è–ª–∞ {} –º–∏–Ω—É—Ç! –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—ç—à–∞ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è.",
//                        elapsedMs / 60000);
//            }
//        } else {
//            log.warn("‚ö†Ô∏è –ü–†–Ø–ú–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –∑–∞ {} –º—Å –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", elapsedMs);
//        }
//    }
//}