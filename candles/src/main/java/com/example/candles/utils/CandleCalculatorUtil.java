package com.example.candles.utils;

import lombok.extern.slf4j.Slf4j;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * –£—Ç–∏–ª–∏—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–≤–µ—á–µ–π –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º—É –∏ –ø–µ—Ä–∏–æ–¥—É
 * <p>
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–µ—Ä–∏–æ–¥—ã: –¥–µ–Ω—å, –Ω–µ–¥–µ–ª—è, –º–µ—Å—è—Ü, 6 –º–µ—Å—è—Ü–µ–≤, 1 –≥–æ–¥, 2 –≥–æ–¥–∞, 3 –≥–æ–¥–∞
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã: 1m, 5m, 15m, 1H, 4H, 1D, 1W, 1M
 * <p>
 * –ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏:
 * - –î–ª—è –º–∏–Ω—É—Ç–Ω—ã—Ö –∏ —á–∞—Å–æ–≤—ã—Ö –¢–§: ¬±1 –¥–µ–Ω—å (–¥–æ–ø—É—Å—Ç–∏–º–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)
 * - –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¢–§: —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ 1:1
 */
@Slf4j
public class CandleCalculatorUtil {

    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
    private static final int MINUTES_PER_HOUR = 60;
    private static final int HOURS_PER_DAY = 24;
    private static final int DAYS_PER_WEEK = 7;
    private static final int DAYS_PER_MONTH = 30; // –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ
    private static final int DAYS_PER_YEAR = 365; // –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –≥–æ–¥—É
    private static final int WEEKS_PER_MONTH = 4; // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å –≤ –º–µ—Å—è—Ü–µ
    private static final int WEEKS_PER_YEAR = 52; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å –≤ –≥–æ–¥—É
    private static final int MONTHS_PER_YEAR = 12;

    // –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–µ—Ä–∏–æ–¥–æ–≤ —Å —á–∏—Å–ª–∞–º–∏
    private static final Pattern PERIOD_PATTERN = Pattern.compile("(\\d+)\\s*(.*)", Pattern.CASE_INSENSITIVE);

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–≤–µ—á–µ–π
     */
    public static int calculateCandlesCount(String ticker, String timeframe, String period) {
        log.debug("üßÆ –†–ê–°–ß–ï–¢ –°–í–ï–ß–ï–ô –¥–ª—è {}: timeframe={}, period={}", ticker, timeframe, period);

        try {
            int periodDays = parsePeriodToDays(period);
            int candlesCount = calculateCandlesByTimeframe(timeframe, periodDays);

            log.debug("‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢ –†–ê–°–ß–ï–¢–ê –¥–ª—è {}: {} —Å–≤–µ—á–µ–π –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ '{}' ({} –¥–Ω–µ–π) —Å —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–º {}",
                    ticker, candlesCount, period, periodDays, timeframe);
            return candlesCount;

        } catch (Exception e) {
            log.error("‚ùå –û–®–ò–ë–ö–ê –†–ê–°–ß–ï–¢–ê –¥–ª—è {}: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å–≤–µ—á–µ–π –¥–ª—è timeframe={}, period={}: {}",
                    ticker, timeframe, period, e.getMessage());
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–∑—É–º–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (1 –º–µ—Å—è—Ü, 1H)
            return DAYS_PER_MONTH * HOURS_PER_DAY;
        }
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—É—é –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–≤–µ—á–µ–π —Å —É—á–µ—Ç–æ–º untilDate
     * –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ untilDate –¥–æ–ø—É—Å–∫–∞–µ–º –±–æ–ª—å—à—É—é –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –∏–∑-–∑–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
     */
    public static int getAllowedDifferenceWithUntilDate(String timeframe, int expectedCount) {
        // –î–ª—è —Å–ª—É—á–∞–µ–≤ —Å untilDate —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤ 1.5 —Ä–∞–∑–∞
        int baseDifference = getAllowedDifference(timeframe, expectedCount);
        int adjustedDifference = (int) (baseDifference * 1.5);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –±—É—Ñ–µ—Ä –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        int timeFilterBuffer = switch (timeframe) {
            case "1m" -> 48;     // ~30 –º–∏–Ω—É—Ç –±—É—Ñ–µ—Ä
            case "5m" -> 24;     // ~2 —á–∞—Å–∞ –±—É—Ñ–µ—Ä  
            case "15m" -> 16;    // ~4 —á–∞—Å–∞ –±—É—Ñ–µ—Ä
            case "1H" -> 8;      // ~8 —á–∞—Å–æ–≤ –±—É—Ñ–µ—Ä
            case "4H" -> 6;      // ~24 —á–∞—Å–∞ –±—É—Ñ–µ—Ä
            default -> 0;
        };
        
        return adjustedDifference + timeFilterBuffer;
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π —Å —É—á–µ—Ç–æ–º untilDate (–∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã)
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–∑–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –Ω–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–Ω—É—é –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
     */
    public static int calculateCandlesCountUntilDate(String ticker, String timeframe, String period, String untilDate) {
        log.debug("üßÆ –†–ê–°–ß–ï–¢ –°–í–ï–ß–ï–ô –° UNTILDATE –¥–ª—è {}: timeframe={}, period={}, untilDate={}", ticker, timeframe, period, untilDate);

        try {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–Ω—É—é –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ getAllowedDifferenceWithUntilDate
            int baseCandlesCount = calculateCandlesCount(ticker, timeframe, period);
            
            log.debug("‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢ –†–ê–°–ß–ï–¢–ê –° UNTILDATE –¥–ª—è {}: {} —Å–≤–µ—á–µ–π (–±–∞–∑–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç) –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ '{}' –¥–æ {} (—É–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏)",
                    ticker, baseCandlesCount, period, untilDate);
            
            return baseCandlesCount;

        } catch (Exception e) {
            log.error("‚ùå –û–®–ò–ë–ö–ê –†–ê–°–ß–ï–¢–ê –° UNTILDATE –¥–ª—è {}: {}", ticker, e.getMessage());
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –∫–∞–∫ fallback
            return calculateCandlesCount(ticker, timeframe, period);
        }
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
     */
    public static long getTimeframeDurationInMillis(String timeframe) {
        return switch (timeframe) {
            case "1m" -> 60 * 1000L;                    // 1 –º–∏–Ω—É—Ç–∞
            case "5m" -> 5 * 60 * 1000L;                // 5 –º–∏–Ω—É—Ç
            case "15m" -> 15 * 60 * 1000L;              // 15 –º–∏–Ω—É—Ç
            case "1H" -> 60 * 60 * 1000L;               // 1 —á–∞—Å
            case "4H" -> 4 * 60 * 60 * 1000L;           // 4 —á–∞—Å–∞
            case "1D" -> 24 * 60 * 60 * 1000L;          // 1 –¥–µ–Ω—å
            case "1W" -> 7 * 24 * 60 * 60 * 1000L;      // 1 –Ω–µ–¥–µ–ª—è
            case "1M" -> 30L * 24 * 60 * 60 * 1000L;    // 1 –º–µ—Å—è—Ü (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
            default -> {
                log.warn("‚ö†Ô∏è –ù–ï–ò–ó–í–ï–°–¢–ù–´–ô –¢–ê–ô–ú–§–†–ï–ô–ú: {}, –∏—Å–ø–æ–ª—å–∑—É–µ–º 1H", timeframe);
                yield 60 * 60 * 1000L;
            }
        };
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç –ø–µ—Ä–∏–æ–¥ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
     */
    private static int parsePeriodToDays(String period) {
        if (period == null || period.trim().isEmpty()) {
            throw new IllegalArgumentException("–ü–µ—Ä–∏–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
        }

        String normalizedPeriod = period.toLowerCase().trim();

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥—ã —Å —á–∏—Å–ª–∞–º–∏ (2 –≥–æ–¥–∞, 3 –≥–æ–¥–∞, 6 –º–µ—Å—è—Ü–µ–≤)
        Matcher matcher = PERIOD_PATTERN.matcher(normalizedPeriod);
        if (matcher.matches()) {
            int number = Integer.parseInt(matcher.group(1));
            String unit = matcher.group(2).trim();

            return switch (unit) {
                case "–≥–æ–¥", "–≥–æ–¥–∞", "–ª–µ—Ç", "year", "years" -> number * DAYS_PER_YEAR;
                case "–º–µ—Å—è—Ü", "–º–µ—Å—è—Ü–∞", "–º–µ—Å—è—Ü–µ–≤", "month", "months" -> number * DAYS_PER_MONTH;
                case "–Ω–µ–¥–µ–ª—è", "–Ω–µ–¥–µ–ª–∏", "–Ω–µ–¥–µ–ª—å", "week", "weeks" -> number * DAYS_PER_WEEK;
                case "–¥–µ–Ω—å", "–¥–Ω—è", "–¥–Ω–µ–π", "day", "days" -> number;
                default -> throw new IllegalArgumentException("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏: " + unit);
            };
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥—ã –±–µ–∑ —á–∏—Å–µ–ª
        return switch (normalizedPeriod) {
            case "–¥–µ–Ω—å", "day" -> 1;
            case "–Ω–µ–¥–µ–ª—è", "week" -> DAYS_PER_WEEK;
            case "–º–µ—Å—è—Ü", "month" -> DAYS_PER_MONTH;
            case "–≥–æ–¥", "year" -> DAYS_PER_YEAR;

            // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
            case "1 –≥–æ–¥", "1year" -> DAYS_PER_YEAR;
            case "6 –º–µ—Å—è—Ü–µ–≤", "6months" -> 6 * DAYS_PER_MONTH;

            default -> throw new IllegalArgumentException("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥: " + period);
        };
    }

    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–Ω–µ–π
     */
    private static int calculateCandlesByTimeframe(String timeframe, int periodDays) {
        return switch (timeframe) {
            // –ú–∏–Ω—É—Ç–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
            case "1m" -> periodDays * HOURS_PER_DAY * MINUTES_PER_HOUR;              // –¥–Ω–∏ * 24 * 60
            case "5m" -> periodDays * HOURS_PER_DAY * (MINUTES_PER_HOUR / 5);        // –¥–Ω–∏ * 24 * 12
            case "15m" -> periodDays * HOURS_PER_DAY * (MINUTES_PER_HOUR / 15);      // –¥–Ω–∏ * 24 * 4

            // –ß–∞—Å–æ–≤—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
            case "1H" -> periodDays * HOURS_PER_DAY;                                 // –¥–Ω–∏ * 24
            case "4H" -> periodDays * (HOURS_PER_DAY / 4);                          // –¥–Ω–∏ * 6

            // –î–Ω–µ–≤–Ω—ã–µ –∏ –≤—ã—à–µ
            case "1D" -> periodDays;                                                // –¥–Ω–∏ * 1
            case "1W" -> periodDays / DAYS_PER_WEEK;                                // –¥–Ω–∏ / 7
            case "1M" -> periodDays / DAYS_PER_MONTH;                               // –¥–Ω–∏ / 30

            default -> throw new IllegalArgumentException("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º: " + timeframe);
        };
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—É—é –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–≤–µ—á–µ–π
     */
    public static int getAllowedDifference(String timeframe, int expectedCount) {
        return switch (timeframe) {
            // –î–ª—è –º–∏–Ω—É—Ç–Ω—ã—Ö –∏ —á–∞—Å–æ–≤—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤: –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å 1 –¥–µ–Ω—å
            case "1m" -> HOURS_PER_DAY * MINUTES_PER_HOUR;              // 1440 –º–∏–Ω—É—Ç –≤ –¥–Ω–µ
            case "5m" -> HOURS_PER_DAY * (MINUTES_PER_HOUR / 5);        // 288 –ø—è—Ç–∏–º–∏–Ω—É—Ç–æ–∫ –≤ –¥–Ω–µ  
            case "15m" -> HOURS_PER_DAY * (MINUTES_PER_HOUR / 15);      // 96 –ø—è—Ç–Ω–∞–¥—Ü–∞—Ç–∏–º–∏–Ω—É—Ç–æ–∫ –≤ –¥–Ω–µ
            case "1H" -> HOURS_PER_DAY;                                 // 24 —á–∞—Å–∞ –≤ –¥–Ω–µ
            case "4H" -> HOURS_PER_DAY / 4;                             // 6 —á–µ—Ç—ã—Ä–µ—Ö—á–∞—Å–æ–≤–æ–∫ –≤ –¥–Ω–µ

            // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤: —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ (0 –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏)
            case "1D", "1W", "1M" -> 0;

            default -> {
                log.warn("‚ö†Ô∏è –ù–ï–ò–ó–í–ï–°–¢–ù–´–ô –¢–ê–ô–ú–§–†–ï–ô–ú –¥–ª—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏: {}, –∏—Å–ø–æ–ª—å–∑—É–µ–º 0", timeframe);
                yield 0;
            }
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
     */
    public static boolean isValidCandlesCount(String timeframe, int expectedCount, int actualCount) {
        int allowedDifference = getAllowedDifference(timeframe, expectedCount);
        int actualDifference = Math.abs(actualCount - expectedCount);

        boolean isValid = actualDifference <= allowedDifference;

        if (!isValid) {
            log.warn("‚ö†Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø –ö–û–õ–ò–ß–ï–°–¢–í–ê: –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ {} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º–æ–µ {} –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ {}",
                    actualDifference, allowedDifference, timeframe);
        } else if (actualDifference > 0) {
            log.debug("iÔ∏è –í–ê–õ–ò–î–ê–¶–ò–Ø –ö–û–õ–ò–ß–ï–°–¢–í–ê: –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ {} –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã (–¥–æ–ø—É—Å—Ç–∏–º–æ {}) –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ {}",
                    actualDifference, allowedDifference, timeframe);
        }

        return isValid;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–π –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
     */
    public static String getToleranceDescription(String timeframe) {
        return switch (timeframe) {
            case "1m", "5m", "15m", "1H", "4H" -> "¬±1 –¥–µ–Ω—å";
            case "1D", "1W", "1M" -> "—Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ";
            default -> "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
        };
    }

    /**
     * –ú–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—á–µ—Ç–µ
     */
    public static String getCalculationDetails(String timeframe, String period) {
        try {
            int periodDays = parsePeriodToDays(period);
            int candlesCount = calculateCandlesByTimeframe(timeframe, periodDays);
            int allowedDifference = getAllowedDifference(timeframe, candlesCount);
            String tolerance = getToleranceDescription(timeframe);

            return String.format("""
                    üìä –î–ï–¢–ê–õ–ò –†–ê–°–ß–ï–¢–ê:
                    –ü–µ—Ä–∏–æ–¥: %s (%d –¥–Ω–µ–π)
                    –¢–∞–π–º—Ñ—Ä–µ–π–º: %s
                    –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π: %d
                    –î–æ–ø—É—Å—Ç–∏–º–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å: %d (%s)
                    """, period, periodDays, timeframe, candlesCount, allowedDifference, tolerance);

        } catch (Exception e) {
            return "‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: " + e.getMessage();
        }
    }
}