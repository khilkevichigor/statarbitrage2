package com.example.candles.scheduler;

import com.example.candles.service.CandleCacheService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.context.event.ApplicationReadyEvent;
import org.springframework.context.event.EventListener;
import org.springframework.scheduling.annotation.Async;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Map;

@Component
@RequiredArgsConstructor
@Slf4j
public class CandleCacheScheduler {

    private final CandleCacheService candleCacheService;

    @Value("${app.candle-cache.default-exchange:OKX}")
    private String defaultExchange;

    @Value("${app.candle-cache.preload-enabled:true}")
    private boolean preloadEnabled;

    @Value("${app.candle-cache.daily-update-enabled:true}")
    private boolean dailyUpdateEnabled;

    @Value("${app.candle-cache.startup-check:true}")
    private boolean startupCheckEnabled;

    private boolean isFirstPreloadCompleted = false;
    private final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

    @EventListener(ApplicationReadyEvent.class)
    @Async // –î–µ–ª–∞–µ–º –º–µ—Ç–æ–¥ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å UI –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    public void onApplicationReady() {
        if (startupCheckEnabled) {
            log.info("üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—ç—à–∞ —Å–≤–µ—á–µ–π...");

            try {
                var stats = candleCacheService.getCacheStatistics(defaultExchange);
                log.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {}", stats);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à–µ
                @SuppressWarnings("unchecked")
                var exchangeStats = (Map<String, Map<String, Long>>) stats.get("byExchange");

                boolean hasCachedData = exchangeStats != null &&
                        exchangeStats.containsKey(defaultExchange) &&
                        exchangeStats.get(defaultExchange).values().stream()
                                .anyMatch(count -> count > 0);

                if (!hasCachedData) {
                    log.info("‚ö†Ô∏è –ö—ç—à –ø—É—Å—Ç. –ó–∞–ø–ª–∞–Ω–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ —à–µ–¥—É–ª–ª–µ—Ä–∞.");
                    isFirstPreloadCompleted = false;
                } else {
                    log.info("‚úÖ –ö—ç—à —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ. –ü–æ–ª–Ω–∞—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.");
                    isFirstPreloadCompleted = true;
                }

            } catch (Exception e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫—ç—à–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {}", e.getMessage(), e);
                isFirstPreloadCompleted = false;
            }
        }
    }

    //todo –ø–æ—Ö–æ–¥—É –≤ –∫—ç—à–µ –Ω–µ—Ç —Å–º—ã—Å–ª–∞ —Ç–∫ –µ—Å–ª–∏
    // 1 —è–Ω–≤–∞—Ä—è 2025 –∑–∞–≥—Ä—É–∑–∏–ª–∏ –≤–µ—Å—å 2024 –≥–æ–¥ –¥–ª—è 5/15/1–ù –∏ —Ç–¥
    // –∏ –ø–æ—Ç–æ–º –ë–´–õ –ø–µ—Ä–µ—Ä—ã–≤ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–µ–¥–µ–ª—å - –æ–±—Ä–∞–∑–æ–≤–∞–ª–∞—Å—å –ø—É—Å—Ç–æ—Ç–∞ –ø–æ —Å–≤–µ—á–∞–º
    // —Å–ø—É—Å—Ç—è 1 –Ω–µ–¥–µ–ª—é —Å–Ω–æ–≤–∞ –≥—Ä—É–∑–∏–º —Ç–æ–∂–µ —Å–∞–º–æ–µ - —É –Ω–∞—Å —Ç–∏–∫–µ—Ä –Ω–µ –ø—Ä–æ–π–¥–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ –∫–æ–ª-–≤—É —Å–≤–µ—á–µ–π
    // –ó–ù–ê–ß–ò–¢ –Ω–∞–¥–æ –≥—Ä—É–∑–∏—Ç—å –≤–µ—Å—å –¥–∏–∞–ø–∞–∑–æ–Ω —Å –Ω—É–ª—è –∞ –Ω–µ –ø–æ–¥–≥—Ä—É–∂–∞—Ç—å –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–µ
    // –ü–õ–Æ–° –µ—Å—Ç—å –ø–æ–¥–≥—Ä—É–∑–∫–∞ –∫–∞–∂–¥–æ–¥–Ω–µ–≤–Ω–∞—è
    // –≤–æ–∑–º–æ–∂–Ω–æ –Ω–æ—Ä–º —Ç–µ–º–∞ —Å –ö–≠–®–µ–º! –ú—ã—Å–ª–∏ –≤—Å–ª—É—Ö))

    //todo –ü–û–î–£–ú–ê–¢–¨ - –≥—Ä—É–∑–∏—Ç—å —Å–≤–µ—á–∏ –¥–ª—è —Ç–∏–∫–µ—Ä–æ–≤ —Ç–æ–ª—å–∫–æ –æ—Ç 10–º–ª–Ω –æ–±—ä–µ–º–∞ –∑–∞ 24—á –∏–ª–∏ –∏–∑ —Ç–æ–ø –ø–æ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ coinmarketcap - –Ω–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –æ—Ç–±–æ—Ä —á–µ—Ç–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤ –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–∫—É
    // –≥—Ä—É–∑–∏—Ç—å —Ç–æ–ª—å–∫–æ 5–º,15–º,1–ù,4–ù –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ 2–≥–æ–¥–∞
    // —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º —É –Ω–∞—Å –±—É–¥–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ —à—Ç—É–∫ 50 —Å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –Ω–æ—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π —Å–≤–µ—á–µ–π –Ω–∞ 2 –≥–æ–¥–∞ –ø–æ —ç—Ç–∏–º —Ç—Ñ
    // —ç—Ç–æ –¥–∞–∂–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∫–∞ —Å–≤–µ—á–µ–π –∞ –ø–æ–∏—Å–∫ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –∫–æ–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä! –º—ã –Ω–æ—á—å—é –∏—â–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –∫–æ–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã! –î–Ω–µ–º –º–æ–∂–µ–º –∏—Ö —Ç–æ—Ä–≥–æ–≤–∞—Ç—å!
    // –ï–°–õ–ò –≥—Ä—É–∑–∏–º –Ω–æ—á—å—é - —Ç–æ —Ç–æ–≥–¥–∞ —Å–¥–µ–ª–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –Ω–∞ UI –æ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π - —Å–∫–∞–∂–µ–º —Å 8 —É—Ç—Ä–∞ –¥–æ 12 –Ω–æ—á–∏
    // –°–î–ï–õ–ê–¢–¨ —á–µ–∫–±–æ–∫—Å "–Ω–æ—á–Ω–æ–π –ø–æ–∏—Å–∫ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä" - –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω - –±—É–¥–µ–º –≤—Å–µ –≥—Ä—É–∑–∏—Ç—å –∏ –∏—Å–∫–∞—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–∞—Ä—ã –Ω–æ—á—å—é, –µ—Å–ª–∏ –≤—ã–∫–ª - —Ç–æ –Ω–µ –≥—Ä—É–∑–∏–º –∏ –Ω–µ –∏—â–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–∞—Ä—ã (—Ä–∞–±–æ—Ç–∞–µ–º —Å —Ç–µ–º —á—Ç–æ –µ—Å—Ç—å)

    /**
     * –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –≤ 3:00 —É—Ç—Ä–∞ –ø–æ –º–µ—Å—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
     */
    @Scheduled(cron = "0 0 3 * * ?")
    public void scheduledCacheUpdate() {
        String currentTime = LocalDateTime.now().format(formatter);
        log.info("‚è∞ –ó–∞–ø—É—Å–∫ —à–µ–¥—É–ª–ª–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –≤ {}", currentTime);

        try {
            if (!isFirstPreloadCompleted && preloadEnabled) {
                // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - –ø–æ–ª–Ω–∞—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞
                log.info("üîÑ –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —à–µ–¥—É–ª–ª–µ—Ä–∞. –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É...");
                performFullPreload();
                isFirstPreloadCompleted = true;
            } else if (dailyUpdateEnabled) {
                // –û–±—ã—á–Ω–æ–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                log.info("üîÑ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞...");
                performDailyUpdate();
            } else {
                log.info("‚è∏Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö");
            }

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –≤ —à–µ–¥—É–ª–ª–µ—Ä–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞: {}", e.getMessage(), e);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å Telegram/Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
            notifySchedulerError(e);
        }
    }

    /**
     * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞ (—Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–≤–µ—á–∏)
     */
    @Scheduled(fixedRate = 4 * 60 * 60 * 1000, initialDelay = 30 * 60 * 1000) // 4 —á–∞—Å–∞, —Å—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ 30 –º–∏–Ω
    public void scheduledQuickUpdate() {
        if (!dailyUpdateEnabled || !isFirstPreloadCompleted) {
            return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –∏–ª–∏ –µ—â–µ –Ω–µ –±—ã–ª–æ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        }

        String currentTime = LocalDateTime.now().format(formatter);
        log.info("üîÑ –ë—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –≤ {}", currentTime);

        try {
            candleCacheService.dailyCandlesUpdate(defaultExchange);
            log.info("‚úÖ –ë—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—ç—à–∞: {}", e.getMessage());
        }
    }

    /**
     * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
     */
    @Scheduled(cron = "0 0 * * * ?") // –ö–∞–∂–¥—ã–π —á–∞—Å –≤ –Ω–∞—á–∞–ª–µ —á–∞—Å–∞
    public void hourlyStatistics() {
        try {
            var stats = candleCacheService.getCacheStatistics(defaultExchange);

            @SuppressWarnings("unchecked")
            var totalTickers = (Integer) stats.get("totalTickers");

            if (totalTickers != null && totalTickers > 0) {
                log.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞: {} —Ç–∏–∫–µ—Ä–æ–≤ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ", totalTickers);
            }

        } catch (Exception e) {
            log.debug("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞: {}", e.getMessage());
        }
    }

    /**
     * –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
     */
    public void triggerFullPreload() {
        log.info("üéØ –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞");

        try {
            performFullPreload();
            isFirstPreloadCompleted = true;
            log.info("‚úÖ –†—É—á–Ω–∞—è –ø–æ–ª–Ω–∞—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–π –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–µ: {}", e.getMessage(), e);
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏: " + e.getMessage(), e);
        }
    }

    /**
     * –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    public void triggerDailyUpdate() {
        log.info("üéØ –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞");

        try {
            performDailyUpdate();
            log.info("‚úÖ –†—É—á–Ω–æ–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ");

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {}", e.getMessage(), e);
            throw new RuntimeException("–û—à–∏–±–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: " + e.getMessage(), e);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —à–µ–¥—É–ª–ª–µ—Ä–∞
     */
    public java.util.Map<String, Object> getSchedulerStatus() {
        java.util.Map<String, Object> status = new java.util.HashMap<>();

        status.put("preloadEnabled", preloadEnabled);
        status.put("dailyUpdateEnabled", dailyUpdateEnabled);
        status.put("startupCheckEnabled", startupCheckEnabled);
        status.put("isFirstPreloadCompleted", isFirstPreloadCompleted);
        status.put("defaultExchange", defaultExchange);
        status.put("currentTime", LocalDateTime.now().format(formatter));

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
        try {
            var cacheStats = candleCacheService.getCacheStatistics(defaultExchange);
            status.put("cacheStatistics", cacheStats);
        } catch (Exception e) {
            status.put("cacheStatisticsError", e.getMessage());
        }

        return status;
    }

    private void performFullPreload() {
        long startTime = System.currentTimeMillis();
        log.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –∫—ç—à–∞ –¥–ª—è –±–∏—Ä–∂–∏ {}", defaultExchange);

        candleCacheService.preloadAllCandles(defaultExchange);

        long duration = (System.currentTimeMillis() - startTime) / 1000;
        log.info("‚úÖ –ü–æ–ª–Ω–∞—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {} —Å–µ–∫—É–Ω–¥", duration);

        // –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        try {
            var stats = candleCacheService.getCacheStatistics(defaultExchange);
            log.info("üìà –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏: {}", stats);
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {}", e.getMessage());
        }
    }

    private void performDailyUpdate() {
        long startTime = System.currentTimeMillis();
        log.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –¥–ª—è –±–∏—Ä–∂–∏ {}", defaultExchange);

        candleCacheService.dailyCandlesUpdate(defaultExchange);

        long duration = (System.currentTimeMillis() - startTime) / 1000;
        log.info("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {} —Å–µ–∫—É–Ω–¥", duration);

        // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        try {
            var stats = candleCacheService.getCacheStatistics(defaultExchange);
            log.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {}", stats);
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {}", e.getMessage());
        }
    }

    private void notifySchedulerError(Exception e) {
        // TODO: –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram –∏–ª–∏ –ø–æ email
        log.error("üîî –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –®–ï–î–£–õ–õ–ï–†–ê –ö–≠–®–ê: {}", e.getMessage());
        log.error("üìß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫—ç—à–∞");
    }
}