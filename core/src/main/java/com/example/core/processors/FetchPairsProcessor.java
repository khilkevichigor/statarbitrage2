package com.example.core.processors;

import com.example.core.client.CandlesFeignClient;
import com.example.core.services.PairService;
import com.example.core.services.SettingsService;
import com.example.core.services.StablePairsService;
import com.example.core.services.ZScoreService;
import com.example.shared.utils.StringUtils;
import com.example.shared.dto.Candle;
import com.example.shared.dto.ExtendedCandlesRequest;
import com.example.shared.dto.FetchPairsRequest;
import com.example.shared.dto.ZScoreData;
import com.example.shared.enums.TradeStatus;
import com.example.shared.models.Pair;
import com.example.shared.models.Settings;
import com.example.shared.utils.NumberFormatter;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.*;

@Slf4j
@Service
@RequiredArgsConstructor
public class FetchPairsProcessor {
    private final PairService pairService;
    private final ZScoreService zScoreService;
    private final CandlesFeignClient candlesFeignClient;
    private final SettingsService settingsService;
    private final StablePairsService stablePairsService;

    public List<Pair> fetchPairs(FetchPairsRequest request) {

        if (request == null) {
            throw new IllegalArgumentException("‚ùå FetchPairsRequest –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null");
        }

        long start = System.currentTimeMillis();
        log.info("");
        log.info("üîé –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –ø–∞—Ä...");

        Settings settings = settingsService.getSettings();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–∞—Ä—ã –∏–∑ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if (settings.isUseStablePairsForMonitoring()) {
            log.info("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–∞—Ä—ã –∏–∑ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞");
            if (stablePairsService.hasStablePairsInMonitoring()) {
                log.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–∞—Ä—ã –∏–∑ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞");
                return fetchPairsFromStableMonitoring(settings, request);
            } else {
                log.warn("‚ö†Ô∏è –í –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä");
                
                // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω fallback –∫ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –ø–∞—Ä–∞–º
                if (settings.isUseFoundStablePairs()) {
                    log.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–∞—Ä—ã –∫–∞–∫ fallback");
                    return fetchPairsFromFoundStablePairs(settings, request);
                } else {
                    throw new IllegalStateException("‚ùå –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–∞—Ä—ã –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–ª–∏ –≤–∫–ª—é—á–∏—Ç–µ –æ–ø—Ü–∏—é '–ò—Å–∫–∞—Ç—å –∏–∑ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–∞—Ä—ã' –∫–∞–∫ fallback");
                }
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–∞—Ä—ã
        if (settings.isUseFoundStablePairs()) {
            log.info("üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–∞—Ä—ã (–Ω–µ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ)");
            return fetchPairsFromFoundStablePairs(settings, request);
        }

        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—É—Ç—å - –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤ –∏ –∏—Ö –∞–Ω–∞–ª–∏–∑
        List<String> usedTickers = getUsedTickers();
        Map<String, List<Candle>> candlesMap = getCandles(settings, usedTickers);

        if (candlesMap.isEmpty()) {
            log.warn("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã ‚Äî –ø—Ä–æ–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞.");
            return Collections.emptyList();
        }

        int count = Optional.ofNullable(request.getCountOfPairs())
                .orElse((int) settings.getUsePairs());

        List<ZScoreData> zScoreDataList = computeZScoreData(settings, candlesMap, count);
        if (zScoreDataList.isEmpty()) {
            return Collections.emptyList();
        }

        logZScoreResults(zScoreDataList);

        List<Pair> pairs = createPairs(zScoreDataList, candlesMap);

        log.debug("‚úÖ –°–æ–∑–¥–∞–Ω–æ {} –ø–∞—Ä", pairs.size());
        pairs.forEach(p -> log.debug("üìà {}", p.getPairName()));
        log.debug("üïí –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {} —Å–µ–∫", String.format("%.2f", (System.currentTimeMillis() - start) / 1000.0));

        return pairs;
    }

    private List<String> getUsedTickers() {
        List<Pair> activePairs = pairService.findAllByStatusOrderByEntryTimeDesc(TradeStatus.TRADING);
        List<String> tickers = new ArrayList<>();
        for (Pair pair : activePairs) {
            tickers.add(pair.getLongTicker());
            tickers.add(pair.getShortTicker());
        }
        return tickers;
    }

    private Map<String, List<Candle>> getCandles(Settings settings, List<String> tradingTickers) {
        long start = System.currentTimeMillis();

        log.info("üìä –ó–∞–ø—Ä–æ—Å —Å–≤–µ—á–µ–π: —Ç–∞–π–º—Ñ—Ä–µ–π–º={}, –ª–∏–º–∏—Ç={}, –∏—Å–∫–ª—é—á–∏—Ç—å_—Ç–∏–∫–µ—Ä–æ–≤={}",
                settings.getTimeframe(), (int) settings.getCandleLimit(),
                tradingTickers != null ? tradingTickers.size() : 0);

        List<String> blacklistItems = Arrays.asList(settings.getMinimumLotBlacklist().split(","));
        List<String> excludedTickers = new ArrayList<>();
        excludedTickers.addAll(tradingTickers);
        excludedTickers.addAll(blacklistItems);

        // –°–æ–∑–¥–∞–µ–º ExtendedCandlesRequest –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π —á–µ—Ä–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        ExtendedCandlesRequest request = ExtendedCandlesRequest.builder()
                .timeframe(settings.getTimeframe())
                .candleLimit((int) settings.getCandleLimit())
                .minVolume(settings.getMinVolume() != 0.0 ? settings.getMinVolume() * 1_000_000 : 50_000_000)
                .tickers(null) // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã
                .excludeTickers(excludedTickers)
                .period(settings.calculateCurrentPeriod())
                .untilDate(StringUtils.getCurrentDateTimeWithZ())
                .exchange("OKX")
                .useCache(true)
                .useMinVolumeFilter(true)
                .minimumLotBlacklist(null)
                .build();

        try {
            log.info("‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ candles –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—É...");
            Map<String, List<Candle>> map = candlesFeignClient.getValidatedCacheExtended(request);

            double elapsed = (System.currentTimeMillis() - start) / 1000.0;
            if (map != null && !map.isEmpty()) {
                log.info("‚úÖ –°–≤–µ—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∑–∞ {} —Å–µ–∫. –ü–æ–ª—É—á–µ–Ω–æ {} —Ç–∏–∫–µ—Ä–æ–≤",
                        String.format("%.2f", elapsed), map.size());
            } else {
                log.warn("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞ {} —Å–µ–∫", String.format("%.2f", elapsed));
            }

            return map != null ? map : new HashMap<>();

        } catch (Exception e) {
            double elapsed = (System.currentTimeMillis() - start) / 1000.0;
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–µ—á–µ–π –∑–∞ {} —Å–µ–∫: {}",
                    String.format("%.2f", elapsed), e.getMessage());
            return new HashMap<>();
        }
    }

    private List<ZScoreData> computeZScoreData(Settings settings, Map<String, List<Candle>> candlesMap, int count) {
        try {
            return zScoreService.getTopNZScoreData(settings, candlesMap, count);
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ Z-Score: {}", e.getMessage());
            return Collections.emptyList();
        }
    }

    private void logZScoreResults(List<ZScoreData> dataList) {
        int index = 1;
        for (ZScoreData data : dataList) {
            // Use NumberFormatter.format which handles nulls and returns "N/A"
            String cointegrationPValue = NumberFormatter.format(data.getJohansenCointPValue(), 5);
            String avgAdfPValue = NumberFormatter.format(data.getAvgAdfPvalue(), 5);
            String latestZscore = NumberFormatter.format(data.getLatestZScore(), 2);
            String correlation = NumberFormatter.format(data.getPearsonCorr(), 2);

            log.info(String.format("%d. –ü–∞—Ä–∞: underValuedTicker=%s overValuedTicker=%s | p=%s | adf=%s | z=%s | corr=%s",
                    index++, data.getUnderValuedTicker(), data.getOverValuedTicker(),
                    cointegrationPValue, avgAdfPValue, latestZscore, correlation));
        }
    }

    private List<Pair> createPairs(List<ZScoreData> zScoreDataList, Map<String, List<Candle>> candlesMap) {
        try {
            return pairService.createPairDataList(zScoreDataList, candlesMap);
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PairData: {}", e.getMessage());
            return Collections.emptyList();
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä –∏–∑ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     *
     * @param settings –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
     * @param request  –∑–∞–ø—Ä–æ—Å
     * @return —Å–ø–∏—Å–æ–∫ –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
     */
    private List<Pair> fetchPairsFromStableMonitoring(Settings settings, FetchPairsRequest request) {
        long start = System.currentTimeMillis();

        log.info("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä –∏–∑ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...");

        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–µ—á–µ–π
        List<String> pairNames = stablePairsService.getPairNamesForZScoreAnalysis();
        log.info("üìä –ü–æ–ª—É—á–µ–Ω—ã –ø–∞—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {}", pairNames);

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏–π –ø–∞—Ä
        Set<String> uniqueTickers = new HashSet<>();
        for (String pairName : pairNames) {
            String[] tickers = pairName.split("/");
            if (tickers.length == 2) {
                uniqueTickers.add(tickers[0]);
                uniqueTickers.add(tickers[1]);
            }
        }

        log.info("üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ {} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–µ—á–µ–π: {}",
                uniqueTickers.size(), uniqueTickers);

        // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω—É–∂–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤
        Map<String, List<Candle>> candlesMap = getCandlesForSpecificTickers(settings, new ArrayList<>(uniqueTickers));

        if (candlesMap.isEmpty()) {
            log.warn("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã ‚Äî –ø—Ä–æ–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞.");
            throw new IllegalStateException("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞");
        }

        int count = Optional.ofNullable(request.getCountOfPairs())
                .orElse((int) settings.getUsePairs());

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º Z-Score —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        List<ZScoreData> zScoreDataList = computeZScoreDataForStablePairs(settings, candlesMap, pairNames, count);
        if (zScoreDataList.isEmpty()) {
            log.warn("‚ö†Ô∏è Z-Score –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã");
            return Collections.emptyList();
        }

        logZScoreResults(zScoreDataList);

        List<Pair> pairs = createPairs(zScoreDataList, candlesMap);

        log.info("‚úÖ –°–æ–∑–¥–∞–Ω–æ {} –ø–∞—Ä –∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", pairs.size());
        pairs.forEach(p -> log.info("üìà {}", p.getPairName()));
        log.info("üïí –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (—Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–∞—Ä—ã): {} —Å–µ–∫",
                String.format("%.2f", (System.currentTimeMillis() - start) / 1000.0));

        return pairs;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤
     *
     * @param settings –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
     * @param tickers  —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤
     * @return –∫–∞—Ä—Ç–∞ —Å–≤–µ—á–µ–π –ø–æ —Ç–∏–∫–µ—Ä–∞–º
     */
    private Map<String, List<Candle>> getCandlesForSpecificTickers(Settings settings, List<String> tickers) {
        long start = System.currentTimeMillis();

        log.info("üìä –ó–∞–ø—Ä–æ—Å —Å–≤–µ—á–µ–π –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä: —Ç–∞–π–º—Ñ—Ä–µ–π–º={}, –ª–∏–º–∏—Ç={}, —Ç–∏–∫–µ—Ä–æ–≤={}",
                settings.getTimeframe(), (int) settings.getCandleLimit(), tickers.size());

        // –°–æ–∑–¥–∞–µ–º ExtendedCandlesRequest –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤
        ExtendedCandlesRequest request = ExtendedCandlesRequest.builder()
                .timeframe(settings.getTimeframe())
                .candleLimit((int) settings.getCandleLimit())
                .minVolume(settings.getMinVolume() != 0.0 ? settings.getMinVolume() * 1_000_000 : 50_000_000)
                .tickers(tickers) // –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã
                .excludeTickers(Collections.emptyList())
                .period(settings.calculateCurrentPeriod())
                .untilDate(StringUtils.getCurrentDateTimeWithZ())
                .exchange("OKX")
                .useCache(true)
                .useMinVolumeFilter(true)
                .minimumLotBlacklist(null)
                .build();

        try {
            log.info("‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ candles –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—É –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä...");
            Map<String, List<Candle>> map = candlesFeignClient.getValidatedCacheExtended(request);

            double elapsed = (System.currentTimeMillis() - start) / 1000.0;
            if (map != null && !map.isEmpty()) {
                log.info("‚úÖ –°–≤–µ—á–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∑–∞ {} —Å–µ–∫. –ü–æ–ª—É—á–µ–Ω–æ {} —Ç–∏–∫–µ—Ä–æ–≤",
                        String.format("%.2f", elapsed), map.size());
            } else {
                log.warn("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä –∑–∞ {} —Å–µ–∫",
                        String.format("%.2f", elapsed));
            }

            return map != null ? map : new HashMap<>();

        } catch (Exception e) {
            double elapsed = (System.currentTimeMillis() - start) / 1000.0;
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–µ—á–µ–π –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä –∑–∞ {} —Å–µ–∫: {}",
                    String.format("%.2f", elapsed), e.getMessage());
            return new HashMap<>();
        }
    }

    /**
     * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ Z-Score –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä
     *
     * @param settings   –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
     * @param candlesMap –∫–∞—Ä—Ç–∞ —Å–≤–µ—á–µ–π
     * @param pairNames  –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞—Ä
     * @param count      –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä
     * @return —Å–ø–∏—Å–æ–∫ Z-Score –¥–∞–Ω–Ω—ã—Ö
     */
    private List<ZScoreData> computeZScoreDataForStablePairs(Settings settings, Map<String, List<Candle>> candlesMap,
                                                             List<String> pairNames, int count) {
        try {
            log.info("üìä –†–∞—Å—á–µ—Ç Z-Score –¥–ª—è {} —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", pairNames.size());
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ getTopNZScoreData - –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ç–∏–∫–µ—Ä–∞–º
            return zScoreService.getTopNZScoreData(settings, candlesMap, count);
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ Z-Score –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä: {}", e.getMessage());
            return Collections.emptyList();
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä (–Ω–µ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ)
     *
     * @param settings –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
     * @param request  –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä
     * @return —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
     */
    private List<Pair> fetchPairsFromFoundStablePairs(Settings settings, FetchPairsRequest request) {
        long start = System.currentTimeMillis();

        log.info("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π...");

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–∞—Ä—ã (–Ω–µ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ)
        List<Pair> foundStablePairs = pairService.getAllFoundPairs();

        if (foundStablePairs.isEmpty()) {
            log.warn("‚ö†Ô∏è –ù–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞");
            return Collections.emptyList();
        }

        log.info("üìã –ù–∞–π–¥–µ–Ω–æ {} —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", foundStablePairs.size());

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞—Ä –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã
        List<String> pairNames = foundStablePairs.stream()
                .map(Pair::getPairName)
                .toList();

        Set<String> uniqueTickersSet = new HashSet<>();
        for (Pair pair : foundStablePairs) {
            if (pair.getLongTicker() != null) uniqueTickersSet.add(pair.getLongTicker());
            if (pair.getShortTicker() != null) uniqueTickersSet.add(pair.getShortTicker());
        }

        List<String> uniqueTickers = new ArrayList<>(uniqueTickersSet);

        if (uniqueTickers.isEmpty()) {
            log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–∏–∫–µ—Ä—ã –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä");
            return Collections.emptyList();
        }

        log.info("üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ {} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–µ—á–µ–π: {}",
                uniqueTickers.size(), uniqueTickers);

        // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω—É–∂–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤
        Map<String, List<Candle>> candlesMap = getCandlesForSpecificTickers(settings, uniqueTickers);

        if (candlesMap.isEmpty()) {
            log.warn("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã ‚Äî –ø—Ä–æ–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞.");
            throw new IllegalStateException("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä");
        }

        int count = Optional.ofNullable(request.getCountOfPairs())
                .orElse((int) settings.getUsePairs());

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º Z-Score —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä
        List<ZScoreData> zScoreDataList = computeZScoreDataForFoundStablePairs(settings, candlesMap, pairNames, count);
        if (zScoreDataList.isEmpty()) {
            log.warn("‚ö†Ô∏è Z-Score –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã");
            return Collections.emptyList();
        }

        logZScoreResults(zScoreDataList);

        List<Pair> pairs = createPairs(zScoreDataList, candlesMap);

        log.info("‚úÖ –°–æ–∑–¥–∞–Ω–æ {} –ø–∞—Ä –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä", pairs.size());
        pairs.forEach(p -> log.info("üìà {}", p.getPairName()));
        log.info("üïí –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–∞—Ä—ã): {} —Å–µ–∫",
                String.format("%.2f", (System.currentTimeMillis() - start) / 1000.0));

        return pairs;
    }

    /**
     * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ Z-Score –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä
     *
     * @param settings   –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
     * @param candlesMap –∫–∞—Ä—Ç–∞ —Å–≤–µ—á–µ–π
     * @param pairNames  –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞—Ä
     * @param count      –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä
     * @return —Å–ø–∏—Å–æ–∫ Z-Score –¥–∞–Ω–Ω—ã—Ö
     */
    private List<ZScoreData> computeZScoreDataForFoundStablePairs(Settings settings, Map<String, List<Candle>> candlesMap,
                                                                  List<String> pairNames, int count) {
        try {
            log.info("üìä –†–∞—Å—á–µ—Ç Z-Score –¥–ª—è {} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä", pairNames.size());
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ getTopNZScoreData - –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ç–∏–∫–µ—Ä–∞–º
            return zScoreService.getTopNZScoreData(settings, candlesMap, count);
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ Z-Score –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä: {}", e.getMessage());
            return Collections.emptyList();
        }
    }
}
