package com.example.core.services;

import com.example.core.repositories.PairRepository;
import com.example.shared.enums.PairType;
import com.example.shared.enums.StabilityRating;
import com.example.shared.models.Pair;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
 */
@Slf4j
@Service
public class StablePairsService {

    private final PairRepository pairRepository;

    @Autowired
    public StablePairsService(PairRepository pairRepository) {
        this.pairRepository = pairRepository;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–∞—Ä—ã –∏–∑ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     * @return —Å–ø–∏—Å–æ–∫ –ø–∞—Ä –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
     */
    public List<Pair> getStablePairsInMonitoring() {
        log.info("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä –∏–∑ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞");
        
        List<Pair> monitoringPairs = pairRepository.findStablePairsInMonitoring();
        
        log.info("‚úÖ –ù–∞–π–¥–µ–Ω–æ {} —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", monitoringPairs.size());
        
        return monitoringPairs;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–∞—Ä—ã –∏–∑ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ (enum)
     * @param ratings —Å–ø–∏—Å–æ–∫ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
     * @return —Å–ø–∏—Å–æ–∫ –ø–∞—Ä –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏
     */
    public List<Pair> getStablePairsInMonitoringByStabilityRatings(List<StabilityRating> ratings) {
        log.info("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä –∏–∑ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏: {}", ratings);
        
        List<Pair> monitoringPairs = pairRepository.findStablePairsInMonitoringByStabilityRatings(ratings);
        
        log.info("‚úÖ –ù–∞–π–¥–µ–Ω–æ {} —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ {}", 
                monitoringPairs.size(), ratings);
        
        return monitoringPairs;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–∞—Ä—ã –∏–∑ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ (—Å—Ç—Ä–æ–∫–∏) - –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
     * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {@link #getStablePairsInMonitoringByStabilityRatings(List)} —Å enum
     */
    @Deprecated
    public List<Pair> getStablePairsInMonitoringByRatings(List<String> ratings) {
        List<StabilityRating> enumRatings = ratings.stream()
                .map(StabilityRating::fromString)
                .toList();
        return getStablePairsInMonitoringByStabilityRatings(enumRatings);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ö–æ—Ä–æ—à–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–∞—Ä—ã –∏–∑ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (MARGINAL, GOOD –∏ EXCELLENT)
     * @return —Å–ø–∏—Å–æ–∫ –ø–∞—Ä –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ —Å —Ö–æ—Ä–æ—à–∏–º–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏
     */
    public List<Pair> getGoodStablePairsInMonitoring() {
        List<StabilityRating> goodRatings = List.of(
                StabilityRating.MARGINAL, 
                StabilityRating.GOOD, 
                StabilityRating.EXCELLENT
        );
        log.info("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ö–æ—Ä–æ—à–∏—Ö —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä –∏–∑ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {}", goodRatings);
        
        return getStablePairsInMonitoringByStabilityRatings(goodRatings);
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –∑–µ—Ä–∫–∞–ª—å–Ω—ã–µ –ø–∞—Ä—ã –¥–ª—è —Å–ø–∏—Å–∫–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä
     * @param originalPairs –∏—Å—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä—ã
     * @return —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞—Ä (–∏—Å—Ö–æ–¥–Ω—ã–µ + –∑–µ—Ä–∫–∞–ª—å–Ω—ã–µ)
     */
    public List<Pair> createPairsWithMirrors(List<Pair> originalPairs) {
        log.info("ü™û –°–æ–∑–¥–∞–Ω–∏–µ –∑–µ—Ä–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ä –¥–ª—è {} –∏—Å—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä", originalPairs.size());
        
        List<Pair> allPairs = new ArrayList<>(originalPairs);
        
        for (Pair originalPair : originalPairs) {
            Pair mirrorPair = createMirrorPair(originalPair);
            allPairs.add(mirrorPair);
            
            log.info("ü™û –°–æ–∑–¥–∞–Ω–∞ –∑–µ—Ä–∫–∞–ª—å–Ω–∞—è –ø–∞—Ä–∞: {} -> {}",
                    originalPair.getPairName(), mirrorPair.getPairName());
        }
        
        log.info("‚úÖ –°–æ–∑–¥–∞–Ω–æ {} –ø–∞—Ä —Å –∑–µ—Ä–∫–∞–ª—å–Ω—ã–º–∏ (–∏—Å—Ö–æ–¥–Ω—ã—Ö: {}, –∑–µ—Ä–∫–∞–ª—å–Ω—ã—Ö: {})", 
                allPairs.size(), originalPairs.size(), originalPairs.size());
        
        return allPairs;
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –∑–µ—Ä–∫–∞–ª—å–Ω—É—é –ø–∞—Ä—É –¥–ª—è –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞—Ä—ã
     * @param originalPair –∏—Å—Ö–æ–¥–Ω–∞—è –ø–∞—Ä–∞
     * @return –∑–µ—Ä–∫–∞–ª—å–Ω–∞—è –ø–∞—Ä–∞
     */
    private Pair createMirrorPair(Pair originalPair) {
        return Pair.builder()
                .type(PairType.STABLE)
                .status(originalPair.getStatus())
                .tickerA(originalPair.getTickerB()) // –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ —Ç–∏–∫–µ—Ä—ã
                .tickerB(originalPair.getTickerA())
                .pairName(originalPair.getTickerB() + "/" + originalPair.getTickerA()) // –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
                .totalScore(originalPair.getTotalScore())
                .stabilityRating(originalPair.getStabilityRating())
                .isTradeable(originalPair.isTradeable())
                .dataPoints(originalPair.getDataPoints())
                .candleCount(originalPair.getCandleCount())
                .analysisTimeSeconds(originalPair.getAnalysisTimeSeconds())
                .timeframe(originalPair.getTimeframe())
                .period(originalPair.getPeriod())
                .searchDate(originalPair.getSearchDate())
                .isInMonitoring(false) // –ó–µ—Ä–∫–∞–ª—å–Ω—ã–µ –ø–∞—Ä—ã –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                .searchSettings(originalPair.getSearchSettings())
                .analysisResults(originalPair.getAnalysisResults())
                .build();
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∞–Ω–∞–ª–∏–∑–µ zScore (—Ç–æ–ª—å–∫–æ —Å —Ö–æ—Ä–æ—à–∏–º–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏)
     * @return —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –ø–∞—Ä (–∏—Å—Ö–æ–¥–Ω—ã–µ + –∑–µ—Ä–∫–∞–ª—å–Ω—ã–µ)
     */
    public List<String> getPairNamesForZScoreAnalysis() {
        log.info("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ zScore (—Ç–æ–ª—å–∫–æ GOOD –∏ EXCELLENT)");
        
        List<Pair> monitoringPairs = getGoodStablePairsInMonitoring();
        List<Pair> allPairs = createPairsWithMirrors(monitoringPairs);
        
        List<String> pairNames = allPairs.stream()
                .map(Pair::getPairName)
                .collect(Collectors.toList());
        
        log.info("üìä –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {} –Ω–∞–∑–≤–∞–Ω–∏–π –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ zScore: {}", 
                pairNames.size(), pairNames);
        
        return pairNames;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–∞—Ä—ã (–∏—Å—Ö–æ–¥–Ω—ã–µ + –∑–µ—Ä–∫–∞–ª—å–Ω—ã–µ) –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ zScore (—Ç–æ–ª—å–∫–æ —Å —Ö–æ—Ä–æ—à–∏–º–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏)
     * @return —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
     */
    public List<Pair> getPairsForZScoreAnalysis() {
        log.info("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ zScore (—Ç–æ–ª—å–∫–æ GOOD –∏ EXCELLENT)");
        
        List<Pair> monitoringPairs = getGoodStablePairsInMonitoring();
        List<Pair> allPairs = createPairsWithMirrors(monitoringPairs);
        
        log.info("üìä –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {} –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ zScore (–∏—Å—Ö–æ–¥–Ω—ã—Ö: {}, –∑–µ—Ä–∫–∞–ª—å–Ω—ã—Ö: {})", 
                allPairs.size(), monitoringPairs.size(), monitoringPairs.size());
        
        return allPairs;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–∞—Ä—ã –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ (—Å —Ö–æ—Ä–æ—à–∏–º–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏)
     * @return true –µ—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä—ã –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ GOOD –∏–ª–∏ EXCELLENT
     */
    public boolean hasStablePairsInMonitoring() {
        List<Pair> monitoringPairs = getGoodStablePairsInMonitoring();
        boolean hasPairs = !monitoringPairs.isEmpty();
        
        log.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ö–æ—Ä–æ—à–∏—Ö —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {}", hasPairs);
        
        return hasPairs;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
     * @return –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
     */
    public int getStablePairsInMonitoringCount() {
        List<Pair> monitoringPairs = getStablePairsInMonitoring();
        int count = monitoringPairs.size();
        
        log.info("üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {}", count);
        
        return count;
    }
}