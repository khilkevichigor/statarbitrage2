package com.example.core.services.chart;

import com.example.shared.models.Pair;
import com.example.shared.enums.TradeStatus;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.List;

/**
 * üéØ –ë–∏–ª–¥–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏ —á–∞—Ä—Ç–æ–≤
 * –°–æ–∑–¥–∞–µ—Ç –æ–¥–∏–Ω –¥–ª–∏–Ω–Ω—ã–π —á–∞—Ä—Ç –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–µ–∫—Ü–∏–π –±–µ–∑ –Ω–∞–ª–æ–∂–µ–Ω–∏–π
 */
@Slf4j
@Component
@RequiredArgsConstructor
public class VerticalChartBuilder {

    private final ZScoreChartBuilder zScoreChartBuilder;
    private final ChartLayerService chartLayerService;

    /**
     * üèóÔ∏è –°–æ–∑–¥–∞–µ—Ç –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ —Å–∫–æ–º–ø–æ–Ω–æ–≤–∞–Ω–Ω—ã–π —á–∞—Ä—Ç —Å —Å–µ–∫—Ü–∏—è–º–∏
     * üéØ –£–ü–†–û–©–ï–ù–ò–ï: –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –í–°–ï–ì–î–ê! –ù–∏–∫–∞–∫–∏—Ö —á–µ–∫–±–æ–∫—Å–æ–≤!
     * –°–µ–∫—Ü–∏–∏: 1) –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã, 2) Z-Score, 3) –ü—Ä–æ—Ñ–∏—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è TRADING)
     *
     * @param tradingPair    –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
     * @param showEntryPoint –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –Ω–∞ –≤—Å–µ—Ö —Å–µ–∫—Ü–∏—è—Ö
     * @return –ì–æ—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ —á–∞—Ä—Ç–∞ (2-3 —Å–µ–∫—Ü–∏–∏)
     */
    public BufferedImage createVerticalChart(Pair tradingPair, boolean showEntryPoint) {

        log.debug("üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ —á–∞—Ä—Ç–∞ –¥–ª—è –ø–∞—Ä—ã: {} (—Å—Ç–∞—Ç—É—Å: {}, EntryPoint: {})",
                tradingPair.getPairName(), tradingPair.getStatus(), showEntryPoint);

        List<BufferedImage> chartSections = new ArrayList<>();

        // 1. –ß–∞—Ä—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–Ω - –í–°–ï–ì–î–ê –∫–∞–∫ –æ—Å–Ω–æ–≤–∞
        BufferedImage priceChart = createPriceSection(tradingPair, showEntryPoint, false); // –ù–ï –ø–æ—Å–ª–µ–¥–Ω–∏–π
        if (priceChart != null) {
            chartSections.add(priceChart);
            log.debug("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–µ–∫—Ü–∏—è —Ü–µ–Ω");
        }

        // 2. Z-Score —á–∞—Ä—Ç - –í–°–ï–ì–î–ê
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—É–¥–µ—Ç –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ—Ñ–∏—Ç, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –¥–æ–ª–∂–µ–Ω –ª–∏ Z-Score –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º
        boolean isTrading = TradeStatus.TRADING.equals(tradingPair.getStatus());
        boolean zScoreIsLast = !isTrading; // Z-Score –ø–æ—Å–ª–µ–¥–Ω–∏–π, –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏—Ç–∞
        
        BufferedImage zScoreChart = createZScoreSection(tradingPair, showEntryPoint, zScoreIsLast);
        if (zScoreChart != null) {
            chartSections.add(zScoreChart);
            log.debug("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–µ–∫—Ü–∏—è Z-Score (–ø–æ—Å–ª–µ–¥–Ω—è—è: {})", zScoreIsLast);
        }

        // 3. –ü—Ä–æ—Ñ–∏—Ç - –¢–û–õ–¨–ö–û –¥–ª—è —Ç–æ—Ä–≥—É–µ–º—ã—Ö –ø–∞—Ä (—Å—Ç–∞—Ç—É—Å TRADING)
        if (isTrading) {
            BufferedImage profitChart = createProfitSection(tradingPair, showEntryPoint, true); // –ü–û–°–õ–ï–î–ù–ò–ô —Å —à–∫–∞–ª–æ–π X
            if (profitChart != null) {
                chartSections.add(profitChart);
                log.debug("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–µ–∫—Ü–∏—è –ø—Ä–æ—Ñ–∏—Ç–∞ –¥–ª—è —Ç–æ—Ä–≥—É–µ–º–æ–π –ø–∞—Ä—ã (–ø–æ—Å–ª–µ–¥–Ω—è—è, —Å —à–∫–∞–ª–æ–π X)");
            }
        } else {
            log.debug("‚è≠Ô∏è –°–µ–∫—Ü–∏—è –ø—Ä–æ—Ñ–∏—Ç–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞ - –ø–∞—Ä–∞ –Ω–µ –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ (—Å—Ç–∞—Ç—É—Å: {})", 
                    tradingPair.getStatus());
        }

        // –ï—Å–ª–∏ –Ω–µ—Ç —Å–µ–∫—Ü–∏–π - —Å–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —á–∞—Ä—Ç —Å —Ü–µ–Ω–∞–º–∏ –∏ —à–∫–∞–ª–æ–π X
        if (chartSections.isEmpty()) {
            log.warn("‚ö†Ô∏è –ù–∏ –æ–¥–Ω–∞ —Å–µ–∫—Ü–∏—è –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∞—Ä—Ç —Ü–µ–Ω");
            return createPriceSection(tradingPair, showEntryPoint, true); // –ü–û–°–õ–ï–î–ù–ò–ô
        }

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏ –≤ –æ–¥–∏–Ω –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —á–∞—Ä—Ç
        BufferedImage result = combineChartsVertically(chartSections);
        log.debug("‚úÖ –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —á–∞—Ä—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–∞—Ä—ã {} ({} —Å–µ–∫—Ü–∏–π)",
                tradingPair.getPairName(), chartSections.size());

        return result;
    }

    /**
     * üí∞ –°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
     *
     * @param isLast –µ—Å–ª–∏ true - –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —à–∫–∞–ª—É X, –µ—Å–ª–∏ false - —Å–∫—Ä—ã–≤–∞—Ç—å
     */
    private BufferedImage createPriceSection(Pair tradingPair, boolean showEntryPoint, boolean isLast) {
        try {
            log.debug("üí∞ –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–Ω (—à–∫–∞–ª–∞ X: {})", isLast ? "–ø–æ–∫–∞–∑–∞—Ç—å" : "—Å–∫—Ä—ã—Ç—å");

            // –°–æ–∑–¥–∞–µ–º —á–∏—Å—Ç—ã–π —á–∞—Ä—Ç –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–Ω –±–µ–∑ –Ω–∞–ª–æ–∂–µ–Ω–∏—è –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
            org.knowm.xchart.XYChart chart = zScoreChartBuilder.buildCleanNormalizedPriceChart(tradingPair, showEntryPoint);

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã —Å —Ç–æ—á–∫–æ–π –≤—Ö–æ–¥–∞
            chartLayerService.addSynchronizedPricesToChart(chart, tradingPair, true, showEntryPoint);

            // üéØ –£–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —à–∫–∞–ª—ã X
            chart.getStyler().setXAxisTicksVisible(isLast);
            chart.getStyler().setXAxisTitleVisible(isLast);

            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            chart.setTitle("üí∞ –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã: " + tradingPair.getPairName());

            return org.knowm.xchart.BitmapEncoder.getBufferedImage(chart);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ–∫—Ü–∏–∏ —Ü–µ–Ω: {}", e.getMessage(), e);
            return null;
        }
    }

    /**
     * üìä –°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é Z-Score
     *
     * @param isLast –µ—Å–ª–∏ true - –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —à–∫–∞–ª—É X, –µ—Å–ª–∏ false - —Å–∫—Ä—ã–≤–∞—Ç—å
     */
    private BufferedImage createZScoreSection(Pair tradingPair, boolean showEntryPoint, boolean isLast) {
        try {
            log.debug("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ Z-Score (—à–∫–∞–ª–∞ X: {})", isLast ? "–ø–æ–∫–∞–∑–∞—Ç—å" : "—Å–∫—Ä—ã—Ç—å");

            // –°–æ–∑–¥–∞–µ–º —á–∏—Å—Ç—ã–π Z-Score —á–∞—Ä—Ç
            org.knowm.xchart.XYChart chart = zScoreChartBuilder.buildBasicZScoreChart(tradingPair, showEntryPoint);

            // üéØ –£–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —à–∫–∞–ª—ã X
            chart.getStyler().setXAxisTicksVisible(isLast);
            chart.getStyler().setXAxisTitleVisible(isLast);

            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            chart.setTitle("üìä Z-Score: " + tradingPair.getPairName());

            return org.knowm.xchart.BitmapEncoder.getBufferedImage(chart);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ–∫—Ü–∏–∏ Z-Score: {}", e.getMessage(), e);
            return null;
        }
    }

    /**
     * üíπ –°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é –ø—Ä–æ—Ñ–∏—Ç–∞
     *
     * @param isLast –µ—Å–ª–∏ true - –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —à–∫–∞–ª—É X, –µ—Å–ª–∏ false - —Å–∫—Ä—ã–≤–∞—Ç—å
     */
    private BufferedImage createProfitSection(Pair tradingPair, boolean showEntryPoint, boolean isLast) {
        try {
            log.debug("üíπ –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –ø—Ä–æ—Ñ–∏—Ç–∞ (—à–∫–∞–ª–∞ X: {})", isLast ? "–ø–æ–∫–∞–∑–∞—Ç—å" : "—Å–∫—Ä—ã—Ç—å");

            // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —á–∞—Ä—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏—Ç
            org.knowm.xchart.XYChart chart = zScoreChartBuilder.buildBasicZScoreChart(tradingPair, showEntryPoint);

            // üéØ –£–¥–∞–ª—è–µ–º Z-Score —Å–µ—Ä–∏—é –ò –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ —É—Ä–æ–≤–Ω–µ–π, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞
            removeZScoreSeriesButKeepEntry(chart);

            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏—Ç
            chartLayerService.addSynchronizedProfitToChart(chart, tradingPair);

            // üéØ –£–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —à–∫–∞–ª—ã X
            chart.getStyler().setXAxisTicksVisible(isLast);
            chart.getStyler().setXAxisTitleVisible(isLast);

            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            chart.setTitle("üíπ –ü—Ä–æ—Ñ–∏—Ç: " + tradingPair.getPairName());

            return org.knowm.xchart.BitmapEncoder.getBufferedImage(chart);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ–∫—Ü–∏–∏ –ø—Ä–æ—Ñ–∏—Ç–∞: {}", e.getMessage(), e);
            return null;
        }
    }

    /**
     * üóëÔ∏è –£–¥–∞–ª—è–µ—Ç Z-Score —Å–µ—Ä–∏—é –ò –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ —É—Ä–æ–≤–Ω–µ–π –∏–∑ —á–∞—Ä—Ç–∞, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞
     * üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ -3, -2, -1, 0, 1, 2, 3 –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¢–û–õ–¨–ö–û –Ω–∞ Z-Score —Å–µ–∫—Ü–∏–∏!
     */
    private void removeZScoreSeriesButKeepEntry(org.knowm.xchart.XYChart chart) {
        try {
            // –£–¥–∞–ª—è–µ–º Z-Score —Å–µ—Ä–∏—é
            chart.removeSeries("Z-Score");
            log.debug("‚úÖ –£–¥–∞–ª–µ–Ω–∞ Z-Score —Å–µ—Ä–∏—è");
        } catch (Exception e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ - —Å–µ—Ä–∏—è –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
            log.debug("Z-Score —Å–µ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è");
        }

        // üéØ –ù–û–í–û–ï: –£–¥–∞–ª—è–µ–º –í–°–ï –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ Z-Score —É—Ä–æ–≤–Ω–µ–π
        removeZScoreHorizontalLines(chart);
    }

    /**
     * üóëÔ∏è –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ Z-Score —É—Ä–æ–≤–Ω–µ–π (-3, -2, -1, 0, 1, 2, 3)
     * üéØ –≠—Ç–∏ –ª–∏–Ω–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¢–û–õ–¨–ö–û –Ω–∞ Z-Score —Å–µ–∫—Ü–∏–∏!
     */
    private void removeZScoreHorizontalLines(org.knowm.xchart.XYChart chart) {
        // –£–¥–∞–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π Z-Score
        double[] levels = {-3.0, -2.0, -1.0, 0.0, 1.0, 2.0, 3.0};

        for (double level : levels) {
            try {
                String seriesName = "level_" + level;
                chart.removeSeries(seriesName);
                log.debug("‚úÖ –£–¥–∞–ª–µ–Ω–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è —É—Ä–æ–≤–Ω—è {}", level);
            } catch (Exception e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ - —Å–µ—Ä–∏—è –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
                log.trace("–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è —É—Ä–æ–≤–Ω—è {} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", level);
            }
        }

        log.debug("üéØ –í—Å–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ Z-Score —É—Ä–æ–≤–Ω–µ–π —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–µ–∫—Ü–∏–∏");
    }

    /**
     * üìê –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Ä—Ç–æ–≤ –≤ –æ–¥–∏–Ω –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —á–∞—Ä—Ç
     */
    private BufferedImage combineChartsVertically(List<BufferedImage> chartSections) {
        if (chartSections.isEmpty()) {
            log.warn("‚ö†Ô∏è –ù–µ—Ç —Å–µ–∫—Ü–∏–π –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è");
            return null;
        }

        if (chartSections.size() == 1) {
            log.debug("üìê –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Å–µ–∫—Ü–∏—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å");
            return chartSections.get(0);
        }

        try {
            // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            int totalWidth = chartSections.get(0).getWidth();
            int totalHeight = chartSections.stream().mapToInt(BufferedImage::getHeight).sum();

            log.debug("üìê –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ {} —Å–µ–∫—Ü–∏–π –≤ —á–∞—Ä—Ç —Ä–∞–∑–º–µ—Ä–æ–º {}x{}",
                    chartSections.size(), totalWidth, totalHeight);

            // –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            BufferedImage combinedImage = new BufferedImage(totalWidth, totalHeight, BufferedImage.TYPE_INT_RGB);
            Graphics2D g2d = combinedImage.createGraphics();

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);

            // –†–∏—Å—É–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—Ü–∏—é –æ–¥–Ω—É –ø–æ–¥ –¥—Ä—É–≥–æ–π –±–µ–∑ —Ä–∞–∑—Ä—ã–≤–æ–≤
            int currentY = 0;
            for (int i = 0; i < chartSections.size(); i++) {
                BufferedImage section = chartSections.get(i);
                g2d.drawImage(section, 0, currentY, null);
                currentY += section.getHeight();

                log.debug("üìê –°–µ–∫—Ü–∏—è {} —Ä–∞–∑–º–µ—â–µ–Ω–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ Y={}", i + 1, currentY - section.getHeight());
            }

            g2d.dispose();

            log.debug("‚úÖ –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —á–∞—Ä—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ");
            return combinedImage;

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ —á–∞—Ä—Ç–æ–≤: {}", e.getMessage(), e);
            return chartSections.get(0); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é —Å–µ–∫—Ü–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        }
    }
}