package com.example.core.services;

import com.example.shared.dto.ChangesData;
import com.example.shared.dto.ProfitHistoryItem;
import com.example.shared.models.Pair;

import java.util.List;
import com.example.shared.utils.NumberFormatter;
import com.example.shared.utils.TimeFormatterUtil;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

@Slf4j
@Service
@RequiredArgsConstructor
public class UpdateChangesService {
    public void update(Pair tradingPair, ChangesData changes) {
        tradingPair.setMinLong(changes.getMinLong());
        tradingPair.setMaxLong(changes.getMaxLong());
        tradingPair.setLongUSDTChanges(changes.getLongUSDTChanges());
        tradingPair.setLongPercentChanges(changes.getLongPercentChanges());
        tradingPair.setLongTickerCurrentPrice(changes.getLongCurrentPrice());

        tradingPair.setMinShort(changes.getMinShort());
        tradingPair.setMaxShort(changes.getMaxShort());
        tradingPair.setShortUSDTChanges(changes.getShortUSDTChanges());
        tradingPair.setShortPercentChanges(changes.getShortPercentChanges());
        tradingPair.setShortTickerCurrentPrice(changes.getShortCurrentPrice());

        tradingPair.setMinZ(changes.getMinZ());
        tradingPair.setMaxZ(changes.getMaxZ());

        tradingPair.setMinCorr(changes.getMinCorr());
        tradingPair.setMaxCorr(changes.getMaxCorr());

        tradingPair.setMinProfitPercentChanges(changes.getMinProfitChanges());
        tradingPair.setMaxProfitPercentChanges(changes.getMaxProfitChanges());
        tradingPair.setProfitUSDTChanges(changes.getProfitUSDTChanges());
        tradingPair.setProfitPercentChanges(changes.getProfitPercentChanges());

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ç–æ—á–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Ñ–∏—Ç–∞ –ü–û–°–õ–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ Z-Score)
        if (changes.getProfitPercentChanges() != null) {
            long currentTimestamp = System.currentTimeMillis();
            double currentProfitPercent = changes.getProfitPercentChanges().doubleValue();
            
            // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            List<ProfitHistoryItem> existingHistory = tradingPair.getProfitHistory();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–∏–∑–±–µ–≥–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π)
            boolean shouldAdd = true;
            if (!existingHistory.isEmpty()) {
                ProfitHistoryItem lastItem = existingHistory.get(existingHistory.size() - 1);
                long timeDiff = currentTimestamp - lastItem.getTimestamp();
                
                // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ 30 —Å–µ–∫—É–Ω–¥ - –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –≤–º–µ—Å—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π
                if (timeDiff < 30000) { // 30 —Å–µ–∫—É–Ω–¥
                    log.info("üìä –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–æ—á–∫—É –ø—Ä–æ—Ñ–∏—Ç–∞ (–ø—Ä–æ—à–ª–æ {} —Å–µ–∫): {}% -> {}% –¥–ª—è –ø–∞—Ä—ã {}", 
                            timeDiff / 1000, lastItem.getProfitPercent(), currentProfitPercent, tradingPair.getPairName());
                    
                    lastItem.setTimestamp(currentTimestamp);
                    lastItem.setProfitPercent(currentProfitPercent);
                    tradingPair.setProfitHistory(existingHistory); // –ü–µ—Ä–µ—Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è JSON
                    shouldAdd = false;
                }
            }
            
            if (shouldAdd) {
                log.info("üìä –î–æ–±–∞–≤–ª—è–µ–º –ù–û–í–£–Æ —Ç–æ—á–∫—É –ø—Ä–æ—Ñ–∏—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é: {}% –Ω–∞ –≤—Ä–µ–º—è {} –¥–ª—è –ø–∞—Ä—ã {} (–±—ã–ª–æ {} —Ç–æ—á–µ–∫)",
                        currentProfitPercent, currentTimestamp, tradingPair.getPairName(), existingHistory.size());
                
                tradingPair.addProfitHistoryPoint(ProfitHistoryItem.builder()
                        .timestamp(currentTimestamp)
                        .profitPercent(currentProfitPercent)
                        .build());
                        
                log.info("üìä –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞–ª–æ {} —Ç–æ—á–µ–∫ –ø—Ä–æ—Ñ–∏—Ç–∞", tradingPair.getProfitHistory().size());
            }
        }

        tradingPair.setMinutesToMinProfitPercent(changes.getTimeInMinutesSinceEntryToMinProfit());
        tradingPair.setMinutesToMaxProfitPercent(changes.getTimeInMinutesSinceEntryToMaxProfit());

        tradingPair.setZScoreChanges(changes.getZScoreChanges());

        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è UI
        formatProfitValues(tradingPair, changes);
        formatTimeValues(tradingPair, changes);
    }

    private void formatProfitValues(Pair tradingPair, ChangesData changes) {
        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—â–µ–≥–æ –ø—Ä–æ—Ñ–∏—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "-0.14$/-0.48%"
        if (changes.getProfitUSDTChanges() != null && changes.getProfitPercentChanges() != null) {
            String formattedUSDT = NumberFormatter.format(changes.getProfitUSDTChanges(), 2);
            String formattedPercent = NumberFormatter.format(changes.getProfitPercentChanges(), 2);
            tradingPair.setFormattedProfitCommon(formattedUSDT + "$/" + formattedPercent + "%");
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏—Ç–∞ Long –ø–æ–∑–∏—Ü–∏–∏
        if (changes.getLongUSDTChanges() != null && changes.getLongPercentChanges() != null) {
            String formattedUSDT = NumberFormatter.format(changes.getLongUSDTChanges(), 2);
            String formattedPercent = NumberFormatter.format(changes.getLongPercentChanges(), 2);
            tradingPair.setFormattedProfitLong(formattedUSDT + "$/" + formattedPercent + "%");
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏—Ç–∞ Short –ø–æ–∑–∏—Ü–∏–∏
        if (changes.getShortUSDTChanges() != null && changes.getShortPercentChanges() != null) {
            String formattedUSDT = NumberFormatter.format(changes.getShortUSDTChanges(), 2);
            String formattedPercent = NumberFormatter.format(changes.getShortPercentChanges(), 2);
            tradingPair.setFormattedProfitShort(formattedUSDT + "$/" + formattedPercent + "%");
        }
    }

    private void formatTimeValues(Pair tradingPair, ChangesData changes) {
        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏—Ç–∞
        if (changes.getTimeInMinutesSinceEntryToMinProfit() > 0) {
            long timeInMillis = changes.getTimeInMinutesSinceEntryToMinProfit() * 60L * 1000L;
            tradingPair.setFormattedTimeToMinProfit(TimeFormatterUtil.formatDurationFromMillis(timeInMillis));
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏—Ç–∞
        if (changes.getTimeInMinutesSinceEntryToMaxProfit() > 0) {
            long timeInMillis = changes.getTimeInMinutesSinceEntryToMaxProfit() * 60L * 1000L;
            tradingPair.setFormattedTimeToMaxProfit(TimeFormatterUtil.formatDurationFromMillis(timeInMillis));
        }
    }
}
