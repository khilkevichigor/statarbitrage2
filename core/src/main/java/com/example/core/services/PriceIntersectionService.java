package com.example.core.services;

import com.example.core.services.chart.ChartService;
import com.example.shared.dto.Candle;
import com.example.shared.models.Pair;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.util.List;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–Ω –∑–∞–∫—Ä—ã—Ç–∏—è
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class PriceIntersectionService {

    private final ChartService chartService;

    /**
     * –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–Ω –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è –ø–∞—Ä—ã
     * –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
     *
     * @param cointPair –ø–∞—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
     * @return —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
     */
    public IntersectionResult calculateIntersectionsWithData(Pair cointPair) {
        List<Candle> longCandles = cointPair.getLongTickerCandles();
        List<Candle> shortCandles = cointPair.getShortTickerCandles();

        if (longCandles == null || shortCandles == null ||
                longCandles.isEmpty() || shortCandles.isEmpty()) {
            log.warn("‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π –¥–ª—è –ø–∞—Ä—ã {}: long={}, short={}",
                    cointPair.getPairName(),
                    longCandles != null ? longCandles.size() : "null",
                    shortCandles != null ? shortCandles.size() : "null");
            return new IntersectionResult(0, null, null);
        }

        int minSize = Math.min(longCandles.size(), shortCandles.size());
        if (minSize < 2) {
            log.warn("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –ø–∞—Ä—ã {}: minSize={}",
                    cointPair.getPairName(), minSize);
            return new IntersectionResult(0, null, null);
        }

        try {
            // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–Ω
            double[] normalizedLongPrices = normalizePrices(longCandles, minSize);
            double[] normalizedShortPrices = normalizePrices(shortCandles, minSize);

            // –ü–æ–¥—Å—á–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
            int intersections = countIntersections(normalizedLongPrices, normalizedShortPrices);

            log.info("üìä –ü–∞—Ä–∞ {}: –Ω–∞–π–¥–µ–Ω–æ {} –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–Ω –∏–∑ {} —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö",
                    cointPair.getPairName(), intersections, minSize);

            return new IntersectionResult(intersections, normalizedLongPrices, normalizedShortPrices);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –¥–ª—è –ø–∞—Ä—ã {}: {}",
                    cointPair.getPairName(), e.getMessage(), e);
            return new IntersectionResult(0, null, null);
        }
    }

    /**
     * –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–Ω –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è –ø–∞—Ä—ã
     *
     * @param cointPair –ø–∞—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
     * @return –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
     */
    public int calculateIntersections(Pair cointPair) {
        List<Candle> longCandles = cointPair.getLongTickerCandles();
        List<Candle> shortCandles = cointPair.getShortTickerCandles();

        if (longCandles == null || shortCandles == null ||
                longCandles.isEmpty() || shortCandles.isEmpty()) {
            log.warn("‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π –¥–ª—è –ø–∞—Ä—ã {}: long={}, short={}",
                    cointPair.getPairName(),
                    longCandles != null ? longCandles.size() : "null",
                    shortCandles != null ? shortCandles.size() : "null");
            return 0;
        }

        int minSize = Math.min(longCandles.size(), shortCandles.size());
        if (minSize < 2) {
            log.warn("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –ø–∞—Ä—ã {}: minSize={}",
                    cointPair.getPairName(), minSize);
            return 0;
        }

        try {
            // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–Ω
            double[] normalizedLongPrices = normalizePrices(longCandles, minSize);
            double[] normalizedShortPrices = normalizePrices(shortCandles, minSize);

            // –ü–æ–¥—Å—á–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
            int intersections = countIntersections(normalizedLongPrices, normalizedShortPrices);

            log.info("üìä –ü–∞—Ä–∞ {}: –Ω–∞–π–¥–µ–Ω–æ {} –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–Ω –∏–∑ {} —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö",
                    cointPair.getPairName(), intersections, minSize);

            return intersections;

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –¥–ª—è –ø–∞—Ä—ã {}: {}",
                    cointPair.getPairName(), e.getMessage(), e);
            return 0;
        }
    }

    /**
     * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ: normValue = (x - min) / (max - min)
     *
     * @param candles —Å–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π
     * @param size    –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
     * @return –º–∞—Å—Å–∏–≤ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–Ω
     */
    private double[] normalizePrices(List<Candle> candles, int size) {
        double[] prices = new double[size];
        double min = Double.MAX_VALUE;
        double max = Double.MIN_VALUE;

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è –∏ –Ω–∞—Ö–æ–¥–∏–º min/max
        for (int i = 0; i < size; i++) {
            prices[i] = candles.get(i).getClose();
            min = Math.min(min, prices[i]);
            max = Math.max(max, prices[i]);
        }

        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º
        double range = max - min;
        if (range == 0) {
            // –í—Å–µ —Ü–µ–Ω—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ –Ω—É–ª–µ–π
            return new double[size];
        }

        for (int i = 0; i < size; i++) {
            prices[i] = (prices[i] - min) / range;
        }

        return prices;
    }

    /**
     * –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –º–µ–∂–¥—É –¥–≤—É–º—è –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ —Ü–µ–Ω–æ–≤—ã–º–∏ —Ä—è–¥–∞–º–∏
     *
     * @param prices1 –ø–µ—Ä–≤—ã–π —Ü–µ–Ω–æ–≤–æ–π —Ä—è–¥
     * @param prices2 –≤—Ç–æ—Ä–æ–π —Ü–µ–Ω–æ–≤–æ–π —Ä—è–¥
     * @return –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
     */
    private int countIntersections(double[] prices1, double[] prices2) {
        int intersections = 0;

        if (prices1.length != prices2.length || prices1.length < 2) {
            return 0;
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ (–∫—Ç–æ –≤—ã—à–µ)
        boolean firstAboveSecond = prices1[0] > prices2[0];

        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ç–æ—á–∫–∞–º –∏ —Å—á–∏—Ç–∞–µ–º —Å–º–µ–Ω—É –ø–æ–ª–æ–∂–µ–Ω–∏—è
        for (int i = 1; i < prices1.length; i++) {
            boolean currentFirstAboveSecond = prices1[i] > prices2[i];

            // –ï—Å–ª–∏ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å - —ç—Ç–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
            if (currentFirstAboveSecond != firstAboveSecond) {
                intersections++;
                firstAboveSecond = currentFirstAboveSecond;
            }
        }

        return intersections;
    }

    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    public static class IntersectionResult {
        private int intersections;
        private double[] normalizedLongPrices;
        private double[] normalizedShortPrices;
    }

    /**
     * –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–µ—Ç —á–∞—Ä—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–Ω —Å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è–º–∏
     *
     * @param cointPair   –ø–∞—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
     * @param createChart —Ñ–ª–∞–≥ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ä—Ç–∞ (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è)
     * @return –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
     */
    public int calculateIntersectionsWithChart(Pair cointPair, boolean createChart) {
        List<Candle> longCandles = cointPair.getLongTickerCandles();
        List<Candle> shortCandles = cointPair.getShortTickerCandles();

        if (longCandles == null || shortCandles == null ||
                longCandles.isEmpty() || shortCandles.isEmpty()) {
            log.warn("‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π –¥–ª—è –ø–∞—Ä—ã {}: long={}, short={}",
                    cointPair.getPairName(),
                    longCandles != null ? longCandles.size() : "null",
                    shortCandles != null ? shortCandles.size() : "null");
            return 0;
        }

        int minSize = Math.min(longCandles.size(), shortCandles.size());
        if (minSize < 2) {
            log.warn("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –ø–∞—Ä—ã {}: minSize={}",
                    cointPair.getPairName(), minSize);
            return 0;
        }

        try {
            // –ü–æ–¥—Å—á–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–Ω
            IntersectionResult result = calculateIntersectionsWithData(cointPair);
            int intersections = result.getIntersections();

            // –°–æ–∑–¥–∞–µ–º —á–∞—Ä—Ç –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            if (createChart) {
                log.info("üìä –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ä—Ç–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–Ω –¥–ª—è –ø–∞—Ä—ã {} —Å {} –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è–º–∏",
                        cointPair.getPairName(), intersections);

                BufferedImage chartImage = chartService.createNormalizedPriceIntersectionsChart(
                        longCandles, shortCandles, cointPair.getPairName(), intersections, true);

                if (chartImage.getWidth() > 1 && chartImage.getHeight() > 1) {
                    log.info("‚úÖ –ß–∞—Ä—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–Ω —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–∞—Ä—ã {} (–ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π: {}, —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö: {})",
                            cointPair.getPairName(), intersections, minSize);
                } else {
                    log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞—Ä—Ç –¥–ª—è –ø–∞—Ä—ã {}", cointPair.getPairName());
                }
            }

            return intersections;

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π —Å —á–∞—Ä—Ç–æ–º –¥–ª—è –ø–∞—Ä—ã {}: {}",
                    cointPair.getPairName(), e.getMessage(), e);
            return 0;
        }
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —á–∞—Ä—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–Ω –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∫–∞–∫ –º–∞—Å—Å–∏–≤ –±–∞–π—Ç
     *
     * @param cointPair –ø–∞—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
     * @return –º–∞—Å—Å–∏–≤ –±–∞–π—Ç —á–∞—Ä—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG –∏–ª–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
     */
    public byte[] getIntersectionChartAsBytes(Pair cointPair) {
        List<Candle> longCandles = cointPair.getLongTickerCandles();
        List<Candle> shortCandles = cointPair.getShortTickerCandles();

        if (longCandles == null || shortCandles == null ||
                longCandles.isEmpty() || shortCandles.isEmpty()) {
            log.warn("‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ä—Ç–∞ –ø–∞—Ä—ã {}: long={}, short={}",
                    cointPair.getPairName(),
                    longCandles != null ? longCandles.size() : "null",
                    shortCandles != null ? shortCandles.size() : "null");
            return new byte[0];
        }

        try {
            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            IntersectionResult result = calculateIntersectionsWithData(cointPair);
            int intersections = result.getIntersections();

            log.info("üìä –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ä—Ç–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: –ø–∞—Ä–∞ {}, –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π {}",
                    cointPair.getPairName(), intersections);

            // –°–æ–∑–¥–∞–µ–º —á–∞—Ä—Ç –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
            BufferedImage chartImage = chartService.createNormalizedPriceIntersectionsChart(
                    longCandles, shortCandles, cointPair.getPairName(), intersections, false);

            if (chartImage.getWidth() <= 1 || chartImage.getHeight() <= 1) {
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞—Ä—Ç –¥–ª—è –ø–∞—Ä—ã {}", cointPair.getPairName());
                return new byte[0];
            }

            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º BufferedImage –≤ –º–∞—Å—Å–∏–≤ –±–∞–π—Ç
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ImageIO.write(chartImage, "PNG", baos);
            byte[] imageBytes = baos.toByteArray();

            log.info("‚úÖ –ß–∞—Ä—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ –±–∞–π—Ç—ã: –ø–∞—Ä–∞ {}, —Ä–∞–∑–º–µ—Ä {} –±–∞–π—Ç",
                    cointPair.getPairName(), imageBytes.length);

            return imageBytes;

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ä—Ç–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –∫–∞–∫ –º–∞—Å—Å–∏–≤ –±–∞–π—Ç –¥–ª—è –ø–∞—Ä—ã {}: {}",
                    cointPair.getPairName(), e.getMessage(), e);
            return new byte[0];
        }
    }
}