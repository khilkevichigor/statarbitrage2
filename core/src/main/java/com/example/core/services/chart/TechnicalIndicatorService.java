package com.example.core.services.chart;

import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;

/**
 * üìä –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
 * –°–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ EMA, RSI, StochRSI –∏ –¥—Ä—É–≥–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
 */
@Slf4j
@Service
public class TechnicalIndicatorService {

    /**
     * üìà –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –°–∫–æ–ª—å–∑—è—â—É—é –°—Ä–µ–¥–Ω—é—é (EMA)
     *
     * @param values –°–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
     * @param period –ü–µ—Ä–∏–æ–¥ –¥–ª—è EMA
     * @return –°–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π EMA
     */
    public List<Double> calculateEMA(List<Double> values, int period) {
        if (values == null || values.size() < period) {
            log.debug("üìà –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ EMA({}): —Ä–∞–∑–º–µ—Ä={}", period,
                    values != null ? values.size() : 0);
            return new ArrayList<>();
        }

        List<Double> emaValues = new ArrayList<>();
        double multiplier = 2.0 / (period + 1);

        // –ü–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ EMA = –ø—Ä–æ—Å—Ç–∞—è —Å—Ä–µ–¥–Ω—è—è –ø–µ—Ä–≤—ã—Ö N –∑–Ω–∞—á–µ–Ω–∏–π
        double sum = 0;
        for (int i = 0; i < period; i++) {
            sum += values.get(i);
        }
        double firstEma = sum / period;
        emaValues.add(firstEma);

        // –ü–æ—Å–ª–µ–¥—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è EMA
        for (int i = period; i < values.size(); i++) {
            double currentValue = values.get(i);
            double previousEma = emaValues.get(emaValues.size() - 1);
            double ema = (currentValue * multiplier) + (previousEma * (1 - multiplier));
            emaValues.add(ema);
        }

        log.debug("üìà –†–∞—Å—Å—á–∏—Ç–∞–Ω EMA({}) –¥–ª—è {} –∑–Ω–∞—á–µ–Ω–∏–π, –ø–æ–ª—É—á–µ–Ω–æ {} —Ç–æ—á–µ–∫ EMA",
                period, values.size(), emaValues.size());

        return emaValues;
    }

    /**
     * üìä –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ò–Ω–¥–µ–∫—Å –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π –°–∏–ª—ã (RSI)
     *
     * @param values –°–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
     * @param period –ü–µ—Ä–∏–æ–¥ –¥–ª—è RSI (–æ–±—ã—á–Ω–æ 14)
     * @return –°–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π RSI
     */
    public List<Double> calculateRSI(List<Double> values, int period) {
        if (values == null || values.size() < period + 1) {
            log.debug("üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ RSI({}): —Ä–∞–∑–º–µ—Ä={}", period,
                    values != null ? values.size() : 0);
            return new ArrayList<>();
        }

        List<Double> rsiValues = new ArrayList<>();
        List<Double> gains = new ArrayList<>();
        List<Double> losses = new ArrayList<>();

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è (gains –∏ losses)
        for (int i = 1; i < values.size(); i++) {
            double change = values.get(i) - values.get(i - 1);
            gains.add(Math.max(change, 0));
            losses.add(Math.max(-change, 0));
        }

        // –ü–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ RSI - –ø—Ä–æ—Å—Ç–∞—è —Å—Ä–µ–¥–Ω—è—è
        double avgGain = gains.subList(0, period).stream().mapToDouble(Double::doubleValue).average().orElse(0);
        double avgLoss = losses.subList(0, period).stream().mapToDouble(Double::doubleValue).average().orElse(0);

        double rs = avgLoss == 0 ? 100 : avgGain / avgLoss;
        double rsi = 100 - (100 / (1 + rs));
        rsiValues.add(rsi);

        // –ü–æ—Å–ª–µ–¥—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è RSI —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥–Ω–µ–π
        for (int i = period; i < gains.size(); i++) {
            avgGain = (avgGain * (period - 1) + gains.get(i)) / period;
            avgLoss = (avgLoss * (period - 1) + losses.get(i)) / period;

            rs = avgLoss == 0 ? 100 : avgGain / avgLoss;
            rsi = 100 - (100 / (1 + rs));
            rsiValues.add(rsi);
        }

        log.debug("üìä –†–∞—Å—Å—á–∏—Ç–∞–Ω RSI({}) –¥–ª—è {} –∑–Ω–∞—á–µ–Ω–∏–π, –ø–æ–ª—É—á–µ–Ω–æ {} —Ç–æ—á–µ–∫ RSI",
                period, values.size(), rsiValues.size());

        return rsiValues;
    }

    /**
     * üåä –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∏–π RSI (StochRSI)
     *
     * @param values      –°–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
     * @param rsiPeriod   –ü–µ—Ä–∏–æ–¥ –¥–ª—è RSI (–æ–±—ã—á–Ω–æ 14)
     * @param stochPeriod –ü–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä–∞ (–æ–±—ã—á–Ω–æ 3)
     * @param smoothK     –ü–µ—Ä–∏–æ–¥ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è K (–æ–±—ã—á–Ω–æ 3)
     * @return –°–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π StochRSI
     */
    public List<Double> calculateStochRSI(List<Double> values, int rsiPeriod, int stochPeriod, int smoothK) {
        if (values == null || values.size() < rsiPeriod + stochPeriod + smoothK) {
            log.debug("üåä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ StochRSI({},{},{}): —Ä–∞–∑–º–µ—Ä={}",
                    rsiPeriod, stochPeriod, smoothK, values != null ? values.size() : 0);
            return new ArrayList<>();
        }

        // –°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º RSI
        List<Double> rsiValues = calculateRSI(values, rsiPeriod);

        if (rsiValues.size() < stochPeriod) {
            log.debug("üåä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–π RSI –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ StochRSI: {}", rsiValues.size());
            return new ArrayList<>();
        }

        List<Double> stochRsiRaw = new ArrayList<>();

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ RSI
        for (int i = stochPeriod - 1; i < rsiValues.size(); i++) {
            List<Double> rsiPeriodValues = rsiValues.subList(i - stochPeriod + 1, i + 1);
            double minRsi = rsiPeriodValues.stream().min(Double::compareTo).orElse(0.0);
            double maxRsi = rsiPeriodValues.stream().max(Double::compareTo).orElse(100.0);
            double currentRsi = rsiValues.get(i);

            double stochRsi;
            if (maxRsi - minRsi == 0) {
                stochRsi = 50.0; // –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            } else {
                stochRsi = ((currentRsi - minRsi) / (maxRsi - minRsi)) * 100.0;
            }

            stochRsiRaw.add(stochRsi);
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ K
        if (stochRsiRaw.size() < smoothK) {
            log.debug("üåä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è StochRSI: {}", stochRsiRaw.size());
            return stochRsiRaw;
        }

        List<Double> smoothedStochRsi = new ArrayList<>();
        for (int i = smoothK - 1; i < stochRsiRaw.size(); i++) {
            double sum = 0;
            for (int j = i - smoothK + 1; j <= i; j++) {
                sum += stochRsiRaw.get(j);
            }
            smoothedStochRsi.add(sum / smoothK);
        }

        log.debug("üåä –†–∞—Å—Å—á–∏—Ç–∞–Ω StochRSI({},{},{}) –¥–ª—è {} –∑–Ω–∞—á–µ–Ω–∏–π, –ø–æ–ª—É—á–µ–Ω–æ {} —Ç–æ—á–µ–∫",
                rsiPeriod, stochPeriod, smoothK, values.size(), smoothedStochRsi.size());

        return smoothedStochRsi;
    }

    /**
     * üìà –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ü—Ä–æ—Å—Ç—É—é –°–∫–æ–ª—å–∑—è—â—É—é –°—Ä–µ–¥–Ω—é—é (SMA)
     *
     * @param values –°–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π
     * @param period –ü–µ—Ä–∏–æ–¥ –¥–ª—è SMA
     * @return –°–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π SMA
     */
    public List<Double> calculateSMA(List<Double> values, int period) {
        if (values == null || values.size() < period) {
            log.debug("üìà –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ SMA({}): —Ä–∞–∑–º–µ—Ä={}", period,
                    values != null ? values.size() : 0);
            return new ArrayList<>();
        }

        List<Double> smaValues = new ArrayList<>();

        for (int i = period - 1; i < values.size(); i++) {
            double sum = 0;
            for (int j = i - period + 1; j <= i; j++) {
                sum += values.get(j);
            }
            smaValues.add(sum / period);
        }

        log.debug("üìà –†–∞—Å—Å—á–∏—Ç–∞–Ω SMA({}) –¥–ª—è {} –∑–Ω–∞—á–µ–Ω–∏–π, –ø–æ–ª—É—á–µ–Ω–æ {} —Ç–æ—á–µ–∫",
                period, values.size(), smaValues.size());

        return smaValues;
    }

    /**
     * üìä –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
     *
     * @param values –°–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π
     * @param period –ü–µ—Ä–∏–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
     * @return –°–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
     */
    public List<Double> calculateStandardDeviation(List<Double> values, int period) {
        if (values == null || values.size() < period) {
            log.debug("üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ StdDev({}): —Ä–∞–∑–º–µ—Ä={}", period,
                    values != null ? values.size() : 0);
            return new ArrayList<>();
        }

        List<Double> smaValues = calculateSMA(values, period);
        List<Double> stdDevValues = new ArrayList<>();

        for (int i = 0; i < smaValues.size(); i++) {
            double sma = smaValues.get(i);
            double sum = 0;

            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π
            for (int j = 0; j < period; j++) {
                double value = values.get(i + period - 1 - j);
                sum += Math.pow(value - sma, 2);
            }

            double variance = sum / period;
            double stdDev = Math.sqrt(variance);
            stdDevValues.add(stdDev);
        }

        log.debug("üìä –†–∞—Å—Å—á–∏—Ç–∞–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ({}) –¥–ª—è {} –∑–Ω–∞—á–µ–Ω–∏–π, –ø–æ–ª—É—á–µ–Ω–æ {} —Ç–æ—á–µ–∫",
                period, values.size(), stdDevValues.size());

        return stdDevValues;
    }

    /**
     * üéØ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç Z-Score –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
     *
     * @param values –°–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π
     * @param period –ü–µ—Ä–∏–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
     * @return –°–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π Z-Score
     */
    public List<Double> calculateZScore(List<Double> values, int period) {
        if (values == null || values.size() < period) {
            log.debug("üéØ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ Z-Score({}): —Ä–∞–∑–º–µ—Ä={}", period,
                    values != null ? values.size() : 0);
            return new ArrayList<>();
        }

        List<Double> smaValues = calculateSMA(values, period);
        List<Double> stdDevValues = calculateStandardDeviation(values, period);
        List<Double> zScoreValues = new ArrayList<>();

        for (int i = 0; i < smaValues.size(); i++) {
            double currentValue = values.get(i + period - 1);
            double sma = smaValues.get(i);
            double stdDev = stdDevValues.get(i);

            double zScore;
            if (stdDev == 0) {
                zScore = 0; // –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
            } else {
                zScore = (currentValue - sma) / stdDev;
            }

            zScoreValues.add(zScore);
        }

        log.debug("üéØ –†–∞—Å—Å—á–∏—Ç–∞–Ω Z-Score({}) –¥–ª—è {} –∑–Ω–∞—á–µ–Ω–∏–π, –ø–æ–ª—É—á–µ–Ω–æ {} —Ç–æ—á–µ–∫",
                period, values.size(), zScoreValues.size());

        return zScoreValues;
    }
}