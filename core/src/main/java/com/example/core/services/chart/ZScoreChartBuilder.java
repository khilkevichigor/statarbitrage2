package com.example.core.services.chart;

import com.example.shared.dto.ZScoreParam;
import com.example.shared.models.Pair;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.knowm.xchart.XYChart;
import org.knowm.xchart.XYChartBuilder;
import org.knowm.xchart.XYSeries;
import org.knowm.xchart.style.markers.None;
import org.springframework.stereotype.Component;

import java.awt.*;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.List;

/**
 * üéØ –ë–∏–ª–¥–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Z-Score —á–∞—Ä—Ç–æ–≤
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –±–∞–∑–æ–≤–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ Z-Score —Å —Ç–æ—á–∫–∞–º–∏ –≤—Ö–æ–¥–∞
 */
@Slf4j
@Component
@RequiredArgsConstructor
public class ZScoreChartBuilder {

    private final InterpolationService interpolationService;

    /**
     * üéØ –°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–π Z-Score —á–∞—Ä—Ç —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–æ–π –≤—Ö–æ–¥–∞
     */
    public XYChart buildBasicZScoreChart(Pair tradingPair, boolean showEntryPoint) {
        List<ZScoreParam> history = tradingPair.getZScoreHistory();

        List<Long> timestamps;
        List<Double> zScores;

        if (history.isEmpty()) {
            log.warn("‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è Z-Score –ø—É—Å—Ç–∞ –¥–ª—è –ø–∞—Ä—ã {}, —Å–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
                    tradingPair.getPairName());
            timestamps = Collections.singletonList(System.currentTimeMillis());
            zScores = Collections.singletonList(
                    tradingPair.getZScoreCurrent() != null ?
                            tradingPair.getZScoreCurrent().doubleValue() : 0.0);
        } else {
            timestamps = history.stream()
                    .map(ZScoreParam::getTimestamp)
                    .toList();
            zScores = history.stream()
                    .map(ZScoreParam::getZscore)
                    .toList();

            log.debug("üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é Z-Score: {} —Ç–æ—á–µ–∫ –¥–ª—è –ø–∞—Ä—ã {}",
                    history.size(), tradingPair.getPairName());
        }

        log.debug("üìÖ –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –≥—Ä–∞—Ñ–∏–∫–∞ –æ—Ç: {} - –¥–æ: {}",
                new Date(timestamps.get(0)), new Date(timestamps.get(timestamps.size() - 1)));
        log.debug("üéØ –¢–µ–∫—É—â–∏–π Z-Score: {}", tradingPair.getZScoreCurrent());

        if (!ChartUtils.isValidChartData(timestamps, zScores)) {
            log.warn("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è Z-–≥—Ä–∞—Ñ–∏–∫–∞");
            throw new IllegalArgumentException("Timestamps and zScores lists must have the same size");
        }

        List<Date> timeAxis = timestamps.stream().map(Date::new).toList();

        XYChart chart = new XYChartBuilder()
                .width(ChartUtils.CHART_WIDTH)
                .height(ChartUtils.CHART_HEIGHT)
                .title("Z-Score LONG (" + tradingPair.getLongTicker() + ") - SHORT (" + tradingPair.getShortTicker() + ")")
                .xAxisTitle("").yAxisTitle("")
                .build();

        ChartUtils.applyUnifiedChartStyle(chart, timeAxis);

        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é Z-Score –ª–∏–Ω–∏—é
        XYSeries zSeries = chart.addSeries("Z-Score", timeAxis, zScores);
        zSeries.setLineColor(ChartUtils.ZSCORE_COLOR);
        zSeries.setMarker(new None());

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
        ChartUtils.addZScoreHorizontalLines(chart, timeAxis);

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞ –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        if (showEntryPoint) {
            addEntryPointToChart(chart, tradingPair, timeAxis, zScores);
        }

        log.debug("‚úÖ –ë–∞–∑–æ–≤—ã–π Z-Score —á–∞—Ä—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–∞—Ä—ã {}", tradingPair.getPairName());
        return chart;
    }

    /**
     * üéØ –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞ –Ω–∞ Z-Score —á–∞—Ä—Ç
     */
    private void addEntryPointToChart(XYChart chart, Pair tradingPair, List<Date> timeAxis, List<Double> zScores) {
        long entryTimestamp = getEntryTimestamp(tradingPair);

        if (entryTimestamp <= 0) {
            log.debug("‚ö†Ô∏è –í—Ä–µ–º—è –≤—Ö–æ–¥–∞ –Ω–µ –∑–∞–¥–∞–Ω–æ (0) - –ª–∏–Ω–∏—è –≤—Ö–æ–¥–∞ –Ω–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∞");
            return;
        }

        long historyStart = timeAxis.get(0).getTime();
        long historyEnd = timeAxis.get(timeAxis.size() - 1).getTime();

        log.debug("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–Ω–∏–∏ –≤—Ö–æ–¥–∞: entryTime={}, historyStart={}, historyEnd={}",
                new Date(entryTimestamp), new Date(historyStart), new Date(historyEnd));

        boolean inRange = entryTimestamp >= historyStart && entryTimestamp <= historyEnd;

        if (inRange) {
            addExactEntryPoint(chart, tradingPair, timeAxis, zScores, entryTimestamp);
        } else {
            addApproximateEntryPoint(chart, tradingPair, timeAxis, zScores, entryTimestamp, historyStart, historyEnd);
        }
    }

    /**
     * üéØ –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ—á–Ω—É—é –ª–∏–Ω–∏—é –≤—Ö–æ–¥–∞ (–≤—Ä–µ–º—è –≤—Ö–æ–¥–∞ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω –∏—Å—Ç–æ—Ä–∏–∏)
     */
    private void addExactEntryPoint(XYChart chart, Pair tradingPair, List<Date> timeAxis,
                                    List<Double> zScores, long entryTimestamp) {
        log.debug("üéØ –í—Ä–µ–º—è –≤—Ö–æ–¥–∞ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω –∏—Å—Ç–æ—Ä–∏–∏ - —Ä–∏—Å—É–µ–º —Ç–æ—á–Ω—É—é –ª–∏–Ω–∏—é –≤—Ö–æ–¥–∞");

        Date entryDate = new Date(entryTimestamp);
        addVerticalEntryLine(chart, entryDate, zScores, "Entry", ChartUtils.ENTRY_POINT_COLOR);
        addHorizontalEntryLine(chart, tradingPair, timeAxis, "Entry Z-Score", ChartUtils.ENTRY_POINT_COLOR);

        log.debug("‚úÖ –¢–æ—á–Ω–∞—è –ª–∏–Ω–∏—è –≤—Ö–æ–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ");
    }

    /**
     * üéØ –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—É—é –ª–∏–Ω–∏—é –≤—Ö–æ–¥–∞ (–≤—Ä–µ–º—è –≤—Ö–æ–¥–∞ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏)
     */
    private void addApproximateEntryPoint(XYChart chart, Pair tradingPair, List<Date> timeAxis,
                                          List<Double> zScores, long entryTimestamp,
                                          long historyStart, long historyEnd) {
        log.debug("‚ö†Ô∏è –í—Ä–µ–º—è –≤—Ö–æ–¥–∞ –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω –∏—Å—Ç–æ—Ä–∏–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—É—é –ª–∏–Ω–∏—é");

        Date entryDate;
        if (entryTimestamp < historyStart) {
            entryDate = new Date(historyStart);
            log.debug("üìç –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–∏–Ω–∏—é –≤—Ö–æ–¥–∞ –≤ –Ω–∞—á–∞–ª–µ –≥—Ä–∞—Ñ–∏–∫–∞");
        } else {
            entryDate = new Date(historyEnd);
            log.debug("üìç –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–∏–Ω–∏—é –≤—Ö–æ–¥–∞ –≤ –∫–æ–Ω—Ü–µ –≥—Ä–∞—Ñ–∏–∫–∞");
        }

        addVerticalEntryLine(chart, entryDate, zScores, "Entry (approx)", ChartUtils.ENTRY_POINT_APPROX_COLOR);
        addHorizontalEntryLine(chart, tradingPair, timeAxis, "Entry Z-Score (approx)", ChartUtils.ENTRY_POINT_APPROX_COLOR);

        log.debug("‚úÖ –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è –≤—Ö–æ–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ");
    }

    /**
     * üìè –î–æ–±–∞–≤–ª—è–µ—Ç –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –≤—Ö–æ–¥–∞
     */
    private void addVerticalEntryLine(XYChart chart, Date entryDate, List<Double> zScores,
                                      String seriesName, Color color) {
        List<Date> lineX = Arrays.asList(entryDate, entryDate);
        double minY = zScores.stream().min(Double::compareTo).orElse(-2.0);
        double maxY = zScores.stream().max(Double::compareTo).orElse(2.0);
        List<Double> lineY = Arrays.asList(minY, maxY);

        XYSeries entryLine = chart.addSeries(seriesName, lineX, lineY);
        entryLine.setLineColor(color);
        entryLine.setMarker(new None());
        entryLine.setLineStyle(new BasicStroke(1.5f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL,
                0, new float[]{6f, 4f}, 0));
    }

    /**
     * üìè –î–æ–±–∞–≤–ª—è–µ—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é Z-Score –≤—Ö–æ–¥–∞
     */
    private void addHorizontalEntryLine(XYChart chart, Pair tradingPair, List<Date> timeAxis,
                                        String seriesName, Color color) {
        if (tradingPair.getZScoreEntry() == null) {
            log.debug("‚ö†Ô∏è Z-Score –≤—Ö–æ–¥–∞ –Ω–µ –∑–∞–¥–∞–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é");
            return;
        }

        double entryZScore = tradingPair.getZScoreEntry().doubleValue();
        List<Date> horizontalLineX = Arrays.asList(timeAxis.get(0), timeAxis.get(timeAxis.size() - 1));
        List<Double> horizontalLineY = Arrays.asList(entryZScore, entryZScore);

        XYSeries entryHorizontalLine = chart.addSeries(seriesName, horizontalLineX, horizontalLineY);
        entryHorizontalLine.setLineColor(color);
        entryHorizontalLine.setMarker(new None());
        entryHorizontalLine.setLineStyle(new BasicStroke(1.5f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL,
                0, new float[]{6f, 4f}, 0));
    }

    /**
     * üïê –ü–æ–ª—É—á–∞–µ—Ç —Ç–∞–π–º—à—Ç–∞–º–ø –≤—Ö–æ–¥–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
     */
    private long getEntryTimestamp(Pair tradingPair) {
        if (tradingPair.getEntryTime() != null) {
            return tradingPair.getEntryTime().atZone(java.time.ZoneId.systemDefault()).toInstant().toEpochMilli();
        }
        if (tradingPair.getTimestamp() != null) {
            return tradingPair.getTimestamp();
        }
        return System.currentTimeMillis();
    }
}