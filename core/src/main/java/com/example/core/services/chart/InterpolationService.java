package com.example.core.services.chart;

import com.example.shared.dto.Candle;
import com.example.shared.dto.PixelSpreadHistoryItem;
import com.example.shared.dto.ProfitHistoryItem;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.Date;
import java.util.List;

/**
 * üéØ –°–µ—Ä–≤–∏—Å –¥–ª—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Ç–æ—á–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ Z-Score
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
 */
@Slf4j
@Service
public class InterpolationService {

    /**
     * üéØ –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ—Ç —Ü–µ–Ω—É —Å–≤–µ—á–∏ –Ω–∞ —Ç–æ—á–Ω—ã–π —Ç–∞–π–º—à—Ç–∞–º–ø Z-Score
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∏–Ω–µ–π–Ω—É—é –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—é –º–µ–∂–¥—É –±–ª–∏–∂–∞–π—à–∏–º–∏ —Å–≤–µ—á–∞–º–∏
     */
    public Double interpolatePrice(List<Candle> candles, long targetTimestamp) {
        if (candles == null || candles.isEmpty()) {
            log.trace("üéØ –ù–µ—Ç —Å–≤–µ—á–µ–π –¥–ª—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ —Ü–µ–Ω—ã –Ω–∞ {}", new Date(targetTimestamp));
            return null;
        }

        // –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–µ —Å–≤–µ—á–∏ –¥–æ –∏ –ø–æ—Å–ª–µ —Ü–µ–ª–µ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        Candle beforeCandle = null;
        Candle afterCandle = null;

        for (Candle candle : candles) {
            if (candle.getTimestamp() <= targetTimestamp) {
                if (beforeCandle == null || candle.getTimestamp() > beforeCandle.getTimestamp()) {
                    beforeCandle = candle;
                }
            }
            if (candle.getTimestamp() >= targetTimestamp) {
                if (afterCandle == null || candle.getTimestamp() < afterCandle.getTimestamp()) {
                    afterCandle = candle;
                }
            }
        }

        // –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if (beforeCandle != null && beforeCandle.getTimestamp() == targetTimestamp) {
            log.trace("üéØ –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–≤–µ—á–∏: {}", beforeCandle.getClose());
            return beforeCandle.getClose();
        }
        if (afterCandle != null && afterCandle.getTimestamp() == targetTimestamp) {
            log.trace("üéØ –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–≤–µ—á–∏: {}", afterCandle.getClose());
            return afterCandle.getClose();
        }

        // –õ–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Å–≤–µ—á–∞–º–∏
        if (beforeCandle != null && afterCandle != null && !beforeCandle.equals(afterCandle)) {
            long timeDiff = afterCandle.getTimestamp() - beforeCandle.getTimestamp();
            double priceDiff = afterCandle.getClose() - beforeCandle.getClose();
            long targetDiff = targetTimestamp - beforeCandle.getTimestamp();

            double interpolatedPrice = beforeCandle.getClose() + (priceDiff * targetDiff / (double) timeDiff);

            log.trace("üéØ –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è —Ü–µ–Ω—ã: {} -> {} (–º–µ–∂–¥—É {} –∏ {})",
                    new Date(targetTimestamp), interpolatedPrice, beforeCandle.getClose(), afterCandle.getClose());

            return interpolatedPrice;
        }

        // Fallback: –±–ª–∏–∂–∞–π—à–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞—è —Ü–µ–Ω–∞
        if (beforeCandle != null) {
            log.trace("üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—É –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–≤–µ—á–∏: {}", beforeCandle.getClose());
            return beforeCandle.getClose();
        }
        if (afterCandle != null) {
            log.trace("üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—É —Å–ª–µ–¥—É—é—â–µ–π —Å–≤–µ—á–∏: {}", afterCandle.getClose());
            return afterCandle.getClose();
        }

        log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—É –¥–ª—è {}", new Date(targetTimestamp));
        return null;
    }

    /**
     * üéØ –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ—Ç –ø–∏–∫—Å–µ–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ —Ç–æ—á–Ω—ã–π —Ç–∞–π–º—à—Ç–∞–º–ø Z-Score
     */
    public Double interpolatePixelSpread(List<PixelSpreadHistoryItem> pixelHistory, long targetTimestamp) {
        if (pixelHistory == null || pixelHistory.isEmpty()) {
            log.trace("üéØ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ –Ω–∞ {}", new Date(targetTimestamp));
            return null;
        }

        // –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –∑–∞–ø–∏—Å–∏ –¥–æ –∏ –ø–æ—Å–ª–µ —Ü–µ–ª–µ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        PixelSpreadHistoryItem beforeItem = null;
        PixelSpreadHistoryItem afterItem = null;

        for (PixelSpreadHistoryItem item : pixelHistory) {
            if (item.getTimestamp() <= targetTimestamp) {
                if (beforeItem == null || item.getTimestamp() > beforeItem.getTimestamp()) {
                    beforeItem = item;
                }
            }
            if (item.getTimestamp() >= targetTimestamp) {
                if (afterItem == null || item.getTimestamp() < afterItem.getTimestamp()) {
                    afterItem = item;
                }
            }
        }

        // –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if (beforeItem != null && beforeItem.getTimestamp() == targetTimestamp) {
            log.trace("üéØ –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞: {}", beforeItem.getPixelDistance());
            return beforeItem.getPixelDistance();
        }
        if (afterItem != null && afterItem.getTimestamp() == targetTimestamp) {
            log.trace("üéØ –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞: {}", afterItem.getPixelDistance());
            return afterItem.getPixelDistance();
        }

        // –õ–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è –∑–∞–ø–∏—Å—è–º–∏
        if (beforeItem != null && afterItem != null && !beforeItem.equals(afterItem)) {
            long timeDiff = afterItem.getTimestamp() - beforeItem.getTimestamp();
            double pixelDiff = afterItem.getPixelDistance() - beforeItem.getPixelDistance();
            long targetDiff = targetTimestamp - beforeItem.getTimestamp();

            double interpolatedPixel = beforeItem.getPixelDistance() + (pixelDiff * targetDiff / (double) timeDiff);

            log.trace("üéØ –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞: {} -> {} (–º–µ–∂–¥—É {} –∏ {})",
                    new Date(targetTimestamp), interpolatedPixel, beforeItem.getPixelDistance(), afterItem.getPixelDistance());

            return interpolatedPixel;
        }

        // Fallback: –±–ª–∏–∂–∞–π—à–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if (beforeItem != null) {
            log.trace("üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: {}", beforeItem.getPixelDistance());
            return beforeItem.getPixelDistance();
        }
        if (afterItem != null) {
            log.trace("üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: {}", afterItem.getPixelDistance());
            return afterItem.getPixelDistance();
        }

        log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞—Ç—å –ø–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ –¥–ª—è {}", new Date(targetTimestamp));
        return null;
    }

    /**
     * üéØ –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–∏—Ç –Ω–∞ —Ç–æ—á–Ω—ã–π —Ç–∞–π–º—à—Ç–∞–º–ø Z-Score
     */
    public Double interpolateProfit(List<ProfitHistoryItem> profitHistory, long targetTimestamp) {
        if (profitHistory == null || profitHistory.isEmpty()) {
            log.trace("üéØ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏—Ç–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ –Ω–∞ {}", new Date(targetTimestamp));
            return null;
        }

        // –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –∑–∞–ø–∏—Å–∏ –¥–æ –∏ –ø–æ—Å–ª–µ —Ü–µ–ª–µ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        ProfitHistoryItem beforeItem = null;
        ProfitHistoryItem afterItem = null;

        for (ProfitHistoryItem item : profitHistory) {
            if (item.getTimestamp() <= targetTimestamp) {
                if (beforeItem == null || item.getTimestamp() > beforeItem.getTimestamp()) {
                    beforeItem = item;
                }
            }
            if (item.getTimestamp() >= targetTimestamp) {
                if (afterItem == null || item.getTimestamp() < afterItem.getTimestamp()) {
                    afterItem = item;
                }
            }
        }

        // –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if (beforeItem != null && beforeItem.getTimestamp() == targetTimestamp) {
            log.trace("üéØ –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏—Ç–∞: {}%", beforeItem.getProfitPercent());
            return beforeItem.getProfitPercent();
        }
        if (afterItem != null && afterItem.getTimestamp() == targetTimestamp) {
            log.trace("üéØ –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏—Ç–∞: {}%", afterItem.getProfitPercent());
            return afterItem.getProfitPercent();
        }

        // –õ–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è –∑–∞–ø–∏—Å—è–º–∏
        if (beforeItem != null && afterItem != null && !beforeItem.equals(afterItem)) {
            long timeDiff = afterItem.getTimestamp() - beforeItem.getTimestamp();
            double profitDiff = afterItem.getProfitPercent() - beforeItem.getProfitPercent();
            long targetDiff = targetTimestamp - beforeItem.getTimestamp();

            double interpolatedProfit = beforeItem.getProfitPercent() + (profitDiff * targetDiff / (double) timeDiff);

            log.trace("üéØ –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –ø—Ä–æ—Ñ–∏—Ç–∞: {} -> {}% (–º–µ–∂–¥—É {}% –∏ {}%)",
                    new Date(targetTimestamp), interpolatedProfit, beforeItem.getProfitPercent(), afterItem.getProfitPercent());

            return interpolatedProfit;
        }

        // Fallback: –±–ª–∏–∂–∞–π—à–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if (beforeItem != null) {
            log.trace("üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–æ—Ñ–∏—Ç: {}%", beforeItem.getProfitPercent());
            return beforeItem.getProfitPercent();
        }
        if (afterItem != null) {
            log.trace("üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ—Ñ–∏—Ç: {}%", afterItem.getProfitPercent());
            return afterItem.getProfitPercent();
        }

        log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏—Ç –¥–ª—è {}", new Date(targetTimestamp));
        return null;
    }

    /**
     * üîç –ù–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à—É—é —Ü–µ–Ω—É –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–µ (–≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
     */
    public Double findNearestPrice(List<Date> timeAxis, List<Double> prices, long targetTimestamp) {
        if (timeAxis == null || prices == null || timeAxis.isEmpty() || prices.isEmpty()) {
            return null;
        }

        if (timeAxis.size() != prices.size()) {
            log.warn("‚ö†Ô∏è –†–∞–∑–º–µ—Ä—ã –≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ—Å–∏ –∏ —Ü–µ–Ω –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç: {} vs {}",
                    timeAxis.size(), prices.size());
            return null;
        }

        int bestIndex = 0;
        long bestDiff = Math.abs(timeAxis.get(0).getTime() - targetTimestamp);

        for (int i = 1; i < timeAxis.size(); i++) {
            long diff = Math.abs(timeAxis.get(i).getTime() - targetTimestamp);
            if (diff < bestDiff) {
                bestDiff = diff;
                bestIndex = i;
            }
        }

        Double result = prices.get(bestIndex);
        log.trace("üîç –ù–∞–π–¥–µ–Ω–∞ –±–ª–∏–∂–∞–π—à–∞—è —Ü–µ–Ω–∞ {} –¥–ª—è {}", result, new Date(targetTimestamp));
        return result;
    }
}