package com.example.core.services.chart;

import lombok.extern.slf4j.Slf4j;
import org.knowm.xchart.XYChart;
import org.knowm.xchart.XYSeries;
import org.knowm.xchart.style.markers.None;

import java.awt.*;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.OptionalInt;

/**
 * üõ†Ô∏è –£—Ç–∏–ª–∏—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ä—Ç–∞–º–∏
 * –°–æ–¥–µ—Ä–∂–∏—Ç –æ–±—â–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
 */
@Slf4j
public final class ChartUtils {

    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è —á–∞—Ä—Ç–æ–≤
    public static final int CHART_WIDTH = 1920;
    public static final int CHART_HEIGHT = 720;
    public static final int MAX_TIME_TICKS = 10;

    // –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    public static final Color ZSCORE_COLOR = Color.MAGENTA;
    public static final Color LONG_PRICE_COLOR = new Color(0, 255, 0, 120); // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –∑–µ–ª–µ–Ω—ã–π
    public static final Color SHORT_PRICE_COLOR = new Color(255, 0, 0, 120); // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –∫—Ä–∞—Å–Ω—ã–π
    public static final Color EMA_COLOR = Color.CYAN;
    public static final Color STOCHRSI_COLOR = Color.ORANGE;
    public static final Color PROFIT_COLOR = Color.ORANGE;
    public static final Color PIXEL_SPREAD_COLOR = new Color(128, 0, 128, 150); // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
    public static final Color ENTRY_POINT_COLOR = Color.BLUE;
    public static final Color ENTRY_POINT_APPROX_COLOR = Color.ORANGE;

    // –£—Ä–æ–≤–Ω–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π Z-Score
    public static final double[] ZSCORE_LEVELS = {-3.0, -2.0, -1.0, 0.0, 1.0, 2.0, 3.0};
    public static final Color[] ZSCORE_LEVEL_COLORS = {
            Color.BLUE, Color.RED, Color.GRAY, Color.BLACK, Color.GRAY, Color.RED, Color.BLUE
    };

    private ChartUtils() {
        // –£—Ç–∏–ª–∏—Ç–Ω—ã–π –∫–ª–∞—Å—Å - –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    }

    /**
     * üé® –ü—Ä–∏–º–µ–Ω—è–µ—Ç —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å –∫–æ –≤—Å–µ–º —á–∞—Ä—Ç–∞–º
     */
    public static void applyUnifiedChartStyle(XYChart chart, List<Date> timeAxis) {
        chart.getStyler().setLegendVisible(false);
        chart.getStyler().setDatePattern(getOptimalDatePattern(timeAxis));
        chart.getStyler().setXAxisTickMarkSpacingHint(Math.max(50, timeAxis.size() / MAX_TIME_TICKS));
        chart.getStyler().setDefaultSeriesRenderStyle(XYSeries.XYSeriesRenderStyle.Line);
        chart.getStyler().setYAxisTicksVisible(false);
        chart.getStyler().setYAxisTitleVisible(false);
        chart.getStyler().setXAxisTitleVisible(false); // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∏ "Time"

        log.trace("üé® –ü—Ä–∏–º–µ–Ω–µ–Ω —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å –∫ —á–∞—Ä—Ç—É —Å {} –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏", timeAxis.size());
    }

    /**
     * üìÖ –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
     */
    public static String getOptimalDatePattern(List<Date> timeAxis) {
        if (timeAxis == null || timeAxis.size() < 2) {
            return "dd.MM HH:mm";
        }

        try {
            long startTime = timeAxis.get(0).getTime();
            long endTime = timeAxis.get(timeAxis.size() - 1).getTime();
            long durationMs = endTime - startTime;

            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∞—Å—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            long durationHours = durationMs / (1000 * 60 * 60);

            log.debug("üìÖ –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {} —á–∞—Å–æ–≤ ({} - {})",
                    durationHours, timeAxis.get(0), timeAxis.get(timeAxis.size() - 1));

            // –í—ã–±–∏—Ä–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if (durationHours <= 24) {
                // –ú–µ–Ω—å—à–µ —Å—É—Ç–æ–∫ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
                return "HH:mm";
            } else if (durationHours <= 24 * 7) {
                // –ù–µ–¥–µ–ª—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è
                return "dd.MM HH:mm";
            } else if (durationHours <= 24 * 30) {
                // –ú–µ—Å—è—Ü - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–Ω—å –∏ –º–µ—Å—è—Ü
                return "dd.MM";
            } else if (durationHours <= 24 * 365) {
                // –ì–æ–¥ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–Ω—å –∏ –º–µ—Å—è—Ü
                return "dd.MM";
            } else {
                // –ë–æ–ª—å—à–µ –≥–æ–¥–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Å—è—Ü –∏ –≥–æ–¥
                return "MM.yyyy";
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –¥–∞—Ç—ã: {}", e.getMessage(), e);
            return "dd.MM HH:mm"; // –ü–∞—Ç—Ç–µ—Ä–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
    }

    /**
     * üìè –î–æ–±–∞–≤–ª—è–µ—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –Ω–∞ —á–∞—Ä—Ç
     */
    public static void addHorizontalLine(XYChart chart, List<Date> timeAxis, double yValue, Color color) {
        if (timeAxis.isEmpty()) {
            log.warn("‚ö†Ô∏è –ü—É—Å—Ç–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ—Å—å - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é {}", yValue);
            return;
        }

        List<Double> yLine = Arrays.asList(yValue, yValue);
        XYSeries line = chart.addSeries("level_" + yValue,
                Arrays.asList(timeAxis.get(0), timeAxis.get(timeAxis.size() - 1)), yLine);
        line.setLineColor(color);
        line.setMarker(new None());
        line.setLineStyle(new BasicStroke(2.5f));

        log.trace("üìè –î–æ–±–∞–≤–ª–µ–Ω–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è –Ω–∞ —É—Ä–æ–≤–Ω–µ {}", yValue);
    }

    /**
     * üìä –î–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ Z-Score
     */
    public static void addZScoreHorizontalLines(XYChart chart, List<Date> timeAxis) {
        for (int i = 0; i < ZSCORE_LEVELS.length; i++) {
            addHorizontalLine(chart, timeAxis, ZSCORE_LEVELS[i], ZSCORE_LEVEL_COLORS[i]);
        }
        log.debug("üìä –î–æ–±–∞–≤–ª–µ–Ω—ã –≤—Å–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ª–∏–Ω–∏–∏ Z-Score —É—Ä–æ–≤–Ω–µ–π");
    }

    /**
     * üîç –ù–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à–∏–π –∏–Ω–¥–µ–∫—Å –ø–æ —Ç–∞–π–º—à—Ç–∞–º–ø—É
     */
    public static OptionalInt findClosestIndex(List<Long> timestamps, long targetTimestamp) {
        if (timestamps.isEmpty()) {
            return OptionalInt.empty();
        }

        int bestIndex = 0;
        long bestDiff = Math.abs(timestamps.get(0) - targetTimestamp);

        for (int i = 1; i < timestamps.size(); i++) {
            long diff = Math.abs(timestamps.get(i) - targetTimestamp);
            if (diff < bestDiff) {
                bestDiff = diff;
                bestIndex = i;
            }
        }

        log.trace("üîç –ù–∞–π–¥–µ–Ω –±–ª–∏–∂–∞–π—à–∏–π –∏–Ω–¥–µ–∫—Å {} –¥–ª—è —Ç–∞–π–º—à—Ç–∞–º–ø–∞ {}", bestIndex, new Date(targetTimestamp));
        return OptionalInt.of(bestIndex);
    }

    /**
     * üìê –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∑–∞–¥–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
     */
    public static List<Double> normalizeValues(List<Double> values, double targetMin, double targetMax) {
        if (values.isEmpty()) {
            log.warn("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏");
            return values;
        }

        double sourceMin = values.stream().min(Double::compareTo).orElse(0.0);
        double sourceMax = values.stream().max(Double::compareTo).orElse(1.0);
        double sourceRange = sourceMax - sourceMin;
        double targetRange = targetMax - targetMin;

        if (sourceRange == 0) {
            log.debug("üìê –ò—Å—Ç–æ—á–Ω–∏–∫ –∏–º–µ–µ—Ç –Ω—É–ª–µ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —Ü–µ–ª–µ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞");
            double midValue = targetMin + targetRange / 2;
            return values.stream().map(v -> midValue).toList();
        }

        List<Double> normalized = values.stream()
                .map(value -> targetMin + ((value - sourceMin) / sourceRange) * targetRange)
                .toList();

        log.debug("üìê –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã {} –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [{}, {}] –≤ [{}, {}]",
                values.size(), sourceMin, sourceMax, targetMin, targetMax);

        return normalized;
    }

    /**
     * üéØ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–∏–∫—Å–µ–ª–∏ –¥–ª—è –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞
     */
    public static double convertValueToPixel(double value, double minValue, double maxValue, int chartHeight) {
        if (maxValue - minValue == 0) {
            return chartHeight / 2.0;
        }

        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω [0, 1]
        double normalized = (value - minValue) / (maxValue - minValue);

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø–∏–∫—Å–µ–ª–∏ (Y=0 –≤–≤–µ—Ä—Ö—É, Y=chartHeight –≤–Ω–∏–∑—É)
        return chartHeight - (normalized * chartHeight);
    }

    /**
     * üî¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Å–ø–∏—Å–∫–∞
     */
    public static int safeListSize(List<?> list) {
        return list != null ? list.size() : 0;
    }

    /**
     * ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —á–∞—Ä—Ç–∞
     */
    public static boolean isValidChartData(List<?> timeAxis, List<?> values) {
        if (timeAxis == null || values == null || timeAxis.isEmpty() || values.isEmpty()) {
            log.warn("‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —á–∞—Ä—Ç–∞: timeAxis={}, values={}",
                    safeListSize(timeAxis), safeListSize(values));
            return false;
        }

        if (timeAxis.size() != values.size()) {
            log.warn("‚ö†Ô∏è –†–∞–∑–º–µ—Ä—ã –≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ—Å–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç: {} vs {}",
                    timeAxis.size(), values.size());
            return false;
        }

        return true;
    }
}