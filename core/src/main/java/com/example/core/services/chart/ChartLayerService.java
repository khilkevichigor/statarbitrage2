package com.example.core.services.chart;

import com.example.shared.dto.PixelSpreadHistoryItem;
import com.example.shared.dto.ProfitHistoryItem;
import com.example.shared.dto.ZScoreParam;
import com.example.shared.models.Pair;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.knowm.xchart.XYChart;
import org.knowm.xchart.XYSeries;
import org.knowm.xchart.style.markers.None;
import org.knowm.xchart.style.markers.SeriesMarkers;
import org.springframework.stereotype.Service;

import java.awt.*;
import java.util.List;
import java.util.*;

/**
 * üé® –°–µ—Ä–≤–∏—Å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–µ–≤ –Ω–∞ —á–∞—Ä—Ç—ã
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω, –ø—Ä–æ—Ñ–∏—Ç–∞, –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class ChartLayerService {

    private final InterpolationService interpolationService;

    /**
     * üí∞ –î–æ–±–∞–≤–ª—è–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç –Ω–∞ Z-Score —á–∞—Ä—Ç
     */
    public void addSynchronizedProfitToChart(XYChart chart, Pair tradingPair) {
        List<ProfitHistoryItem> profitHistory = tradingPair.getProfitHistory();
        List<ZScoreParam> zScoreHistory = tradingPair.getZScoreHistory();

        log.info("üéØ addSynchronizedProfitToChart –¥–ª—è –ø–∞—Ä—ã {}: profitHistory={} —Ç–æ—á–µ–∫, zScoreHistory={} —Ç–æ—á–µ–∫", 
                tradingPair.getPairName(), 
                profitHistory != null ? profitHistory.size() : "null",
                zScoreHistory != null ? zScoreHistory.size() : "null");

        if (profitHistory != null && !profitHistory.isEmpty()) {
            log.info("üìä –ü–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ—á–µ–∫ –ø—Ä–æ—Ñ–∏—Ç–∞: {}", 
                    profitHistory.stream().limit(3).map(item -> 
                            String.format("%.2f%% –≤ %s", item.getProfitPercent(), new java.util.Date(item.getTimestamp()))
                    ).toList());
        }

        if (profitHistory == null || profitHistory.isEmpty()) {
            log.debug("üìä –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Ñ–∏—Ç–∞ –ø—É—Å—Ç–∞ –¥–ª—è –ø–∞—Ä—ã {}, –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ—Ñ–∏—Ç–∞ –Ω–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω.",
                    tradingPair.getPairName());
            return;
        }

        if (zScoreHistory == null || zScoreHistory.isEmpty()) {
            log.warn("‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è Z-Score –ø—É—Å—Ç–∞ - –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏—Ç");
            addFallbackProfitToChart(chart, profitHistory);
            return;
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        profitHistory.sort(Comparator.comparing(ProfitHistoryItem::getTimestamp));

        // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ Z-Score –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        List<Long> zScoreTimestamps = zScoreHistory.stream()
                .map(ZScoreParam::getTimestamp)
                .toList();
        List<Date> zScoreTimeAxis = zScoreTimestamps.stream().map(Date::new).toList();

        log.info("üéØ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏—Ç —Å—Ç—Ä–æ–≥–æ –ø–æ Z-Score —Ç–∞–π–º—à—Ç–∞–º–ø–∞–º: {} —Ç–æ—á–µ–∫", zScoreTimestamps.size());

        // –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏—Ç –Ω–∞ —Ç–æ—á–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ Z-Score —Å carry-forward —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π
        List<Double> interpolatedProfitValues = new ArrayList<>();
        Double lastKnownValue = 0.0; // –ù–∞—á–∏–Ω–∞–µ–º —Å 0 –¥–æ –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏
        
        // –ù–∞—Ö–æ–¥–∏–º –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Ñ–∏—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        long firstProfitTimestamp = profitHistory.get(0).getTimestamp();
        
        for (Long zTimestamp : zScoreTimestamps) {
            Double profitValue = interpolationService.interpolateProfit(profitHistory, zTimestamp);
            
            if (profitValue != null) {
                // –ï—Å—Ç—å –¥–∞–Ω–Ω—ã–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
                lastKnownValue = profitValue;
                interpolatedProfitValues.add(profitValue);
            } else {
                // –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö - –ø—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
                if (zTimestamp < firstProfitTimestamp) {
                    // –î–æ –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Ñ–∏—Ç–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º 0
                    interpolatedProfitValues.add(0.0);
                } else {
                    // –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (carry forward)
                    interpolatedProfitValues.add(lastKnownValue);
                }
            }
        }

        log.info("‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –ò–î–ï–ê–õ–¨–ù–û —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç: {} —Ç–æ—á–µ–∫", interpolatedProfitValues.size());
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        long nonZeroCount = interpolatedProfitValues.stream().mapToLong(v -> v != 0.0 ? 1 : 0).sum();
        double minValue = interpolatedProfitValues.stream().mapToDouble(v -> v).min().orElse(0.0);
        double maxValue = interpolatedProfitValues.stream().mapToDouble(v -> v).max().orElse(0.0);
        
        log.info("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏—Ç–∞: {} –Ω–µ–Ω—É–ª–µ–≤—ã—Ö –∏–∑ {}, –¥–∏–∞–ø–∞–∑–æ–Ω [{:.2f}% - {:.2f}%]",
                nonZeroCount, interpolatedProfitValues.size(), minValue, maxValue);

        addProfitSeriesToChart(chart, zScoreTimeAxis, interpolatedProfitValues);
    }

    /**
     * üîÑ Fallback –º–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏—Ç–∞ –±–µ–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
     */
    private void addFallbackProfitToChart(XYChart chart, List<ProfitHistoryItem> profitHistory) {
        List<Date> profitTimeAxis = profitHistory.stream()
                .map(p -> new Date(p.getTimestamp()))
                .toList();
        List<Double> profitValues = profitHistory.stream()
                .map(ProfitHistoryItem::getProfitPercent)
                .toList();

        addProfitSeriesToChart(chart, profitTimeAxis, profitValues);
    }

    /**
     * üìä –î–æ–±–∞–≤–ª—è–µ—Ç —Å–µ—Ä–∏—é –ø—Ä–æ—Ñ–∏—Ç–∞ –Ω–∞ —á–∞—Ä—Ç
     */
    private void addProfitSeriesToChart(XYChart chart, List<Date> timeAxis, List<Double> profitValues) {
        if (!ChartUtils.isValidChartData(timeAxis, profitValues)) {
            log.warn("‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —á–∞—Ä—Ç");
            return;
        }

        XYSeries profitSeries = chart.addSeries("Profit % (sync)", timeAxis, profitValues);
        profitSeries.setYAxisGroup(1);
        profitSeries.setLineColor(ChartUtils.PROFIT_COLOR);
        profitSeries.setMarker(new None());
        profitSeries.setLineStyle(new BasicStroke(2.0f));

        // –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç–æ—á–∫–∞ –ø—Ä–æ—Ñ–∏—Ç–∞
        if (!timeAxis.isEmpty() && !profitValues.isEmpty()) {
            Date lastTime = timeAxis.get(timeAxis.size() - 1);
            Double lastValue = profitValues.get(profitValues.size() - 1);

            XYSeries lastPointSeries = chart.addSeries("Last Profit Point (sync)",
                    Collections.singletonList(lastTime),
                    Collections.singletonList(lastValue));
            lastPointSeries.setYAxisGroup(1);
            lastPointSeries.setMarker(SeriesMarkers.CIRCLE);
            lastPointSeries.setMarkerColor(Color.RED);
        }

        chart.setYAxisGroupTitle(1, "Profit %");
        log.debug("üéØ –ò–î–ï–ê–õ–¨–ù–û —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —á–∞—Ä—Ç!");
    }

    /**
     * üìà –î–æ–±–∞–≤–ª—è–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ —á–∞—Ä—Ç —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ç–æ—á–∫–æ–π –≤—Ö–æ–¥–∞
     * @param chart —á–∞—Ä—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
     * @param tradingPair —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
     * @param useNormalizedDisplay true - –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–µ–∫—Ü–∏–∏ —Ü–µ–Ω, false - –Ω–∞–ª–æ–∂–µ–Ω–∏–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω Z-Score
     * @param showEntryPoint true - –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞ –ø–æ—Å–ª–µ –¥–∞–Ω–Ω—ã—Ö
     */
    public void addSynchronizedPricesToChart(XYChart chart, Pair tradingPair, boolean useNormalizedDisplay, boolean showEntryPoint) {
        String longTicker = tradingPair.getLongTicker();
        String shortTicker = tradingPair.getShortTicker();

        var longCandles = tradingPair.getLongTickerCandles();
        var shortCandles = tradingPair.getShortTickerCandles();
        List<ZScoreParam> history = tradingPair.getZScoreHistory();

        if (longCandles == null || shortCandles == null || longCandles.isEmpty() || shortCandles.isEmpty()) {
            log.warn("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–Ω –Ω–∞ —á–∞—Ä—Ç: longCandles={}, shortCandles={}",
                    ChartUtils.safeListSize(longCandles), ChartUtils.safeListSize(shortCandles));
            return;
        }

        if (history == null || history.isEmpty()) {
            log.warn("‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è Z-Score –ø—É—Å—Ç–∞ - –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—ã");
            return;
        }

        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        longCandles.sort(Comparator.comparing(candle -> candle.getTimestamp()));
        shortCandles.sort(Comparator.comparing(candle -> candle.getTimestamp()));

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ Z-Score –∫–∞–∫ –æ—Å–Ω–æ–≤—É
        List<Long> zScoreTimestamps = history.stream()
                .map(ZScoreParam::getTimestamp)
                .toList();
        List<Date> zScoreTimeAxis = zScoreTimestamps.stream().map(Date::new).toList();

        log.info("üéØ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ü–µ–Ω—ã —Å—Ç—Ä–æ–≥–æ –ø–æ Z-Score —Ç–∞–π–º—à—Ç–∞–º–ø–∞–º: {} —Ç–æ—á–µ–∫", zScoreTimestamps.size());

        // –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º —Ü–µ–Ω—ã –Ω–∞ —Ç–æ—á–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ Z-Score
        List<Double> interpolatedLongPrices = interpolatePricesForTimestamps(longCandles, zScoreTimestamps);
        List<Double> interpolatedShortPrices = interpolatePricesForTimestamps(shortCandles, zScoreTimestamps);

        List<Double> finalLongPrices;
        List<Double> finalShortPrices;
        String displayMode;

        if (useNormalizedDisplay) {
            // –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–µ–∫—Ü–∏–∏ —Ü–µ–Ω - –ø—Ä–∏–≤–æ–¥–∏–º –∫ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            finalLongPrices = normalizeToPercentageChanges(interpolatedLongPrices);
            finalShortPrices = normalizeToPercentageChanges(interpolatedShortPrices);
            displayMode = "normalized %";
        } else {
            // –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ –Ω–∞–ª–æ–∂–µ–Ω–∏–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω Z-Score –¥–ª—è —Å–µ–∫—Ü–∏–∏ Z-Score
            double minZScore = history.stream().mapToDouble(ZScoreParam::getZscore).min().orElse(-3.0);
            double maxZScore = history.stream().mapToDouble(ZScoreParam::getZscore).max().orElse(3.0);

            finalLongPrices = ChartUtils.normalizeValues(interpolatedLongPrices, minZScore, maxZScore);
            finalShortPrices = ChartUtils.normalizeValues(interpolatedShortPrices, minZScore, maxZScore);
            displayMode = "z-score overlay";
        }

        log.info("‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –ò–î–ï–ê–õ–¨–ù–û —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã ({}): {} —Ç–æ—á–µ–∫", 
                displayMode, finalLongPrices.size());

        // –í—ã–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        Color longColor = useNormalizedDisplay ? ChartUtils.LONG_PRICE_NORMALIZED_COLOR : ChartUtils.LONG_PRICE_COLOR;
        Color shortColor = useNormalizedDisplay ? ChartUtils.SHORT_PRICE_NORMALIZED_COLOR : ChartUtils.SHORT_PRICE_COLOR;

        // –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏–∏ —Ü–µ–Ω
        addPriceSeries(chart, "LONG " + longTicker + " (" + displayMode + ")", zScoreTimeAxis, finalLongPrices, longColor);
        addPriceSeries(chart, "SHORT " + shortTicker + " (" + displayMode + ")", zScoreTimeAxis, finalShortPrices, shortColor);

        log.debug("üéØ –ò–î–ï–ê–õ–¨–ù–û —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã (—Ä–µ–∂–∏–º: {})!", displayMode);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞ –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
        if (showEntryPoint && useNormalizedDisplay) {
            addEntryPointToNormalizedChart(chart, tradingPair, zScoreTimeAxis, finalLongPrices, finalShortPrices);
        }
    }

    /**
     * üìä –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ü–µ–Ω—ã –∫ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏—è–º –æ—Ç –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ—á–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ü–µ–Ω –±–µ–∑ –Ω–∞–ª–æ–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
     */
    private List<Double> normalizeToPercentageChanges(List<Double> prices) {
        if (prices.isEmpty()) {
            log.warn("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ü–µ–Ω –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏");
            return prices;
        }

        double basePrice = prices.get(0);
        if (basePrice == 0) {
            log.warn("‚ö†Ô∏è –ù—É–ª–µ–≤–∞—è –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ");
            return prices;
        }

        List<Double> normalizedPrices = prices.stream()
                .map(price -> ((price - basePrice) / basePrice) * 100.0)
                .toList();

        log.debug("üìä –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–Ω: –±–∞–∑–∞={}, –¥–∏–∞–ø–∞–∑–æ–Ω –∏–∑–º–µ–Ω–µ–Ω–∏–π [{}, {}]%",
                basePrice,
                normalizedPrices.stream().min(Double::compareTo).orElse(0.0),
                normalizedPrices.stream().max(Double::compareTo).orElse(0.0));

        return normalizedPrices;
    }

    /**
     * üîÑ –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ—Ç —Ü–µ–Ω—ã –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ç–∞–π–º—à—Ç–∞–º–ø–æ–≤
     */
    private List<Double> interpolatePricesForTimestamps(List<?> candles, List<Long> timestamps) {
        List<Double> result = new ArrayList<>();
        for (Long timestamp : timestamps) {
            Double price = interpolationService.interpolatePrice((List) candles, timestamp);
            result.add(price != null ? price : 0.0);
        }
        return result;
    }

    /**
     * üìä –î–æ–±–∞–≤–ª—è–µ—Ç —Å–µ—Ä–∏—é —Ü–µ–Ω –Ω–∞ —á–∞—Ä—Ç
     */
    private void addPriceSeries(XYChart chart, String seriesName, List<Date> timeAxis,
                                List<Double> prices, Color color) {
        XYSeries priceSeries = chart.addSeries(seriesName, timeAxis, prices);
        priceSeries.setLineColor(color);
        priceSeries.setMarker(new None());
        
        // –î–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Ç–æ–ª—Å—Ç—ã–µ –ª–∏–Ω–∏–∏
        boolean isNormalizedMode = seriesName.contains("normalized %");
        float lineWidth = isNormalizedMode ? 2.5f : 1.5f;
        priceSeries.setLineStyle(new BasicStroke(lineWidth));
    }

    /**
     * üéØ –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞ –Ω–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —á–∞—Ä—Ç —Ü–µ–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     */
    private void addEntryPointToNormalizedChart(XYChart chart, Pair tradingPair, List<Date> timeAxis, 
                                                List<Double> longPrices, List<Double> shortPrices) {
        long entryTimestamp = getEntryTimestamp(tradingPair);

        if (entryTimestamp <= 0) {
            log.debug("‚ö†Ô∏è –í—Ä–µ–º—è –≤—Ö–æ–¥–∞ –Ω–µ –∑–∞–¥–∞–Ω–æ (0) - –ª–∏–Ω–∏—è –≤—Ö–æ–¥–∞ –Ω–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∞");
            return;
        }

        long historyStart = timeAxis.get(0).getTime();
        long historyEnd = timeAxis.get(timeAxis.size() - 1).getTime();

        log.debug("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–Ω–∏–∏ –≤—Ö–æ–¥–∞ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —á–∞—Ä—Ç–∞: entryTime={}, historyStart={}, historyEnd={}",
                new Date(entryTimestamp), new Date(historyStart), new Date(historyEnd));

        Date entryDate;
        String seriesName;
        Color color;

        boolean inRange = entryTimestamp >= historyStart && entryTimestamp <= historyEnd;

        if (inRange) {
            entryDate = new Date(entryTimestamp);
            seriesName = "Entry";
            color = ChartUtils.ENTRY_POINT_COLOR;
            log.debug("üéØ –í—Ä–µ–º—è –≤—Ö–æ–¥–∞ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω –∏—Å—Ç–æ—Ä–∏–∏ - —Ä–∏—Å—É–µ–º —Ç–æ—á–Ω—É—é –ª–∏–Ω–∏—é –≤—Ö–æ–¥–∞");
        } else {
            if (entryTimestamp < historyStart) {
                entryDate = new Date(historyStart);
                log.debug("üìç –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–∏–Ω–∏—é –≤—Ö–æ–¥–∞ –≤ –Ω–∞—á–∞–ª–µ –≥—Ä–∞—Ñ–∏–∫–∞");
            } else {
                entryDate = new Date(historyEnd);
                log.debug("üìç –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–∏–Ω–∏—é –≤—Ö–æ–¥–∞ –≤ –∫–æ–Ω—Ü–µ –≥—Ä–∞—Ñ–∏–∫–∞");
            }
            seriesName = "Entry (approx)";
            color = ChartUtils.ENTRY_POINT_APPROX_COLOR;
        }

        // –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        List<Double> allPrices = new ArrayList<>();
        allPrices.addAll(longPrices);
        allPrices.addAll(shortPrices);
        
        double minPrice = allPrices.stream().min(Double::compareTo).orElse(-10.0);
        double maxPrice = allPrices.stream().max(Double::compareTo).orElse(10.0);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
        double padding = (maxPrice - minPrice) * 0.05;
        double lineMinY = minPrice - padding;
        double lineMaxY = maxPrice + padding;

        // –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –≤—Ö–æ–¥–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º
        List<Date> lineX = Arrays.asList(entryDate, entryDate);
        List<Double> lineY = Arrays.asList(lineMinY, lineMaxY);

        XYSeries entryLine = chart.addSeries(seriesName, lineX, lineY);
        entryLine.setLineColor(color);
        entryLine.setMarker(new None());
        entryLine.setLineStyle(new BasicStroke(1.5f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL,
                0, new float[]{6f, 4f}, 0));

        log.debug("‚úÖ –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è –≤—Ö–æ–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —á–∞—Ä—Ç (–¥–∏–∞–ø–∞–∑–æ–Ω: {} - {})", 
                lineMinY, lineMaxY);
    }

    /**
     * üïê –ü–æ–ª—É—á–∞–µ—Ç —Ç–∞–π–º—à—Ç–∞–º–ø –≤—Ö–æ–¥–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
     */
    private long getEntryTimestamp(Pair tradingPair) {
        if (tradingPair.getEntryTime() != null) {
            return tradingPair.getEntryTime().atZone(java.time.ZoneId.systemDefault()).toInstant().toEpochMilli();
        }
        if (tradingPair.getTimestamp() != null) {
            return tradingPair.getTimestamp();
        }
        return System.currentTimeMillis();
    }
}