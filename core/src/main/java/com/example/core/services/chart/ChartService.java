package com.example.core.services.chart;

import com.example.core.services.PixelSpreadService;
import com.example.shared.dto.ZScoreParam;
import com.example.shared.models.Pair;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.knowm.xchart.BitmapEncoder;
import org.knowm.xchart.XYChart;
import org.springframework.stereotype.Service;

import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * üé® –†–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
 * <p>
 * –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
 * - ChartUtils: –û–±—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
 * - InterpolationService: –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 * - TechnicalIndicatorService: –†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
 * - ZScoreChartBuilder: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö Z-Score —á–∞—Ä—Ç–æ–≤
 * - ChartLayerService: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–µ–≤
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class ChartService {

    private final ZScoreChartBuilder zScoreChartBuilder;
    private final ChartLayerService chartLayerService;
    private final InterpolationService interpolationService;
    private final PixelSpreadService pixelSpreadService;
    private final VerticalChartBuilder verticalChartBuilder;

    /**
     * üéØ –°–æ–∑–¥–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π Z-Score –≥—Ä–∞—Ñ–∏–∫ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –∏ —Å–ª–æ—è–º–∏
     *
     * @param tradingPair       –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
     * @param showEma           –ü–æ–∫–∞–∑–∞—Ç—å EMA –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
     * @param emaPeriod         –ü–µ—Ä–∏–æ–¥ EMA
     * @param showStochRsi      –ü–æ–∫–∞–∑–∞—Ç—å StochRSI –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
     * @param showProfit        –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ—Ñ–∏—Ç–∞
     * @param showCombinedPrice –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–ª–æ–∂–µ–Ω–Ω—ã–µ —Ü–µ–Ω—ã
     * @param showPixelSpread   –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥
     * @param showEntryPoint    –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞
     * @return –ì–æ—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
     */
    public BufferedImage createZScoreChart(Pair tradingPair, boolean showEma, int emaPeriod,
                                           boolean showStochRsi, boolean showProfit,
                                           boolean showCombinedPrice, boolean showPixelSpread,
                                           boolean showEntryPoint) {

        log.debug("üé® –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ Z-Score –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –ø–∞—Ä—ã: {} " +
                        "(EMA: {}, –ø–µ—Ä–∏–æ–¥: {}, StochRSI: {}, Profit: {}, CombinedPrice: {}, PixelSpread: {}, EntryPoint: {})",
                tradingPair.getPairName(), showEma, emaPeriod, showStochRsi, showProfit,
                showCombinedPrice, showPixelSpread, showEntryPoint);

        XYChart chart = buildEnhancedZScoreChart(tradingPair, showEma, emaPeriod, showStochRsi,
                showProfit, showCombinedPrice, showPixelSpread, showEntryPoint);

        BufferedImage result = BitmapEncoder.getBufferedImage(chart);
        log.debug("‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π Z-Score –≥—Ä–∞—Ñ–∏–∫ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–∞—Ä—ã {}", tradingPair.getPairName());

        return result;
    }

    /**
     * üèóÔ∏è –°—Ç—Ä–æ–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π Z-Score –≥—Ä–∞—Ñ–∏–∫ —Å –≤—Å–µ–º–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—è–º–∏
     */
    private XYChart buildEnhancedZScoreChart(Pair tradingPair, boolean showEma, int emaPeriod,
                                             boolean showStochRsi, boolean showProfit,
                                             boolean showCombinedPrice, boolean showPixelSpread,
                                             boolean showEntryPoint) {

        // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π Z-Score –≥—Ä–∞—Ñ–∏–∫
        XYChart chart = zScoreChartBuilder.buildBasicZScoreChart(tradingPair, showEntryPoint);

        List<ZScoreParam> history = tradingPair.getZScoreHistory();
        if (history.isEmpty()) {
            log.warn("‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è Z-Score –ø—É—Å—Ç–∞ - –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã");
            return chart;
        }

        // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–µ–≤
        List<Date> timeAxis = history.stream()
                .map(param -> new Date(param.getTimestamp()))
                .toList();
        List<Double> zScores = history.stream()
                .map(ZScoreParam::getZscore)
                .toList();

        log.debug("üìä –ë–∞–∑–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å–æ–∑–¥–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–∏...");

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (–æ–Ω–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ Z-Score)
        if (showEma && zScores.size() >= emaPeriod) {
            log.debug("üìà –î–æ–±–∞–≤–ª—è–µ–º EMA({}) –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä", emaPeriod);
            chartLayerService.addEmaToChart(chart, timeAxis, zScores, emaPeriod);
        }

        if (showStochRsi && zScores.size() >= 14) {
            log.debug("üåä –î–æ–±–∞–≤–ª—è–µ–º StochRSI –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä");
            chartLayerService.addStochRsiToChart(chart, timeAxis, zScores);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–∏ –¥–∞–Ω–Ω—ã—Ö (–æ–Ω–∏ –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É—é—Ç—Å—è –Ω–∞ Z-Score –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏)
        if (showProfit) {
            log.debug("üí∞ –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç");
            chartLayerService.addSynchronizedProfitToChart(chart, tradingPair);
        }

        if (showCombinedPrice) {
            log.debug("üìà –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã");
            chartLayerService.addSynchronizedPricesToChart(chart, tradingPair);
        }

        if (showPixelSpread) {
            log.debug("üü£ –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥");
            chartLayerService.addSynchronizedPixelSpreadToChart(chart, tradingPair);
        }

        log.debug("‚úÖ –í—Å–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞ –≥—Ä–∞—Ñ–∏–∫");
        return chart;
    }

    /**
     * üìä –°–æ–∑–¥–∞–µ—Ç Price —á–∞—Ä—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å Z-Score –ø–µ—Ä–∏–æ–¥–æ–º
     * –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º API
     */
    public BufferedImage createPriceChart(Pair tradingPair) {
        log.debug("üìä –°–æ–∑–¥–∞–Ω–∏–µ Price –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –ø–∞—Ä—ã: {}", tradingPair.getPairName());

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ä—Ç–∞ —Ç–æ–ª—å–∫–æ —Å —Ü–µ–Ω–∞–º–∏
        return createZScoreChart(tradingPair, false, 0, false, false, true, false, false);
    }

    /**
     * üìä –°–æ–∑–¥–∞–µ—Ç Price —á–∞—Ä—Ç —Å –ø—Ä–æ—Ñ–∏—Ç–æ–º
     * –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º API
     */
    public BufferedImage createPriceChartWithProfit(Pair tradingPair) {
        log.debug("üìä –°–æ–∑–¥–∞–Ω–∏–µ Price –≥—Ä–∞—Ñ–∏–∫–∞ —Å –ø—Ä–æ—Ñ–∏—Ç–æ–º –¥–ª—è –ø–∞—Ä—ã: {}", tradingPair.getPairName());

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ä—Ç–∞ —Å —Ü–µ–Ω–∞–º–∏ –∏ –ø—Ä–æ—Ñ–∏—Ç–æ–º
        return createZScoreChart(tradingPair, false, 0, false, true, true, false, false);
    }

    /**
     * üìä –°–æ–∑–¥–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Price —á–∞—Ä—Ç
     * –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º API
     */
    public BufferedImage createSynchronizedPriceChart(Pair tradingPair) {
        log.debug("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ Price –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –ø–∞—Ä—ã: {}", tradingPair.getPairName());

        // –ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        return createPriceChart(tradingPair);
    }

    /**
     * üìä –°–æ–∑–¥–∞–µ—Ç –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–∞—Ä—Ç (Z-Score + —Ü–µ–Ω—ã + –ø–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥)
     * –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º API
     */
    public BufferedImage createCombinedChart(Pair tradingPair) {
        log.debug("üìä –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –ø–∞—Ä—ã: {}", tradingPair.getPairName());

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —á–∞—Ä—Ç–∞
        return createZScoreChart(tradingPair, false, 0, false, false, true, true, true);
    }

    /**
     * üü£ –°–æ–∑–¥–∞–µ—Ç Pixel Spread —á–∞—Ä—Ç
     * –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º API
     */
    public BufferedImage createPixelSpreadChart(Pair tradingPair) {
        log.debug("üü£ –°–æ–∑–¥–∞–Ω–∏–µ Pixel Spread –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –ø–∞—Ä—ã: {}", tradingPair.getPairName());

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ä—Ç–∞ —Ç–æ–ª—å–∫–æ —Å –ø–∏–∫—Å–µ–ª—å–Ω—ã–º —Å–ø—Ä–µ–¥–æ–º
        return createZScoreChart(tradingPair, false, 0, false, false, false, true, false);
    }

    /**
     * üü£ –°–æ–∑–¥–∞–µ—Ç Pixel Spread —á–∞—Ä—Ç —Å –ø—Ä–æ—Ñ–∏—Ç–æ–º
     * –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º API
     */
    public BufferedImage createPixelSpreadChartWithProfit(Pair tradingPair) {
        log.debug("üü£ –°–æ–∑–¥–∞–Ω–∏–µ Pixel Spread –≥—Ä–∞—Ñ–∏–∫–∞ —Å –ø—Ä–æ—Ñ–∏—Ç–æ–º –¥–ª—è –ø–∞—Ä—ã: {}", tradingPair.getPairName());

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ä—Ç–∞ —Å –ø–∏–∫—Å–µ–ª—å–Ω—ã–º —Å–ø—Ä–µ–¥–æ–º –∏ –ø—Ä–æ—Ñ–∏—Ç–æ–º
        return createZScoreChart(tradingPair, false, 0, false, true, false, true, false);
    }


    /**
     * üèóÔ∏è –£–ü–†–û–©–ï–ù–ù–´–ô –ú–ï–¢–û–î: –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —á–∞—Ä—Ç —Å–æ –í–°–ï–ú–ò —Å–µ–∫—Ü–∏—è–º–∏
     * üéØ –£–ü–†–û–©–ï–ù–ò–ï: –ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–∏—Ö —á–µ–∫–±–æ–∫—Å–æ–≤! –í—Å–µ —Å–µ–∫—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤—Å–µ–≥–¥–∞!
     *
     * @param tradingPair    –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
     * @param showEntryPoint –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –Ω–∞ –≤—Å–µ—Ö —Å–µ–∫—Ü–∏—è—Ö
     * @return –ì–æ—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ü–û–õ–ù–û–ì–û –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ —á–∞—Ä—Ç–∞
     */
    public BufferedImage createVerticalChart(Pair tradingPair, boolean showEntryPoint) {

        log.debug("üèóÔ∏è –£–ü–†–û–©–ï–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ –ü–û–õ–ù–û–ì–û –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ —á–∞—Ä—Ç–∞ –¥–ª—è –ø–∞—Ä—ã: {} (EntryPoint: {})",
                tradingPair.getPairName(), showEntryPoint);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π VerticalChartBuilder —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º API
        BufferedImage result = verticalChartBuilder.createVerticalChart(tradingPair, showEntryPoint);

        log.debug("‚úÖ –ü–û–õ–ù–´–ô –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —á–∞—Ä—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–∞—Ä—ã {}", tradingPair.getPairName());
        return result;
    }

    /**
     * üîç –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à—É—é —Ü–µ–Ω—É –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–µ
     * –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º API
     */
    public Double findNearestPrice(List<Date> timeAxis, List<Double> prices, long targetTimestamp) {
        return interpolationService.findNearestPrice(timeAxis, prices, targetTimestamp);
    }

    /**
     * üìÅ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–∞—Ä—Ç –≤ —Ñ–∞–π–ª (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º API)
     */
    public void saveChartToFile(BufferedImage chartImage, String filename) {
        try {
            // –õ–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ - –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–Ω–µ—Å–µ–Ω–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å
            log.debug("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ —Ñ–∞–π–ª: {}", filename);
            // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ —Ñ–∞–π–ª {}: {}", filename, e.getMessage(), e);
        }
    }

    /**
     * üü£ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
     * –î–µ–ª–µ–≥–∏—Ä—É–µ—Ç –≤—ã–∑–æ–≤ –∫ PixelSpreadService –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ API
     */
    public void calculatePixelSpreadIfNeeded(Pair tradingPair) {
        pixelSpreadService.calculatePixelSpreadIfNeeded(tradingPair);
    }

    /**
     * üü£ –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â—É—é —Ç–æ—á–∫—É –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞
     * –î–µ–ª–µ–≥–∏—Ä—É–µ—Ç –≤—ã–∑–æ–≤ –∫ PixelSpreadService –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ API
     */
    public void addCurrentPixelSpreadPoint(Pair tradingPair) {
        pixelSpreadService.addCurrentPixelSpreadPoint(tradingPair);
    }

    /**
     * üìä –°–æ–∑–¥–∞–µ—Ç Price —á–∞—Ä—Ç —Å –ø—Ä–æ—Ñ–∏—Ç–æ–º (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
     * –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º API
     */
    public BufferedImage createPriceChartWithProfit(Pair tradingPair, boolean showEma, boolean showStochRsi, boolean showEntryPoint) {
        log.debug("üìä –°–æ–∑–¥–∞–Ω–∏–µ Price –≥—Ä–∞—Ñ–∏–∫–∞ —Å –ø—Ä–æ—Ñ–∏—Ç–æ–º –¥–ª—è –ø–∞—Ä—ã: {} (EMA: {}, StochRSI: {}, EntryPoint: {})",
                tradingPair.getPairName(), showEma, showStochRsi, showEntryPoint);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        return createZScoreChart(tradingPair, showEma, 14, showStochRsi, true, true, false, showEntryPoint);
    }

    /**
     * üü£ –°–æ–∑–¥–∞–µ—Ç Pixel Spread —á–∞—Ä—Ç —Å –ø—Ä–æ—Ñ–∏—Ç–æ–º (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
     * –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º API
     */
    public BufferedImage createPixelSpreadChartWithProfit(Pair tradingPair, boolean showProfit, boolean showEntryPoint) {
        log.debug("üü£ –°–æ–∑–¥–∞–Ω–∏–µ Pixel Spread –≥—Ä–∞—Ñ–∏–∫–∞ —Å –ø—Ä–æ—Ñ–∏—Ç–æ–º –¥–ª—è –ø–∞—Ä—ã: {} (Profit: {}, EntryPoint: {})",
                tradingPair.getPairName(), showProfit, showEntryPoint);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
        return createZScoreChart(tradingPair, false, 0, false, showProfit, false, true, showEntryPoint);
    }

    /**
     * üìä –°–æ–∑–¥–∞–µ—Ç –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–∞—Ä—Ç (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
     * –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º API
     */
    public BufferedImage createCombinedChart(Pair tradingPair, boolean showEma, boolean showStochRsi,
                                             boolean showProfit, boolean showEntryPoint, int emaPeriod,
                                             boolean showCombinedPrice, boolean showPixelSpread, boolean detailed) {
        log.debug("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –ø–∞—Ä—ã: {} " +
                        "(EMA: {}, StochRSI: {}, Profit: {}, Entry: {}, Period: {}, Prices: {}, PixelSpread: {}, Detailed: {})",
                tradingPair.getPairName(), showEma, showStochRsi, showProfit, showEntryPoint,
                emaPeriod, showCombinedPrice, showPixelSpread, detailed);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å–æ –≤—Å–µ–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        return createZScoreChart(tradingPair, showEma, emaPeriod, showStochRsi, showProfit,
                showCombinedPrice, showPixelSpread, showEntryPoint);
    }


}