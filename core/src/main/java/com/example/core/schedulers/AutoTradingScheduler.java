package com.example.core.schedulers;

import com.example.core.processors.FetchPairsProcessor;
import com.example.core.processors.StartNewTradeProcessor;
import com.example.core.services.SchedulerControlService;
import com.example.core.services.SettingsService;
import com.example.core.trading.services.OkxPortfolioManager;
import com.example.shared.dto.FetchPairsRequest;
import com.example.shared.dto.StartNewTradeRequest;
import com.example.shared.enums.TradeStatus;
import com.example.shared.models.Pair;
import com.example.shared.models.Settings;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.time.LocalDateTime;
import java.util.List;

/**
 * ü§ñ –®–µ–¥—É–ª–ª–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ö–æ—Ä–æ—à–∏–µ –ø–∞—Ä—ã –∏–∑ —Ç–∞–±–ª–∏—Ü "–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–∞—Ä—ã" –∏ "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
 * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–º –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–µ
 */
@Slf4j
@Component
@RequiredArgsConstructor
public class AutoTradingScheduler {

    private final SettingsService settingsService;
    private final SchedulerControlService schedulerControlService;
    private final FetchPairsProcessor fetchPairsProcessor;
    private final StartNewTradeProcessor startNewTradeProcessor;
    private final OkxPortfolioManager okxPortfolioManager;

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
     */
    @Scheduled(cron = "0 */5 * * * *")
    public void autoTradingScheduled() {
        log.debug("ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–∞ –≤ {}", LocalDateTime.now());

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω –ª–∏ –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ —à–µ–¥—É–ª–ª–µ—Ä
            if (!schedulerControlService.isAutoTradingSchedulerEnabled()) {
                log.debug("üìÖ AutoTradingScheduler –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ");
                return;
            }

            Settings settings = settingsService.getSettings();

            log.info("ü§ñ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞ –≤ {}", LocalDateTime.now());

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–µ–º –ª–∏ –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            if (!canOpenNewPositions(settings)) {
                log.info("üö´ –ù–µ–ª—å–∑—è –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ - –ª–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç");
                return;
            }

            // –ò—â–µ–º —Ö–æ—Ä–æ—à–∏–µ –ø–∞—Ä—ã –∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            List<Pair> candidatePairs = findCandidatePairs(settings);
            if (candidatePairs.isEmpty()) {
                log.info("üìä –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä –¥–ª—è –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–∞");
                return;
            }

            // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            int newTradesOpened = openNewTrades(candidatePairs, settings);
            
            if (newTradesOpened > 0) {
                log.info("‚úÖ –ê–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥: –æ—Ç–∫—Ä—ã—Ç–æ {} –Ω–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π", newTradesOpened);
            } else {
                log.info("üìä –ê–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥: –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ –æ—Ç–∫—Ä—ã—Ç—ã");
            }

        } catch (Exception e) {
            log.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–µ: {}", e.getMessage(), e);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–µ–º –ª–∏ –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏
     */
    private boolean canOpenNewPositions(Settings settings) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π —Å –±–∏—Ä–∂–∏
            int currentPositions = okxPortfolioManager.getActivePositionsCount();
            
            // –í—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π (–ø–∞—Ä—ã * 2)
            int maxPairs = (int) settings.getUsePairs();
            int maxPositions = maxPairs * 2;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –º–µ—Å—Ç–æ –¥–ª—è –Ω–æ–≤–æ–π –ø–∞—Ä—ã (2 –ø–æ–∑–∏—Ü–∏–∏)
            boolean canOpen = (currentPositions + 2) <= maxPositions;
            
            log.debug("üìä –ü–æ–∑–∏—Ü–∏–∏: —Ç–µ–∫—É—â–∏–µ={}, –º–∞–∫—Å–∏–º—É–º={}, –º–æ–∂–Ω–æ_–æ—Ç–∫—Ä—ã—Ç—å={}", 
                    currentPositions, maxPositions, canOpen);
            
            return canOpen;
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π: {}", e.getMessage());
            return false; // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–∫–∞–∑—ã–≤–∞–µ–º—Å—è –æ—Ç —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        }
    }

    /**
     * –ò—â–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–∞ –∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä
     */
    private List<Pair> findCandidatePairs(Settings settings) {
        try {
            log.info("üîç –ü–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–∞ –∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤");

            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ä
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ 1 –ø–∞—Ä—ã –¥–ª—è –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞
            FetchPairsRequest request = FetchPairsRequest.builder()
                    .countOfPairs(1) // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ 1 –ª—É—á—à—É—é –ø–∞—Ä—É –∑–∞ —Ä–∞–∑
                    .build();

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º FetchPairsProcessor –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª—É—á—à–∏—Ö –ø–∞—Ä
            List<Pair> pairs = fetchPairsProcessor.fetchPairs(request);
            
            log.info("üìã –ù–∞–π–¥–µ–Ω–æ {} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–∞", pairs.size());
            
            return pairs;
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–∞: {}", e.getMessage(), e);
            return List.of();
        }
    }

    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏
     */
    private int openNewTrades(List<Pair> candidatePairs, Settings settings) {
        int successCount = 0;
        
        for (Pair pair : candidatePairs) {
            try {
                log.info("üöÄ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –ø–∞—Ä—ã: {}", pair.getPairName());
                
                // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
                StartNewTradeRequest tradeRequest = StartNewTradeRequest.builder()
                        .tradingPair(pair)
                        .checkAutoTrading(true) // –í–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–∞
                        .build();
                
                // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
                Pair result = startNewTradeProcessor.startNewTrade(tradeRequest);
                
                if (result != null && TradeStatus.TRADING.equals(result.getStatus())) {
                    successCount++;
                    log.info("‚úÖ –ê–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥: —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –¥–ª—è –ø–∞—Ä—ã {}", pair.getPairName());
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–µ–º –ª–∏ –æ—Ç–∫—Ä—ã—Ç—å –µ—â–µ –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é
                    if (!canOpenNewPositions(settings)) {
                        log.info("üö´ –õ–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç - –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥");
                        break;
                    }
                } else {
                    log.warn("‚ö†Ô∏è –ê–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –ø–∞—Ä—ã {}", pair.getPairName());
                }
                
            } catch (Exception e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–∞—Ä—ã {}: {}", 
                        pair.getPairName(), e.getMessage());
            }
        }
        
        return successCount;
    }

    /**
     * –¢–µ—Å—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–∞
     * –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Ä—É—á–Ω—É—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    public void testAutoTrading() {
        log.info("üß™ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–∞");
        autoTradingScheduled();
    }
}