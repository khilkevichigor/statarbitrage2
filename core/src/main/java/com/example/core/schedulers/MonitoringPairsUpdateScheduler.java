package com.example.core.schedulers;

import com.example.core.services.PairService;
import com.example.core.services.SchedulerControlService;
import com.example.core.services.SettingsService;
import com.example.shared.models.Pair;
import com.example.shared.models.Settings;
import jakarta.annotation.PreDestroy;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;
import java.util.concurrent.*;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * –®–µ–¥—É–ª–ª–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
 */
@Slf4j
@Service
@RequiredArgsConstructor
@ConditionalOnProperty(name = "app.scheduling.enabled", havingValue = "true", matchIfMissing = true)
public class MonitoringPairsUpdateScheduler {

    private final PairService pairService;
    private final SchedulerControlService schedulerControlService;
    private final SettingsService settingsService;

    // –ü—É–ª –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    private final ExecutorService executorService = Executors.newFixedThreadPool(3,
            r -> {
                Thread t = new Thread(r, "MonitoringPairsUpdate-");
                t.setDaemon(true);
                return t;
            });

    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á (2 —á–∞—Å–∞)
    private static final int MAX_EXECUTION_TIME_HOURS = 2;

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞–∂–¥—É—é –Ω–æ—á—å –≤ 01:00)
     */
    @Scheduled(cron = "#{@settingsService.getSettings().getSchedulerMonitoringPairsUpdateCron()}")
    public void updateMonitoringPairsScheduled() {
        try {
            Settings settings = settingsService.getSettings();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω –ª–∏ —à–µ–¥—É–ª–ª–µ—Ä —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if (!settings.getSchedulerMonitoringPairsUpdateEnabled()) {
                log.debug("üìÖ MonitoringPairsUpdateScheduler –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö");
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —à–µ–¥—É–ª–ª–µ—Ä–æ–≤
            if (!schedulerControlService.isSchedulingEnabled()) {
                log.debug("‚è∏Ô∏è –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á –æ—Ç–∫–ª—é—á–µ–Ω–æ");
                return;
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —à–µ–¥—É–ª–ª–µ—Ä–∞: {}", e.getMessage());
            return;
        }
        
        log.info("üåô –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –≤ {}", LocalDateTime.now());

        try {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞—Ä—ã –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
            List<Pair> monitoringPairs = pairService.getMonitoringPairs();

            if (monitoringPairs.isEmpty()) {
                log.info("üì≠ –ù–µ—Ç –ø–∞—Ä –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è");
                return;
            }

            log.info("üìã –ù–∞–π–¥–µ–Ω–æ {} –ø–∞—Ä –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", monitoringPairs.size());
            log.info("üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º {} –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏", 3);

            // –ê—Ç–æ–º–∞—Ä–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            AtomicInteger successfulUpdates = new AtomicInteger(0);
            AtomicInteger failedUpdates = new AtomicInteger(0);

            // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            List<CompletableFuture<Void>> futures = monitoringPairs.stream()
                    .map(pair -> CompletableFuture.runAsync(() ->
                            updateSinglePair(pair, successfulUpdates, failedUpdates), executorService))
                    .toList();

            // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
            CompletableFuture<Void> allFutures = CompletableFuture.allOf(
                    futures.toArray(new CompletableFuture[0]));

            try {
                allFutures.get(MAX_EXECUTION_TIME_HOURS, TimeUnit.HOURS);
                log.info("‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ");
            } catch (TimeoutException e) {
                log.warn("‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ({} —á–∞—Å–æ–≤). –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á–∏",
                        MAX_EXECUTION_TIME_HOURS);
                allFutures.cancel(true);
            }

            // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            int totalPairs = monitoringPairs.size();
            log.info("üèÅ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:");
            log.info("   üìä –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {}/{}", successfulUpdates.get(), totalPairs);
            log.info("   ‚ùå –û—à–∏–±–æ–∫ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {}", failedUpdates.get());
            log.info("   ‚ö° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–æ—Ç–æ–∫–æ–≤: 3");

        } catch (Exception e) {
            log.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {}",
                    e.getMessage(), e);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–π –ø–∞—Ä—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
     */
    private void updateSinglePair(Pair pair, AtomicInteger successfulUpdates, AtomicInteger failedUpdates) {
        String threadName = Thread.currentThread().getName();
        String pairName = pair.getPairName();

        log.info("üßµ –ü–æ—Ç–æ–∫ {}: –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä—ã {}", threadName, pairName);

        try {
            boolean success = pairService.updateMonitoringPair(pair.getId());
            
            if (success) {
                successfulUpdates.incrementAndGet();
                log.info("‚úÖ –ü–æ—Ç–æ–∫ {}: –ü–∞—Ä–∞ {} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞", threadName, pairName);
            } else {
                failedUpdates.incrementAndGet();
                log.error("‚ùå –ü–æ—Ç–æ–∫ {}: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—É {}", threadName, pairName);
            }

        } catch (Exception e) {
            failedUpdates.incrementAndGet();
            log.error("üí• –ü–æ—Ç–æ–∫ {}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä—ã {}: {}",
                    threadName, pairName, e.getMessage(), e);
        }
    }

    /**
     * –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞—Ä –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
     * –ú–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–æ –∏–∑ UI –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
     */
    public void manualUpdateMonitoringPairs() {
        log.info("üîÑ –ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ...");
        updateMonitoringPairsScheduled();
    }

    /**
     * –¢–µ—Å—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     * –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Ä—É—á–Ω—É—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    public void testScheduledUpdate() {
        log.info("üß™ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ");
        updateMonitoringPairsScheduled();
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —à–µ–¥—É–ª–ª–µ—Ä–∞
     */
    public boolean isSchedulerEnabled() {
        try {
            Settings settings = settingsService.getSettings();
            return settings.getSchedulerMonitoringPairsUpdateEnabled() && 
                   schedulerControlService.isSchedulingEnabled();
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —à–µ–¥—É–ª–ª–µ—Ä–∞: {}", e.getMessage());
            return false;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å CRON –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —à–µ–¥—É–ª–ª–µ—Ä–∞
     */
    public String getSchedulerCron() {
        try {
            Settings settings = settingsService.getSettings();
            return settings.getSchedulerMonitoringPairsUpdateCron();
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è CRON –≤—ã—Ä–∞–∂–µ–Ω–∏—è: {}", e.getMessage());
            return "0 0 1 * * *"; // –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        }
    }

    /**
     * Graceful shutdown –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    @PreDestroy
    public void shutdown() {
        log.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —à–µ–¥—É–ª–ª–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ");

        executorService.shutdown();
        try {
            if (!executorService.awaitTermination(60, TimeUnit.SECONDS)) {
                executorService.shutdownNow();
                if (!executorService.awaitTermination(60, TimeUnit.SECONDS)) {
                    log.error("‚ùå –ü—É–ª –ø–æ—Ç–æ–∫–æ–≤ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
                }
            }
        } catch (InterruptedException ie) {
            executorService.shutdownNow();
            Thread.currentThread().interrupt();
        }

        log.info("‚úÖ –®–µ–¥—É–ª–ª–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    }
}