package com.example.core.experemental.stability.service;

import com.example.core.experemental.stability.dto.StabilityRequestDto;
import com.example.core.experemental.stability.dto.StabilityResponseDto;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import jakarta.annotation.PostConstruct;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

@Service
@Slf4j
public class StabilityAnalysisService {

    private final ObjectMapper objectMapper = new ObjectMapper();
    private RestTemplate restTemplate;

    @Value("${cointegration.api.url:http://localhost:8000}")
    private String pythonApiBaseUrl;

    @Value("${cointegration.api.timeout.connect:30000}")
    private int connectTimeout;

    @Value("${cointegration.api.timeout.read:300000}")
    private int readTimeout;

    @PostConstruct
    public void initRestTemplate() {
        // –°–æ–∑–¥–∞–µ–º RestTemplate —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
        this.restTemplate = new RestTemplate();

        log.info("üîß –ù–∞—Å—Ç—Ä–æ–µ–Ω RestTemplate –¥–ª—è Python API: connectTimeout={}ms, readTimeout={}ms",
                connectTimeout, readTimeout);
        log.info("‚ö†Ô∏è  –î–ª—è –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–∞—É—Ç–æ–≤ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å HTTP –∫–ª–∏–µ–Ω—Ç –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞");
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –≤ Python API
     */
    public StabilityResponseDto analyzeStability(StabilityRequestDto request) {
        String endpoint = "/analyze-stability";
        String fullUrl = pythonApiBaseUrl + endpoint;

        log.info("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –≤ Python API: {}", fullUrl);
        log.debug("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {} —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä",
                request.getCandlesMap().size());

        try {
            // –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ JSON
            String requestJson = objectMapper.writeValueAsString(request);
            double sizeInMB = requestJson.length() / (1024.0 * 1024.0);
            log.info("üì¶ –†–∞–∑–º–µ—Ä JSON –∑–∞–ø—Ä–æ—Å–∞: {} MB ({} –±–∞–π—Ç)", String.format("%.2f", sizeInMB), requestJson.length());
            log.debug("üìù JSON –∑–∞–ø—Ä–æ—Å: {}", requestJson.length() > 1000 ?
                    requestJson.substring(0, 1000) + "..." : requestJson);

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            headers.set("Accept", "application/json");

            HttpEntity<String> entity = new HttpEntity<>(requestJson, headers);

            long startTime = System.currentTimeMillis();

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å
            ResponseEntity<String> response = restTemplate.exchange(
                    fullUrl,
                    HttpMethod.POST,
                    entity,
                    String.class
            );

            long requestTime = System.currentTimeMillis() - startTime;
            log.info("üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Python API –∑–∞ {} —Å–µ–∫, —Å—Ç–∞—Ç—É—Å: {}",
                    String.format("%.2f", requestTime / 1000.0), response.getStatusCode());

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
            if (response.getStatusCode() != HttpStatus.OK) {
                String errorMsg = String.format("‚ùå –û—à–∏–±–∫–∞ Python API: %s - %s",
                        response.getStatusCode(), response.getBody());
                log.error(errorMsg);
                throw new RuntimeException(errorMsg);
            }

            // –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –æ—Ç–≤–µ—Ç
            String responseBody = response.getBody();
            if (responseBody == null || responseBody.trim().isEmpty()) {
                throw new RuntimeException("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Python API");
            }

            log.debug("üìÑ JSON –æ—Ç–≤–µ—Ç: {}", responseBody.length() > 1000 ?
                    responseBody.substring(0, 1000) + "..." : responseBody);

            StabilityResponseDto stabilityResponse = objectMapper.readValue(responseBody,
                    new TypeReference<StabilityResponseDto>() {
                    });

            // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
            logAnalysisResults(stabilityResponse);

            return stabilityResponse;

        } catch (Exception e) {
            String errorMsg = String.format("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Python API –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏: %s",
                    e.getMessage());
            log.error(errorMsg, e);
            throw new RuntimeException(errorMsg, e);
        }
    }

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
     */
    private void logAnalysisResults(StabilityResponseDto response) {
        if (response == null || !Boolean.TRUE.equals(response.getSuccess())) {
            log.warn("‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –±—ã–ª —É—Å–ø–µ—à–Ω—ã–º");
            return;
        }

        log.info("üéØ === –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò ===");
        log.info("üìä –í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–∞—Ä: {}", response.getTotalPairsAnalyzed());
        log.info("‚úÖ –¢–æ—Ä–≥—É–µ–º—ã—Ö –ø–∞—Ä –Ω–∞–π–¥–µ–Ω–æ: {}", response.getTradeablePairsFound());
        log.info("‚≠ê –û—Ç–ª–∏—á–Ω—ã—Ö –ø–∞—Ä –Ω–∞–π–¥–µ–Ω–æ: {}", response.getExcellentPairsFound());
        log.info("‚è±Ô∏è –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {} —Å–µ–∫",
                String.format("%.2f", response.getAnalysisTimeSeconds()));

        if (response.getSummaryStats() != null) {
            log.info("üìà –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {} –±–∞–ª–ª–æ–≤", response.getSummaryStats().getBestScore());
            log.info("üìä –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {}",
                    String.format("%.1f", response.getSummaryStats().getAverageScore()));

            if (response.getSummaryStats().getPairsByRating() != null) {
                var ratingStats = response.getSummaryStats().getPairsByRating();
                log.info("üìã –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É:");
                log.info("   EXCELLENT: {}", ratingStats.getOrDefault("excellent", 0));
                log.info("   GOOD: {}", ratingStats.getOrDefault("good", 0));
                log.info("   MARGINAL: {}", ratingStats.getOrDefault("marginal", 0));
                log.info("   POOR: {}", ratingStats.getOrDefault("poor", 0));
                log.info("   REJECTED: {}", ratingStats.getOrDefault("rejected", 0));
            }
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 –ª—É—á—à–∏—Ö –ø–∞—Ä
        if (response.getResults() != null && !response.getResults().isEmpty()) {
            log.info("üèÜ –¢–û–ü-5 –õ–£–ß–®–ò–• –ü–ê–†:");
            response.getResults().stream()
                    .filter(result -> result.getTotalScore() != null && result.getTotalScore() > 0)
                    .limit(5)
                    .forEach(result -> {
                        log.info("   {}‚Äî{}: {} –±–∞–ª–ª–æ–≤ [{}] {}",
                                result.getTickerA(),
                                result.getTickerB(),
                                result.getTotalScore(),
                                result.getStabilityRating(),
                                Boolean.TRUE.equals(result.getIsTradeable()) ? "‚úÖ –¢–û–†–ì–£–ï–ú–ê–Ø" : "‚ùå");
                    });
        }

        log.info("üéØ === –ö–û–ù–ï–¶ –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ê–ù–ê–õ–ò–ó–ê ===");
    }
}