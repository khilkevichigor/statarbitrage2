package com.example.core.handlers;

import com.example.core.messaging.SendEventService;
import com.example.core.processors.StartNewTradeProcessor;
import com.example.core.services.EventSendService;
import com.example.core.services.PriceIntersectionService;
import com.example.core.services.SettingsService;
import com.example.core.repositories.PairRepository;
import com.example.core.trading.services.OkxPortfolioManager;
import com.example.shared.dto.StartNewTradeRequest;
import com.example.shared.enums.TradeStatus;
import com.example.shared.events.UpdateUiEvent;
import com.example.shared.events.rabbit.CointegrationEvent;
import com.example.shared.events.rabbit.CoreEvent;
import com.example.shared.models.Pair;
import com.example.shared.models.Settings;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.util.*;
import java.util.stream.Collectors;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class NewCointPairsEventHandler {
    private final StartNewTradeProcessor startNewTradeProcessor;
    private final EventSendService eventSendService;
    private final SettingsService settingsService;
    private final PairRepository tradingPairRepository;
    private final OkxPortfolioManager okxPortfolioManager;
    private final PriceIntersectionService priceIntersectionService;
    private final SendEventService sendEventService;

    // –ú–∞–ø–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è UUID -> Pair –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ä—Ç–æ–≤
    private final Map<String, Pair> cointPairByUuid = new HashMap<>();

    public void handle(CointegrationEvent event) {
        try {
            log.info("");
            log.info("üìÑ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {}", event.getEventType());
            long schedulerStart = System.currentTimeMillis();

            List<Pair> cointPairs = event.getCointPairs();

            log.info("–ü–æ–ª—É—á–µ–Ω—ã cointPairs:");
            cointPairs.forEach(cointPair -> log.info(cointPair.getPairName()));

            List<Pair> validCointPairs = getValidCointPairs(cointPairs);
            log.info("{} –ø–∞—Ä –∏–∑ {} –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é", validCointPairs.size(), cointPairs.size());

            int openedPositionsCount = getOpenPositionsCount();
            log.info("–ù–∞ –±–∏—Ä–∂–µ {} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π", openedPositionsCount);
            int usePairs = (int) settingsService.getSettings().getUsePairs();
            int usePositions = usePairs * 2;
            if (usePositions - openedPositionsCount < 2) {
                log.info("–í—Å–µ–≥–æ –º–æ–∂–Ω–æ –¥–µ—Ä–∂–∞—Ç—å {} –ø–∞—Ä(—ã) ({} –ø–æ–∑–∏—Ü–∏–π). –ù–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–µ–ª—å–∑—è.", usePairs, usePositions);
                return;
            }

            List<Pair> filteredByMinLotCointPairs = filterByMinLotFromBlackList(validCointPairs);
            log.info("–û—Å—Ç–∞–ª–æ—Å—å {} –ø–∞—Ä –∏–∑ {} –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –ª–æ—Ç—É –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞", filteredByMinLotCointPairs.size(), validCointPairs.size());

            List<Pair> filteredByTradingPairs = filterByExistingTradingPairs(filteredByMinLotCointPairs);
            log.info("–û—Å—Ç–∞–ª–æ—Å—å {} –ø–∞—Ä –∏–∑ {} –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ trading –ø–∞—Ä–∞–º", filteredByTradingPairs.size(), filteredByMinLotCointPairs.size());

            List<Pair> filteredByEnoughIntersections = filterByMinIntersections(filteredByTradingPairs);
            log.info("–û—Å—Ç–∞–ª–æ—Å—å {} –ø–∞—Ä –∏–∑ {} –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º—É –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—é –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–Ω", filteredByEnoughIntersections.size(), filteredByTradingPairs.size());

            Map<String, List<Pair>> missedAndRemainingPairs = splitAndGetMissedAndRemainingPairs(filteredByEnoughIntersections);
            List<Pair> missedCointPairs = missedAndRemainingPairs.get("missed");
            List<Pair> remainingCointPairs = missedAndRemainingPairs.get("remaining");
            log.info("–†–∞–∑–¥–µ–ª–∏–ª–∏: {} –ø–∞—Ä(—ã) –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–π–¥–∞ –∏ {} –ø–∞—Ä(—ã) –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–¥", missedCointPairs.size(), remainingCointPairs.size());

            if (!remainingCointPairs.isEmpty()) {
                // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä—ã
                tradingPairRepository.deleteByTypeAndStatus(com.example.shared.enums.PairType.COINTEGRATED, TradeStatus.SELECTED);
                
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è minVolMln
                Settings settings = settingsService.getSettings();
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø COINTEGRATED –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–∞—Ä
                remainingCointPairs.forEach(pair -> {
                    pair.setType(com.example.shared.enums.PairType.COINTEGRATED);
                    pair.setStatus(TradeStatus.SELECTED);
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                    pair.setMinVolMln(BigDecimal.valueOf(settings.getMinVolume()));
                });
                tradingPairRepository.saveAll(remainingCointPairs);
                log.info("üíæ –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ {} –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–∞—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ UI", remainingCointPairs.size());
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º CointPairs –≤ –º–∞–ø—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ä—Ç–æ–≤
            cointPairByUuid.clear();
            missedCointPairs.forEach(cointPair -> 
                cointPairByUuid.put(cointPair.getUuid().toString(), cointPair));

            List<Pair> tradingPairs = convertToTradingPair(missedCointPairs);
            log.info("{} CointPairs —Å–∫–æ–Ω–≤–µ—Ä—á–µ–Ω—ã –≤ {} TradingPairs", missedCointPairs.size(), tradingPairs.size());

            int startedNewTrades = startNewTrades(tradingPairs);
            if (startedNewTrades > 0) {
                updateUI();
            }
            logMaintainPairsCompletion(schedulerStart, startedNewTrades);
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è: {}", e.getMessage(), e);
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π —Å OKX API
     *
     * @return –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–∞ –±–∏—Ä–∂–µ
     */
    private int getOpenPositionsCount() {
        try {
            int count = okxPortfolioManager.getActivePositionsCount();
            log.debug("üîç –ü–æ–ª—É—á–µ–Ω–æ {} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π —Å OKX API", count);
            return count;
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π —Å OKX: {}", e.getMessage());
            return 0;
        }
    }

    private Map<String, List<Pair>> splitAndGetMissedAndRemainingPairs(List<Pair> cointPairs) {
        Map<String, List<Pair>> result = new HashMap<>();

        List<Pair> activePairs = tradingPairRepository.findTradingPairsByStatus(TradeStatus.TRADING);
        Settings settings = settingsService.getSettings();
        int usePairs = (int) settings.getUsePairs();

        int necesseryNewPairs = usePairs - activePairs.size();
        necesseryNewPairs = Math.max(necesseryNewPairs, 0); // –∑–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π

        // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –¥–ª—è –Ω–æ–≤—ã—Ö —Ç—Ä–µ–π–¥–æ–≤
        List<Pair> missedPairs = cointPairs.stream()
                .limit(necesseryNewPairs)
                .toList();

        // –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä—ã ‚Äî –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
        List<Pair> remainingPairs = cointPairs.stream()
                .skip(necesseryNewPairs)
                .toList();

        result.put("missed", missedPairs);
        result.put("remaining", remainingPairs);

        return result;
    }


    private List<Pair> filterByExistingTradingPairs(List<Pair> cointPairs) {
        List<String> usedTickers = getUsedTickers();
        String tickersStr = String.join(", ", usedTickers);
        List<Pair> filteredByTradingPairs = new ArrayList<>();
        cointPairs.forEach(cointPair -> {
            if (!tickersStr.contains(cointPair.getTickerA()) && !usedTickers.contains(cointPair.getTickerB())) {
                filteredByTradingPairs.add(cointPair);
            }
        });
        return filteredByTradingPairs;
    }

    private List<Pair> filterByMinIntersections(List<Pair> cointPairs) {
        Settings settings = settingsService.getSettings();

        // –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä –æ—Ç–∫–ª—é—á–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫
        if (!settings.isUseMinIntersections()) {
            log.debug("üìä –§–∏–ª—å—Ç—Ä –ø–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–Ω –æ—Ç–∫–ª—é—á–µ–Ω");
            return cointPairs;
        }

        int minIntersections = settings.getMinIntersections();
        log.info("üìä –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è–º: –º–∏–Ω–∏–º—É–º {} –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π", minIntersections);

        List<Pair> filteredPairs = new ArrayList<>();

        for (Pair cointPair : cointPairs) {
            try {
                // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –≤–º–µ—Å—Ç–µ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
                var result = priceIntersectionService.calculateIntersectionsWithData(cointPair);
                int intersections = result.getIntersections();

                log.info("üìä –ü–∞—Ä–∞ {}: {} –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–Ω",
                        cointPair.getPairName(), intersections);

                if (intersections >= minIntersections) {
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
                    java.util.List<java.math.BigDecimal> normalizedLongList = java.util.Arrays.stream(result.getNormalizedLongPrices())
                            .mapToObj(java.math.BigDecimal::valueOf)
                            .collect(java.util.stream.Collectors.toList());
                    java.util.List<java.math.BigDecimal> normalizedShortList = java.util.Arrays.stream(result.getNormalizedShortPrices())
                            .mapToObj(java.math.BigDecimal::valueOf)
                            .collect(java.util.stream.Collectors.toList());
                    cointPair.setNormalizedLongPrices(normalizedLongList);
                    cointPair.setNormalizedShortPrices(normalizedShortList);
                    cointPair.setIntersectionsCount(intersections);

                    // –°–æ–∑–¥–∞–µ–º —á–∞—Ä—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä
                    priceIntersectionService.calculateIntersectionsWithChart(cointPair, true);

                    filteredPairs.add(cointPair);
                    log.debug("‚úÖ –ü–∞—Ä–∞ {} –ø—Ä–æ—à–ª–∞ —Ñ–∏–ª—å—Ç—Ä: {} >= {} –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π",
                            cointPair.getPairName(), intersections, minIntersections);
                } else {
                    log.info("‚ùå –ü–∞—Ä–∞ {} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–∞: {} < {} –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π",
                            cointPair.getPairName(), intersections, minIntersections);
                }
            } catch (Exception e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –¥–ª—è –ø–∞—Ä—ã {}: {}",
                        cointPair.getPairName(), e.getMessage(), e);
                // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä—É –≤ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
            }
        }

        return filteredPairs;
    }

    private List<String> getUsedTickers() {
        List<Pair> activePairs = tradingPairRepository.findTradingPairsByStatus(TradeStatus.TRADING);
        List<String> tickers = new ArrayList<>();
        for (Pair pair : activePairs) {
            tickers.add(pair.getTickerA());
            tickers.add(pair.getTickerB());
        }
        return tickers;
    }

    private List<Pair> filterByMinLotFromBlackList(List<Pair> cointPairs) {
        Settings settings = settingsService.getSettings();
        String minimumLotBlacklist = settings.getMinimumLotBlacklist();
        log.info("–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –ª–æ—Ç–æ–≤: {}", minimumLotBlacklist);
        List<Pair> filteredCointPairs = new ArrayList<>();
        cointPairs.forEach(cointPair -> {
            if (!minimumLotBlacklist.contains(cointPair.getTickerA()) && !minimumLotBlacklist.contains(cointPair.getTickerB())) {
                filteredCointPairs.add(cointPair);
            }
        });
        return filteredCointPairs;
    }

    private List<Pair> convertToTradingPair(List<Pair> cointPairs) {
        List<Pair> convertedPairs = new ArrayList<>();
        Settings settings = settingsService.getSettings();
        
        cointPairs.forEach(pair -> {
            // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –ø–∞—Ä—ã —Å —Ç–∏–ø–æ–º TRADING
            Pair converted = Pair.builder()
                .uuid(pair.getUuid())
                .tickerA(pair.getTickerA())
                .tickerB(pair.getTickerB())
                .pairName(pair.getPairName())
                .type(com.example.shared.enums.PairType.TRADING)
                .status(TradeStatus.SELECTED)
                .settingsCandleLimit(pair.getSettingsCandleLimit())
                .settingsMinZ(pair.getSettingsMinZ())
                .timeframe(pair.getTimeframe())
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                .minVolMln(BigDecimal.valueOf(settings.getMinVolume()))
                .build();
            if (converted != null) {
                tradingPairRepository.save(converted);
                convertedPairs.add(converted);
            }
        });
        return convertedPairs;
    }

    private List<Pair> getValidCointPairs(List<Pair> cointPairs) {
        return cointPairs.stream()
                .filter(Objects::nonNull)
                .filter(v -> v.getUuid() != null)
                .toList();
    }

    private int startNewTrades(List<Pair> newPairs) {
        AtomicInteger count = new AtomicInteger(0);

        newPairs.forEach(pair -> {
            if (startSingleNewTrade(pair)) {
                count.incrementAndGet();
            }
        });

        return count.get();
    }

    private boolean startSingleNewTrade(Pair pair) {
        try {
            Pair result = startNewTradeProcessor.startNewTrade(StartNewTradeRequest.builder()
                    .tradingPair(pair)
                    .checkAutoTrading(true)
                    .build());
            if (result != null && result.getStatus().equals(TradeStatus.TRADING)) {
                // –ü–æ–ª—É—á–∞–µ–º —á–∞—Ä—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –∫–∞–∫ –º–∞—Å—Å–∏–≤ –±–∞–π—Ç
                byte[] intersectionChart = new byte[0];
                Pair cointPair = cointPairByUuid.get(pair.getUuid().toString());
                if (cointPair != null) {
                    intersectionChart = priceIntersectionService.getIntersectionChartAsBytes(cointPair);
                    log.info("üìä –ü–æ–ª—É—á–µ–Ω —á–∞—Ä—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –¥–ª—è –ø–∞—Ä—ã {}: {} –±–∞–π—Ç", 
                            pair.getPairName(), intersectionChart.length);
                } else {
                    log.warn("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω CointPair –¥–ª—è UUID {} (–ø–∞—Ä–∞ {})", 
                            pair.getUuid(), pair.getPairName());
                }

                String message = "–ù–æ–≤—ã–π —Ç—Ä–µ–π–¥: " + pair.getPairName();
                sendEventService.sendCoreEvent(new CoreEvent(message, intersectionChart, CoreEvent.Type.ENTRY_INTERSECTION_CHART));
            }
            return result != null;
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π —Ç—Ä–µ–π–¥ –¥–ª—è –ø–∞—Ä—ã {}: {}", pair.getPairName(), e.getMessage());
            return false;
        }
    }

    private void updateUI() {
        try {
            eventSendService.updateUI(UpdateUiEvent.builder().build());
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ UI: {}", e.getMessage());
        }
    }

    private void logMaintainPairsCompletion(long startTime, int newPairsCount) {
        long duration = System.currentTimeMillis() - startTime;
        log.debug("‚è±Ô∏è –ó–∞–ø—É—Å–∫ –Ω–æ–≤—ã—Ö —Ç—Ä–µ–π–¥–æ–≤ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∑–∞ {} —Å–µ–∫. –ó–∞–ø—É—â–µ–Ω–æ {} –Ω–æ–≤—ã—Ö –ø–∞—Ä", duration / 1000.0, newPairsCount);
    }
}