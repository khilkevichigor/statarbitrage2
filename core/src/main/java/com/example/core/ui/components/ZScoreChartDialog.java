package com.example.core.ui.components;

import com.example.core.services.PixelSpreadService;
import com.example.core.services.SettingsService;
import com.example.core.services.chart.ChartService;
import com.example.core.services.chart.ChartSettingsService;
import com.example.shared.models.ChartSettings;
import com.example.shared.models.Pair;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.button.ButtonVariant;
import com.vaadin.flow.component.checkbox.Checkbox;
import com.vaadin.flow.component.dialog.Dialog;
import com.vaadin.flow.component.html.Div;
import com.vaadin.flow.component.html.H3;
import com.vaadin.flow.component.html.Image;
import com.vaadin.flow.component.html.Span;
import com.vaadin.flow.component.icon.VaadinIcon;
import com.vaadin.flow.component.orderedlayout.FlexComponent;
import com.vaadin.flow.component.orderedlayout.HorizontalLayout;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.server.StreamResource;
import com.vaadin.flow.spring.annotation.SpringComponent;
import com.vaadin.flow.spring.annotation.UIScope;
import lombok.extern.slf4j.Slf4j;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.math.RoundingMode;

@Slf4j
@SpringComponent
@UIScope
public class ZScoreChartDialog extends Dialog {

    private static final String CHART_TYPE = "ZSCORE_CHART_DIALOG";

    private final SettingsService settingsService;
    private final ChartService chartService;
    private final PixelSpreadService pixelSpreadService;
    private final ChartSettingsService chartSettingsService;

    private VerticalLayout content;
    private Image mainChartImage; // –ï–¥–∏–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è —á–∞—Ä—Ç–æ–≤
    private Image intersectionsChartImage; // –ß–∞—Ä—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
    private Div dataInfoPanel; // –ü–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–∞–Ω–Ω—ã—Ö
    private H3 pairTitle;
    private Div detailsPanel;
    // üéØ –£–ü–†–û–©–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º –í–°–ï —á–µ–∫–±–æ–∫—Å—ã! –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –¥–ª—è —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞
    private Checkbox showEntryPointCheckbox;
    private Pair currentPair;

    public ZScoreChartDialog(SettingsService settingsService, ChartService chartService,
                             PixelSpreadService pixelSpreadService, ChartSettingsService chartSettingsService) {
        this.settingsService = settingsService;
        this.chartService = chartService;
        this.pixelSpreadService = pixelSpreadService;
        this.chartSettingsService = chartSettingsService;
        initializeDialog();
        createComponents();
        layoutComponents();
    }

    private void initializeDialog() {
        setWidth("90vw");
        setHeight("80vh");
        setModal(true);
        setCloseOnEsc(true);
        setCloseOnOutsideClick(false);
        setResizable(true);
        setDraggable(true);
    }

    private void createComponents() {
        pairTitle = new H3();
        pairTitle.getStyle().set("margin", "0 0 1rem 0");
        pairTitle.getStyle().set("color", "var(--lumo-primary-text-color)");

        // –°–æ–∑–¥–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–æ–≤ —á–∞—Ä—Ç–æ–≤
        createChartSelectionCheckboxes();

        // –ï–¥–∏–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è —á–∞—Ä—Ç–æ–≤ —Å crosshair
        mainChartImage = new Image();
        mainChartImage.setWidth("100%");
        mainChartImage.setHeight("600px");
        mainChartImage.getStyle().set("border", "1px solid var(--lumo-contrast-20pct)");
        mainChartImage.getStyle().set("border-radius", "var(--lumo-border-radius-m)");
        mainChartImage.getStyle().set("cursor", "crosshair");

        // –ß–∞—Ä—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π —Å crosshair
        intersectionsChartImage = new Image();
        intersectionsChartImage.setWidth("100%");
        intersectionsChartImage.setHeight("600px");
        intersectionsChartImage.getStyle().set("border", "1px solid var(--lumo-contrast-20pct)");
        intersectionsChartImage.getStyle().set("border-radius", "var(--lumo-border-radius-m)");
        intersectionsChartImage.getStyle().set("margin-top", "1rem");
        intersectionsChartImage.getStyle().set("cursor", "crosshair");

        // –ü–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–∞–Ω–Ω—ã—Ö
        dataInfoPanel = new Div();
        dataInfoPanel.getStyle().set("padding", "1rem");
        dataInfoPanel.getStyle().set("background", "var(--lumo-primary-color-10pct)");
        dataInfoPanel.getStyle().set("border-radius", "var(--lumo-border-radius-m)");
        dataInfoPanel.getStyle().set("margin-top", "1rem");
        dataInfoPanel.getStyle().set("font-family", "monospace");
        dataInfoPanel.getStyle().set("font-size", "0.9rem");

        detailsPanel = new Div();
        detailsPanel.getStyle().set("padding", "1rem");
        detailsPanel.getStyle().set("background", "var(--lumo-contrast-5pct)");
        detailsPanel.getStyle().set("border-radius", "var(--lumo-border-radius-m)");
        detailsPanel.getStyle().set("margin-top", "1rem");

        content = new VerticalLayout();
        content.setSpacing(true);
        content.setPadding(true);
        content.setAlignItems(FlexComponent.Alignment.STRETCH);
    }

    /**
     * üéØ –£–ü–†–û–©–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ—Ç –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô —á–µ–∫–±–æ–∫—Å –¥–ª—è —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞
     * –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –í–°–ï–ì–î–ê!
     */
    private void createChartSelectionCheckboxes() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ä—Ç–∞
        ChartSettings chartSettings = chartSettingsService.getChartSettings(CHART_TYPE);

        // üéØ –£–ü–†–û–©–ï–ù–ò–ï: –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —á–µ–∫–±–æ–∫—Å –¥–ª—è —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞
        showEntryPointCheckbox = new Checkbox("üéØ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞");
        showEntryPointCheckbox.setValue(chartSettings.isShowEntryPoint());
        showEntryPointCheckbox.addValueChangeListener(e -> {
            chartSettingsService.updateChartSetting(CHART_TYPE, "showEntryPoint", e.getValue());
            refreshMainChart();
        });

        log.debug("üéØ –£–ü–†–û–©–ï–ù–ò–ï: –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —á–µ–∫–±–æ–∫—Å–∞: EntryPoint={}",
                chartSettings.isShowEntryPoint());
    }

    // –£–¥–∞–ª–µ–Ω –º–µ—Ç–æ–¥ getEmaPeriodFromTimeframe - –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω

    /**
     * üèóÔ∏è –£–ü–†–û–©–Å–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ —á–∞—Ä—Ç–∞
     * üéØ –£–ü–†–û–©–ï–ù–ò–ï: –í—Å–µ —Å–µ–∫—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –í–°–ï–ì–î–ê! –¢–æ–ª—å–∫–æ EntryPoint –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å/–æ—Ç–∫–ª—é—á–∞—Ç—å!
     */
    private void refreshMainChart() {
        if (currentPair == null) return;

        try {
            // üéØ –£–ü–†–û–©–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ï–î–ò–ù–°–¢–í–ï–ù–ù–û–ì–û —á–µ–∫–±–æ–∫—Å–∞
            boolean showEntryPoint = showEntryPointCheckbox.getValue();

            log.debug("üèóÔ∏è –£–ü–†–û–©–Å–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ –ü–û–õ–ù–û–ì–û –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ —á–∞—Ä—Ç–∞ (EntryPoint: {})",
                    showEntryPoint);

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –£–ü–†–û–©–Å–ù–ù–´–ô –º–µ—Ç–æ–¥ createVerticalChart —Å –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ú –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
            BufferedImage chartImage = chartService.createVerticalChart(currentPair, showEntryPoint);

            if (chartImage != null) {
                StreamResource chartResource = createStreamResource(chartImage, "vertical-chart.png");
                mainChartImage.setSrc(chartResource);
                mainChartImage.setAlt("Vertical Chart for " + currentPair.getPairName());

                // –î–æ–±–∞–≤–ª—è–µ–º crosshair —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
                addCrosshairToMainChart();

                log.debug("‚úÖ –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —á–∞—Ä—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω");
            } else {
                mainChartImage.setSrc("");
                mainChartImage.setAlt("Failed to generate vertical chart");
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —á–∞—Ä—Ç –¥–ª—è –ø–∞—Ä—ã: {}", currentPair.getPairName());
            }

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ —á–∞—Ä—Ç–∞", e);
            mainChartImage.setSrc("");
            mainChartImage.setAlt("Vertical chart generation error");
        }
    }


    private void layoutComponents() {
        // Header with close button
        HorizontalLayout header = new HorizontalLayout();
        header.setWidthFull();
        header.setJustifyContentMode(FlexComponent.JustifyContentMode.BETWEEN);
        header.setAlignItems(FlexComponent.Alignment.CENTER);

        Button closeButton = new Button(VaadinIcon.CLOSE.create());
        closeButton.addThemeVariants(ButtonVariant.LUMO_TERTIARY);
        closeButton.addClickListener(e -> close());

        header.add(pairTitle, closeButton);

        // –ü–∞–Ω–µ–ª—å —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–æ–≤ —á–∞—Ä—Ç–æ–≤
        VerticalLayout chartSelectionPanel = new VerticalLayout();
        chartSelectionPanel.setSpacing(false);
        chartSelectionPanel.setPadding(true);
        chartSelectionPanel.getStyle().set("background", "var(--lumo-contrast-5pct)");
        chartSelectionPanel.getStyle().set("border-radius", "var(--lumo-border-radius-m)");
        chartSelectionPanel.getStyle().set("margin-bottom", "1rem");

        Span chartsLabel = new Span("üìä –í—ã–±–æ—Ä —á–∞—Ä—Ç–æ–≤:");
        chartsLabel.getStyle().set("font-weight", "bold");
        chartsLabel.getStyle().set("margin-bottom", "0.5rem");

        HorizontalLayout mainChartsRow = new HorizontalLayout();
        mainChartsRow.setAlignItems(FlexComponent.Alignment.CENTER);
        // üéØ –£–ü–†–û–©–ï–ù–ò–ï: –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —á–µ–∫–±–æ–∫—Å –¥–ª—è —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞
        mainChartsRow.add(showEntryPointCheckbox);

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        Span infoSpan = new Span("üí° –í—Å–µ —Å–µ–∫—Ü–∏–∏ (—Ü–µ–Ω—ã, Z-Score, –ø–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥, –ø—Ä–æ—Ñ–∏—Ç) –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤—Å–µ–≥–¥–∞");
        infoSpan.getStyle().set("font-size", "0.9rem");
        infoSpan.getStyle().set("color", "var(--lumo-secondary-text-color)");
        infoSpan.getStyle().set("font-style", "italic");
        infoSpan.getStyle().set("margin-top", "0.5rem");

        // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã EMA –∏ StochRSI —É–±—Ä–∞–Ω—ã –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è

        chartSelectionPanel.add(chartsLabel, mainChartsRow, infoSpan);

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —á–∞—Ä—Ç–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
        H3 intersectionsTitle = new H3("üìà –ß–∞—Ä—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π —Ü–µ–Ω");
        intersectionsTitle.getStyle().set("margin", "1rem 0 0.5rem 0");
        intersectionsTitle.getStyle().set("color", "var(--lumo-primary-text-color)");

        content.add(header, dataInfoPanel, chartSelectionPanel, mainChartImage, intersectionsTitle, intersectionsChartImage, detailsPanel);
        add(content);
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å Z-Score —á–∞—Ä—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
     *
     * @param tradingPair –¥–∞–Ω–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
     */
    public void showChart(Pair tradingPair) {
        if (tradingPair == null) {
            log.warn("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∫–∞–∑–∞—Ç—å —á–∞—Ä—Ç –¥–ª—è null PairData");
            return;
        }

        try {
            log.debug("üìä –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Z-Score —á–∞—Ä—Ç –¥–ª—è –ø–∞—Ä—ã: {}", tradingPair.getPairName());

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã
            this.currentPair = tradingPair;

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            pairTitle.setText(String.format("üìä Z-Score Chart: %s", tradingPair.getPairName()));

            // üéØ –£–ü–†–û–©–ï–ù–ò–ï: –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ï–î–ò–ù–°–¢–í–ï–ù–ù–û–ì–û —á–µ–∫–±–æ–∫—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            ChartSettings chartSettings = chartSettingsService.getChartSettings(CHART_TYPE);
            showEntryPointCheckbox.setValue(chartSettings.isShowEntryPoint());

            // üéØ –£–ü–†–û–©–ï–ù–ò–ï: –í—Å–µ —Å–µ–∫—Ü–∏–∏ (—Ü–µ–Ω—ã, Z-Score, –ø–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥, –ø—Ä–æ—Ñ–∏—Ç) –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –í–°–ï–ì–î–ê!
            // –¢–æ–ª—å–∫–æ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å/–æ—Ç–∫–ª—é—á–∞—Ç—å —á–µ—Ä–µ–∑ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —á–µ–∫–±–æ–∫—Å

            log.debug("üéØ –£–ü–†–û–©–ï–ù–ò–ï: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —á–µ–∫–±–æ–∫—Å–∞: EntryPoint={}",
                    chartSettings.isShowEntryPoint());

            // –í—ã—á–∏—Å–ª—è–µ–º –ø–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —á–µ–∫–±–æ–∫—Å–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö —Ü–µ–Ω –∏—Å–ø–æ–ª—å–∑—É—è PixelSpreadService
            pixelSpreadService.calculatePixelSpreadIfNeeded(currentPair);

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Ä—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —á–µ–∫–±–æ–∫—Å–∞–º
            refreshMainChart();

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–∞—Ä—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
            refreshIntersectionsChart();

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω—ã—Ö
            updateDataInfoPanel(tradingPair);

            // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            updateDetailsPanel(tradingPair);

            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
            open();

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —á–∞—Ä—Ç–∞ –¥–ª—è –ø–∞—Ä—ã: {}", tradingPair.getPairName(), e);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            pairTitle.setText("‚ùå Error Loading Chart");
            mainChartImage.setSrc("");
            mainChartImage.setAlt("Chart loading failed");
            detailsPanel.removeAll();
            detailsPanel.add(new Span("Failed to load chart: " + e.getMessage()));
            open();
        }
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç StreamResource –∏–∑ BufferedImage
     */
    private StreamResource createStreamResource(BufferedImage bufferedImage, String fileName) {
        return new StreamResource(fileName, () -> {
            try {
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                ImageIO.write(bufferedImage, "png", baos);
                return new ByteArrayInputStream(baos.toByteArray());
            } catch (IOException e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ StreamResource –¥–ª—è —á–∞—Ä—Ç–∞", e);
                throw new RuntimeException("Failed to create chart stream", e);
            }
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞–Ω–µ–ª—å —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞—Ä–µ
     */
    private void updateDetailsPanel(Pair tradingPair) {
        detailsPanel.removeAll();

        // –°–æ–∑–¥–∞–µ–º HTML-–∫–æ–Ω—Ç–µ–Ω—Ç —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        VerticalLayout details = new VerticalLayout();
        details.setSpacing(false);
        details.setPadding(false);

        // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        HorizontalLayout metricsRow1 = new HorizontalLayout();
        metricsRow1.setWidthFull();

        Div zScoreInfo = createMetricDiv("Current Z-Score",
                String.format("%.3f", tradingPair.getZScoreCurrent() != null ? tradingPair.getZScoreCurrent().doubleValue() : 0.0),
                getZScoreColor(tradingPair.getZScoreCurrent() != null ? tradingPair.getZScoreCurrent().doubleValue() : 0.0));

        Div correlationInfo = createMetricDiv("Correlation",
                String.format("%.3f", tradingPair.getCorrelationCurrent() != null ? tradingPair.getCorrelationCurrent().doubleValue() : 0.0), "#2196F3");

        Div statusInfo = createMetricDiv("Status",
                tradingPair.getStatus().toString(), "#4CAF50");

        metricsRow1.add(zScoreInfo, correlationInfo, statusInfo);

        // –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ—Ç—Ä–∏–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–±—ã–ª–∏)
        HorizontalLayout metricsRow2 = new HorizontalLayout();
        metricsRow2.setWidthFull();

        if (tradingPair.getProfitPercentChanges() != null) {
            Div profitInfo = createMetricDiv("Profit",
                    tradingPair.getProfitPercentChanges().setScale(2, RoundingMode.HALF_UP) + "%",
                    getProfitColor(tradingPair.getProfitPercentChanges().doubleValue()));
            metricsRow2.add(profitInfo);
        }

        if (tradingPair.getMaxZ() != null && tradingPair.getMinZ() != null) {
            Div maxZInfo = createMetricDiv("Max Z",
                    tradingPair.getMaxZ().setScale(3, RoundingMode.HALF_UP).toString(), "#FF9800");
            Div minZInfo = createMetricDiv("Min Z",
                    tradingPair.getMinZ().setScale(3, RoundingMode.HALF_UP).toString(), "#FF9800");
            metricsRow2.add(maxZInfo, minZInfo);
        }

        details.add(metricsRow1);
        if (metricsRow2.getComponentCount() > 0) {
            details.add(metricsRow2);
        }

        // Trading recommendations
        Div recommendationDiv = createRecommendationDiv(tradingPair.getZScoreCurrent() != null ? tradingPair.getZScoreCurrent().doubleValue() : 0.0);
        details.add(recommendationDiv);

        detailsPanel.add(details);
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –º–µ—Ç—Ä–∏–∫–∏
     */
    private Div createMetricDiv(String label, String value, String color) {
        Div metricDiv = new Div();
        metricDiv.getStyle().set("text-align", "center");
        metricDiv.getStyle().set("flex", "1");
        metricDiv.getStyle().set("padding", "0.5rem");

        Span labelSpan = new Span(label);
        labelSpan.getStyle().set("display", "block");
        labelSpan.getStyle().set("font-size", "0.8rem");
        labelSpan.getStyle().set("color", "var(--lumo-secondary-text-color)");

        Span valueSpan = new Span(value);
        valueSpan.getStyle().set("display", "block");
        valueSpan.getStyle().set("font-size", "1.2rem");
        valueSpan.getStyle().set("font-weight", "bold");
        valueSpan.getStyle().set("color", color);

        metricDiv.add(labelSpan, valueSpan);
        return metricDiv;
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –±–ª–æ–∫ —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
     */
    private Div createRecommendationDiv(double zScore) {
        Div recommendationDiv = new Div();
        recommendationDiv.getStyle().set("margin-top", "1rem");
        recommendationDiv.getStyle().set("padding", "1rem");
        recommendationDiv.getStyle().set("border-radius", "var(--lumo-border-radius-m)");

        String recommendation;
        String bgColor;
        String textColor;

        if (Math.abs(zScore) > 2.0) {
            recommendation = zScore > 0 ?
                    "üî¥ STRONG SIGNAL: Consider SHORT position" :
                    "üü¢ STRONG SIGNAL: Consider LONG position";
            bgColor = "var(--lumo-error-color-10pct)";
            textColor = "var(--lumo-error-text-color)";
        } else if (Math.abs(zScore) > 1.0) {
            recommendation = "üü° WEAK SIGNAL: Monitor for stronger signal";
            bgColor = "var(--lumo-warning-color-10pct)";
            textColor = "var(--lumo-warning-text-color)";
        } else {
            recommendation = "‚ö™ NO SIGNAL: Pair close to equilibrium";
            bgColor = "var(--lumo-contrast-5pct)";
            textColor = "var(--lumo-body-text-color)";
        }

        recommendationDiv.getStyle().set("background", bgColor);
        recommendationDiv.getStyle().set("color", textColor);
        recommendationDiv.getStyle().set("font-weight", "bold");
        recommendationDiv.setText(recommendation);

        return recommendationDiv;
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–≤–µ—Ç –¥–ª—è Z-Score –∑–Ω–∞—á–µ–Ω–∏—è
     */
    private String getZScoreColor(double zScore) {
        if (Math.abs(zScore) > 2.0) {
            return "#F44336"; // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è —Å–∏–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        } else if (Math.abs(zScore) > 1.0) {
            return "#FF9800"; // –û—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è —Å–ª–∞–±–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        } else {
            return "#4CAF50"; // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è
        }
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–≤–µ—Ç –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏
     */
    private String getProfitColor(double profit) {
        return profit >= 0 ? "#4CAF50" : "#F44336";
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —á–∞—Ä—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
     */
    private void refreshIntersectionsChart() {
        if (currentPair == null) return;

        try {
            log.info("üìä –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ä—Ç–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –¥–ª—è –ø–∞—Ä—ã: {}", currentPair.getPairName());

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π
            var longCandles = currentPair.getLongTickerCandles();
            var shortCandles = currentPair.getShortTickerCandles();

            if (longCandles == null || shortCandles == null || longCandles.isEmpty() || shortCandles.isEmpty()) {
                log.warn("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ä—Ç–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π");
                intersectionsChartImage.setSrc("");
                intersectionsChartImage.setAlt("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —á–∞—Ä—Ç–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π");
                return;
            }

            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è (–ø—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º)
            int intersectionsCount = calculateIntersections(longCandles, shortCandles);

            log.info("üìä –ù–∞–π–¥–µ–Ω–æ {} –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π —Ü–µ–Ω –¥–ª—è –ø–∞—Ä—ã {}", intersectionsCount, currentPair.getPairName());

            // –°–æ–∑–¥–∞–µ–º —á–∞—Ä—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
            BufferedImage intersectionsChart = chartService.createNormalizedPriceIntersectionsChart(
                    longCandles, shortCandles, currentPair.getPairName(), intersectionsCount, false);

            if (intersectionsChart != null) {
                StreamResource intersectionsResource = createStreamResource(intersectionsChart, "intersections-chart.png");
                intersectionsChartImage.setSrc(intersectionsResource);
                intersectionsChartImage.setAlt("Intersections Chart for " + currentPair.getPairName());

                // –î–æ–±–∞–≤–ª—è–µ–º crosshair —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
                addCrosshairToIntersectionsChart();

                log.debug("‚úÖ –ß–∞—Ä—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω");
            } else {
                intersectionsChartImage.setSrc("");
                intersectionsChartImage.setAlt("Failed to generate intersections chart");
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞—Ä—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π");
            }

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ä—Ç–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π", e);
            intersectionsChartImage.setSrc("");
            intersectionsChartImage.setAlt("Chart generation error");
        }
    }

    /**
     * –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –º–µ–∂–¥—É –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
     */
    private int calculateIntersections(java.util.List<com.example.shared.dto.Candle> longCandles,
                                       java.util.List<com.example.shared.dto.Candle> shortCandles) {
        try {
            int minSize = Math.min(longCandles.size(), shortCandles.size());
            if (minSize < 2) return 0;

            // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ü–µ–Ω—ã
            double[] normalizedLongPrices = normalizePrices(longCandles, minSize);
            double[] normalizedShortPrices = normalizePrices(shortCandles, minSize);

            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
            int intersections = 0;
            boolean firstAboveSecond = normalizedLongPrices[0] > normalizedShortPrices[0];

            for (int i = 1; i < minSize; i++) {
                boolean currentFirstAboveSecond = normalizedLongPrices[i] > normalizedShortPrices[i];
                if (currentFirstAboveSecond != firstAboveSecond) {
                    intersections++;
                    firstAboveSecond = currentFirstAboveSecond;
                }
            }

            return intersections;
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π: {}", e.getMessage(), e);
            return 0;
        }
    }

    /**
     * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ü–µ–Ω—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω [0, 1]
     */
    private double[] normalizePrices(java.util.List<com.example.shared.dto.Candle> candles, int size) {
        double[] prices = new double[size];
        double min = Double.MAX_VALUE;
        double max = Double.MIN_VALUE;

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è –∏ –Ω–∞—Ö–æ–¥–∏–º min/max
        for (int i = 0; i < size; i++) {
            prices[i] = candles.get(i).getClose();
            min = Math.min(min, prices[i]);
            max = Math.max(max, prices[i]);
        }

        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º
        double range = max - min;
        if (range == 0) {
            return new double[size]; // –í—Å–µ —Ü–µ–Ω—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
        }

        for (int i = 0; i < size; i++) {
            prices[i] = (prices[i] - min) / range;
        }

        return prices;
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–∞–Ω–Ω—ã—Ö
     */
    private void updateDataInfoPanel(Pair tradingPair) {
        dataInfoPanel.removeAll();

        try {
            log.debug("üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –¥–ª—è –ø–∞—Ä—ã: {}", tradingPair.getPairName());

            VerticalLayout infoLayout = new VerticalLayout();
            infoLayout.setSpacing(false);
            infoLayout.setPadding(false);

            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            Span titleSpan = new Span("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö");
            titleSpan.getStyle().set("font-weight", "bold");
            titleSpan.getStyle().set("font-size", "1.1rem");
            titleSpan.getStyle().set("color", "var(--lumo-primary-text-color)");
            titleSpan.getStyle().set("margin-bottom", "0.5rem");
            titleSpan.getStyle().set("display", "block");

            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Long —Ç–∏–∫–µ—Ä–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π)
            String longInfo = formatRealTickerInfo(
                    tradingPair.getLongTicker(),
                    tradingPair.getLongTickerCandles()
            );

            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Short —Ç–∏–∫–µ—Ä–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π)
            String shortInfo = formatRealTickerInfo(
                    tradingPair.getShortTicker(),
                    tradingPair.getShortTickerCandles()
            );

            // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–∏–∫–µ—Ä—ã –ø–æ –¥–≤–æ–µ—Ç–æ—á–∏—é
            java.util.List<String> alignedTickerInfos = alignTickersByColon(
                    java.util.List.of(longInfo, shortInfo)
            );
            String alignedLongInfo = alignedTickerInfos.get(0);
            String alignedShortInfo = alignedTickerInfos.get(1);

            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
            int intersectionsCount = calculateIntersections(tradingPair.getLongTickerCandles(), tradingPair.getShortTickerCandles());
            int totalPoints = Math.min(
                    tradingPair.getLongTickerCandles() != null ? tradingPair.getLongTickerCandles().size() : 0,
                    tradingPair.getShortTickerCandles() != null ? tradingPair.getShortTickerCandles().size() : 0
            );

            double intersectionPercent = totalPoints > 0 ? (double) intersectionsCount / totalPoints * 100 : 0;
            String intersectionInfo = String.format("–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π: %.1f%% (%d)",
                    intersectionPercent, intersectionsCount);

            // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            Span longSpan = new Span(alignedLongInfo);
            longSpan.getStyle().set("display", "block");
            longSpan.getStyle().set("margin-bottom", "0.3rem");
            longSpan.getStyle().set("color", "#4CAF50"); // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è LONG
            longSpan.getStyle().set("font-family", "monospace");

            Span shortSpan = new Span(alignedShortInfo);
            shortSpan.getStyle().set("display", "block");
            shortSpan.getStyle().set("margin-bottom", "0.5rem"); // –ë–æ–ª—å—à–∏–π –æ—Ç—Å—Ç—É–ø –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è–º–∏
            shortSpan.getStyle().set("color", "#F44336"); // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è SHORT
            shortSpan.getStyle().set("font-family", "monospace");

            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è—Ö
            Span intersectionSpan = new Span(intersectionInfo);
            intersectionSpan.getStyle().set("display", "block");
            intersectionSpan.getStyle().set("color", "#2196F3"); // –°–∏–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
            intersectionSpan.getStyle().set("font-weight", "bold");
            intersectionSpan.getStyle().set("font-family", "monospace");

            infoLayout.add(titleSpan, longSpan, shortSpan, intersectionSpan);
            dataInfoPanel.add(infoLayout);

            log.debug("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞");
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏", e);
            Span errorSpan = new Span("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∞–Ω–Ω—ã—Ö");
            errorSpan.getStyle().set("color", "var(--lumo-error-text-color)");
            dataInfoPanel.add(errorSpan);
        }
    }

    /**
     * –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ç–∏–∫–µ—Ä—ã –ø–æ –¥–≤–æ–µ—Ç–æ—á–∏—é, –¥–æ–±–∞–≤–ª—è—è –ø—Ä–æ–±–µ–ª—ã –ø–µ—Ä–µ–¥ –¥–≤–æ–µ—Ç–æ—á–∏–µ–º
     */
    private java.util.List<String> alignTickersByColon(java.util.List<String> tickers) {
        if (tickers == null || tickers.isEmpty()) {
            return tickers;
        }

        // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É —Ç–∏–∫–µ—Ä–∞ (–¥–æ –¥–≤–æ–µ—Ç–æ—á–∏—è)
        int maxTickerLength = tickers.stream()
                .mapToInt(info -> {
                    int colonIndex = info.indexOf(':');
                    return colonIndex > 0 ? colonIndex : info.length();
                })
                .max()
                .orElse(0);

        // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
        return tickers.stream()
                .map(info -> {
                    int colonIndex = info.indexOf(':');
                    if (colonIndex > 0) {
                        String tickerPart = info.substring(0, colonIndex);
                        String restPart = info.substring(colonIndex);

                        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
                        int spacesToAdd = maxTickerLength - tickerPart.length();
                        String padding = " ".repeat(Math.max(0, spacesToAdd));

                        return tickerPart + padding + restPart;
                    } else {
                        return info; // –ï—Å–ª–∏ –Ω–µ—Ç –¥–≤–æ–µ—Ç–æ—á–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    }
                })
                .toList();
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ä–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π
     */
    private String formatRealTickerInfo(String ticker, java.util.List<com.example.shared.dto.Candle> candles) {
        if (candles == null || candles.isEmpty()) {
            return String.format("%s: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", ticker);
        }

        try {
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–≤–µ—á–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            var sortedCandles = candles.stream()
                    .sorted(java.util.Comparator.comparing(com.example.shared.dto.Candle::getTimestamp))
                    .toList();

            int totalCandles = sortedCandles.size();
            long firstCandleTime = sortedCandles.get(0).getTimestamp();
            long lastCandleTime = sortedCandles.get(totalCandles - 1).getTimestamp();

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –¢–§ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É —Å–≤–µ—á–∞–º–∏
            String realTimeframe = "N/A";
            String realPeriod = "N/A";

            if (totalCandles >= 2) {
                long timeDiffMs = sortedCandles.get(1).getTimestamp() - sortedCandles.get(0).getTimestamp();
                realTimeframe = determineTimeframeFromDiff(timeDiffMs);
                realPeriod = calculateRealPeriod(firstCandleTime, lastCandleTime);
            }

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
            String datePattern = getRealDatePattern(realTimeframe);
            java.text.SimpleDateFormat formatter = new java.text.SimpleDateFormat(datePattern);
            formatter.setTimeZone(java.util.TimeZone.getTimeZone("UTC"));

            String firstDate = formatter.format(new java.util.Date(firstCandleTime));
            String lastDate = formatter.format(new java.util.Date(lastCandleTime));

            return String.format("%s: %s, %s, %d —Ç–æ—á–µ–∫, —Å %s –ø–æ %s",
                    ticker, realTimeframe, realPeriod, totalCandles, firstDate, lastDate);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–∫–µ—Ä–µ {}: {}", ticker, e.getMessage());
            return String.format("%s: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (%d —Å–≤–µ—á–µ–π)", ticker, candles.size());
        }
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É —Å–≤–µ—á–∞–º–∏
     */
    private String determineTimeframeFromDiff(long timeDiffMs) {
        long minutes = timeDiffMs / (1000 * 60);

        if (minutes == 1) return "1m";
        else if (minutes == 5) return "5m";
        else if (minutes == 15) return "15m";
        else if (minutes == 30) return "30m";
        else if (minutes == 60) return "1H";
        else if (minutes == 240) return "4H";
        else if (minutes == 1440) return "1D";
        else return minutes + "m";
    }

    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
     */
    private String calculateRealPeriod(long startTime, long endTime) {
        long durationMs = endTime - startTime;
        long days = durationMs / (1000 * 60 * 60 * 24);

        if (days >= 365) {
            int years = (int) (days / 365);
            int remainingDays = (int) (days % 365);
            if (remainingDays == 0) {
                return years == 1 ? "1 –≥–æ–¥" : years + " –ª–µ—Ç";
            } else {
                return String.format("%d %s %d –¥–Ω.", years, years == 1 ? "–≥–æ–¥" : "–ª–µ—Ç", remainingDays);
            }
        } else if (days >= 30) {
            int months = (int) (days / 30);
            int remainingDays = (int) (days % 30);
            if (remainingDays == 0) {
                return months == 1 ? "1 –º–µ—Å—è—Ü" : months + " –º–µ—Å.";
            } else {
                return String.format("%d –º–µ—Å. %d –¥–Ω.", months, remainingDays);
            }
        } else {
            return days == 1 ? "1 –¥–µ–Ω—å" : days + " –¥–Ω–µ–π";
        }
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω –¥–∞—Ç—ã –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
     */
    private String getRealDatePattern(String timeframe) {
        return switch (timeframe) {
            case "1m", "5m", "15m", "30m", "1H", "4H" -> "dd.MM.yyyy HH:mm";
            case "1D" -> "dd.MM.yyyy";
            default -> "dd.MM.yyyy HH:mm";
        };
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ä–µ (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥)
     */
    @Deprecated
    private String formatTickerInfo(String ticker, java.util.List<com.example.shared.dto.Candle> candles,
                                    String timeframe, String period) {
        if (candles == null || candles.isEmpty()) {
            return String.format("%s: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", ticker);
        }

        try {
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–≤–µ—á–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏
            var sortedCandles = candles.stream()
                    .sorted(java.util.Comparator.comparing(com.example.shared.dto.Candle::getTimestamp))
                    .toList();

            int totalCandles = sortedCandles.size();
            long firstCandleTime = sortedCandles.get(0).getTimestamp();
            long lastCandleTime = sortedCandles.get(totalCandles - 1).getTimestamp();

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã —Å —É—á–µ—Ç–æ–º –¢–§
            String datePattern = getDatePattern(timeframe);
            java.text.SimpleDateFormat formatter = new java.text.SimpleDateFormat(datePattern);
            formatter.setTimeZone(java.util.TimeZone.getTimeZone("UTC"));

            String firstDate = formatter.format(new java.util.Date(firstCandleTime));
            String lastDate = formatter.format(new java.util.Date(lastCandleTime));

            return String.format("%s: %s, %s, %d —Ç–æ—á–µ–∫, —Å %s –ø–æ %s",
                    ticker, timeframe, period, totalCandles, firstDate, lastDate);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–∫–µ—Ä–µ {}: {}", ticker, e.getMessage());
            return String.format("%s: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö (%d —Å–≤–µ—á–µ–π)", ticker, candles.size());
        }
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¢–§ (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥)
     */
    @Deprecated
    private String getDatePattern(String timeframe) {
        return switch (timeframe) {
            case "1m", "5m", "15m", "30m" -> "dd.MM.yyyy HH:mm";
            case "1H", "4H" -> "dd.MM.yyyy HH:mm";
            case "1d", "1D" -> "dd.MM.yyyy";
            default -> "dd.MM.yyyy HH:mm";
        };
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä–∏–æ–¥ –≤ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–π –≤–∏–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ candleLimit –∏ timeframe
     */
    private String formatPeriod(double candleLimit, String timeframe) {
        if (candleLimit <= 0 || timeframe == null) {
            return "N/A";
        }

        try {
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º candleLimit –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç timeframe
            double totalDays = switch (timeframe.toLowerCase()) {
                case "1m" -> candleLimit / (24 * 60);           // 1 –º–∏–Ω—É—Ç–∞ = 1440 —Å–≤–µ—á–µ–π –≤ –¥–µ–Ω—å
                case "5m" -> candleLimit / (24 * 12);           // 5 –º–∏–Ω—É—Ç = 288 —Å–≤–µ—á–µ–π –≤ –¥–µ–Ω—å
                case "15m" -> candleLimit / (24 * 4);           // 15 –º–∏–Ω—É—Ç = 96 —Å–≤–µ—á–µ–π –≤ –¥–µ–Ω—å
                case "30m" -> candleLimit / (24 * 2);           // 30 –º–∏–Ω—É—Ç = 48 —Å–≤–µ—á–µ–π –≤ –¥–µ–Ω—å
                case "1h" -> candleLimit / 24;                  // 1 —á–∞—Å = 24 —Å–≤–µ—á–∏ –≤ –¥–µ–Ω—å
                case "4h" -> candleLimit / 6;                   // 4 —á–∞—Å–∞ = 6 —Å–≤–µ—á–µ–π –≤ –¥–µ–Ω—å
                case "1d" -> candleLimit;                      // 1 –¥–µ–Ω—å = 1 —Å–≤–µ—á–∞ –≤ –¥–µ–Ω—å
                default -> candleLimit;                         // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞–∫ –¥–Ω–∏
            };

            int days = (int) Math.round(totalDays);

            if (days >= 365) {
                int years = days / 365;
                int remainingDays = days % 365;
                if (remainingDays == 0) {
                    return years == 1 ? "1 –≥–æ–¥" : years + " –ª–µ—Ç";
                } else {
                    return String.format("%d %s %d –¥–Ω.", years, years == 1 ? "–≥–æ–¥" : "–ª–µ—Ç", remainingDays);
                }
            } else if (days >= 30) {
                int months = days / 30;
                int remainingDays = days % 30;
                if (remainingDays == 0) {
                    return months == 1 ? "1 –º–µ—Å—è—Ü" : months + " –º–µ—Å.";
                } else {
                    return String.format("%d –º–µ—Å. %d –¥–Ω.", months, remainingDays);
                }
            } else {
                return days == 1 ? "1 –¥–µ–Ω—å" : days + " –¥–Ω–µ–π";
            }

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–∞: {}", e.getMessage(), e);
            return String.format("%.0f —Å–≤–µ—á–µ–π", candleLimit);
        }
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç crosshair —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫ –≥–ª–∞–≤–Ω–æ–º—É –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–º—É —á–∞—Ä—Ç—É
     * üéØ –¢–û–õ–¨–ö–û –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏! –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è Z-Score —Å–µ–∫—Ü–∏–∏!
     */
    private void addCrosshairToMainChart() {
        mainChartImage.getElement().executeJs("""
                // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å relative –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è crosshair
                const imageContainer = document.createElement('div');
                imageContainer.style.position = 'relative';
                imageContainer.style.display = 'inline-block';
                imageContainer.style.width = '100%';
                imageContainer.style.height = '100%';
                
                // –ü–µ—Ä–µ–Ω–æ—Å–∏–º image –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                const img = this;
                const parent = img.parentNode;
                parent.insertBefore(imageContainer, img);
                imageContainer.appendChild(img);
                
                // –°–æ–∑–¥–∞–µ–º –¢–û–õ–¨–ö–û –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é crosshair
                const verticalLine = document.createElement('div');
                verticalLine.style.position = 'absolute';
                verticalLine.style.top = '0';
                verticalLine.style.width = '1px';
                verticalLine.style.height = '100%';
                verticalLine.style.backgroundColor = '#FF6B6B';
                verticalLine.style.pointerEvents = 'none';
                verticalLine.style.display = 'none';
                verticalLine.style.zIndex = '1000';
                imageContainer.appendChild(verticalLine);
                
                // üéØ –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –ù–ï —Å–æ–∑–¥–∞–µ–º - —Ç–æ–ª—å–∫–æ –¥–ª—è Z-Score —Å–µ–∫—Ü–∏–∏!
                
                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏ –¥–ª—è crosshair
                img.addEventListener('mouseenter', function() {
                    verticalLine.style.display = 'block';
                    // üéØ –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º - —Ç–æ–ª—å–∫–æ –¥–ª—è Z-Score —Å–µ–∫—Ü–∏–∏!
                });
                
                img.addEventListener('mouseleave', function() {
                    verticalLine.style.display = 'none';
                    // üéØ –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –ù–ï —Å–∫—Ä—ã–≤–∞–µ–º - —Ç–æ–ª—å–∫–æ –¥–ª—è Z-Score —Å–µ–∫—Ü–∏–∏!
                });
                
                img.addEventListener('mousemove', function(e) {
                    const rect = img.getBoundingClientRect();
                    const x = e.clientX - rect.left;
                
                    verticalLine.style.left = x + 'px';
                    // üéØ –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –ù–ï –ø–µ—Ä–µ–º–µ—â–∞–µ–º - —Ç–æ–ª—å–∫–æ –¥–ª—è Z-Score —Å–µ–∫—Ü–∏–∏!
                });
                
                img.style.cursor = 'crosshair';
                """);
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç crosshair —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫ —á–∞—Ä—Ç—É –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
     * üéØ –¢–û–õ–¨–ö–û –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏! –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è Z-Score —Å–µ–∫—Ü–∏–∏!
     */
    private void addCrosshairToIntersectionsChart() {
        intersectionsChartImage.getElement().executeJs("""
                // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å relative –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è crosshair
                const imageContainer = document.createElement('div');
                imageContainer.style.position = 'relative';
                imageContainer.style.display = 'inline-block';
                imageContainer.style.width = '100%';
                imageContainer.style.height = '100%';
                
                // –ü–µ—Ä–µ–Ω–æ—Å–∏–º image –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                const img = this;
                const parent = img.parentNode;
                parent.insertBefore(imageContainer, img);
                imageContainer.appendChild(img);
                
                // –°–æ–∑–¥–∞–µ–º –¢–û–õ–¨–ö–û –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é crosshair
                const verticalLine = document.createElement('div');
                verticalLine.style.position = 'absolute';
                verticalLine.style.top = '0';
                verticalLine.style.width = '1px';
                verticalLine.style.height = '100%';
                verticalLine.style.backgroundColor = '#FF6B6B';
                verticalLine.style.pointerEvents = 'none';
                verticalLine.style.display = 'none';
                verticalLine.style.zIndex = '1000';
                imageContainer.appendChild(verticalLine);
                
                // üéØ –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –ù–ï —Å–æ–∑–¥–∞–µ–º - —Ç–æ–ª—å–∫–æ –¥–ª—è Z-Score —Å–µ–∫—Ü–∏–∏!
                
                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏ –¥–ª—è crosshair
                img.addEventListener('mouseenter', function() {
                    verticalLine.style.display = 'block';
                    // üéØ –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º - —Ç–æ–ª—å–∫–æ –¥–ª—è Z-Score —Å–µ–∫—Ü–∏–∏!
                });
                
                img.addEventListener('mouseleave', function() {
                    verticalLine.style.display = 'none';
                    // üéØ –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –ù–ï —Å–∫—Ä—ã–≤–∞–µ–º - —Ç–æ–ª—å–∫–æ –¥–ª—è Z-Score —Å–µ–∫—Ü–∏–∏!
                });
                
                img.addEventListener('mousemove', function(e) {
                    const rect = img.getBoundingClientRect();
                    const x = e.clientX - rect.left;
                
                    verticalLine.style.left = x + 'px';
                    // üéØ –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –ù–ï –ø–µ—Ä–µ–º–µ—â–∞–µ–º - —Ç–æ–ª—å–∫–æ –¥–ª—è Z-Score —Å–µ–∫—Ü–∏–∏!
                });
                
                img.style.cursor = 'crosshair';
                """);
    }

}