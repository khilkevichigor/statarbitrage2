package com.example.core.trading.services;

import com.example.core.trading.interfaces.TradingProvider;
import com.example.shared.models.Pair;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.math.RoundingMode;

@Slf4j
@Service
@RequiredArgsConstructor
public class AdaptiveAmountService {

    private static final BigDecimal PERCENT_100 = BigDecimal.valueOf(100);
    private static final BigDecimal PERCENT_START = BigDecimal.valueOf(40);
    private static final BigDecimal PERCENT_END = BigDecimal.valueOf(60);
    private static final int SCALE_PRICE = 8;
    private static final int SCALE_AMOUNT = 2;

    /**
     * –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—É–º–º –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ lot size –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
     */
    public BigDecimal[] calculate(TradingProvider provider, Pair pair, BigDecimal totalAmount) {
        try {
            BigDecimal longPrice = provider.getCurrentPrice(pair.getLongTicker());
            BigDecimal shortPrice = provider.getCurrentPrice(pair.getShortTicker());

            if (isInvalidPrice(longPrice) || isInvalidPrice(shortPrice)) {
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–≤–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ 50/50");
                return equalSplit(totalAmount);
            }

            BigDecimal bestLongAmount = BigDecimal.ZERO;
            BigDecimal bestShortAmount = BigDecimal.ZERO;
            BigDecimal minDifference = null;

            for (BigDecimal longPercent = PERCENT_START; longPercent.compareTo(PERCENT_END) <= 0; longPercent = longPercent.add(BigDecimal.ONE)) {
                BigDecimal longAmount = totalAmount.multiply(longPercent).divide(PERCENT_100, SCALE_AMOUNT, RoundingMode.HALF_UP);
                BigDecimal shortAmount = totalAmount.subtract(longAmount);

                BigDecimal adjustedLongAmount = adjustedAmount(longAmount, longPrice);
                BigDecimal adjustedShortAmount = adjustedAmount(shortAmount, shortPrice);

                BigDecimal difference = adjustedLongAmount.subtract(adjustedShortAmount).abs();

                if (minDifference == null || difference.compareTo(minDifference) < 0) {
                    minDifference = difference;
                    bestLongAmount = longAmount;
                    bestShortAmount = shortAmount;
                }
            }

            log.debug("üéØ –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: LONG = {}, SHORT = {}, –æ–∂–∏–¥–∞–µ–º–∞—è —Ä–∞–∑–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏: {}",
                    bestLongAmount, bestShortAmount, minDifference);

            return new BigDecimal[]{bestLongAmount, bestShortAmount};

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–º —Ä–∞—Å—á–µ—Ç–µ: {}. –í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–∞–≤–Ω–æ–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é 50/50", e.getMessage());
            return equalSplit(totalAmount);
        }
    }

    private boolean isInvalidPrice(BigDecimal price) {
        return price == null || price.compareTo(BigDecimal.ZERO) <= 0;
    }

    private BigDecimal adjustedAmount(BigDecimal amount, BigDecimal price) {
        BigDecimal size = amount.divide(price, SCALE_PRICE, RoundingMode.HALF_UP);
        BigDecimal adjustedSize = size.setScale(0, RoundingMode.DOWN);
        return adjustedSize.multiply(price);
    }

    private BigDecimal[] equalSplit(BigDecimal totalAmount) {
        BigDecimal half = totalAmount.divide(BigDecimal.valueOf(2), SCALE_AMOUNT, RoundingMode.HALF_UP);
        return new BigDecimal[]{half, half};
    }
}
