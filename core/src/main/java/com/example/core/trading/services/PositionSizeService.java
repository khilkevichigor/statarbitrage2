package com.example.core.trading.services;

import com.example.core.trading.interfaces.TradingProvider;
import com.example.shared.dto.Portfolio;
import com.example.shared.models.Settings;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;

@Slf4j
@Service
@RequiredArgsConstructor
public class PositionSizeService {

    public BigDecimal calculatePositionSize(TradingProvider provider, Settings settings) {
        Portfolio portfolio = provider.getPortfolio();
        if (portfolio == null) {
            log.warn("‚ö†Ô∏è –ü–æ—Ä—Ç—Ñ–µ–ª—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞, —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ = 0");
            return BigDecimal.ZERO;
        }

        BigDecimal maxShort = BigDecimal.valueOf(settings.getMaxShortMarginSize());
        BigDecimal maxLong = BigDecimal.valueOf(settings.getMaxLongMarginSize());
        BigDecimal totalAllocation = maxShort.add(maxLong);

        log.debug("üí∞ –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π: –æ–±—â–∞—è –∞–ª–ª–æ–∫–∞—Ü–∏—è {} USDT (–±–µ–∑ —É—á–µ—Ç–∞ –ø–ª–µ—á–∞)", totalAllocation);

        BigDecimal availableBalance = portfolio.getAvailableBalance();
        BigDecimal resultSize = totalAllocation.min(availableBalance);

        log.debug("üí∞ –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–π: {} USDT (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω –±–∞–ª–∞–Ω—Å–æ–º: {} USDT)", resultSize, availableBalance);
        return resultSize;
    }

}
