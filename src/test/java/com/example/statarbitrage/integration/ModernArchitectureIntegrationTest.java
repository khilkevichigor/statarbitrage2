package com.example.statarbitrage.integration;

import com.example.statarbitrage.dto.TradingPair;
import com.example.statarbitrage.model.Candle;
import com.example.statarbitrage.model.PairData;
import com.example.statarbitrage.model.Settings;
import com.example.statarbitrage.processor.ModernFetchPairsProcessor;
import com.example.statarbitrage.processor.ModernStartTradeProcessor;
import com.example.statarbitrage.processor.ModernUpdateTradeProcessor;
import com.example.statarbitrage.service.ModernPairDataService;
import com.example.statarbitrage.service.ModernValidateService;
import com.example.statarbitrage.service.ModernZScoreService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;

/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å TradingPair
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å—é —Ü–µ–ø–æ—á–∫—É –æ—Ç API –¥–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π
 */
@SpringBootTest
class ModernArchitectureIntegrationTest {

    private Settings testSettings;
    private Map<String, List<Candle>> testCandlesMap;
    
    @BeforeEach
    void setUp() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        testSettings = new Settings();
        testSettings.setMinCorrelation(0.7);
        testSettings.setMinPvalue(0.05);
        testSettings.setMinZ(2.0);
        testSettings.setMinAdfValue(0.05);
        testSettings.setMinWindowSize(30);
        
        // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π
        testCandlesMap = createTestCandlesData();
    }

    @Test
    void testTradingPairCreationAndValidation() {
        System.out.println("üß™ –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è TradingPair");
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É
        TradingPair pair = TradingPair.builder()
                .buyTicker("ETH-USDT-SWAP")
                .sellTicker("BTC-USDT-SWAP")
                .zscore(2.5)
                .correlation(0.8)
                .pValue(0.02)
                .adfpvalue(0.03)
                .alpha(0.1)
                .beta(0.9)
                .spread(100.5)
                .mean(95.0)
                .std(15.2)
                .timestamp(System.currentTimeMillis())
                .observations(100)
                .rSquared(0.85)
                .build();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        assertEquals("ETH-USDT-SWAP", pair.getBuyTicker());
        assertEquals("BTC-USDT-SWAP", pair.getSellTicker());
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (deprecated –º–µ—Ç–æ–¥—ã)
        @SuppressWarnings("deprecation")
        String longTicker = pair.getLongTicker();
        @SuppressWarnings("deprecation")
        String shortTicker = pair.getShortTicker();
        assertEquals("ETH-USDT-SWAP", longTicker);
        assertEquals("BTC-USDT-SWAP", shortTicker);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É
        assertTrue(pair.isValidForTrading(0.7, 0.05, 2.0));
        assertTrue(pair.isValidForTradingExtended(0.7, 0.05, 2.0, 0.05));
        assertEquals(2.5, pair.getSignalStrength());
        assertEquals("MEAN_REVERSION", pair.getTradeDirection());
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        String displayName = pair.getDisplayName();
        assertTrue(displayName.contains("ETH-USDT-SWAP"));
        assertTrue(displayName.contains("BTC-USDT-SWAP"));
        
        System.out.println("‚úÖ –¢–µ—Å—Ç 1 –ø—Ä–æ–π–¥–µ–Ω: " + displayName);
    }

    @Test
    void testModernValidateService() {
        System.out.println("üß™ –¢–µ—Å—Ç 2: ModernValidateService");
        
        ModernValidateService validateService = new ModernValidateService();
        
        // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–∞—Ä
        List<TradingPair> pairs = createTestTradingPairs();
        
        // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
        validateService.validateSizeOfPairsAndThrow(pairs, 2);
        
        // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ Z-score
        validateService.validatePositiveZAndThrow(pairs);
        
        // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏
        validateService.validateTradingCriteria(pairs, testSettings);
        
        // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        validateService.validateDataQuality(pairs);
        
        // –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
        ModernValidateService.ValidationReport report = validateService.generateValidationReport(pairs, testSettings);
        assertTrue(report.totalPairs > 0);
        assertTrue(report.validPairs > 0);
        assertTrue(report.isAcceptable());
        
        System.out.println("‚úÖ –¢–µ—Å—Ç 2 –ø—Ä–æ–π–¥–µ–Ω: –≤–∞–ª–∏–¥–∞—Ü–∏—è " + report.totalPairs + " –ø–∞—Ä");
    }

    @Test
    void testModernPairDataService() {
        System.out.println("üß™ –¢–µ—Å—Ç 3: ModernPairDataService");
        
        ModernPairDataService pairDataService = new ModernPairDataService();
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É
        TradingPair tradingPair = createTestTradingPairs().get(0);
        
        // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è PairData
        PairData pairData = pairDataService.createPairData(tradingPair, testCandlesMap);
        
        assertNotNull(pairData);
        assertEquals(tradingPair.getBuyTicker(), pairData.getLongTicker());
        assertEquals(tradingPair.getSellTicker(), pairData.getShortTicker());
        assertEquals(tradingPair.getZscore(), pairData.getZScoreCurrent());
        assertEquals(tradingPair.getCorrelation(), pairData.getCorrelationCurrent());
        
        // –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è PairData
        TradingPair updatedPair = TradingPair.builder()
                .buyTicker(tradingPair.getBuyTicker())
                .sellTicker(tradingPair.getSellTicker())
                .zscore(3.0) // –ù–æ–≤—ã–π Z-score
                .correlation(0.85) // –ù–æ–≤–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è
                .pValue(0.01)
                .build();
        
        pairDataService.updatePairData(pairData, updatedPair, testCandlesMap);
        assertEquals(3.0, pairData.getZScoreCurrent());
        assertEquals(0.85, pairData.getCorrelationCurrent());
        
        // –¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ TradingPair
        TradingPair convertedPair = pairDataService.convertToTradingPair(pairData);
        assertEquals(pairData.getLongTicker(), convertedPair.getBuyTicker());
        assertEquals(pairData.getZScoreCurrent(), convertedPair.getZscore());
        
        System.out.println("‚úÖ –¢–µ—Å—Ç 3 –ø—Ä–æ–π–¥–µ–Ω: —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ PairData");
    }

    @Test
    void testProcessorsWorkflow() {
        System.out.println("üß™ –¢–µ—Å—Ç 4: Workflow –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤");
        
        // –ú–æ–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã (–≤ —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –±—ã @MockBean)
        ModernZScoreService mockZScoreService = new MockModernZScoreService();
        ModernPairDataService pairDataService = new ModernPairDataService();
        ModernValidateService validateService = new ModernValidateService();
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã
        ModernFetchPairsProcessor fetchProcessor = new ModernFetchPairsProcessor(mockZScoreService, pairDataService);
        ModernStartTradeProcessor startProcessor = new ModernStartTradeProcessor(mockZScoreService, pairDataService);
        ModernUpdateTradeProcessor updateProcessor = new ModernUpdateTradeProcessor(mockZScoreService, pairDataService);
        
        try {
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä (–±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏)
            System.out.println("   - Fetch –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–æ–∑–¥–∞–Ω");
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ —Ç—Ä–µ–π–¥–∞
            PairData testPairData = createTestPairData();
            System.out.println("   - Start –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–æ–∑–¥–∞–Ω");
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∞
            System.out.println("   - Update –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–æ–∑–¥–∞–Ω");
            
            System.out.println("‚úÖ –¢–µ—Å—Ç 4 –ø—Ä–æ–π–¥–µ–Ω: –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ");
            
        } catch (Exception e) {
            System.out.println("‚ö†Ô∏è –¢–µ—Å—Ç 4: –æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ - " + e.getMessage());
        }
    }

    @Test
    void testFullWorkflowSimulation() {
        System.out.println("üß™ –¢–µ—Å—Ç 5: –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ workflow");
        
        // –≠—Ç–æ—Ç —Ç–µ—Å—Ç —Å–∏–º—É–ª–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤
        
        // 1. –°–æ–∑–¥–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã
        List<TradingPair> pairs = createTestTradingPairs();
        System.out.println("   1. –°–æ–∑–¥–∞–Ω–æ " + pairs.size() + " —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä");
        
        // 2. –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–∞—Ä—ã
        ModernValidateService validateService = new ModernValidateService();
        validateService.validateFullPairList(pairs, testSettings, 1);
        System.out.println("   2. –ü–∞—Ä—ã –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é");
        
        // 3. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PairData
        ModernPairDataService pairDataService = new ModernPairDataService();
        List<PairData> pairDataList = pairDataService.createPairDataList(pairs, testCandlesMap);
        assertEquals(pairs.size(), pairDataList.size());
        System.out.println("   3. –°–æ–∑–¥–∞–Ω–æ " + pairDataList.size() + " –æ–±—ä–µ–∫—Ç–æ–≤ PairData");
        
        // 4. –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        for (PairData pairData : pairDataList) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            TradingPair updatedPair = pairs.get(0); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –ø–∞—Ä—É –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            pairDataService.updatePairData(pairData, updatedPair, testCandlesMap);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            assertNotNull(pairData.getLongTicker());
            assertNotNull(pairData.getShortTicker());
            assertTrue(pairData.getZScoreCurrent() != 0);
        }
        System.out.println("   4. –û–±–Ω–æ–≤–ª–µ–Ω—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä");
        
        // 5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        ModernValidateService.ValidationReport report = validateService.generateValidationReport(pairs, testSettings);
        assertTrue(report.isAcceptable());
        System.out.println("   5. –û—Ç—á–µ—Ç: " + report.validPairs + "/" + report.totalPairs + " –≤–∞–ª–∏–¥–Ω—ã—Ö –ø–∞—Ä");
        
        System.out.println("‚úÖ –¢–µ—Å—Ç 5 –ø—Ä–æ–π–¥–µ–Ω: –ø–æ–ª–Ω—ã–π workflow —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω");
    }

    // === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===

    private List<TradingPair> createTestTradingPairs() {
        List<TradingPair> pairs = new ArrayList<>();
        
        pairs.add(TradingPair.builder()
                .buyTicker("ETH-USDT-SWAP")
                .sellTicker("BTC-USDT-SWAP")
                .zscore(2.5)
                .correlation(0.8)
                .pValue(0.02)
                .adfpvalue(0.03)
                .timestamp(System.currentTimeMillis())
                .build());
        
        pairs.add(TradingPair.builder()
                .buyTicker("LTC-USDT-SWAP")
                .sellTicker("BCH-USDT-SWAP")
                .zscore(3.1)
                .correlation(-0.75)
                .pValue(0.01)
                .adfpvalue(0.02)
                .timestamp(System.currentTimeMillis())
                .build());
        
        pairs.add(TradingPair.builder()
                .buyTicker("ADA-USDT-SWAP")
                .sellTicker("DOT-USDT-SWAP")
                .zscore(-2.8)
                .correlation(0.72)
                .pValue(0.03)
                .adfpvalue(0.04)
                .timestamp(System.currentTimeMillis())
                .build());
        
        return pairs;
    }

    private Map<String, List<Candle>> createTestCandlesData() {
        Map<String, List<Candle>> candlesMap = new HashMap<>();
        
        String[] tickers = {"ETH-USDT-SWAP", "BTC-USDT-SWAP", "LTC-USDT-SWAP", "BCH-USDT-SWAP", "ADA-USDT-SWAP", "DOT-USDT-SWAP"};
        double[] basePrices = {3000, 45000, 150, 500, 0.5, 25};
        
        for (int i = 0; i < tickers.length; i++) {
            List<Candle> candles = new ArrayList<>();
            double basePrice = basePrices[i];
            
            for (int j = 0; j < 100; j++) {
                Candle candle = new Candle();
                candle.setTimestamp(System.currentTimeMillis() - (100 - j) * 60000L);
                candle.setClose(basePrice + Math.sin(j * 0.1) * basePrice * 0.05); // –°–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è
                candles.add(candle);
            }
            
            candlesMap.put(tickers[i], candles);
        }
        
        return candlesMap;
    }

    private PairData createTestPairData() {
        PairData pairData = new PairData();
        pairData.setLongTicker("ETH-USDT-SWAP");
        pairData.setShortTicker("BTC-USDT-SWAP");
        pairData.setZScoreCurrent(2.5);
        pairData.setZScoreEntry(2.5);
        pairData.setCorrelationCurrent(0.8);
        pairData.setPValueCurrent(0.02);
        pairData.setLongTickerCurrentPrice(3000.0);
        pairData.setShortTickerCurrentPrice(45000.0);
        pairData.setUpdatedTime(System.currentTimeMillis());
        return pairData;
    }

    // –ú–æ–∫-–∫–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    private static class MockModernZScoreService extends ModernZScoreService {
        public MockModernZScoreService() {
            super(null); // –ü–µ—Ä–µ–¥–∞–µ–º null –¥–ª—è adapter, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –º–æ–∫
        }
        
        @Override
        public List<TradingPair> getTopNPairs(Settings settings, Map<String, List<Candle>> candlesMap, int count) {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            List<TradingPair> pairs = new ArrayList<>();
            for (int i = 0; i < count; i++) {
                pairs.add(TradingPair.builder()
                        .buyTicker("MOCK-BUY-" + i)
                        .sellTicker("MOCK-SELL-" + i)
                        .zscore(2.0 + i)
                        .correlation(0.8)
                        .pValue(0.02)
                        .build());
            }
            return pairs;
        }
    }
}