package com.example.statarbitrage.client;

import com.example.statarbitrage.dto.TradingPair;
import com.example.statarbitrage.model.Candle;
import com.example.statarbitrage.model.Settings;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.Duration;
import java.util.List;
import java.util.Map;

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π REST –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Python API
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —É–ø—Ä–æ—â–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É TradingPair
 */
@Slf4j
@Component("modernPythonRestClient")
public class PythonRestClient {

    private static final ObjectMapper objectMapper = new ObjectMapper();
    private final HttpClient httpClient;
    
    @Value("${python.service.url:http://localhost:8282}")
    private String pythonServiceUrl;

    public PythonRestClient() {
        this.httpClient = HttpClient.newBuilder()
                .connectTimeout(Duration.ofSeconds(30))
                .build();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç /discover-pairs
     */
    public List<TradingPair> discoverTradingPairs(Settings settings, Map<String, List<Candle>> candlesMap) {
        log.info("üîç –ü–æ–∏—Å–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä —á–µ—Ä–µ–∑ Python API: {} —Ç–∏–∫–µ—Ä–æ–≤", candlesMap.size());
        
        DiscoveryRequest requestBody = new DiscoveryRequest(candlesMap, settings);
        
        try {
            String json = objectMapper.writeValueAsString(requestBody);
            
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(pythonServiceUrl + "/discover-pairs"))
                    .header("Content-Type", "application/json")
                    .timeout(Duration.ofSeconds(120)) // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    .POST(HttpRequest.BodyPublishers.ofString(json, StandardCharsets.UTF_8))
                    .build();

            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());

            if (response.statusCode() != 200) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç Python API: {} - {}", response.statusCode(), response.body());
                throw new RuntimeException("Python service error: " + response.statusCode());
            }

            // –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Python API
            Map<String, Object> responseMap = objectMapper.readValue(response.body(), new TypeReference<>() {});
            
            boolean success = (Boolean) responseMap.get("success");
            if (!success) {
                log.error("‚ùå Python API –≤–µ—Ä–Ω—É–ª success=false");
                throw new RuntimeException("Python service returned failure");
            }
            
            int pairsFound = (Integer) responseMap.get("pairs_found");
            log.info("‚úÖ –ù–∞–π–¥–µ–Ω–æ {} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä", pairsFound);
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º results –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ TradingPair
            List<Object> results = (List<Object>) responseMap.get("results");
            String resultsJson = objectMapper.writeValueAsString(results);
            
            List<TradingPair> tradingPairs = objectMapper.readValue(resultsJson, new TypeReference<>() {});
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º timestamp –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã
            long currentTime = System.currentTimeMillis();
            tradingPairs.forEach(pair -> pair.setTimestamp(currentTime));
            
            log.info("üéØ –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–æ {} –æ–±—ä–µ–∫—Ç–æ–≤ TradingPair", tradingPairs.size());
            return tradingPairs;
            
        } catch (JsonProcessingException e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ JSON: {}", e.getMessage());
            throw new RuntimeException("JSON processing error", e);
        } catch (IOException | InterruptedException e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞: {}", e.getMessage());
            throw new RuntimeException("HTTP request error", e);
        }
    }

    /**
     * –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä—ã
     */
    public TradingPair analyzePairDetailed(String ticker1, String ticker2, 
                                          Map<String, List<Candle>> candlesMap, 
                                          Settings settings) {
        log.info("üî¨ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–∞—Ä—ã: {} / {}", ticker1, ticker2);
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω—É–∂–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤
        Map<String, List<Candle>> pairData = Map.of(
            ticker1, candlesMap.get(ticker1),
            ticker2, candlesMap.get(ticker2)
        );
        
        PairAnalysisRequest requestBody = new PairAnalysisRequest(pairData, settings, true);
        
        try {
            String json = objectMapper.writeValueAsString(requestBody);
            
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(pythonServiceUrl + "/analyze-pair"))
                    .header("Content-Type", "application/json")
                    .timeout(Duration.ofSeconds(60))
                    .POST(HttpRequest.BodyPublishers.ofString(json, StandardCharsets.UTF_8))
                    .build();

            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());

            if (response.statusCode() != 200) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ä—ã: {} - {}", response.statusCode(), response.body());
                throw new RuntimeException("Pair analysis error: " + response.statusCode());
            }

            Map<String, Object> responseMap = objectMapper.readValue(response.body(), new TypeReference<>() {});
            Object result = responseMap.get("result");
            
            String resultJson = objectMapper.writeValueAsString(result);
            TradingPair tradingPair = objectMapper.readValue(resultJson, TradingPair.class);
            
            tradingPair.setTimestamp(System.currentTimeMillis());
            
            log.info("‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {}", tradingPair.getDisplayName());
            return tradingPair;
            
        } catch (JsonProcessingException e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {}", e.getMessage());
            throw new RuntimeException("Analysis response processing error", e);
        } catch (IOException | InterruptedException e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞ –∞–Ω–∞–ª–∏–∑–∞: {}", e.getMessage());
            throw new RuntimeException("Analysis HTTP request error", e);
        }
    }

    // === –í–ù–£–¢–†–ï–ù–ù–ò–ï –ö–õ–ê–°–°–´ –î–õ–Ø –ó–ê–ü–†–û–°–û–í ===
    
    @lombok.Data
    @lombok.AllArgsConstructor
    @lombok.NoArgsConstructor
    public static class DiscoveryRequest {
        private Map<String, List<Candle>> candles_map;
        private Settings settings;
    }
    
    @lombok.Data
    @lombok.AllArgsConstructor
    @lombok.NoArgsConstructor
    public static class PairAnalysisRequest {
        private Map<String, List<Candle>> pair;
        private Settings settings;
        private boolean include_full_zscore_history;
    }
}