package com.example.statarbitrage.services;

import com.example.statarbitrage.api.PythonRestClient;
import com.example.statarbitrage.dto.Candle;
import com.example.statarbitrage.dto.ZScoreData;
import com.example.statarbitrage.dto.ZScoreParam;
import com.example.statarbitrage.model.Settings;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.*;

@Slf4j
@Service
@RequiredArgsConstructor
public class ZScoreService {

    private final PairDataService pairDataService;
    private final ValidateService validateService;

    /**
     * –°—á–∏—Ç–∞–µ—Ç Z –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä –∏–∑ —Å–≤–µ—á–µ–π.
     */
    private List<ZScoreData> calculateZScoreData(Settings settings, Map<String, List<Candle>> candlesMap, boolean excludeExistingPairs) {
        List<ZScoreData> rawZScoreList = PythonRestClient.fetchZScoreData(settings, candlesMap);
        if (rawZScoreList == null || rawZScoreList.isEmpty()) {
            log.warn("‚ö†Ô∏è ZScoreService: –ø–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –æ—Ç Python");
            return Collections.emptyList();
        }
        checkZScoreParamsSize(rawZScoreList);
        filterIncompleteZScoreParams(rawZScoreList, settings);
        if (excludeExistingPairs) {
            pairDataService.excludeExistingTradingPairs(rawZScoreList);
        }
        return rawZScoreList;
    }

    private void checkZScoreParamsSize(List<ZScoreData> rawZScoreList) {
        log.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ ZScoreParams:");
        for (ZScoreData z : rawZScoreList) {
            List<ZScoreParam> params = z.getZscoreParams();
            int size = params != null ? params.size() : 0;
            String longTicker = z.getLongTicker();
            String shortTicker = z.getShortTicker();

            double lastZ = size > 0 ? params.get(size - 1).getZscore() : 0.0;

            String msg = String.format(
                    "üìä –ü–∞—Ä–∞: %s / %s | Z-params: %d | –ü–æ—Å–ª–µ–¥–Ω–∏–π Z: %.2f",
                    longTicker, shortTicker, size, lastZ
            );
            log.info(msg);
        }
    }

    public void filterIncompleteZScoreParams(List<ZScoreData> zScoreDataList, Settings settings) {
        double expected = calculateExpectedZParamsCount(settings);
        log.info("üîç –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ZScoreParam: {}", expected);

        int before = zScoreDataList.size();

        zScoreDataList.removeIf(data -> {
            int actualSize = data.getZscoreParams().size();
            boolean isIncompleteBySize = actualSize < expected;
            if (isIncompleteBySize) {
                log.warn("‚ùå –£–¥–∞–ª—è–µ–º –ø–∞—Ä—É {} / {} ‚Äî Z-–ø–æ–∏–Ω—Ç–æ–≤ {} (–æ–∂–∏–¥–∞–ª–æ—Å—å {})",
                        data.getLongTicker(), data.getShortTicker(), actualSize, expected);
            }

            boolean isIncompleteByZ = data.getLastZScoreParam().getZscore() <= settings.getMinZ();
            if (isIncompleteByZ) {
                log.warn("‚ùå –£–¥–∞–ª—è–µ–º –ø–∞—Ä—É {} / {} ‚Äî Z={} < MinZ={}",
                        data.getLongTicker(), data.getShortTicker(), data.getLastZScoreParam().getZscore(), settings.getMinZ());
            }
            return isIncompleteBySize || isIncompleteByZ;
        });

        int after = zScoreDataList.size();
        log.info("‚úÖ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å {} –∏–∑ {} –ø–∞—Ä", after, before);
    }


    public double calculateExpectedZParamsCount(Settings settings) {
        return settings.getCandleLimit() - settings.getMinWindowSize();
    }


    public ZScoreData calculateZScoreData(Settings settings, Map<String, List<Candle>> candlesMap) {

        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ Python
        List<ZScoreData> rawZScoreList = PythonRestClient.fetchZScoreData(settings, candlesMap);
        if (rawZScoreList == null || rawZScoreList.isEmpty()) {
            log.warn("‚ö†Ô∏è ZScoreService: –ø–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –æ—Ç Python");
            throw new IllegalStateException("‚ö†Ô∏è ZScoreService: –ø–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –æ—Ç Python");
        }

        validateService.validateSizeOfPairsAndThrow(rawZScoreList, 1);

        return rawZScoreList.get(0);
    }

    public Optional<ZScoreData> calculateZScoreDataForNewTrade(Settings settings, Map<String, List<Candle>> candlesMap) {
        List<ZScoreData> rawZScoreList = PythonRestClient.fetchZScoreData(settings, candlesMap);
        if (rawZScoreList == null || rawZScoreList.isEmpty()) {
            log.warn("‚ö†Ô∏è ZScoreService: –ø–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –æ—Ç Python");
            throw new IllegalStateException("‚ö†Ô∏è ZScoreService: –ø–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –æ—Ç Python");
        }

        checkZScoreParamsSize(rawZScoreList);
        filterIncompleteZScoreParams(rawZScoreList, settings);

        return rawZScoreList.size() == 1 ? Optional.of(rawZScoreList.get(0)) : Optional.empty();
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ø-N –ª—É—á—à–∏—Ö –ø–∞—Ä.
     */
    public List<ZScoreData> getTopNPairs(Settings settings,
                                         Map<String, List<Candle>> candlesMap,
                                         int count) {

        List<ZScoreData> all = calculateZScoreData(settings, candlesMap, true);
        return obtainTopNBestPairs(settings, all, count);
    }

    //todo –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä—É—Ç–∏—Ç—å —Å—Ç–æ—Ö–∞—Å—Ç–∏–∫ –∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
    private List<ZScoreData> obtainTopNBestPairs(Settings settings, List<ZScoreData> zScoreDataList, int topN) {
        if (zScoreDataList == null || zScoreDataList.isEmpty()) {
            throw new IllegalArgumentException("–û—Ç–æ–±—Ä–∞–Ω–æ 0 –ø–∞—Ä");
        }
        if (topN <= 0) {
            throw new IllegalArgumentException("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä: topN={" + topN + "}");
        }

        List<ZScoreData> bestPairs = new ArrayList<>();
        List<ZScoreData> remainingPairs = new ArrayList<>(zScoreDataList); // –∫–æ–ø–∏—è —Å–ø–∏—Å–∫–∞

        for (int i = 0; i < topN; i++) {
            Optional<ZScoreData> maybeBest = getBestByCriteria(settings, remainingPairs);
            if (maybeBest.isPresent()) {
                ZScoreData best = maybeBest.get();
                logLastZ(best);
                bestPairs.add(best);
                remainingPairs.remove(best); // –∏—Å–∫–ª—é—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞—Ä—É –∏–∑ –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ—Ç–±–æ—Ä–∞
            }
        }

        return bestPairs;
    }

    private void logLastZ(ZScoreData zScoreData) {
        List<ZScoreParam> params = zScoreData.getZscoreParams();
        int size = params.size();

        log.info("üß™ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 Z-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è {} / {}:", zScoreData.getLongTicker(), zScoreData.getShortTicker());
        log.info(String.format("%-5s %-8s %-10s %-10s %-20s", "N", "Z", "ADF", "Corr", "Timestamp"));

        for (int i = Math.max(0, size - 5); i < size; i++) {
            ZScoreParam p = params.get(i);
            log.info(String.format(
                    "%-5d %-8.2f %-10.4f %-10.2f %-20s",
                    i + 1, p.getZscore(), p.getAdfpvalue(), p.getCorrelation(), p.getTimestamp()
            ));
        }
    }

    public Optional<ZScoreData> getBestByCriteria(Settings settings, List<ZScoreData> dataList) {
        ZScoreData best = null;
        double maxZ = Double.NEGATIVE_INFINITY;

        for (ZScoreData z : dataList) {
            List<ZScoreParam> params = z.getZscoreParams();
            if (params == null || params.isEmpty()) continue;

            ZScoreParam last = params.get(params.size() - 1);

            double zVal = last.getZscore();
            double pValue = last.getPvalue();
            double adf = last.getAdfpvalue();
            double corr = last.getCorrelation();

            // 1. Z >= minZ
            if (zVal < settings.getMinZ()) continue;

            // 2. pValue <= minPValue
            if (pValue > settings.getMinPvalue()) continue;

            // 3. adfValue <= minAdfValue
            if (adf > settings.getMinAdfValue()) continue;

            // 4. corr >= minCorr
            if (corr < settings.getMinCorrelation()) continue;

            // 5. –í—ã–±–∏—Ä–∞–µ–º —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º Z
            if (zVal > maxZ) {
                maxZ = zVal;
                best = z;
            }
        }

        return Optional.ofNullable(best);
    }
}
