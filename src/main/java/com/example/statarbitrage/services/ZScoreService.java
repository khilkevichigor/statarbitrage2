package com.example.statarbitrage.services;

import com.example.statarbitrage.model.ZScoreEntry;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.math3.stat.StatUtils;
import org.springframework.stereotype.Service;

import java.io.File;
import java.util.Comparator;
import java.util.List;

@Slf4j
@Service
@RequiredArgsConstructor
public class ZScoreService {
    private final ADFService adfService;

    private static final ObjectMapper MAPPER = new ObjectMapper();
    private static final String Z_SCORE_JSON_FILE_PATH = "z_score.json";

    public ZScoreEntry getTopPairEntry() {
        int maxAttempts = 5;
        int waitMillis = 300;

        for (int attempt = 1; attempt <= maxAttempts; attempt++) {
            List<ZScoreEntry> zScores = readZScoreJson(Z_SCORE_JSON_FILE_PATH);
            if (zScores != null && !zScores.isEmpty()) {
                return zScores.get(0);
            }

            log.warn("–ü–æ–ø—ã—Ç–∫–∞ {}: z_score.json –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω", attempt);
            try {
                Thread.sleep(waitMillis);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                throw new RuntimeException("–û–∂–∏–¥–∞–Ω–∏–µ —á—Ç–µ–Ω–∏—è z_score.json –ø—Ä–µ—Ä–≤–∞–Ω–æ", e);
            }
        }

        log.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å z_score.json –ø–æ—Å–ª–µ {} –ø–æ–ø—ã—Ç–æ–∫", maxAttempts);
        throw new RuntimeException("‚ö†Ô∏è z_score.json –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–æ–∫");
    }

    public List<ZScoreEntry> readZScoreJson(String zScoreJsonFilePath) {
        try {
            return MAPPER.readValue(new File(zScoreJsonFilePath), new TypeReference<>() {
            });
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public void keepBestPairByZscoreAndPvalue() {
        //–û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –ª—É—á—à—É—é –ø–∞—Ä—É –ø–æ zscore/pvalue
        String zScorePath = "z_score.json";
        try {
            File zFile = new File(zScorePath);
            if (zFile.exists()) {
                List<ZScoreEntry> allEntries = List.of(MAPPER.readValue(zFile, ZScoreEntry[].class));

                //–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π pvalue –∏ –ø—Ä–∏ —Ä–∞–≤–µ–Ω—Å—Ç–≤–µ ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π zscore
                ZScoreEntry best = allEntries.stream()
                        .min((e1, e2) -> {
                            int cmp = Double.compare(e1.getPvalue(), e2.getPvalue());
                            if (cmp == 0) {
                                //–ü—Ä–∏ —Ä–∞–≤–Ω—ã—Ö pvalue –±–µ—Ä—ë–º —Å –±–æ–ª—å—à–∏–º zscore
                                return -Double.compare(e1.getZscore(), e2.getZscore());
                            }
                            return cmp;
                        })
                        .orElse(null);

                if (best != null) {
                    MAPPER.writeValue(zFile, List.of(best));
                }
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ z_score.json: {}", e.getMessage(), e);
        }
    }

    public void keepPairWithMaxZScore() {
        try {
            File zFile = new File(Z_SCORE_JSON_FILE_PATH);
            if (zFile.exists()) {
                List<ZScoreEntry> allEntries = List.of(MAPPER.readValue(zFile, ZScoreEntry[].class));
                if (allEntries.isEmpty()) {
                    log.error("z_score.json –ø—É—Å—Ç–æ–π");
                }

                // –ù–∞—Ö–æ–¥–∏–º –ø–∞—Ä—É —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º z-score
                ZScoreEntry best = allEntries.stream()
                        .max(Comparator.comparingDouble(e -> Math.abs(e.getZscore())))
                        .orElse(null);

                if (best == null) {
                    log.error("–ù–µ—Ç –ª—É—á—à–µ–π –ø–∞—Ä—ã –≤ z_score.json");
                }
                MAPPER.writeValue(zFile, List.of(best));
                log.info("üîç –û—Å—Ç–∞–≤–∏–ª–∏ –ª—É—á—à—É—é –ø–∞—Ä—É –≤ z_score.json: {}", best);
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ z_score.json: {}", e.getMessage(), e);
        }
    }

    public ZScoreEntry buildZScoreEntry(String t1, String t2, double[] residuals) {
        double mean = StatUtils.mean(residuals);
        double std = Math.sqrt(StatUtils.variance(residuals));
        double latestZ = (residuals[residuals.length - 1] - mean) / std;

        ZScoreEntry entry = new ZScoreEntry();
        entry.setLongticker(t1);
        entry.setShortticker(t2);
        entry.setSpread(residuals[residuals.length - 1]);
        entry.setMean(mean);
        entry.setZscore(latestZ);
        entry.setPvalue(adfService.calculatePValue(residuals)); // –µ—Å–ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
        entry.setTimestamp(System.currentTimeMillis());

        return entry;
    }


}
