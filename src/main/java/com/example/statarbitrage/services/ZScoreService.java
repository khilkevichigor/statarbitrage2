package com.example.statarbitrage.services;

import com.example.statarbitrage.model.Candle;
import com.example.statarbitrage.model.Settings;
import com.example.statarbitrage.model.ZScoreData;
import com.example.statarbitrage.model.ZScoreParam;
import com.example.statarbitrage.vaadin.python.PythonRestClient;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.*;

@Slf4j
@Service
@RequiredArgsConstructor
public class ZScoreService {

    private final PairDataService pairDataService;
    private final ValidateService validateService;

    /**
     * –°—á–∏—Ç–∞–µ—Ç Z –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä –∏–∑ —Å–≤–µ—á–µ–π.
     */
    private List<ZScoreData> calculateZScoreData(Settings settings, Map<String, List<Candle>> candlesMap, boolean excludeExistingPairs) {

        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ Python
        List<ZScoreData> rawZScoreList = PythonRestClient.fetchZScoreData(settings, candlesMap);
        if (rawZScoreList == null || rawZScoreList.isEmpty()) {
            log.warn("‚ö†Ô∏è ZScoreService: –ø–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –æ—Ç Python");
            return Collections.emptyList();
        }

        // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ —Ç–∏–∫–µ—Ä–∞–º
//        reduceDuplicates(rawZScoreList); //todo —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ -Z
//        removePairsWithNegativeLastZ(rawZScoreList); //todo –º–æ–∂–Ω–æ –¥–∞–∂–µ —Ç–∞–∫ –Ω–µ –¥–µ–ª–∞—Ç—å —Ç–∫ –º—ã –±–µ—Ä–µ–º –±–µ—Å—Ç —Å –±–æ–ª—å—à–∏–º +Z

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∏–∑–Ω–µ—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–∏
//        handleNegativeZ(rawZScoreList);
//        validateService.validatePositiveZ(rawZScoreList);

        checkZScoreParamsSize(rawZScoreList);
        filterIncompleteZScoreParams(rawZScoreList, settings);

        // –ò—Å–∫–ª—é—á–∞–µ–º –ø–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –≤ —Ç—Ä–µ–π–¥–µ
        if (excludeExistingPairs) {
            pairDataService.excludeExistingTradingPairs(rawZScoreList);
        }

        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (–º–æ–∂–Ω–æ –∫–∞—Å—Ç–æ–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å)
//        sortByLongTicker(rawZScoreList);
//        sortParamsByTimestamp(rawZScoreList);

        return rawZScoreList;
    }

    private void checkZScoreParamsSize(List<ZScoreData> rawZScoreList) {
        log.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ ZScoreParams:");
        for (ZScoreData z : rawZScoreList) {
            List<ZScoreParam> params = z.getZscoreParams();
            int size = params != null ? params.size() : 0;
            String longTicker = z.getLongTicker();
            String shortTicker = z.getShortTicker();

            double lastZ = size > 0 ? params.get(size - 1).getZscore() : 0.0;

            String msg = String.format(
                    "üìä –ü–∞—Ä–∞: %s / %s | Z-params: %d | –ü–æ—Å–ª–µ–¥–Ω–∏–π Z: %.2f",
                    longTicker, shortTicker, size, lastZ
            );
            log.info(msg);
        }
    }

    public void filterIncompleteZScoreParams(List<ZScoreData> zScoreDataList, Settings settings) {
        double expected = calculateExpectedZParamsCount(settings);
        log.info("üîç –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ZScoreParam: {}", expected);

        int before = zScoreDataList.size();

        zScoreDataList.removeIf(data -> {
            int actualSize = data.getZscoreParams().size();
            boolean isIncompleteBySize = actualSize < expected;
            if (isIncompleteBySize) {
                log.warn("‚ùå –£–¥–∞–ª—è–µ–º –ø–∞—Ä—É {} / {} ‚Äî Z-–ø–æ–∏–Ω—Ç–æ–≤ {} (–æ–∂–∏–¥–∞–ª–æ—Å—å {})",
                        data.getLongTicker(), data.getShortTicker(), actualSize, expected);
            }

            boolean isIncompleteByZ = data.getLastZScoreParam().getZscore() <= settings.getMinZ();
            if (isIncompleteByZ) {
                log.warn("‚ùå –£–¥–∞–ª—è–µ–º –ø–∞—Ä—É {} / {} ‚Äî Z={} < MinZ={}",
                        data.getLongTicker(), data.getShortTicker(), data.getLastZScoreParam().getZscore(), settings.getMinZ());
            }
            return isIncompleteBySize || isIncompleteByZ;
        });

        int after = zScoreDataList.size();
        log.info("‚úÖ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å {} –∏–∑ {} –ø–∞—Ä", after, before);
    }


    public double calculateExpectedZParamsCount(Settings settings) {
        return settings.getCandleLimit() - settings.getMinWindowSize();
    }


    public ZScoreData calculateZScoreData(Settings settings, Map<String, List<Candle>> candlesMap) {

        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ Python
        List<ZScoreData> rawZScoreList = PythonRestClient.fetchZScoreData(settings, candlesMap);
        if (rawZScoreList == null || rawZScoreList.isEmpty()) {
            log.warn("‚ö†Ô∏è ZScoreService: –ø–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –æ—Ç Python");
            throw new IllegalStateException("‚ö†Ô∏è ZScoreService: –ø–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –æ—Ç Python");
        }

        validateService.validateSizeOfPairsAndThrow(rawZScoreList, 1);

        return rawZScoreList.get(0);
    }

    public Optional<ZScoreData> calculateZScoreDataForNewTrade(Settings settings, Map<String, List<Candle>> candlesMap) {
        List<ZScoreData> rawZScoreList = PythonRestClient.fetchZScoreData(settings, candlesMap);
        if (rawZScoreList == null || rawZScoreList.isEmpty()) {
            log.warn("‚ö†Ô∏è ZScoreService: –ø–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –æ—Ç Python");
            throw new IllegalStateException("‚ö†Ô∏è ZScoreService: –ø–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –æ—Ç Python");
        }

        checkZScoreParamsSize(rawZScoreList);
        filterIncompleteZScoreParams(rawZScoreList, settings);

        return rawZScoreList.size() == 1 ? Optional.of(rawZScoreList.get(0)) : Optional.empty();
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ø-N –ª—É—á—à–∏—Ö –ø–∞—Ä.
     */
    public List<ZScoreData> getTopNPairs(Settings settings,
                                         Map<String, List<Candle>> candlesMap,
                                         int count) {

        List<ZScoreData> all = calculateZScoreData(settings, candlesMap, true);
        return obtainTopNBestPairs(settings, all, count);
    }

    public ZScoreData obtainBest(List<ZScoreData> zScoreDataList) {
        if (zScoreDataList != null && !zScoreDataList.isEmpty()) {
            log.info("–û—Ç–æ–±—Ä–∞–Ω–æ {} –ø–∞—Ä", zScoreDataList.size());
            ZScoreData best = getBestByCriteria(zScoreDataList);
            ZScoreParam latest = best.getLastZScoreParam(); // –ø–æ—Å–ª–µ–¥–Ω–∏–µ params
            log.info(String.format("–õ—É—á—à–∞—è –ø–∞—Ä–∞: %s/%s | p=%.5f | adf=%.5f | z=%.2f | corr=%.2f",
                    best.getLongTicker(), best.getShortTicker(),
                    latest.getPvalue(), latest.getAdfpvalue(), latest.getZscore(), latest.getCorrelation()
            ));
            return best;
        } else {
            throw new IllegalArgumentException("–û—Ç–æ–±—Ä–∞–Ω–æ 0 –ø–∞—Ä");
        }
    }

    //todo –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä—É—Ç–∏—Ç—å —Å—Ç–æ—Ö–∞—Å—Ç–∏–∫ –∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
    private List<ZScoreData> obtainTopNBestPairs(Settings settings, List<ZScoreData> zScoreDataList, int topN) {
        if (zScoreDataList == null || zScoreDataList.isEmpty()) {
            throw new IllegalArgumentException("–û—Ç–æ–±—Ä–∞–Ω–æ 0 –ø–∞—Ä");
        }
        if (topN <= 0) {
            throw new IllegalArgumentException("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä: topN={" + topN + "}");
        }

        List<ZScoreData> bestPairs = new ArrayList<>();
        List<ZScoreData> remainingPairs = new ArrayList<>(zScoreDataList); // –∫–æ–ø–∏—è —Å–ø–∏—Å–∫–∞

        for (int i = 0; i < topN; i++) {
            Optional<ZScoreData> maybeBest = getBestByCriteria(settings, remainingPairs);
            if (maybeBest.isPresent()) {
                ZScoreData best = maybeBest.get();
                logLastZ(best);
                bestPairs.add(best);
                remainingPairs.remove(best); // –∏—Å–∫–ª—é—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞—Ä—É –∏–∑ –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ—Ç–±–æ—Ä–∞
            }
        }

        return bestPairs;
    }

    private void logLastZ(ZScoreData zScoreData) {
        List<ZScoreParam> params = zScoreData.getZscoreParams();
        int size = params.size();

        log.info("üß™ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 Z-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è {} / {}:", zScoreData.getLongTicker(), zScoreData.getShortTicker());
        log.info(String.format("%-5s %-8s %-10s %-10s %-20s", "N", "Z", "ADF", "Corr", "Timestamp"));

        for (int i = Math.max(0, size - 5); i < size; i++) {
            ZScoreParam p = params.get(i);
            log.info(String.format(
                    "%-5d %-8.2f %-10.4f %-10.2f %-20s",
                    i + 1, p.getZscore(), p.getAdfpvalue(), p.getCorrelation(), p.getTimestamp()
            ));
        }
    }


    private void logBestPairs(List<ZScoreData> bestPairs) {
        for (int i = 0; i < bestPairs.size(); i++) {
            ZScoreData pair = bestPairs.get(i);
            ZScoreParam latest = pair.getLastZScoreParam();
            log.info(String.format("%d. –ü–∞—Ä–∞: %s/%s | p=%.5f | adf=%.5f | z=%.2f | corr=%.2f",
                    i + 1,
                    pair.getLongTicker(), pair.getShortTicker(),
                    latest.getPvalue(), latest.getAdfpvalue(), latest.getZscore(), latest.getCorrelation()
            ));
        }
    }

    private ZScoreData getBestByCriteria(List<ZScoreData> zScoreData) {
        ZScoreData best = null;

        for (ZScoreData z : zScoreData) {
            if (z.getZscoreParams() == null || z.getZscoreParams().isEmpty()) {
                continue;
            }
            ZScoreParam last = z.getLastZScoreParam(); //—É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω

            if (best == null) {
                best = z;
                continue;
            }

            ZScoreParam bestParam = best.getLastZScoreParam();

            // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º:

            // –ë–æ–ª—å—à–µ |zscore| ‚Äî –ª—É—á—à–µ
            if (Math.abs(last.getZscore()) > Math.abs(bestParam.getZscore())) {
                best = z;
                continue;
            }
            if (Math.abs(last.getZscore()) < Math.abs(bestParam.getZscore())) {
                continue;
            }

            // –ú–µ–Ω—å—à–µ pvalue ‚Äî –ª—É—á—à–µ
            if (last.getPvalue() < bestParam.getPvalue()) {
                best = z;
                continue;
            }
            if (last.getPvalue() > bestParam.getPvalue()) {
                continue;
            }

            // –ú–µ–Ω—å—à–µ adfpvalue ‚Äî –ª—É—á—à–µ
            if (last.getAdfpvalue() < bestParam.getAdfpvalue()) {
                best = z;
                continue;
            }
            if (last.getAdfpvalue() > bestParam.getAdfpvalue()) {
                continue;
            }

            // –ë–æ–ª—å—à–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è ‚Äî –ª—É—á—à–µ
            if (last.getCorrelation() > bestParam.getCorrelation()) {
                best = z;
            }
        }

        return best;
    }

    public Optional<ZScoreData> getBestByCriteria(Settings settings, List<ZScoreData> dataList) {
        ZScoreData best = null;
        double maxZ = Double.NEGATIVE_INFINITY;

        for (ZScoreData z : dataList) {
            List<ZScoreParam> params = z.getZscoreParams();
            if (params == null || params.isEmpty()) continue;

            ZScoreParam last = params.get(params.size() - 1);

            double zVal = last.getZscore();
            double pValue = last.getPvalue();
            double adf = last.getAdfpvalue();
            double corr = last.getCorrelation();

            // 1. Z >= minZ
            if (zVal < settings.getMinZ()) continue;

            // 2. pValue <= minPValue
            if (pValue > settings.getMinPvalue()) continue;

            // 3. adfValue <= minAdfValue
            if (adf > settings.getMinAdfValue()) continue;

            // 4. corr >= minCorr
            if (corr < settings.getMinCorrelation()) continue;

            // 5. –í—ã–±–∏—Ä–∞–µ–º —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º Z
            if (zVal > maxZ) {
                maxZ = zVal;
                best = z;
            }
        }

        return Optional.ofNullable(best);
    }

    public void reduceDuplicates(List<ZScoreData> zScoreDataList) {
        Map<String, ZScoreData> uniquePairs = new HashMap<>();

        for (ZScoreData data : zScoreDataList) {
            String longTicker = data.getLongTicker();
            String shortTicker = data.getShortTicker();

            String key = longTicker.compareTo(shortTicker) < 0 ? longTicker + "-" + shortTicker : shortTicker + "-" + longTicker;

            // –µ—Å–ª–∏ –ø–∞—Ä—ã –µ—â—ë –Ω–µ—Ç –∏–ª–∏ —Ç–µ–∫—É—â–∞—è —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–∞ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É ‚Äî –∫–ª–∞–¥—ë–º –≤ –º–∞–ø—É
            if (!uniquePairs.containsKey(key) || longTicker.compareTo(shortTicker) < 0) {
                uniquePairs.put(key, data);
            }
        }

        zScoreDataList.clear();
        zScoreDataList.addAll(uniquePairs.values());
    }

    public void removePairsWithNegativeLastZ(List<ZScoreData> zScoreDataList) {
        zScoreDataList.removeIf(data -> {
            List<ZScoreParam> params = data.getZscoreParams();
            if (params == null || params.isEmpty()) {
                return true; // –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî —É–¥–∞–ª—è–µ–º
            }
            double lastZ = params.get(params.size() - 1).getZscore();
            return lastZ < 0; // —É–¥–∞–ª—è–µ–º, –µ—Å–ª–∏ Z < 0
        });
    }


    public void sortParamsByTimestamp(List<ZScoreData> zScoreDataList) {
        zScoreDataList.forEach(zScoreData -> zScoreData.getZscoreParams().sort(Comparator.comparingLong(ZScoreParam::getTimestamp)));
    }

    public void sortParamsByTimestampV2(List<ZScoreData> zScoreDataList) {
        zScoreDataList.forEach(zScoreData -> {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∏–∑–º–µ–Ω—è–µ–º—ã–π —Å–ø–∏—Å–æ–∫ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –µ–≥–æ
            List<ZScoreParam> mutableList = new ArrayList<>(zScoreData.getZscoreParams());
            mutableList.sort(Comparator.comparingLong(ZScoreParam::getTimestamp));
            // –ó–∞–º–µ–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
            zScoreData.setZscoreParams(mutableList);
        });
    }

    public void sortByLongTicker(List<ZScoreData> zScoreDataList) {
        zScoreDataList.sort(Comparator.comparing(ZScoreData::getLongTicker));
    }

    public void handleNegativeZ(List<ZScoreData> zScoreDataList) {
        if (zScoreDataList == null) {
            return;
        }

        for (ZScoreData data : zScoreDataList) {
            List<ZScoreParam> params = data.getZscoreParams();
            if (params == null || params.isEmpty()) {
                continue;
            }

            // –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π zscore
            double lastZ = params.get(params.size() - 1).getZscore();

            if (lastZ < 0) {
                // –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ long –∏ short —Ç–∏–∫–µ—Ä—ã
                String oldLong = data.getLongTicker();
                data.setLongTicker(data.getShortTicker());
                data.setShortTicker(oldLong);

                // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º zscore –≤–æ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
                for (ZScoreParam param : params) {
                    param.setZscore(-param.getZscore());
                }
            }
        }
    }
}
