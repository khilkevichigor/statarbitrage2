package com.example.statarbitrage.ui.components;

import com.example.statarbitrage.common.model.ChartSettings;
import com.example.statarbitrage.common.model.PairData;
import com.example.statarbitrage.common.model.Settings;
import com.example.statarbitrage.core.services.ChartSettingsService;
import com.example.statarbitrage.core.services.PixelSpreadService;
import com.example.statarbitrage.core.services.SettingsService;
import com.example.statarbitrage.ui.services.ChartService;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.button.ButtonVariant;
import com.vaadin.flow.component.checkbox.Checkbox;
import com.vaadin.flow.component.dialog.Dialog;
import com.vaadin.flow.component.html.Div;
import com.vaadin.flow.component.html.H3;
import com.vaadin.flow.component.html.Image;
import com.vaadin.flow.component.html.Span;
import com.vaadin.flow.component.icon.VaadinIcon;
import com.vaadin.flow.component.orderedlayout.FlexComponent;
import com.vaadin.flow.component.orderedlayout.HorizontalLayout;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.server.StreamResource;
import com.vaadin.flow.spring.annotation.SpringComponent;
import com.vaadin.flow.spring.annotation.UIScope;
import lombok.extern.slf4j.Slf4j;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.math.RoundingMode;

@Slf4j
@SpringComponent
@UIScope
public class ZScoreChartDialog extends Dialog {

    private static final String CHART_TYPE = "ZSCORE_CHART_DIALOG";

    private final SettingsService settingsService;
    private final ChartService chartService;
    private final PixelSpreadService pixelSpreadService;
    private final ChartSettingsService chartSettingsService;

    private VerticalLayout content;
    private Image mainChartImage; // –ï–¥–∏–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è —á–∞—Ä—Ç–æ–≤
    private H3 pairTitle;
    private Div detailsPanel;
    // –ß–µ–∫–±–æ–∫—Å—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–æ–≤ —á–∞—Ä—Ç–æ–≤
    private Checkbox showZScoreCheckbox;
    private Checkbox showCombinedPriceCheckbox;
    private Checkbox showPixelSpreadCheckbox;
    // –ß–µ–∫–±–æ–∫—Å—ã –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –Ω–∞ Z-Score
    private Checkbox showEmaCheckbox;
    private Checkbox showStochRsiCheckbox;
    private Checkbox showProfitCheckbox;
    private Checkbox showEntryPointCheckbox;
    private PairData currentPairData;

    public ZScoreChartDialog(SettingsService settingsService, ChartService chartService,
                             PixelSpreadService pixelSpreadService, ChartSettingsService chartSettingsService) {
        this.settingsService = settingsService;
        this.chartService = chartService;
        this.pixelSpreadService = pixelSpreadService;
        this.chartSettingsService = chartSettingsService;
        initializeDialog();
        createComponents();
        layoutComponents();
    }

    private void initializeDialog() {
        setWidth("90vw");
        setHeight("80vh");
        setModal(true);
        setCloseOnEsc(true);
        setCloseOnOutsideClick(false);
        setResizable(true);
        setDraggable(true);
    }

    private void createComponents() {
        pairTitle = new H3();
        pairTitle.getStyle().set("margin", "0 0 1rem 0");
        pairTitle.getStyle().set("color", "var(--lumo-primary-text-color)");

        // –°–æ–∑–¥–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–æ–≤ —á–∞—Ä—Ç–æ–≤
        createChartSelectionCheckboxes();

        // –ï–¥–∏–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è —á–∞—Ä—Ç–æ–≤
        mainChartImage = new Image();
        mainChartImage.setWidth("100%");
        mainChartImage.setHeight("600px");
        mainChartImage.getStyle().set("border", "1px solid var(--lumo-contrast-20pct)");
        mainChartImage.getStyle().set("border-radius", "var(--lumo-border-radius-m)");

        detailsPanel = new Div();
        detailsPanel.getStyle().set("padding", "1rem");
        detailsPanel.getStyle().set("background", "var(--lumo-contrast-5pct)");
        detailsPanel.getStyle().set("border-radius", "var(--lumo-border-radius-m)");
        detailsPanel.getStyle().set("margin-top", "1rem");

        content = new VerticalLayout();
        content.setSpacing(true);
        content.setPadding(true);
        content.setAlignItems(FlexComponent.Alignment.STRETCH);
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —á–µ–∫–±–æ–∫—Å—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–æ–≤ —á–∞—Ä—Ç–æ–≤
     */
    private void createChartSelectionCheckboxes() {
        Settings settings = settingsService.getSettings();

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ä—Ç–∞
        ChartSettings chartSettings = chartSettingsService.getChartSettings(CHART_TYPE);

        // –û—Å–Ω–æ–≤–Ω—ã–µ —á–µ–∫–±–æ–∫—Å—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–æ–≤ —á–∞—Ä—Ç–æ–≤
        showZScoreCheckbox = new Checkbox("üìä Z-Score –≥—Ä–∞—Ñ–∏–∫");
        showZScoreCheckbox.setValue(chartSettings.isShowZScore());
        showZScoreCheckbox.addValueChangeListener(e -> {
            chartSettingsService.updateChartSetting(CHART_TYPE, "showZScore", e.getValue());
            refreshMainChart();
        });

        showCombinedPriceCheckbox = new Checkbox("üí∞ –ù–∞–ª–æ–∂–µ–Ω–Ω—ã–µ —Ü–µ–Ω—ã");
        showCombinedPriceCheckbox.setValue(chartSettings.isShowCombinedPrice());
        showCombinedPriceCheckbox.addValueChangeListener(e -> {
            chartSettingsService.updateChartSetting(CHART_TYPE, "showCombinedPrice", e.getValue());
            refreshMainChart();
        });

        showPixelSpreadCheckbox = new Checkbox("üìè –ü–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥");
        showPixelSpreadCheckbox.setValue(chartSettings.isShowPixelSpread());
        showPixelSpreadCheckbox.addValueChangeListener(e -> {
            chartSettingsService.updateChartSetting(CHART_TYPE, "showPixelSpread", e.getValue());
            refreshMainChart();
        });

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è Z-Score (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ Z-Score –≤—ã–±—Ä–∞–Ω)
        showEmaCheckbox = new Checkbox("+ EMA (" + getEmaPeriodFromTimeframe(settings.getTimeframe()) + ")");
        showEmaCheckbox.setValue(chartSettings.isShowEma());
        showEmaCheckbox.addValueChangeListener(e -> {
            chartSettingsService.updateChartSetting(CHART_TYPE, "showEma", e.getValue());
            refreshMainChart();
        });
        showEmaCheckbox.setEnabled(chartSettings.isShowZScore()); // –û—Ç–∫–ª—é—á–µ–Ω –ø–æ–∫–∞ Z-Score –Ω–µ –≤—ã–±—Ä–∞–Ω

        showStochRsiCheckbox = new Checkbox("+ StochRSI");
        showStochRsiCheckbox.setValue(chartSettings.isShowStochRsi());
        showStochRsiCheckbox.addValueChangeListener(e -> {
            chartSettingsService.updateChartSetting(CHART_TYPE, "showStochRsi", e.getValue());
            refreshMainChart();
        });
        showStochRsiCheckbox.setEnabled(chartSettings.isShowZScore()); // –û—Ç–∫–ª—é—á–µ–Ω –ø–æ–∫–∞ Z-Score –Ω–µ –≤—ã–±—Ä–∞–Ω

        showProfitCheckbox = new Checkbox("üíπ –ü—Ä–æ—Ñ–∏—Ç");
        showProfitCheckbox.setValue(chartSettings.isShowProfit());
        showProfitCheckbox.addValueChangeListener(e -> {
            chartSettingsService.updateChartSetting(CHART_TYPE, "showProfit", e.getValue());
            refreshMainChart();
        });

        showEntryPointCheckbox = new Checkbox("üéØ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞");
        showEntryPointCheckbox.setValue(chartSettings.isShowEntryPoint());
        showEntryPointCheckbox.addValueChangeListener(e -> {
            chartSettingsService.updateChartSetting(CHART_TYPE, "showEntryPoint", e.getValue());
            refreshMainChart();
        });

        log.debug("üìä –ó–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ä—Ç–∞: ZScore={}, Price={}, Pixel={}, EMA={}, StochRSI={}, Profit={}, EntryPoint={}",
                chartSettings.isShowZScore(), chartSettings.isShowCombinedPrice(), chartSettings.isShowPixelSpread(),
                chartSettings.isShowEma(), chartSettings.isShowStochRsi(), chartSettings.isShowProfit(), 
                chartSettings.isShowEntryPoint());
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–∏–æ–¥ EMA –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
     */
    private int getEmaPeriodFromTimeframe(String timeframe) {
        return switch (timeframe) {
            case "1m" -> 20;
            case "5m" -> 20;
            case "15m" -> 14;
            case "1h" -> 14;
            case "4h" -> 12;
            case "1d" -> 10;
            default -> 14;
        };
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω—ã–π —á–∞—Ä—Ç —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤
     */
    private void refreshMainChart() {
        if (currentPairData == null) return;

        try {
            boolean showZScore = showZScoreCheckbox.getValue();
            boolean showCombinedPrice = showCombinedPriceCheckbox.getValue();
            boolean showPixelSpread = showPixelSpreadCheckbox.getValue();
            boolean showEntryPoint = showEntryPointCheckbox.getValue();

            // –£–ø—Ä–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ Z-Score (–Ω–æ –ù–ï –ø—Ä–æ—Ñ–∏—Ç!)
            boolean zScoreEnabled = showZScore;
            showEmaCheckbox.setEnabled(zScoreEnabled);
            showStochRsiCheckbox.setEnabled(zScoreEnabled);

            // –ï—Å–ª–∏ Z-Score –æ—Ç–∫–ª—é—á–µ–Ω, –æ—Ç–∫–ª—é—á–∞–µ–º –µ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (–Ω–æ –ù–ï –ø—Ä–æ—Ñ–∏—Ç!)
            if (!zScoreEnabled) {
                showEmaCheckbox.setValue(false);
                showStochRsiCheckbox.setValue(false);
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —á–∞—Ä—Ç –≤—ã–±—Ä–∞–Ω
            if (!showZScore && !showCombinedPrice && !showPixelSpread) {
                // –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –Ω–µ –≤—ã–±—Ä–∞–Ω, –æ—á–∏—â–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                mainChartImage.setSrc("");
                mainChartImage.setAlt("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —á–∞—Ä—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è");
                log.debug("üìä –í—Å–µ —á–µ–∫–±–æ–∫—Å—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã - —á–∞—Ä—Ç –æ—á–∏—â–µ–Ω");
                return;
            }

            BufferedImage chartImage = null;

            // –°–æ–∑–¥–∞–µ–º —á–∞—Ä—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
            if (showZScore && !showCombinedPrice && !showPixelSpread) {
                // –¢–æ–ª—å–∫–æ Z-Score —á–∞—Ä—Ç —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
                Settings settings = settingsService.getSettings();
                boolean showEma = showEmaCheckbox.getValue();
                boolean showStochRsi = showStochRsiCheckbox.getValue();
                boolean showProfit = showProfitCheckbox.getValue();
                int emaPeriod = getEmaPeriodFromTimeframe(settings.getTimeframe());

                chartImage = chartService.createZScoreChart(currentPairData, showEma, emaPeriod, showStochRsi, showProfit, false, false, showEntryPoint);
                log.debug("üìä –°–æ–∑–¥–∞–Ω Z-Score —á–∞—Ä—Ç —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏: EMA={}, StochRSI={}, Profit={}", showEma, showStochRsi, showProfit);

            } else if (showCombinedPrice && !showZScore && !showPixelSpread) {
                // –¢–æ–ª—å–∫–æ Price —á–∞—Ä—Ç —Å –ø—Ä–æ—Ñ–∏—Ç–æ–º
                boolean showProfit = showProfitCheckbox.getValue();
                chartImage = chartService.createPriceChartWithProfit(currentPairData, false, showProfit, showEntryPoint);
                log.debug("üìä –°–æ–∑–¥–∞–Ω Price —á–∞—Ä—Ç —Å Profit={}", showProfit);

            } else if (showPixelSpread && !showZScore && !showCombinedPrice) {
                // –¢–æ–ª—å–∫–æ Pixel Spread —á–∞—Ä—Ç —Å –ø—Ä–æ—Ñ–∏—Ç–æ–º
                boolean showProfit = showProfitCheckbox.getValue();
                chartImage = chartService.createPixelSpreadChartWithProfit(currentPairData, showProfit, showEntryPoint);
                log.debug("üìä –°–æ–∑–¥–∞–Ω Pixel Spread —á–∞—Ä—Ç —Å Profit={}", showProfit);

            } else {
                // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–∞—Ä—Ç - —Å–æ–∑–¥–∞–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Z-Score —á–∞—Ä—Ç
                Settings settings = settingsService.getSettings();
                boolean showEma = showEmaCheckbox.getValue();
                boolean showStochRsi = showStochRsiCheckbox.getValue();
                boolean showProfit = showProfitCheckbox.getValue();
                int emaPeriod = getEmaPeriodFromTimeframe(settings.getTimeframe());

                chartImage = chartService.createCombinedChart(currentPairData, showZScore, showCombinedPrice, showPixelSpread, showEma, emaPeriod, showStochRsi, showProfit, showEntryPoint);
                log.debug("üìä –°–æ–∑–¥–∞–Ω –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–∞—Ä—Ç: ZScore={}, Price={}, PixelSpread={}", showZScore, showCombinedPrice, showPixelSpread);
            }

            if (chartImage != null) {
                StreamResource chartResource = createStreamResource(chartImage, "main-chart.png");
                mainChartImage.setSrc(chartResource);
                mainChartImage.setAlt("Chart for " + currentPairData.getPairName());
            } else {
                mainChartImage.setSrc("");
                mainChartImage.setAlt("Failed to generate chart");
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞—Ä—Ç –¥–ª—è –ø–∞—Ä—ã: {}", currentPairData.getPairName());
            }

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ —á–∞—Ä—Ç–∞", e);
            mainChartImage.setSrc("");
            mainChartImage.setAlt("Chart generation error");
        }
    }


    private void layoutComponents() {
        // Header with close button
        HorizontalLayout header = new HorizontalLayout();
        header.setWidthFull();
        header.setJustifyContentMode(FlexComponent.JustifyContentMode.BETWEEN);
        header.setAlignItems(FlexComponent.Alignment.CENTER);

        Button closeButton = new Button(VaadinIcon.CLOSE.create());
        closeButton.addThemeVariants(ButtonVariant.LUMO_TERTIARY);
        closeButton.addClickListener(e -> close());

        header.add(pairTitle, closeButton);

        // –ü–∞–Ω–µ–ª—å —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–æ–≤ —á–∞—Ä—Ç–æ–≤
        VerticalLayout chartSelectionPanel = new VerticalLayout();
        chartSelectionPanel.setSpacing(false);
        chartSelectionPanel.setPadding(true);
        chartSelectionPanel.getStyle().set("background", "var(--lumo-contrast-5pct)");
        chartSelectionPanel.getStyle().set("border-radius", "var(--lumo-border-radius-m)");
        chartSelectionPanel.getStyle().set("margin-bottom", "1rem");

        Span chartsLabel = new Span("üìä –í—ã–±–æ—Ä —á–∞—Ä—Ç–æ–≤:");
        chartsLabel.getStyle().set("font-weight", "bold");
        chartsLabel.getStyle().set("margin-bottom", "0.5rem");

        HorizontalLayout mainChartsRow = new HorizontalLayout();
        mainChartsRow.setAlignItems(FlexComponent.Alignment.CENTER);
        mainChartsRow.add(showZScoreCheckbox, showCombinedPriceCheckbox, showPixelSpreadCheckbox, showProfitCheckbox, showEntryPointCheckbox);

        HorizontalLayout indicatorsRow = new HorizontalLayout();
        indicatorsRow.setAlignItems(FlexComponent.Alignment.CENTER);
        indicatorsRow.getStyle().set("margin-top", "0.5rem");

        Span indicatorsLabel = new Span("üìà –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã Z-Score:");
        indicatorsLabel.getStyle().set("font-size", "0.9rem");
        indicatorsLabel.getStyle().set("color", "var(--lumo-secondary-text-color)");
        indicatorsLabel.getStyle().set("margin-right", "1rem");

        indicatorsRow.add(indicatorsLabel, showEmaCheckbox, showStochRsiCheckbox);

        chartSelectionPanel.add(chartsLabel, mainChartsRow, indicatorsRow);

        content.add(header, chartSelectionPanel, mainChartImage, detailsPanel);
        add(content);
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å Z-Score —á–∞—Ä—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
     *
     * @param pairData –¥–∞–Ω–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
     */
    public void showChart(PairData pairData) {
        if (pairData == null) {
            log.warn("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∫–∞–∑–∞—Ç—å —á–∞—Ä—Ç –¥–ª—è null PairData");
            return;
        }

        try {
            log.debug("üìä –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Z-Score —á–∞—Ä—Ç –¥–ª—è –ø–∞—Ä—ã: {}", pairData.getPairName());

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã
            this.currentPairData = pairData;

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            pairTitle.setText(String.format("üìä Z-Score Chart: %s", pairData.getPairName()));

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ–∫–±–æ–∫—Å–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            ChartSettings chartSettings = chartSettingsService.getChartSettings(CHART_TYPE);
            showZScoreCheckbox.setValue(chartSettings.isShowZScore());
            showCombinedPriceCheckbox.setValue(chartSettings.isShowCombinedPrice());
            showPixelSpreadCheckbox.setValue(chartSettings.isShowPixelSpread());
            showEmaCheckbox.setValue(chartSettings.isShowEma());
            showStochRsiCheckbox.setValue(chartSettings.isShowStochRsi());
            showProfitCheckbox.setValue(chartSettings.isShowProfit());
            showEntryPointCheckbox.setValue(chartSettings.isShowEntryPoint());

            // –£–ø—Ä–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ Z-Score
            showEmaCheckbox.setEnabled(chartSettings.isShowZScore());
            showStochRsiCheckbox.setEnabled(chartSettings.isShowZScore());

            log.debug("üìä –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ–∫–±–æ–∫—Å–æ–≤: ZScore={}, Price={}, Pixel={}, EMA={}, StochRSI={}, Profit={}, EntryPoint={}",
                    chartSettings.isShowZScore(), chartSettings.isShowCombinedPrice(), chartSettings.isShowPixelSpread(),
                    chartSettings.isShowEma(), chartSettings.isShowStochRsi(), chartSettings.isShowProfit(), 
                    chartSettings.isShowEntryPoint());

            // –í—ã—á–∏—Å–ª—è–µ–º –ø–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —á–µ–∫–±–æ–∫—Å–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö —Ü–µ–Ω –∏—Å–ø–æ–ª—å–∑—É—è PixelSpreadService
            pixelSpreadService.calculatePixelSpreadIfNeeded(currentPairData);

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Ä—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —á–µ–∫–±–æ–∫—Å–∞–º
            refreshMainChart();

            // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            updateDetailsPanel(pairData);

            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
            open();

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —á–∞—Ä—Ç–∞ –¥–ª—è –ø–∞—Ä—ã: {}", pairData.getPairName(), e);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            pairTitle.setText("‚ùå Error Loading Chart");
            mainChartImage.setSrc("");
            mainChartImage.setAlt("Chart loading failed");
            detailsPanel.removeAll();
            detailsPanel.add(new Span("Failed to load chart: " + e.getMessage()));
            open();
        }
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç StreamResource –∏–∑ BufferedImage
     */
    private StreamResource createStreamResource(BufferedImage bufferedImage, String fileName) {
        return new StreamResource(fileName, () -> {
            try {
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                ImageIO.write(bufferedImage, "png", baos);
                return new ByteArrayInputStream(baos.toByteArray());
            } catch (IOException e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ StreamResource –¥–ª—è —á–∞—Ä—Ç–∞", e);
                throw new RuntimeException("Failed to create chart stream", e);
            }
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞–Ω–µ–ª—å —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞—Ä–µ
     */
    private void updateDetailsPanel(PairData pairData) {
        detailsPanel.removeAll();

        // –°–æ–∑–¥–∞–µ–º HTML-–∫–æ–Ω—Ç–µ–Ω—Ç —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        VerticalLayout details = new VerticalLayout();
        details.setSpacing(false);
        details.setPadding(false);

        // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        HorizontalLayout metricsRow1 = new HorizontalLayout();
        metricsRow1.setWidthFull();

        Div zScoreInfo = createMetricDiv("Current Z-Score",
                String.format("%.3f", pairData.getZScoreCurrent()),
                getZScoreColor(pairData.getZScoreCurrent()));

        Div correlationInfo = createMetricDiv("Correlation",
                String.format("%.3f", pairData.getCorrelationCurrent()), "#2196F3");

        Div statusInfo = createMetricDiv("Status",
                pairData.getStatus().toString(), "#4CAF50");

        metricsRow1.add(zScoreInfo, correlationInfo, statusInfo);

        // –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ—Ç—Ä–∏–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–±—ã–ª–∏)
        HorizontalLayout metricsRow2 = new HorizontalLayout();
        metricsRow2.setWidthFull();

        if (pairData.getProfitPercentChanges() != null) {
            Div profitInfo = createMetricDiv("Profit",
                    pairData.getProfitPercentChanges().setScale(2, RoundingMode.HALF_UP) + "%",
                    getProfitColor(pairData.getProfitPercentChanges().doubleValue()));
            metricsRow2.add(profitInfo);
        }

        if (pairData.getMaxZ() != null && pairData.getMinZ() != null) {
            Div maxZInfo = createMetricDiv("Max Z",
                    pairData.getMaxZ().setScale(3, RoundingMode.HALF_UP).toString(), "#FF9800");
            Div minZInfo = createMetricDiv("Min Z",
                    pairData.getMinZ().setScale(3, RoundingMode.HALF_UP).toString(), "#FF9800");
            metricsRow2.add(maxZInfo, minZInfo);
        }

        details.add(metricsRow1);
        if (metricsRow2.getComponentCount() > 0) {
            details.add(metricsRow2);
        }

        // Trading recommendations
        Div recommendationDiv = createRecommendationDiv(pairData.getZScoreCurrent());
        details.add(recommendationDiv);

        detailsPanel.add(details);
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –º–µ—Ç—Ä–∏–∫–∏
     */
    private Div createMetricDiv(String label, String value, String color) {
        Div metricDiv = new Div();
        metricDiv.getStyle().set("text-align", "center");
        metricDiv.getStyle().set("flex", "1");
        metricDiv.getStyle().set("padding", "0.5rem");

        Span labelSpan = new Span(label);
        labelSpan.getStyle().set("display", "block");
        labelSpan.getStyle().set("font-size", "0.8rem");
        labelSpan.getStyle().set("color", "var(--lumo-secondary-text-color)");

        Span valueSpan = new Span(value);
        valueSpan.getStyle().set("display", "block");
        valueSpan.getStyle().set("font-size", "1.2rem");
        valueSpan.getStyle().set("font-weight", "bold");
        valueSpan.getStyle().set("color", color);

        metricDiv.add(labelSpan, valueSpan);
        return metricDiv;
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –±–ª–æ–∫ —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
     */
    private Div createRecommendationDiv(double zScore) {
        Div recommendationDiv = new Div();
        recommendationDiv.getStyle().set("margin-top", "1rem");
        recommendationDiv.getStyle().set("padding", "1rem");
        recommendationDiv.getStyle().set("border-radius", "var(--lumo-border-radius-m)");

        String recommendation;
        String bgColor;
        String textColor;

        if (Math.abs(zScore) > 2.0) {
            recommendation = zScore > 0 ?
                    "üî¥ STRONG SIGNAL: Consider SHORT position" :
                    "üü¢ STRONG SIGNAL: Consider LONG position";
            bgColor = "var(--lumo-error-color-10pct)";
            textColor = "var(--lumo-error-text-color)";
        } else if (Math.abs(zScore) > 1.0) {
            recommendation = "üü° WEAK SIGNAL: Monitor for stronger signal";
            bgColor = "var(--lumo-warning-color-10pct)";
            textColor = "var(--lumo-warning-text-color)";
        } else {
            recommendation = "‚ö™ NO SIGNAL: Pair close to equilibrium";
            bgColor = "var(--lumo-contrast-5pct)";
            textColor = "var(--lumo-body-text-color)";
        }

        recommendationDiv.getStyle().set("background", bgColor);
        recommendationDiv.getStyle().set("color", textColor);
        recommendationDiv.getStyle().set("font-weight", "bold");
        recommendationDiv.setText(recommendation);

        return recommendationDiv;
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–≤–µ—Ç –¥–ª—è Z-Score –∑–Ω–∞—á–µ–Ω–∏—è
     */
    private String getZScoreColor(double zScore) {
        if (Math.abs(zScore) > 2.0) {
            return "#F44336"; // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è —Å–∏–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        } else if (Math.abs(zScore) > 1.0) {
            return "#FF9800"; // –û—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è —Å–ª–∞–±–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        } else {
            return "#4CAF50"; // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è
        }
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–≤–µ—Ç –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏
     */
    private String getProfitColor(double profit) {
        return profit >= 0 ? "#4CAF50" : "#F44336";
    }

}