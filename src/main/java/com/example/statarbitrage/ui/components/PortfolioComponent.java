package com.example.statarbitrage.ui.components;

import com.example.statarbitrage.core.services.SettingsService;
import com.example.statarbitrage.trading.interfaces.TradingProviderType;
import com.example.statarbitrage.trading.model.Portfolio;
import com.example.statarbitrage.trading.model.TradingProviderSwitchResult;
import com.example.statarbitrage.trading.services.TradingIntegrationService;
import com.vaadin.flow.component.combobox.ComboBox;
import com.vaadin.flow.component.details.Details;
import com.vaadin.flow.component.html.Div;
import com.vaadin.flow.component.html.H3;
import com.vaadin.flow.component.html.H4;
import com.vaadin.flow.component.html.Span;
import com.vaadin.flow.component.icon.Icon;
import com.vaadin.flow.component.icon.VaadinIcon;
import com.vaadin.flow.component.notification.Notification;
import com.vaadin.flow.component.orderedlayout.HorizontalLayout;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.spring.annotation.SpringComponent;
import com.vaadin.flow.spring.annotation.UIScope;
import com.vaadin.flow.theme.lumo.LumoUtility;
import lombok.extern.slf4j.Slf4j;

import java.math.BigDecimal;
import java.math.RoundingMode;

/**
 * UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–µ–π
 */
@Slf4j
@SpringComponent
@UIScope
public class PortfolioComponent extends VerticalLayout {

    private final TradingIntegrationService tradingIntegrationServiceImpl;
    private final SettingsService settingsService;

    // UI —ç–ª–µ–º–µ–Ω—Ç—ã
    private Span totalBalanceLabel;
    private Span availableBalanceLabel;
    private Span reservedBalanceLabel;
    private Span totalReturnLabel;
    private Span unrealizedPnLLabel;
    private Span realizedPnLLabel;
    private Span activePositionsLabel;
    private Span maxDrawdownLabel;
    private Span utilizationLabel;
    private ComboBox<TradingProviderType> tradingModeComboBox;

    // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ä–µ–∫—É—Ä—Å–∏–∏
    private boolean isUpdatingComboBox = false;

    public PortfolioComponent(TradingIntegrationService tradingIntegrationServiceImpl, SettingsService settingsService) {
        this.tradingIntegrationServiceImpl = tradingIntegrationServiceImpl;
        this.settingsService = settingsService;
        initializeComponent();
        createPortfolioCards();
        updatePortfolioInfo();
        updateTradingModeAvailability();
    }

    private void initializeComponent() {
        setSpacing(true);
        setPadding(true);
        setMaxWidth("1200px");
        getStyle().set("margin", "0 auto");

        H3 title = new H3("üí∞ –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∏ —Ç–æ—Ä–≥–æ–≤–ª—è");
        title.addClassNames(LumoUtility.TextColor.PRIMARY, LumoUtility.FontSize.LARGE);
        title.getStyle().set("margin-bottom", "1.5rem").set("text-align", "center");

        add(title);
    }

    private void createPortfolioCards() {
        // –ö–∞—Ä—Ç–æ—á–∫–∞ —Å —Ä–µ–∂–∏–º–æ–º —Ç–æ—Ä–≥–æ–≤–ª–∏
        add(createTradingModeCard());

        // –ö–∞—Ä—Ç–æ—á–∫–∞ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
        add(createMainPortfolioCard());

        // –ö–∞—Ä—Ç–æ—á–∫–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        add(createDetailedPortfolioCard());
    }

    private Details createTradingModeCard() {
        Div cardContent = new Div();
        cardContent.addClassNames(LumoUtility.Background.CONTRAST_5, LumoUtility.BorderRadius.MEDIUM);
        cardContent.getStyle().set("padding", "1.5rem");

        HorizontalLayout header = new HorizontalLayout();
        header.setAlignItems(HorizontalLayout.Alignment.CENTER);
        header.setWidthFull();

        Icon icon = new Icon(VaadinIcon.COG);
        icon.addClassNames(LumoUtility.TextColor.PRIMARY);

        H4 title = new H4("–†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏");
        title.getStyle().set("margin", "0");

        // –ö–æ–º–±–æ–±–æ–∫—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
        tradingModeComboBox = new ComboBox<>();
        tradingModeComboBox.setItems(TradingProviderType.values());
        tradingModeComboBox.setItemLabelGenerator(TradingProviderType::getDisplayName);
        tradingModeComboBox.setValue(tradingIntegrationServiceImpl.getCurrentTradingMode());
        tradingModeComboBox.setWidth("250px");

        tradingModeComboBox.addValueChangeListener(event -> {
            TradingProviderType newMode = event.getValue();
            if (newMode != null && newMode != event.getOldValue()) {
                handleTradingModeSwitch(newMode, event.getOldValue());
            }
        });

        header.add(icon, title);
        header.setFlexGrow(1, title);

        cardContent.add(header, tradingModeComboBox);

        Details details = new Details();
        details.setSummaryText("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏");
        details.setContent(cardContent);
        details.setOpened(true);
        details.getStyle().set("margin-bottom", "1rem");
        details.addClassNames(LumoUtility.Border.ALL, LumoUtility.BorderRadius.LARGE);

        return details;
    }

    private Details createMainPortfolioCard() {
        Div cardContent = new Div();
        cardContent.addClassNames(LumoUtility.Background.CONTRAST_5, LumoUtility.BorderRadius.MEDIUM);
        cardContent.getStyle().set("padding", "1.5rem");

        // –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
        HorizontalLayout metricsRow1 = new HorizontalLayout();
        metricsRow1.setWidthFull();
        metricsRow1.setSpacing(true);

        // –û–±—â–∏–π –±–∞–ª–∞–Ω—Å
        VerticalLayout totalBalanceCard = createMetricCard("üí∞", "–û–±—â–∏–π –±–∞–ª–∞–Ω—Å", "$0.00");
        totalBalanceLabel = (Span) totalBalanceCard.getComponentAt(1);
        totalBalanceLabel.addClassNames(LumoUtility.FontSize.XLARGE, LumoUtility.FontWeight.BOLD);

        // –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
        VerticalLayout totalReturnCard = createMetricCard("üìà", "–û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å", "0.00%");
        totalReturnLabel = (Span) totalReturnCard.getComponentAt(1);
        totalReturnLabel.addClassNames(LumoUtility.FontSize.LARGE, LumoUtility.FontWeight.SEMIBOLD);

        // –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        VerticalLayout activePositionsCard = createMetricCard("üéØ", "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏", "0");
        activePositionsLabel = (Span) activePositionsCard.getComponentAt(1);
        activePositionsLabel.addClassNames(LumoUtility.FontSize.LARGE);

        metricsRow1.add(totalBalanceCard, totalReturnCard, activePositionsCard);

        HorizontalLayout metricsRow2 = new HorizontalLayout();
        metricsRow2.setWidthFull();
        metricsRow2.setSpacing(true);

        // –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å
        VerticalLayout availableCard = createMetricCard("üíµ", "–î–æ—Å—Ç—É–ø–Ω–æ", "$0.00");
        availableBalanceLabel = (Span) availableCard.getComponentAt(1);

        // –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ
        VerticalLayout reservedCard = createMetricCard("üîí", "–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ", "$0.00");
        reservedBalanceLabel = (Span) reservedCard.getComponentAt(1);

        // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–µ–ø–æ
        VerticalLayout utilizationCard = createMetricCard("üìä", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ", "0%");
        utilizationLabel = (Span) utilizationCard.getComponentAt(1);

        metricsRow2.add(availableCard, reservedCard, utilizationCard);

        cardContent.add(metricsRow1, metricsRow2);

        Details details = new Details();
        details.setSummaryText("üí∞ –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ");
        details.setContent(cardContent);
        details.setOpened(true);
        details.getStyle().set("margin-bottom", "1rem");
        details.addClassNames(LumoUtility.Border.ALL, LumoUtility.BorderRadius.LARGE);

        return details;
    }

    private Details createDetailedPortfolioCard() {
        Div cardContent = new Div();
        cardContent.addClassNames(LumoUtility.Background.CONTRAST_5, LumoUtility.BorderRadius.MEDIUM);
        cardContent.getStyle().set("padding", "1.5rem");

        HorizontalLayout detailsRow = new HorizontalLayout();
        detailsRow.setWidthFull();
        detailsRow.setSpacing(true);

        // –ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å
        VerticalLayout unrealizedCard = createMetricCard("üìä", "–ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è P&L", "$0.00");
        unrealizedPnLLabel = (Span) unrealizedCard.getComponentAt(1);

        // –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å
        VerticalLayout realizedCard = createMetricCard("‚úÖ", "–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è P&L", "$0.00");
        realizedPnLLabel = (Span) realizedCard.getComponentAt(1);

        // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
        VerticalLayout drawdownCard = createMetricCard("üìâ", "–ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞", "0.00%");
        maxDrawdownLabel = (Span) drawdownCard.getComponentAt(1);

        detailsRow.add(unrealizedCard, realizedCard, drawdownCard);
        cardContent.add(detailsRow);

        Details details = new Details();
        details.setSummaryText("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞");
        details.setContent(cardContent);
        details.setOpened(false);
        details.getStyle().set("margin-bottom", "1rem");
        details.addClassNames(LumoUtility.Border.ALL, LumoUtility.BorderRadius.LARGE);

        return details;
    }

    private VerticalLayout createMetricCard(String icon, String title, String value) {
        VerticalLayout card = new VerticalLayout();
        card.setSpacing(false);
        card.setPadding(true);
        card.addClassNames(LumoUtility.Background.CONTRAST_10, LumoUtility.BorderRadius.MEDIUM);
        card.getStyle().set("text-align", "center").set("min-width", "150px");

        Span iconSpan = new Span(icon);
        iconSpan.getStyle().set("font-size", "1.5rem");

        Span titleSpan = new Span(title);
        titleSpan.addClassNames(LumoUtility.TextColor.SECONDARY, LumoUtility.FontSize.SMALL);

        Span valueSpan = new Span(value);
        valueSpan.addClassNames(LumoUtility.FontWeight.SEMIBOLD);

        card.add(iconSpan, titleSpan, valueSpan);
        return card;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
     */
    public void updatePortfolioInfo() {
        try {
            Portfolio portfolio = tradingIntegrationServiceImpl.getPortfolioInfo();

            if (portfolio != null) {
                updateUI(portfolio);
            } else {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –µ—Å–ª–∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
                clearUI();
            }

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ", e);
            clearUI();
        }
    }

    private void updateUI(Portfolio portfolio) {
        // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        totalBalanceLabel.setText(formatCurrency(portfolio.getTotalBalance()));
        availableBalanceLabel.setText(formatCurrency(portfolio.getAvailableBalance()));
        reservedBalanceLabel.setText(formatCurrency(portfolio.getReservedBalance()));

        // –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —Å —Ü–≤–µ—Ç–æ–º
        BigDecimal totalReturn = portfolio.getTotalReturn();
        totalReturnLabel.setText(formatPercent(totalReturn));
        updateColorByValue(totalReturnLabel, totalReturn);

        // –ü—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∏
        unrealizedPnLLabel.setText(formatCurrency(portfolio.getUnrealizedPnL()));
        updateColorByValue(unrealizedPnLLabel, portfolio.getUnrealizedPnL());

        realizedPnLLabel.setText(formatCurrency(portfolio.getRealizedPnL()));
        updateColorByValue(realizedPnLLabel, portfolio.getRealizedPnL());

        // –î—Ä—É–≥–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        activePositionsLabel.setText(String.valueOf(portfolio.getActivePositionsCount()));
        maxDrawdownLabel.setText(formatPercent(portfolio.getMaxDrawdown()));
        utilizationLabel.setText(formatPercent(portfolio.getDepositUtilization()));

        // –¶–≤–µ—Ç –¥–ª—è –ø—Ä–æ—Å–∞–¥–∫–∏ (–≤—Å–µ–≥–¥–∞ –∫—Ä–∞—Å–Ω—ã–π –µ—Å–ª–∏ > 0)
        if (portfolio.getMaxDrawdown() != null && portfolio.getMaxDrawdown().compareTo(BigDecimal.ZERO) > 0) {
            maxDrawdownLabel.getStyle().set("color", "var(--lumo-error-color)");
        } else {
            maxDrawdownLabel.getStyle().remove("color");
        }

        // –¶–≤–µ—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–µ–ø–æ
        BigDecimal utilization = portfolio.getDepositUtilization();
        if (utilization != null) {
            if (utilization.compareTo(BigDecimal.valueOf(80)) > 0) {
                utilizationLabel.getStyle().set("color", "var(--lumo-error-color)");
            } else if (utilization.compareTo(BigDecimal.valueOf(60)) > 0) {
                utilizationLabel.getStyle().set("color", "var(--lumo-warning-color)");
            } else {
                utilizationLabel.getStyle().set("color", "var(--lumo-success-color)");
            }
        }
    }

    private void clearUI() {
        totalBalanceLabel.setText("$0.00");
        availableBalanceLabel.setText("$0.00");
        reservedBalanceLabel.setText("$0.00");
        totalReturnLabel.setText("0.00%");
        unrealizedPnLLabel.setText("$0.00");
        realizedPnLLabel.setText("$0.00");
        activePositionsLabel.setText("0");
        maxDrawdownLabel.setText("0.00%");
        utilizationLabel.setText("0%");

        // –£–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç–∞
        totalReturnLabel.getStyle().remove("color");
        unrealizedPnLLabel.getStyle().remove("color");
        realizedPnLLabel.getStyle().remove("color");
        maxDrawdownLabel.getStyle().remove("color");
        utilizationLabel.getStyle().remove("color");
    }

    private void updateColorByValue(Span label, BigDecimal value) {
        if (value == null) {
            label.getStyle().remove("color");
            return;
        }

        if (value.compareTo(BigDecimal.ZERO) > 0) {
            label.getStyle().set("color", "var(--lumo-success-color)");
        } else if (value.compareTo(BigDecimal.ZERO) < 0) {
            label.getStyle().set("color", "var(--lumo-error-color)");
        } else {
            label.getStyle().remove("color");
        }
    }

    private String formatCurrency(BigDecimal value) {
        if (value == null) return "$0.00";
        return "$" + value.setScale(2, RoundingMode.HALF_UP).toString();
    }

    private String formatPercent(BigDecimal value) {
        if (value == null) return "0.00%";
        return value.setScale(2, RoundingMode.HALF_UP).toString() + "%";
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–∞
     */
    public void updateTradingModeAvailability() {
        try {
            boolean isAutoTradingEnabled = settingsService.getSettings().isAutoTradingEnabled();
            log.info("üîÑ PortfolioComponent: updateTradingModeAvailability() –≤—ã–∑–≤–∞–Ω - autoTrading={}", isAutoTradingEnabled);

            if (isAutoTradingEnabled) {
                // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–æ–º–±–æ–±–æ–∫—Å –∏ –º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å
                tradingModeComboBox.setEnabled(false);
                tradingModeComboBox.getStyle().set("opacity", "0.6");

                // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
                tradingModeComboBox.setTooltipText("üîí –†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–∫–∞ –≤–∫–ª—é—á–µ–Ω –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥");

                log.debug("–†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω - –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω");
            } else {
                // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–æ–º–±–æ–±–æ–∫—Å
                tradingModeComboBox.setEnabled(true);
                tradingModeComboBox.getStyle().remove("opacity");

                // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
                tradingModeComboBox.setTooltipText("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏");

                log.debug("–†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω - –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –≤—ã–∫–ª—é—á–µ–Ω");
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏", e);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –æ–± –æ—à–∏–±–∫–∞—Ö
     */
    private void handleTradingModeSwitch(TradingProviderType newMode, TradingProviderType oldMode) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ä–µ–∫—É—Ä—Å–∏–∏
        if (isUpdatingComboBox) {
            return;
        }

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –≤—ã–∫–ª—é—á–µ–Ω
            if (settingsService.getSettings().isAutoTradingEnabled()) {
                String message = "‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–º –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–µ.\n\n–°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫–ª—é—á–∏—Ç–µ –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.";
                Notification notification = Notification.show(message);
                notification.addThemeVariants(com.vaadin.flow.component.notification.NotificationVariant.LUMO_WARNING);
                notification.setDuration(5000);

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ä–µ–∫—É—Ä—Å–∏–∏
                isUpdatingComboBox = true;
                try {
                    tradingModeComboBox.setValue(oldMode);
                } finally {
                    isUpdatingComboBox = false;
                }
                return;
            }

            log.info("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å {} –Ω–∞ {}", oldMode, newMode);

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—à–∏–±–∫–∞—Ö
            TradingProviderSwitchResult result = tradingIntegrationServiceImpl.switchTradingModeWithDetails(newMode);

            if (result.isSuccess()) {
                // –£—Å–ø–µ—à–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
                String successMessage = "‚úÖ –†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: " + newMode.getDisplayName();
                Notification successNotification = Notification.show(successMessage);
                successNotification.addThemeVariants(com.vaadin.flow.component.notification.NotificationVariant.LUMO_SUCCESS);

                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
                updatePortfolioInfo();

                log.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∂–∏–º: {}", newMode.getDisplayName());

            } else {
                // –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                handleSwitchError(result, newMode, oldMode);
            }

        } catch (Exception e) {
            // –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
            log.error("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏", e);

            String errorMessage = "‚ùå –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏: " + e.getMessage();
            Notification errorNotification = Notification.show(errorMessage);
            errorNotification.addThemeVariants(com.vaadin.flow.component.notification.NotificationVariant.LUMO_ERROR);
            errorNotification.setDuration(5000);

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ä–µ–∫—É—Ä—Å–∏–∏
            isUpdatingComboBox = true;
            try {
                tradingModeComboBox.setValue(oldMode);
            } finally {
                isUpdatingComboBox = false;
            }
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
     */
    private void handleSwitchError(TradingProviderSwitchResult result, TradingProviderType newMode, TradingProviderType oldMode) {
        log.error("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏: —Ç–∏–ø={}, —Å–æ–æ–±—â–µ–Ω–∏–µ={}",
                result.getErrorType(), result.getErrorMessage());

        // –ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        String errorMessage = result.getUserMessage() != null ?
                result.getUserMessage() :
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Ä–µ–∂–∏–º: " + newMode.getDisplayName();

        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (result.getRecommendation() != null && !result.getRecommendation().isEmpty()) {
            errorMessage += "\n\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: " + result.getRecommendation();
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–∫–∞–∑–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
        Notification errorNotification = createErrorNotification(result.getErrorType(), errorMessage);
        errorNotification.open();

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ä–µ–∫—É—Ä—Å–∏–∏
        isUpdatingComboBox = true;
        try {
            tradingModeComboBox.setValue(oldMode);
        } finally {
            isUpdatingComboBox = false;
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
     */
    private Notification createErrorNotification(TradingProviderSwitchResult.SwitchErrorType errorType, String message) {
        Notification notification = Notification.show(message);
        notification.addThemeVariants(com.vaadin.flow.component.notification.NotificationVariant.LUMO_ERROR);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
        switch (errorType) {
            case PROVIDER_NOT_IMPLEMENTED:
                notification.setDuration(3000); // –ö–æ—Ä–æ—Ç–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
                break;
            case CONFIGURATION_MISSING:
            case INVALID_CREDENTIALS:
                notification.setDuration(7000); // –î–ª–∏–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
                break;
            case CONNECTION_ERROR:
                notification.setDuration(5000); // –°—Ä–µ–¥–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–±–ª–µ–º —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º
                break;
            case INTERNAL_ERROR:
            default:
                notification.setDuration(4000); // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                break;
        }

        return notification;
    }
}