package com.example.statarbitrage.ui.components;

import com.example.statarbitrage.common.dto.TradePairsStatisticsDto;
import com.example.statarbitrage.common.utils.NumberFormatter;
import com.example.statarbitrage.core.services.StatisticsService;
import com.vaadin.flow.component.grid.Grid;
import com.vaadin.flow.component.html.H2;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.spring.annotation.SpringComponent;
import com.vaadin.flow.spring.annotation.UIScope;
import lombok.extern.slf4j.Slf4j;

import java.util.List;

@Slf4j
@SpringComponent
@UIScope
public class StatisticsComponent extends VerticalLayout {

    private final StatisticsService statisticsService;
    private final Grid<StatisticRow> statisticsGrid;

    public StatisticsComponent(StatisticsService statisticsService) {
        this.statisticsService = statisticsService;
        this.statisticsGrid = new Grid<>();

        initializeComponent();
        setupGrid();
    }

    private void initializeComponent() {
        setSpacing(false);
        setPadding(false);

        H2 title = new H2("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–π–¥–æ–≤");
        add(title, statisticsGrid);
    }

    private void setupGrid() {
        statisticsGrid.setAllRowsVisible(true);
        statisticsGrid.addColumn(StatisticRow::name).setHeader("–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å");
        statisticsGrid.addColumn(StatisticRow::today).setHeader("–°–µ–≥–æ–¥–Ω—è");
        statisticsGrid.addColumn(StatisticRow::total).setHeader("–í—Å–µ–≥–æ");
    }

    public void updateStatistics() {
        try {
            TradePairsStatisticsDto stats = statisticsService.collectStatistics();

            List<StatisticRow> rows = List.of(
                    new StatisticRow("–ü–∞—Ä —Å –æ—à–∏–±–∫–∞–º–∏", stats.getTradePairsWithErrorToday(), stats.getTradePairsWithErrorTotal()),
                    new StatisticRow("–¢–æ—Ä–≥—É–µ–º—ã—Ö –ø–∞—Ä", stats.getTradePairsToday(), stats.getTradePairsTotal()),
                    new StatisticRow("Avg –ü—Ä–æ—Ñ–∏—Ç (USDT)", NumberFormatter.format(stats.getAvgProfitPercentToday()), NumberFormatter.format(stats.getAvgProfitPercentTotal())),
                    new StatisticRow("Avg –ü—Ä–æ—Ñ–∏—Ç (%)", NumberFormatter.format(stats.getAvgProfitPercentToday()), NumberFormatter.format(stats.getAvgProfitPercentTotal())),
                    new StatisticRow("–°—É–º–º–∞ –ü—Ä–æ—Ñ–∏—Ç–∞ (USDT)", NumberFormatter.format(stats.getSumProfitUSDTToday()), NumberFormatter.format(stats.getSumProfitUSDTTotal())),
                    new StatisticRow("–°—É–º–º–∞ –ü—Ä–æ—Ñ–∏—Ç–∞ (%)", NumberFormatter.format(stats.getSumProfitPercentToday()), NumberFormatter.format(stats.getSumProfitPercentTotal())),
                    new StatisticRow("–í—ã—Ö–æ–¥: STOP", stats.getExitByStopToday(), stats.getExitByStopTotal()),
                    new StatisticRow("–í—ã—Ö–æ–¥: TAKE", stats.getExitByTakeToday(), stats.getExitByTakeTotal()),
                    new StatisticRow("–í—ã—Ö–æ–¥: Z MIN", stats.getExitByZMinToday(), stats.getExitByZMinTotal()),
                    new StatisticRow("–í—ã—Ö–æ–¥: Z MAX", stats.getExitByZMaxToday(), stats.getExitByZMaxTotal()),
                    new StatisticRow("–í—ã—Ö–æ–¥: TIME", stats.getExitByTimeToday(), stats.getExitByTimeTotal()),
                    new StatisticRow("–í—ã—Ö–æ–¥: MANUALLY", stats.getExitByManuallyToday(), stats.getExitByManuallyTotal()),

                    new StatisticRow("–ü—Ä–æ—Ñ–∏—Ç –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π (USDT)", "", NumberFormatter.format(stats.getSumProfitUnrealizedUSDT())),
                    new StatisticRow("–ü—Ä–æ—Ñ–∏—Ç –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π (%)", "", NumberFormatter.format(stats.getSumProfitUnrealizedPercent())),

                    new StatisticRow("–ü—Ä–æ—Ñ–∏—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π (USDT)", "", NumberFormatter.format(stats.getSumProfitRealizedPercent())),
                    new StatisticRow("–ü—Ä–æ—Ñ–∏—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π (%)", "", NumberFormatter.format(stats.getSumProfitRealizedPercent())),

                    new StatisticRow("–ü—Ä–æ—Ñ–∏—Ç –æ–±—â–∏–π (USDT)", "", NumberFormatter.format(stats.getSumProfitCombinedUSDT())),
                    new StatisticRow("–ü—Ä–æ—Ñ–∏—Ç –æ–±—â–∏–π (%)", "", NumberFormatter.format(stats.getSumProfitCombinedPercent()))
            );

            statisticsGrid.setItems(rows);
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", e);
        }
    }

    public record StatisticRow(String name, Object today, Object total) {
    }
}