package com.example.statarbitrage.ui;

import com.example.statarbitrage.trading.model.TradeResult;
import com.example.statarbitrage.trading.providers.RealOkxTradingProvider;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.math.BigDecimal;

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π
 */
@Slf4j
@RestController
@RequestMapping("/api/test-trading")
@RequiredArgsConstructor
public class TestTradingController {

    private final RealOkxTradingProvider realOkxTradingProvider;

    /**
     * –¢–µ—Å—Ç–æ–≤–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ LONG –ø–æ–∑–∏—Ü–∏–∏ XRP –Ω–∞ $0.5 —Å –ø–ª–µ—á–æ–º x1
     * GET /api/test-trading/xrp-long
     */
    @GetMapping("/xrp-long")
    public String testXrpLong() {
        log.info("üß™ –¢–ï–°–¢: –û—Ç–∫—Ä—ã—Ç–∏–µ LONG –ø–æ–∑–∏—Ü–∏–∏ XRP-USDT-SWAP –Ω–∞ $0.5 —Å –ø–ª–µ—á–æ–º x1");

        try {
            String symbol = "XRP-USDT-SWAP";
            BigDecimal amount = BigDecimal.valueOf(0.5); // $0.5
            BigDecimal leverage = BigDecimal.valueOf(1.0); // x1

            TradeResult result = realOkxTradingProvider.openLongPosition(symbol, amount, leverage);

            if (result.isSuccess()) {
                log.info("‚úÖ –¢–ï–°–¢ –£–°–ü–ï–®–ï–ù: LONG –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞ - ID: {}, –†–∞–∑–º–µ—Ä: {}, –¶–µ–Ω–∞: {}, –ö–æ–º–∏—Å—Å–∏—è: {}",
                        result.getPositionId(), result.getExecutedSize(), result.getExecutionPrice(), result.getFees());
                return String.format("‚úÖ SUCCESS: LONG XRP –æ—Ç–∫—Ä—ã—Ç | ID: %s | –†–∞–∑–º–µ—Ä: %s | –¶–µ–Ω–∞: %s | –ö–æ–º–∏—Å—Å–∏—è: %s",
                        result.getPositionId(), result.getExecutedSize(), result.getExecutionPrice(), result.getFees());
            } else {
                log.error("‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: {}", result.getErrorMessage());
                return "‚ùå FAILED: " + result.getErrorMessage();
            }

        } catch (Exception e) {
            log.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ —Ç–µ—Å—Ç–µ: {}", e.getMessage(), e);
            return "‚ùå CRITICAL ERROR: " + e.getMessage();
        }
    }

    /**
     * –¢–µ—Å—Ç–æ–≤–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ SHORT –ø–æ–∑–∏—Ü–∏–∏ XRP –Ω–∞ $0.5 —Å –ø–ª–µ—á–æ–º x1
     * GET /api/test-trading/xrp-short
     */
    @GetMapping("/xrp-short")
    public String testXrpShort() {
        log.info("üß™ –¢–ï–°–¢: –û—Ç–∫—Ä—ã—Ç–∏–µ SHORT –ø–æ–∑–∏—Ü–∏–∏ XRP-USDT-SWAP –Ω–∞ $0.5 —Å –ø–ª–µ—á–æ–º x1");

        try {
            String symbol = "XRP-USDT-SWAP";
            BigDecimal amount = BigDecimal.valueOf(0.5); // $0.5
            BigDecimal leverage = BigDecimal.valueOf(1.0); // x1

            TradeResult result = realOkxTradingProvider.openShortPosition(symbol, amount, leverage);

            if (result.isSuccess()) {
                log.info("‚úÖ –¢–ï–°–¢ –£–°–ü–ï–®–ï–ù: SHORT –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞ - ID: {}, –†–∞–∑–º–µ—Ä: {}, –¶–µ–Ω–∞: {}, –ö–æ–º–∏—Å—Å–∏—è: {}",
                        result.getPositionId(), result.getExecutedSize(), result.getExecutionPrice(), result.getFees());
                return String.format("‚úÖ SUCCESS: SHORT XRP –æ—Ç–∫—Ä—ã—Ç | ID: %s | –†–∞–∑–º–µ—Ä: %s | –¶–µ–Ω–∞: %s | –ö–æ–º–∏—Å—Å–∏—è: %s",
                        result.getPositionId(), result.getExecutedSize(), result.getExecutionPrice(), result.getFees());
            } else {
                log.error("‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: {}", result.getErrorMessage());
                return "‚ùå FAILED: " + result.getErrorMessage();
            }

        } catch (Exception e) {
            log.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ —Ç–µ—Å—Ç–µ: {}", e.getMessage(), e);
            return "‚ùå CRITICAL ERROR: " + e.getMessage();
        }
    }

    /**
     * –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç - –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å —Å—É–º–º—É –∏ –ø–ª–µ—á–æ —á–µ—Ä–µ–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
     * GET /api/test-trading/xrp-custom?amount=2&leverage=5&direction=long
     */
    @GetMapping("/xrp-custom")
    public String testXrpCustom(
            @RequestParam(defaultValue = "0.5") double amount,
            @RequestParam(defaultValue = "1") double leverage,
            @RequestParam(defaultValue = "long") String direction) {

        log.info("üß™ –¢–ï–°–¢: –û—Ç–∫—Ä—ã—Ç–∏–µ {} –ø–æ–∑–∏—Ü–∏–∏ XRP-USDT-SWAP –Ω–∞ ${} —Å –ø–ª–µ—á–æ–º x{}",
                direction.toUpperCase(), amount, leverage);

        try {
            String symbol = "XRP-USDT-SWAP";
            BigDecimal amountBd = BigDecimal.valueOf(amount);
            BigDecimal leverageBd = BigDecimal.valueOf(leverage);

            TradeResult result;
            if ("short".equalsIgnoreCase(direction)) {
                result = realOkxTradingProvider.openShortPosition(symbol, amountBd, leverageBd);
            } else {
                result = realOkxTradingProvider.openLongPosition(symbol, amountBd, leverageBd);
            }

            if (result.isSuccess()) {
                log.info("‚úÖ –¢–ï–°–¢ –£–°–ü–ï–®–ï–ù: {} –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞ - ID: {}, –†–∞–∑–º–µ—Ä: {}, –¶–µ–Ω–∞: {}, –ö–æ–º–∏—Å—Å–∏—è: {}",
                        direction.toUpperCase(), result.getPositionId(), result.getExecutedSize(), result.getExecutionPrice(), result.getFees());
                return String.format("‚úÖ SUCCESS: %s XRP (${}, x%s) | ID: %s | –†–∞–∑–º–µ—Ä: %s | –¶–µ–Ω–∞: %s | –ö–æ–º–∏—Å—Å–∏—è: %s",
                        direction.toUpperCase(), amount, leverage, result.getPositionId(), result.getExecutedSize(), result.getExecutionPrice(), result.getFees());
            } else {
                log.error("‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: {}", result.getErrorMessage());
                return "‚ùå FAILED: " + result.getErrorMessage();
            }

        } catch (Exception e) {
            log.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ —Ç–µ—Å—Ç–µ: {}", e.getMessage(), e);
            return "‚ùå CRITICAL ERROR: " + e.getMessage();
        }
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö XRP –ø–æ–∑–∏—Ü–∏–π (–¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤)
     * GET /api/test-trading/close-all-xrp
     */
    @GetMapping("/close-all-xrp")
    public String closeAllXrpPositions() {
        log.info("üß™ –¢–ï–°–¢: –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö XRP –ø–æ–∑–∏—Ü–∏–π");

        try {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º XRP
            var activePositions = realOkxTradingProvider.getActivePositions();
            int closedCount = 0;

            for (var position : activePositions) {
                if (position.getSymbol().contains("XRP")) {
                    TradeResult closeResult = realOkxTradingProvider.closePosition(position.getPositionId());
                    if (closeResult.isSuccess()) {
                        closedCount++;
                        log.info("‚úÖ –ó–∞–∫—Ä—ã—Ç–∞ XRP –ø–æ–∑–∏—Ü–∏—è: {}", position.getPositionId());
                    } else {
                        log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å XRP –ø–æ–∑–∏—Ü–∏—é {}: {}", position.getPositionId(), closeResult.getErrorMessage());
                    }
                }
            }

            return String.format("‚úÖ –ó–∞–∫—Ä—ã—Ç–æ %d XRP –ø–æ–∑–∏—Ü–∏–π", closedCount);

        } catch (Exception e) {
            log.error("‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ XRP –ø–æ–∑–∏—Ü–∏–π: {}", e.getMessage(), e);
            return "‚ùå ERROR: " + e.getMessage();
        }
    }
}