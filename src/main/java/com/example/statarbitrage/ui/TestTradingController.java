package com.example.statarbitrage.ui;

import com.example.statarbitrage.trading.model.Position;
import com.example.statarbitrage.trading.model.TradeResult;
import com.example.statarbitrage.trading.providers.RealOkxTradingProvider;
import com.example.statarbitrage.trading.services.GeolocationService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.math.BigDecimal;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π
 */
@Slf4j
@RestController
@RequestMapping("/api/test-trading")
@RequiredArgsConstructor
public class TestTradingController {

    private final RealOkxTradingProvider realOkxTradingProvider;
    private final GeolocationService geolocationService;

    /**
     * –¢–µ—Å—Ç–æ–≤–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ LONG –ø–æ–∑–∏—Ü–∏–∏ XRP –Ω–∞ $0.5 —Å –ø–ª–µ—á–æ–º x1
     * GET /api/test-trading/xrp-long
     */
    @GetMapping("/xrp-long")
    public String testXrpLong() {
        log.info("üß™ –¢–ï–°–¢: –û—Ç–∫—Ä—ã—Ç–∏–µ LONG –ø–æ–∑–∏—Ü–∏–∏ XRP-USDT-SWAP –Ω–∞ $0.5 —Å –ø–ª–µ—á–æ–º x1");

        // –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º OKX API
        if (!geolocationService.isGeolocationAllowed()) {
            log.error("‚ùå –ë–õ–û–ö–ò–†–û–í–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏!");
            return "‚ùå –ë–õ–û–ö–ò–†–û–í–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏!";
        }

        try {
            String symbol = "XRP-USDT-SWAP";
            BigDecimal amount = BigDecimal.valueOf(0.5); // $0.5
            BigDecimal leverage = BigDecimal.valueOf(1.0); // x1

            TradeResult result = realOkxTradingProvider.openLongPosition(symbol, amount, leverage);

            if (result.isSuccess()) {
                log.info("‚úÖ –¢–ï–°–¢ –£–°–ü–ï–®–ï–ù: LONG –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞ - ID: {}, –†–∞–∑–º–µ—Ä: {}, –¶–µ–Ω–∞: {}, –ö–æ–º–∏—Å—Å–∏—è: {}",
                        result.getPositionId(), result.getExecutedSize(), result.getExecutionPrice(), result.getFees());
                return String.format("‚úÖ SUCCESS: LONG XRP –æ—Ç–∫—Ä—ã—Ç | ID: %s | –†–∞–∑–º–µ—Ä: %s | –¶–µ–Ω–∞: %s | –ö–æ–º–∏—Å—Å–∏—è: %s",
                        result.getPositionId(), result.getExecutedSize(), result.getExecutionPrice(), result.getFees());
            } else {
                log.error("‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: {}", result.getErrorMessage());
                return "‚ùå FAILED: " + result.getErrorMessage();
            }

        } catch (Exception e) {
            log.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ —Ç–µ—Å—Ç–µ: {}", e.getMessage(), e);
            return "‚ùå CRITICAL ERROR: " + e.getMessage();
        }
    }

    /**
     * –¢–µ—Å—Ç–æ–≤–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ SHORT –ø–æ–∑–∏—Ü–∏–∏ XRP –Ω–∞ $0.5 —Å –ø–ª–µ—á–æ–º x1
     * GET /api/test-trading/xrp-short
     */
    @GetMapping("/xrp-short")
    public String testXrpShort() {
        log.info("üß™ –¢–ï–°–¢: –û—Ç–∫—Ä—ã—Ç–∏–µ SHORT –ø–æ–∑–∏—Ü–∏–∏ XRP-USDT-SWAP –Ω–∞ $0.5 —Å –ø–ª–µ—á–æ–º x1");

        if (!geolocationService.isGeolocationAllowed()) {
            log.error("‚ùå –ë–õ–û–ö–ò–†–û–í–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏!");
            return "‚ùå –ë–õ–û–ö–ò–†–û–í–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏!";
        }

        try {
            String symbol = "XRP-USDT-SWAP";
            BigDecimal amount = BigDecimal.valueOf(0.5); // $0.5
            BigDecimal leverage = BigDecimal.valueOf(1.0); // x1

            TradeResult result = realOkxTradingProvider.openShortPosition(symbol, amount, leverage);

            if (result.isSuccess()) {
                log.info("‚úÖ –¢–ï–°–¢ –£–°–ü–ï–®–ï–ù: SHORT –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞ - ID: {}, –†–∞–∑–º–µ—Ä: {}, –¶–µ–Ω–∞: {}, –ö–æ–º–∏—Å—Å–∏—è: {}",
                        result.getPositionId(), result.getExecutedSize(), result.getExecutionPrice(), result.getFees());
                return String.format("‚úÖ SUCCESS: SHORT XRP –æ—Ç–∫—Ä—ã—Ç | ID: %s | –†–∞–∑–º–µ—Ä: %s | –¶–µ–Ω–∞: %s | –ö–æ–º–∏—Å—Å–∏—è: %s",
                        result.getPositionId(), result.getExecutedSize(), result.getExecutionPrice(), result.getFees());
            } else {
                log.error("‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: {}", result.getErrorMessage());
                return "‚ùå FAILED: " + result.getErrorMessage();
            }

        } catch (Exception e) {
            log.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ —Ç–µ—Å—Ç–µ: {}", e.getMessage(), e);
            return "‚ùå CRITICAL ERROR: " + e.getMessage();
        }
    }

    /**
     * –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç - –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å —Å—É–º–º—É –∏ –ø–ª–µ—á–æ —á–µ—Ä–µ–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
     * GET /api/test-trading/xrp-custom?amount=2&leverage=5&direction=long
     */
    @GetMapping("/xrp-custom")
    public String testXrpCustom(
            @RequestParam(defaultValue = "0.5") double amount,
            @RequestParam(defaultValue = "1") double leverage,
            @RequestParam(defaultValue = "long") String direction) {

        log.info("üß™ –¢–ï–°–¢: –û—Ç–∫—Ä—ã—Ç–∏–µ {} –ø–æ–∑–∏—Ü–∏–∏ XRP-USDT-SWAP –Ω–∞ ${} —Å –ø–ª–µ—á–æ–º x{}",
                direction.toUpperCase(), amount, leverage);

        if (!geolocationService.isGeolocationAllowed()) {
            log.error("‚ùå –ë–õ–û–ö–ò–†–û–í–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏!");
            return "‚ùå –ë–õ–û–ö–ò–†–û–í–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏!";
        }

        try {
            String symbol = "XRP-USDT-SWAP";
            BigDecimal amountBd = BigDecimal.valueOf(amount);
            BigDecimal leverageBd = BigDecimal.valueOf(leverage);

            TradeResult result;
            if ("short".equalsIgnoreCase(direction)) {
                result = realOkxTradingProvider.openShortPosition(symbol, amountBd, leverageBd);
            } else {
                result = realOkxTradingProvider.openLongPosition(symbol, amountBd, leverageBd);
            }

            if (result.isSuccess()) {
                log.info("‚úÖ –¢–ï–°–¢ –£–°–ü–ï–®–ï–ù: {} –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞ - ID: {}, –†–∞–∑–º–µ—Ä: {}, –¶–µ–Ω–∞: {}, –ö–æ–º–∏—Å—Å–∏—è: {}",
                        direction.toUpperCase(), result.getPositionId(), result.getExecutedSize(), result.getExecutionPrice(), result.getFees());
                return String.format("‚úÖ SUCCESS: %s XRP (${}, x%s) | ID: %s | –†–∞–∑–º–µ—Ä: %s | –¶–µ–Ω–∞: %s | –ö–æ–º–∏—Å—Å–∏—è: %s",
                        direction.toUpperCase(), amount, leverage, result.getPositionId(), result.getExecutedSize(), result.getExecutionPrice(), result.getFees());
            } else {
                log.error("‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: {}", result.getErrorMessage());
                return "‚ùå FAILED: " + result.getErrorMessage();
            }

        } catch (Exception e) {
            log.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ —Ç–µ—Å—Ç–µ: {}", e.getMessage(), e);
            return "‚ùå CRITICAL ERROR: " + e.getMessage();
        }
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö XRP –ø–æ–∑–∏—Ü–∏–π (–¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤)
     * GET /api/test-trading/close-all-xrp
     */
    @GetMapping("/close-all-xrp")
    public String closeAllXrpPositions() {
        log.info("üß™ –¢–ï–°–¢: –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö XRP –ø–æ–∑–∏—Ü–∏–π");

        if (!geolocationService.isGeolocationAllowed()) {
            log.error("‚ùå –ë–õ–û–ö–ò–†–û–í–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏!");
            return "‚ùå –ë–õ–û–ö–ò–†–û–í–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏!";
        }

        try {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º XRP
            var activePositions = realOkxTradingProvider.getActivePositions();
            int closedCount = 0;

            for (var position : activePositions) {
                if (position.getSymbol().contains("XRP")) {
                    TradeResult closeResult = realOkxTradingProvider.closePosition(position.getPositionId());
                    if (closeResult.isSuccess()) {
                        closedCount++;
                        log.info("‚úÖ –ó–∞–∫—Ä—ã—Ç–∞ XRP –ø–æ–∑–∏—Ü–∏—è: {}", position.getPositionId());
                    } else {
                        log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å XRP –ø–æ–∑–∏—Ü–∏—é {}: {}", position.getPositionId(), closeResult.getErrorMessage());
                    }
                }
            }

            return String.format("‚úÖ –ó–∞–∫—Ä—ã—Ç–æ %d XRP –ø–æ–∑–∏—Ü–∏–π", closedCount);

        } catch (Exception e) {
            log.error("‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ XRP –ø–æ–∑–∏—Ü–∏–π: {}", e.getMessage(), e);
            return "‚ùå ERROR: " + e.getMessage();
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π (–æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏, —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL –µ—Å—Ç—å)
     * GET /api/test-trading/positions
     */
    @GetMapping("/positions")
    public List<Position> getAllActivePositions() {
        log.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π");

        if (!geolocationService.isGeolocationAllowed()) {
            log.error("‚ùå –ë–õ–û–ö–ò–†–û–í–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏!");
            return Collections.emptyList();
        }

        return realOkxTradingProvider.getActivePositions();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –ø–æ ID
     * GET /api/test-trading/position?id=12345
     */
    @GetMapping("/position")
    public Position getPositionById(@RequestParam String id) {
        log.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏–∏ —Å ID: {}", id);

        if (!geolocationService.isGeolocationAllowed()) {
            log.error("‚ùå –ë–õ–û–ö–ò–†–û–í–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏!");
            return null;
        }

        return realOkxTradingProvider.getPosition(id);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –ø–æ —Å–∏–º–≤–æ–ª—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, XRP-USDT-SWAP)
     * GET /api/test-trading/positions-by-symbol?symbol=XRP-USDT-SWAP
     */
    @GetMapping("/positions-by-symbol")
    public List<Position> getPositionsBySymbol(@RequestParam String symbol) {
        log.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –ø–æ —Å–∏–º–≤–æ–ª—É: {}", symbol);

        if (!geolocationService.isGeolocationAllowed()) {
            log.error("‚ùå –ë–õ–û–ö–ò–†–û–í–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏!");
            return Collections.emptyList();
        }

        return realOkxTradingProvider.getActivePositions().stream()
                .filter(p -> p.getSymbol().equalsIgnoreCase(symbol))
                .collect(Collectors.toList());
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏–∏
     * GET /api/test-trading/position-details?id=12345
     */
    @GetMapping("/position-details")
    public String getPositionDetails(@RequestParam String id) {
        log.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏–∏ —Å ID: {}", id);

        if (!geolocationService.isGeolocationAllowed()) {
            log.error("‚ùå –ë–õ–û–ö–ò–†–û–í–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏!");
            return "‚ùå –ë–õ–û–ö–ò–†–û–í–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏!";
        }

        Position position = realOkxTradingProvider.getPosition(id);

        if (position == null) {
            return "–ü–æ–∑–∏—Ü–∏—è —Å ID " + id + " –Ω–µ –Ω–∞–π–¥–µ–Ω–∞";
        }

        return String.format(
                "üìä –î–µ—Ç–∞–ª–∏ –ø–æ–∑–∏—Ü–∏–∏ %s (%s):\n" +
                        "üîπ –°—Ç–∞—Ç—É—Å: %s\n" +
                        "üîπ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: %s\n" +
                        "üîπ –†–∞–∑–º–µ—Ä: %s\n" +
                        "üîπ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: %s USDT\n" +
                        "üîπ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: %s USDT\n" +
                        "üîπ –ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL: %s USDT (%s %%)\n" +
                        "üîπ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL: %s USDT\n" +
                        "üîπ –ü–ª–µ—á–æ: %sx\n" +
                        "üîπ –ú–∞—Ä–∂–∞: %s USDT\n" +
                        "üîπ –í—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è: %s\n" +
                        "üîπ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: %s",
                position.getSymbol(),
                position.getPositionId(),
                position.getStatus(),
                position.getType(),
                position.getSize(),
                position.getEntryPrice(),
                position.getCurrentPrice(),
                position.getUnrealizedPnLUSDT(),
                position.getUnrealizedPnLPercent(),
                position.getRealizedPnLUSDT(),
                position.getLeverage(),
                position.getAllocatedAmount(),
                position.getOpenTime(),
                position.getLastUpdated()
        );
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π —Å OKX
     * GET /api/test-trading/sync-positions
     */
    @GetMapping("/sync-positions")
    public String syncPositionsWithOkx() {
        log.info("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–π —Å OKX");

        if (!geolocationService.isGeolocationAllowed()) {
            log.error("‚ùå –ë–õ–û–ö–ò–†–û–í–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏!");
            return "‚ùå –ë–õ–û–ö–ò–†–û–í–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏!";
        }

        try {
            realOkxTradingProvider.updatePositionPrices();
            return "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π —Å OKX –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ";
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–π: {}", e.getMessage(), e);
            return "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: " + e.getMessage();
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≤—Å–µ–º –ø–æ–∑–∏—Ü–∏—è–º
     * GET /api/test-trading/positions-summary
     */
    @GetMapping("/positions-summary")
    public String getPositionsSummary() {
        log.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≤—Å–µ–º –ø–æ–∑–∏—Ü–∏—è–º");

        if (!geolocationService.isGeolocationAllowed()) {
            log.error("‚ùå –ë–õ–û–ö–ò–†–û–í–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏!");
            return "‚ùå –ë–õ–û–ö–ò–†–û–í–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏!";
        }

        List<Position> positions = realOkxTradingProvider.getActivePositions();

        if (positions.isEmpty()) {
            return "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π";
        }

        BigDecimal totalUnrealizedPnl = positions.stream()
                .map(Position::getUnrealizedPnLUSDT)
                .reduce(BigDecimal.ZERO, BigDecimal::add);

        BigDecimal totalRealizedPnl = positions.stream()
                .map(Position::getRealizedPnLUSDT)
                .reduce(BigDecimal.ZERO, BigDecimal::add);

        return String.format(
                "üìä –°–≤–æ–¥–∫–∞ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º:\n" +
                        "üîπ –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π: %d\n" +
                        "üîπ –û–±—â–∏–π –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL: %s USDT\n" +
                        "üîπ –û–±—â–∏–π —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL: %s USDT\n" +
                        "üîπ –î–µ—Ç–∞–ª–∏ –ø–æ–∑–∏—Ü–∏–π:\n%s",
                positions.size(),
                totalUnrealizedPnl,
                totalRealizedPnl,
                positions.stream()
                        .map(p -> String.format("   - %s (%s): PnL=%s USDT (%s %%)",
                                p.getSymbol(),
                                p.getType(),
                                p.getUnrealizedPnLUSDT(),
                                p.getUnrealizedPnLPercent()))
                        .collect(Collectors.joining("\n"))
        );
    }
}