package com.example.statarbitrage.service;

import com.example.statarbitrage.dto.TradingPair;
import com.example.statarbitrage.model.Settings;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.List;

/**
 * –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—â–∏–π —Å TradingPair
 * –ó–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä—ã–π ValidateService —Å ZScoreData
 */
@Slf4j
@Service
public class ModernValidateService {

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Å–ø–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
     */
    public void validateSizeOfPairsAndThrow(List<TradingPair> tradingPairs, int expectedSize) {
        if (tradingPairs == null) {
            String message = "–°–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null";
            log.error("‚ùå {}", message);
            throw new IllegalArgumentException(message);
        }
        
        if (tradingPairs.size() < expectedSize) {
            String message = String.format(
                "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: –Ω–∞–π–¥–µ–Ω–æ %d, —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º %d", 
                tradingPairs.size(), expectedSize);
            log.error("‚ùå {}", message);
            throw new IllegalStateException(message);
        }
        
        log.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ –ø—Ä–æ—à–ª–∞: {} –ø–∞—Ä >= {}", tradingPairs.size(), expectedSize);
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–ª–∏—á–∏—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö Z-score
     */
    public void validatePositiveZAndThrow(List<TradingPair> tradingPairs) {
        if (tradingPairs == null || tradingPairs.isEmpty()) {
            String message = "–°–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –ø—É—Å—Ç –∏–ª–∏ null";
            log.error("‚ùå {}", message);
            throw new IllegalArgumentException(message);
        }
        
        boolean hasPositiveZ = tradingPairs.stream()
                .anyMatch(pair -> pair.getZscore() != null && pair.getZscore() > 0);
        
        if (!hasPositiveZ) {
            String message = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–∞—Ä —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º Z-score";
            log.error("‚ùå {}", message);
            throw new IllegalStateException(message);
        }
        
        long positiveCount = tradingPairs.stream()
                .mapToLong(pair -> pair.getZscore() != null && pair.getZscore() > 0 ? 1 : 0)
                .sum();
        
        log.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ Z-score –ø—Ä–æ—à–ª–∞: {} –ø–∞—Ä –∏–∑ {}", 
            positiveCount, tradingPairs.size());
    }

    /**
     * –ú—è–≥–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö Z-score (–±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è)
     */
    public boolean validatePositiveZ(List<TradingPair> tradingPairs) {
        try {
            validatePositiveZAndThrow(tradingPairs);
            return true;
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –ú—è–≥–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è Z-score –Ω–µ –ø—Ä–æ—à–ª–∞: {}", e.getMessage());
            return false;
        }
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –ø–æ –≤—Å–µ–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º Settings
     */
    public void validateTradingCriteria(List<TradingPair> tradingPairs, Settings settings) {
        if (tradingPairs == null || tradingPairs.isEmpty()) {
            throw new IllegalArgumentException("–°–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –ø—É—Å—Ç");
        }
        
        int validCount = 0;
        
        for (TradingPair pair : tradingPairs) {
            if (isValidPair(pair, settings)) {
                validCount++;
            }
        }
        
        if (validCount == 0) {
            String message = "–ù–∏ –æ–¥–Ω–∞ –ø–∞—Ä–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º —Ç–æ—Ä–≥–æ–≤–ª–∏";
            log.error("‚ùå {}", message);
            throw new IllegalStateException(message);
        }
        
        log.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø—Ä–æ—à–ª–∞: {} –ø–∞—Ä –∏–∑ {} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º", 
            validCount, tradingPairs.size());
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
     */
    public boolean validateSinglePair(TradingPair pair, Settings settings) {
        if (pair == null) {
            log.error("‚ùå –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null");
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π
        if (pair.getBuyTicker() == null || pair.getBuyTicker().trim().isEmpty()) {
            log.error("‚ùå –ü–∞—Ä–∞ {}: buyTicker –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", pair.getDisplayName());
            return false;
        }
        
        if (pair.getSellTicker() == null || pair.getSellTicker().trim().isEmpty()) {
            log.error("‚ùå –ü–∞—Ä–∞ {}: sellTicker –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", pair.getDisplayName());
            return false;
        }
        
        if (pair.getBuyTicker().equals(pair.getSellTicker())) {
            log.error("‚ùå –ü–∞—Ä–∞ {}: buyTicker –∏ sellTicker –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏", pair.getDisplayName());
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if (pair.getZscore() == null) {
            log.error("‚ùå –ü–∞—Ä–∞ {}: Z-score –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null", pair.getDisplayName());
            return false;
        }
        
        if (pair.getCorrelation() == null) {
            log.error("‚ùå –ü–∞—Ä–∞ {}: –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null", pair.getDisplayName());
            return false;
        }
        
        if (pair.getPValue() == null) {
            log.error("‚ùå –ü–∞—Ä–∞ {}: p-value –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null", pair.getDisplayName());
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏
        if (!isValidPair(pair, settings)) {
            log.warn("‚ö†Ô∏è –ü–∞—Ä–∞ {} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è–º —Ç–æ—Ä–≥–æ–≤–ª–∏", pair.getDisplayName());
            return false;
        }
        
        log.info("‚úÖ –ü–∞—Ä–∞ {} –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é", pair.getDisplayName());
        return true;
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
     */
    public void validateDataQuality(List<TradingPair> tradingPairs) {
        if (tradingPairs == null || tradingPairs.isEmpty()) {
            throw new IllegalArgumentException("–°–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –ø—É—Å—Ç");
        }
        
        int qualityIssues = 0;
        
        for (TradingPair pair : tradingPairs) {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            if (pair.getZscore() != null && Math.abs(pair.getZscore()) > 10) {
                log.warn("‚ö†Ô∏è –ê–Ω–æ–º–∞–ª—å–Ω—ã–π Z-score –≤ –ø–∞—Ä–µ {}: {}", pair.getDisplayName(), pair.getZscore());
                qualityIssues++;
            }
            
            if (pair.getCorrelation() != null && Math.abs(pair.getCorrelation()) > 1) {
                log.warn("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –≤ –ø–∞—Ä–µ {}: {}", pair.getDisplayName(), pair.getCorrelation());
                qualityIssues++;
            }
            
            if (pair.getPValue() != null && (pair.getPValue() < 0 || pair.getPValue() > 1)) {
                log.warn("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π p-value –≤ –ø–∞—Ä–µ {}: {}", pair.getDisplayName(), pair.getPValue());
                qualityIssues++;
            }
            
            if (pair.getRSquared() != null && (pair.getRSquared() < 0 || pair.getRSquared() > 1)) {
                log.warn("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π R¬≤ –≤ –ø–∞—Ä–µ {}: {}", pair.getDisplayName(), pair.getRSquared());
                qualityIssues++;
            }
        }
        
        if (qualityIssues > tradingPairs.size() / 2) {
            String message = String.format("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø—Ä–æ–±–ª–µ–º —Å –∫–∞—á–µ—Å—Ç–≤–æ–º –¥–∞–Ω–Ω—ã—Ö: %d –∏–∑ %d –ø–∞—Ä", 
                qualityIssues, tradingPairs.size());
            log.error("‚ùå {}", message);
            throw new IllegalStateException(message);
        }
        
        log.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö: {} –ø—Ä–æ–±–ª–µ–º –∏–∑ {} –ø–∞—Ä (–¥–æ–ø—É—Å—Ç–∏–º–æ)", 
            qualityIssues, tradingPairs.size());
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø–∞—Ä—ã –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
     */
    private boolean isValidPair(TradingPair pair, Settings settings) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é TradingPair
        return pair.isValidForTradingExtended(
            settings.getMinCorrelation(),
            settings.getMinPvalue(),
            settings.getMinZ(),
            settings.getMinAdfValue()
        );
    }

    /**
     * –ü–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
     */
    public void validateFullPairList(List<TradingPair> tradingPairs, Settings settings, int minSize) {
        log.info("üîç –ü–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è {} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä", tradingPairs.size());
        
        // 1. –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞
        validateSizeOfPairsAndThrow(tradingPairs, minSize);
        
        // 2. –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö Z-score
        validatePositiveZAndThrow(tradingPairs);
        
        // 3. –í–∞–ª–∏–¥–∞—Ü–∏—è –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏
        validateTradingCriteria(tradingPairs, settings);
        
        // 4. –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        validateDataQuality(tradingPairs);
        
        log.info("‚úÖ –ü–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ –¥–ª—è {} –ø–∞—Ä", tradingPairs.size());
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     */
    public ValidationReport generateValidationReport(List<TradingPair> tradingPairs, Settings settings) {
        ValidationReport report = new ValidationReport();
        
        report.totalPairs = tradingPairs.size();
        report.validPairs = (int) tradingPairs.stream()
                .mapToLong(pair -> isValidPair(pair, settings) ? 1 : 0)
                .sum();
        report.positiveZPairs = (int) tradingPairs.stream()
                .mapToLong(pair -> pair.getZscore() != null && pair.getZscore() > 0 ? 1 : 0)
                .sum();
        report.highCorrelationPairs = (int) tradingPairs.stream()
                .mapToLong(pair -> pair.getCorrelation() != null && 
                    Math.abs(pair.getCorrelation()) >= settings.getMinCorrelation() ? 1 : 0)
                .sum();
        
        log.info("üìä –û—Ç—á–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏: –≤—Å–µ–≥–æ={}, –≤–∞–ª–∏–¥–Ω—ã—Ö={}, —Å Z>0={}, —Å –≤—ã—Å–æ–∫–æ–π –∫–æ—Ä—Ä.={}", 
            report.totalPairs, report.validPairs, report.positiveZPairs, report.highCorrelationPairs);
        
        return report;
    }

    /**
     * –ö–ª–∞—Å—Å –æ—Ç—á–µ—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     */
    public static class ValidationReport {
        public int totalPairs;
        public int validPairs;
        public int positiveZPairs;
        public int highCorrelationPairs;
        
        public double getValidationRate() {
            return totalPairs > 0 ? (double) validPairs / totalPairs : 0.0;
        }
        
        public boolean isAcceptable() {
            return getValidationRate() >= 0.1; // –ú–∏–Ω–∏–º—É–º 10% –≤–∞–ª–∏–¥–Ω—ã—Ö –ø–∞—Ä
        }
    }
}