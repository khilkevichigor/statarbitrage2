package com.example.statarbitrage.service;

import com.example.statarbitrage.client.PythonRestClient;
import com.example.statarbitrage.dto.TradingPair;
import com.example.statarbitrage.model.Candle;
import com.example.statarbitrage.model.Settings;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—Ä—É—é —Å TradingPair
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class TradingPairService {
    
    @Qualifier("modernPythonRestClient")
    private final PythonRestClient pythonRestClient;
    
    /**
     * –ü–æ–∏—Å–∫ –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
     */
    public List<TradingPair> findValidTradingPairs(Map<String, List<Candle>> candlesMap, Settings settings) {
        log.info("üîç –ü–æ–∏—Å–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –¥–ª—è {} —Ç–∏–∫–µ—Ä–æ–≤", candlesMap.size());
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä—ã –∏–∑ Python API
        List<TradingPair> allPairs = pythonRestClient.discoverTradingPairs(settings, candlesMap);
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
        List<TradingPair> validPairs = allPairs.stream()
                .filter(pair -> pair.isValidForTrading(
                    settings.getMinCorrelation(),
                    settings.getMinPvalue(),
                    settings.getMinZ()
                ))
                .collect(Collectors.toList());
        
        log.info("‚úÖ –ù–∞–π–¥–µ–Ω–æ {} –≤–∞–ª–∏–¥–Ω—ã—Ö –ø–∞—Ä –∏–∑ {} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤", validPairs.size(), allPairs.size());
        
        return validPairs;
    }
    
    /**
     * –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–∞—Ä –ø–æ —Å–∏–ª–µ —Å–∏–≥–Ω–∞–ª–∞
     */
    public List<TradingPair> sortBySignalStrength(List<TradingPair> pairs) {
        return pairs.stream()
                .sorted((p1, p2) -> Double.compare(p2.getSignalStrength(), p1.getSignalStrength()))
                .collect(Collectors.toList());
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø N –ø–∞—Ä –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
     */
    public List<TradingPair> getTopTradingPairs(Map<String, List<Candle>> candlesMap, 
                                               Settings settings, 
                                               int maxPairs) {
        List<TradingPair> validPairs = findValidTradingPairs(candlesMap, settings);
        List<TradingPair> sortedPairs = sortBySignalStrength(validPairs);
        
        return sortedPairs.stream()
                .limit(maxPairs)
                .collect(Collectors.toList());
    }
    
    /**
     * –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä—ã
     */
    public TradingPair analyzeSpecificPair(String ticker1, String ticker2,
                                          Map<String, List<Candle>> candlesMap,
                                          Settings settings) {
        log.info("üî¨ –ê–Ω–∞–ª–∏–∑ –ø–∞—Ä—ã: {} / {}", ticker1, ticker2);
        
        return pythonRestClient.analyzePairDetailed(ticker1, ticker2, candlesMap, settings);
    }
    
    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π
     */
    public void logTradingDecision(TradingPair pair) {
        log.info("üíπ –¢–û–†–ì–û–í–û–ï –†–ï–®–ï–ù–ò–ï: –ö–£–ü–ò–¢–¨ {} | –ü–†–û–î–ê–¢–¨ {} | Z-Score: {:.2f} | –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è: {:.2f}",
                pair.getBuyTicker(),
                pair.getSellTicker(),
                pair.getZscore(),
                pair.getCorrelation());
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
     */
    public boolean hasSignalReversed(TradingPair oldPair, TradingPair newPair) {
        if (oldPair.getZscore() == null || newPair.getZscore() == null) {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ–Ω—É –∑–Ω–∞–∫–∞ Z-score
        return (oldPair.getZscore() > 0) != (newPair.getZscore() > 0);
    }
}