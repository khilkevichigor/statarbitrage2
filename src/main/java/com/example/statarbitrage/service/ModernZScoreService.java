package com.example.statarbitrage.service;

import com.example.statarbitrage.adapter.TradingPairAdapter;
import com.example.statarbitrage.dto.TradingPair;
import com.example.statarbitrage.model.Candle;
import com.example.statarbitrage.model.Settings;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;
import java.util.Optional;

/**
 * –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è ZScoreService —Ä–∞–±–æ—Ç–∞—é—â–∞—è —Å TradingPair
 * –ó–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä—ã–π ZScoreService —Å ZScoreData
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class ModernZScoreService {
    
    private final TradingPairAdapter adapter;

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø N —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
     * –ê–Ω–∞–ª–æ–≥ —Å—Ç–∞—Ä–æ–≥–æ getTopNPairs(), –Ω–æ —Å TradingPair
     */
    public List<TradingPair> getTopNPairs(Settings settings, Map<String, List<Candle>> candlesMap, int count) {
        log.info("üîç –ü–æ–∏—Å–∫ —Ç–æ–ø {} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä", count);
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞—Ä—ã –æ—Ç Python API
        List<TradingPair> allPairs = adapter.fetchTradingPairs(settings, candlesMap);
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
        List<TradingPair> validPairs = adapter.filterValidPairs(allPairs, settings);
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø N
        List<TradingPair> topPairs = adapter.getTopPairs(validPairs, count);
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        log.info("‚úÖ –ù–∞–π–¥–µ–Ω–æ {} –≤–∞–ª–∏–¥–Ω—ã—Ö –ø–∞—Ä –∏–∑ {} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –≤—ã–±—Ä–∞–Ω–æ —Ç–æ–ø {}", 
            validPairs.size(), allPairs.size(), topPairs.size());
        
        adapter.logTradingPairs(topPairs);
        
        return topPairs;
    }

    /**
     * –†–∞—Å—á–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–¥–Ω–æ–π –ø–∞—Ä—ã (–∞–Ω–∞–ª–æ–≥ calculateZScoreData)
     */
    public TradingPair calculateTradingPairData(Settings settings, Map<String, List<Candle>> candlesMap) {
        log.info("üßÆ –†–∞—Å—á–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã");
        
        List<TradingPair> pairs = adapter.fetchTradingPairs(settings, candlesMap);
        
        if (pairs.isEmpty()) {
            log.warn("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞");
            return null;
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª—É—á—à—É—é –ø–∞—Ä—É –ø–æ —Å–∏–ª–µ —Å–∏–≥–Ω–∞–ª–∞
        TradingPair best = pairs.stream()
                .filter(pair -> pair.isValidForTradingExtended(
                    settings.getMinCorrelation(),
                    settings.getMinPvalue(), 
                    settings.getMinZ(),
                    settings.getMinAdfValue()))
                .max((p1, p2) -> Double.compare(p1.getSignalStrength(), p2.getSignalStrength()))
                .orElse(null);
        
        if (best != null) {
            log.info("‚úÖ –õ—É—á—à–∞—è –ø–∞—Ä–∞: {} —Å —Å–∏–ª–æ–π —Å–∏–≥–Ω–∞–ª–∞ {:.2f}", 
                best.getDisplayName(), best.getSignalStrength());
        }
        
        return best;
    }

    /**
     * –†–∞—Å—á–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–π–¥–∞
     */
    public Optional<TradingPair> calculateTradingPairForNewTrade(Settings settings, Map<String, List<Candle>> candlesMap) {
        log.info("üöÄ –†–∞—Å—á–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–π–¥–∞");
        
        TradingPair pair = calculateTradingPairData(settings, candlesMap);
        
        if (pair == null) {
            log.warn("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–π–¥–∞");
            return Optional.empty();
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–π–¥–∞
        boolean suitable = pair.getSignalStrength() >= settings.getMinZ() && 
                          pair.getPValue() != null && pair.getPValue() <= settings.getMinPvalue();
        
        if (!suitable) {
            log.warn("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–Ω–∞—è –ø–∞—Ä–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–π–¥–∞: {}", pair.getStatisticsString());
            return Optional.empty();
        }
        
        log.info("‚úÖ –ü–∞—Ä–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–π–¥–∞: {}", pair.getDisplayName());
        return Optional.of(pair);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ª—É—á—à–µ–π –ø–∞—Ä—ã –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
     */
    public TradingPair getBestPairByCriteria(List<TradingPair> pairs, Settings settings) {
        return pairs.stream()
                .filter(pair -> pair.isValidForTradingExtended(
                    settings.getMinCorrelation(),
                    settings.getMinPvalue(),
                    settings.getMinZ(), 
                    settings.getMinAdfValue()))
                .max((p1, p2) -> {
                    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ —Å–∏–ª–µ Z-score, –∑–∞—Ç–µ–º –ø–æ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
                    int zCompare = Double.compare(p1.getSignalStrength(), p2.getSignalStrength());
                    if (zCompare != 0) return zCompare;
                    
                    double corr1 = p1.getCorrelation() != null ? Math.abs(p1.getCorrelation()) : 0.0;
                    double corr2 = p2.getCorrelation() != null ? Math.abs(p2.getCorrelation()) : 0.0;
                    return Double.compare(corr1, corr2);
                })
                .orElse(null);
    }

    /**
     * –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä—ã
     */
    public TradingPair analyzeSpecificPair(String ticker1, String ticker2, 
                                          Map<String, List<Candle>> candlesMap, 
                                          Settings settings) {
        log.info("üî¨ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–∞—Ä—ã: {} - {}", ticker1, ticker2);
        
        return adapter.analyzePairDetailed(ticker1, ticker2, candlesMap, settings);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä
     */
    public void validatePairsSize(List<TradingPair> pairs, int expectedSize) {
        if (pairs.size() < expectedSize) {
            String message = String.format("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: –Ω–∞–π–¥–µ–Ω–æ %d, —Ç—Ä–µ–±—É–µ—Ç—Å—è %d", 
                pairs.size(), expectedSize);
            log.error("‚ùå {}", message);
            throw new IllegalStateException(message);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ Z-score
     */
    public void validatePositiveZScore(List<TradingPair> pairs) {
        boolean hasPositiveZ = pairs.stream()
                .anyMatch(pair -> pair.getZscore() != null && pair.getZscore() > 0);
        
        if (!hasPositiveZ) {
            log.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–∞—Ä —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º Z-score");
            throw new IllegalStateException("–ù–µ—Ç –ø–∞—Ä —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º Z-score");
        }
    }
}