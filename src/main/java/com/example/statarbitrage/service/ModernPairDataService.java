package com.example.statarbitrage.service;

import com.example.statarbitrage.dto.TradingPair;
import com.example.statarbitrage.model.Candle;
import com.example.statarbitrage.model.PairData;
import com.example.statarbitrage.model.TradeStatus;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;

/**
 * –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è PairDataService —Ä–∞–±–æ—Ç–∞—é—â–∞—è —Å TradingPair
 * –ó–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä—ã–π PairDataService —Å ZScoreData
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class ModernPairDataService {

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ PairData –∏–∑ TradingPair
     */
    public PairData createPairData(TradingPair tradingPair, Map<String, List<Candle>> candlesMap) {
        log.info("üìä –°–æ–∑–¥–∞–Ω–∏–µ PairData –∏–∑ TradingPair: {}", tradingPair.getDisplayName());
        
        PairData pairData = new PairData();
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        pairData.setLongTicker(tradingPair.getBuyTicker());
        pairData.setShortTicker(tradingPair.getSellTicker());
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        pairData.setZScoreEntry(tradingPair.getZscore() != null ? tradingPair.getZscore() : 0.0);
        pairData.setZScoreCurrent(tradingPair.getZscore() != null ? tradingPair.getZscore() : 0.0);
        pairData.setCorrelation(tradingPair.getCorrelation() != null ? tradingPair.getCorrelation() : 0.0);
        pairData.setPvalue(tradingPair.getPValue() != null ? tradingPair.getPValue() : 0.0);
        pairData.setAdfpvalue(tradingPair.getAdfpvalue() != null ? tradingPair.getAdfpvalue() : 0.0);
        
        // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
        pairData.setAlpha(tradingPair.getAlpha() != null ? tradingPair.getAlpha() : 0.0);
        pairData.setBeta(tradingPair.getBeta() != null ? tradingPair.getBeta() : 0.0);
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ø—Ä–µ–¥–∞
        pairData.setSpread(tradingPair.getSpread() != null ? tradingPair.getSpread() : 0.0);
        pairData.setMean(tradingPair.getMean() != null ? tradingPair.getMean() : 0.0);
        pairData.setStd(tradingPair.getStd() != null ? tradingPair.getStd() : 0.0);
        
        // –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
        setCurrentPrices(pairData, candlesMap);
        
        // –°—Ç–∞—Ç—É—Å –∏ –≤—Ä–µ–º—è
        pairData.setStatus(TradeStatus.FOUND);
        pairData.setTimestamp(tradingPair.getTimestamp() != null ? tradingPair.getTimestamp() : System.currentTimeMillis());
        
        log.info("‚úÖ –°–æ–∑–¥–∞–Ω PairData: {} | {}", pairData.getLongTicker(), pairData.getShortTicker());
        return pairData;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ PairData –∏–∑ —Å–ø–∏—Å–∫–∞ TradingPair
     */
    public List<PairData> createPairDataList(List<TradingPair> tradingPairs, Map<String, List<Candle>> candlesMap) {
        log.info("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ PairData –∏–∑ {} TradingPair", tradingPairs.size());
        
        return tradingPairs.stream()
                .map(pair -> createPairData(pair, candlesMap))
                .toList();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ PairData –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ TradingPair
     */
    public void updatePairData(PairData pairData, TradingPair tradingPair, Map<String, List<Candle>> candlesMap) {
        log.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ PairData: {} —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏", pairData.getLongTicker());
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π Z-score
        if (tradingPair.getZscore() != null) {
            pairData.setZScoreCurrent(tradingPair.getZscore());
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if (tradingPair.getCorrelation() != null) {
            pairData.setCorrelation(tradingPair.getCorrelation());
        }
        if (tradingPair.getPValue() != null) {
            pairData.setPvalue(tradingPair.getPValue());
        }
        if (tradingPair.getAdfpvalue() != null) {
            pairData.setAdfpvalue(tradingPair.getAdfpvalue());
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–ø—Ä–µ–¥–∞
        if (tradingPair.getSpread() != null) {
            pairData.setSpread(tradingPair.getSpread());
        }
        if (tradingPair.getMean() != null) {
            pairData.setMean(tradingPair.getMean());
        }
        if (tradingPair.getStd() != null) {
            pairData.setStd(tradingPair.getStd());
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
        setCurrentPrices(pairData, candlesMap);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º timestamp
        pairData.setTimestamp(System.currentTimeMillis());
        
        // –õ–æ–≥–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        updateTradingStatus(pairData);
        
        log.info("‚úÖ PairData –æ–±–Ω–æ–≤–ª–µ–Ω: Z={:.2f}, Status={}", 
            pairData.getZScoreCurrent(), pairData.getStatus());
    }

    /**
     * –ò—Å–∫–ª—é—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
     */
    public List<TradingPair> excludeExistingTradingPairs(List<TradingPair> newPairs, List<PairData> existingPairs) {
        log.info("üîç –ò—Å–∫–ª—é—á–µ–Ω–∏–µ {} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–∞—Ä –∏–∑ {} –Ω–æ–≤—ã—Ö", existingPairs.size(), newPairs.size());
        
        List<TradingPair> filtered = newPairs.stream()
                .filter(newPair -> existingPairs.stream()
                        .noneMatch(existing -> 
                            isSamePair(newPair.getBuyTicker(), newPair.getSellTicker(),
                                     existing.getLongTicker(), existing.getShortTicker())))
                .toList();
        
        log.info("‚úÖ –û—Å—Ç–∞–µ—Ç—Å—è {} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ä –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏", filtered.size());
        return filtered;
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π
     */
    private void setCurrentPrices(PairData pairData, Map<String, List<Candle>> candlesMap) {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è long —Ç–∏–∫–µ—Ä–∞
        List<Candle> longCandles = candlesMap.get(pairData.getLongTicker());
        if (longCandles != null && !longCandles.isEmpty()) {
            double longPrice = longCandles.get(longCandles.size() - 1).getClose();
            pairData.setLongTickerCurrentPrice(longPrice);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–Ω—É –≤—Ö–æ–¥–∞, –µ—Å–ª–∏ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
            if (pairData.getLongTickerEntryPrice() == 0.0) {
                pairData.setLongTickerEntryPrice(longPrice);
            }
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è short —Ç–∏–∫–µ—Ä–∞
        List<Candle> shortCandles = candlesMap.get(pairData.getShortTicker());
        if (shortCandles != null && !shortCandles.isEmpty()) {
            double shortPrice = shortCandles.get(shortCandles.size() - 1).getClose();
            pairData.setShortTickerCurrentPrice(shortPrice);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–Ω—É –≤—Ö–æ–¥–∞, –µ—Å–ª–∏ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
            if (pairData.getShortTickerEntryPrice() == 0.0) {
                pairData.setShortTickerEntryPrice(shortPrice);
            }
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    private void updateTradingStatus(PairData pairData) {
        TradeStatus currentStatus = pairData.getStatus();
        
        // –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
        if (currentStatus == TradeStatus.FOUND || currentStatus == TradeStatus.SELECTED) {
            // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ —Ö–æ—Ä–æ—à–∞—è –ø–∞—Ä–∞, –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ SELECTED
            if (Math.abs(pairData.getZScoreCurrent()) >= 2.0) {
                pairData.setStatus(TradeStatus.SELECTED);
                log.info("üéØ –ü–∞—Ä–∞ {} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å SELECTED (Z={:.2f})", 
                    pairData.getLongTicker(), pairData.getZScoreCurrent());
            }
        }
        
        if (currentStatus == TradeStatus.SELECTED) {
            // –ï—Å–ª–∏ –ø–∞—Ä–∞ –≤—ã–±—Ä–∞–Ω–∞ –∏ –µ—Å—Ç—å —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞, –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ TRADING
            if (pairData.getLongTickerEntryPrice() > 0 && pairData.getShortTickerEntryPrice() > 0) {
                pairData.setStatus(TradeStatus.TRADING);
                pairData.setZScoreEntry(pairData.getZScoreCurrent());
                
                log.info("üíπ –ü–∞—Ä–∞ {} –Ω–∞—á–∞–ª–∞ —Ç–æ—Ä–≥–æ–≤–ª—é (Entry Z={:.2f})", 
                    pairData.getLongTicker(), pairData.getZScoreEntry());
            }
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ –æ–¥–Ω–∞ –∏ —Ç–∞ –∂–µ –ø–∞—Ä–∞ (—Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω–æ–π –∏–Ω–≤–µ—Ä—Å–∏–∏)
     */
    private boolean isSamePair(String buy1, String sell1, String buy2, String sell2) {
        return (buy1.equals(buy2) && sell1.equals(sell2)) ||
               (buy1.equals(sell2) && sell1.equals(buy2));
    }

    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PairData –æ–±—Ä–∞—Ç–Ω–æ –≤ TradingPair (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
     */
    public TradingPair convertToTradingPair(PairData pairData) {
        return TradingPair.builder()
                .buyTicker(pairData.getLongTicker())
                .sellTicker(pairData.getShortTicker())
                .zscore(pairData.getZScoreCurrent())
                .correlation(pairData.getCorrelation())
                .pValue(pairData.getPvalue())
                .adfpvalue(pairData.getAdfpvalue())
                .alpha(pairData.getAlpha())
                .beta(pairData.getBeta())
                .spread(pairData.getSpread())
                .mean(pairData.getMean())
                .std(pairData.getStd())
                .timestamp(pairData.getTimestamp())
                .build();
    }
}