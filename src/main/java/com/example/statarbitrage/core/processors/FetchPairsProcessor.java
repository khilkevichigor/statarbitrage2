package com.example.statarbitrage.core.processors;

import com.example.statarbitrage.common.dto.Candle;
import com.example.statarbitrage.common.dto.ZScoreData;
import com.example.statarbitrage.common.dto.ZScoreParam;
import com.example.statarbitrage.common.model.PairData;
import com.example.statarbitrage.common.model.Settings;
import com.example.statarbitrage.common.model.TradeStatus;
import com.example.statarbitrage.core.services.CandlesService;
import com.example.statarbitrage.core.services.PairDataService;
import com.example.statarbitrage.core.services.SettingsService;
import com.example.statarbitrage.core.services.ZScoreService;
import com.example.statarbitrage.ui.dto.FetchPairsRequest;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@Slf4j
@Service
@RequiredArgsConstructor
public class FetchPairsProcessor {
    private final PairDataService pairDataService;
    private final ZScoreService zScoreService;
    private final CandlesService candlesService;
    private final SettingsService settingsService;

    public List<PairData> fetchPairs(FetchPairsRequest request) {
        long startTime = System.currentTimeMillis();
        log.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –ø–∞—Ä –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏...");

        Settings settings = settingsService.getSettings();
        long candlesStartTime = System.currentTimeMillis();
        //todo —Ç—É—Ç –±—Ä–∞—Ç—å –≤—Å–µ TRADING, –º–∞–ø–ø–∏—Ç—å –≤ –ª–∏—Å—Ç —Ç–∏–∫–µ—Ä–æ–≤ —Å –ª–æ–Ω–≥/—à–æ—Ä—Ç –∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤ getApplicableCandlesMap() —á—Ç–æ –±—ã –∏—Ö –∏—Å–∫–ª—é—á–∏—Ç—å
        //todo –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã –±—ã–ª–∏ —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–æ–Ω–µ—Ç—ã —á—Ç–æ–±—ã –Ω–µ –ø—É—Ç–∞—Ç—å —Å–¥–µ–ª–∫–∏ –º–µ–∂–¥—É —Å–æ–±–æ–π - –ø—Ä–æ—â–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–¥–µ–ª–∫–∞–º–∏ –æ—Ç–∫—Ä—ã–ª/–∑–∞–∫—Ä—ã–ª –∏ –Ω–µ –¥—É–º–∞–µ—à—å —á—Ç–æ –≤ –º–æ–Ω–µ—Ç–µ
        //todo —á–∞—Å—Ç—å –¥–µ–Ω–µ–≥ —Å –¥—Ä—É–≥–æ–≥–æ —Ç—Ä–µ–π–¥–∞
        List<PairData> tradingPairs = pairDataService.findAllByStatusOrderByEntryTimeDesc(TradeStatus.TRADING);

        List<String> tradingTickers = new ArrayList<>();
        tradingPairs.forEach(p -> {
            tradingTickers.add(p.getLongTicker());
            tradingTickers.add(p.getShortTicker());
        });

        Map<String, List<Candle>> candlesMap = candlesService.getApplicableCandlesMap(settings, tradingTickers); //todo —Å—é–¥–∞ –ø–µ—Ä–µ–¥–∞–µ–º –ª–∏—Å—Ç TRADING —Ç–∏–∫–µ—Ä–æ–≤
        long candlesEndTime = System.currentTimeMillis();
        log.info("‚úÖ –°–æ–±—Ä–∞–ª–∏ –∫–∞—Ä—Ç—É —Å–≤–µ—á–µ–π –∑–∞ {}—Å", String.format("%.2f", (candlesEndTime - candlesStartTime) / 1000.0));
        int count = request.getCountOfPairs() != null ? request.getCountOfPairs() : (int) settings.getUsePairs();
        List<ZScoreData> zScoreDataList = zScoreService.getTopNPairs(settings, candlesMap, count);

        for (int i = 0; i < zScoreDataList.size(); i++) {
            ZScoreData zScoreData = zScoreDataList.get(i);
            ZScoreParam latest = zScoreData.getLastZScoreParam();
            log.info(String.format("%d. –ü–∞—Ä–∞: underValuedTicker=%s overValuedTicker=%s | p=%.5f | adf=%.5f | z=%.2f | corr=%.2f", i + 1, zScoreData.getUndervaluedTicker(), zScoreData.getOvervaluedTicker(), latest.getPvalue(), latest.getAdfpvalue(), latest.getZscore(), latest.getCorrelation()));
        }

        List<PairData> topPairs = pairDataService.createPairDataList(zScoreDataList, candlesMap);
        long endTime = System.currentTimeMillis();
        log.info("–°–æ–∑–¥–∞–ª–∏ {} –Ω–æ–≤—ã—Ö PairData", topPairs.size());
        log.info("‚úÖ –ü–æ–∏—Å–∫ –ø–∞—Ä –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {}—Å", String.format("%.2f", (endTime - startTime) / 1000.0));
        return topPairs;
    }
}
