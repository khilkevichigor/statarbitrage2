package com.example.statarbitrage.core.processors;

import com.example.statarbitrage.common.dto.Candle;
import com.example.statarbitrage.common.dto.ZScoreData;
import com.example.statarbitrage.common.dto.ZScoreParam;
import com.example.statarbitrage.common.model.PairData;
import com.example.statarbitrage.common.model.Settings;
import com.example.statarbitrage.common.model.TradeStatus;
import com.example.statarbitrage.core.services.*;
import com.example.statarbitrage.trading.model.ArbitragePairTradeInfo;
import com.example.statarbitrage.trading.model.Positioninfo;
import com.example.statarbitrage.trading.services.TradingIntegrationService;
import com.example.statarbitrage.ui.dto.UpdateTradeRequest;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Map;

@Slf4j
@Component
@RequiredArgsConstructor
public class UpdateTradeProcessor {
    private final PairDataService pairDataService;
    private final CandlesService candlesService;
    private final SettingsService settingsService;
    private final TradeHistoryService tradeHistoryService;
    private final ZScoreService zScoreService;
    private final TradingIntegrationService tradingIntegrationService;
    private final ExitStrategyService exitStrategyService;

    //todo –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤ updateTrade() –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ - "–µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∞ –ø–∞—Ä –Ω–µ—Ç—É!"
    //todo –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É "–≤—Ä–µ–º—è –∂–∏–∑–Ω–∏"
    //todo —Å–¥–µ–ª–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ –ø–æ –ø—Ä–æ—Ñ–∏—Ç—É USDT (%)
    //todo —Å–¥–µ–ª–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ –ø–æ Z-—Å–∫–æ—Ä
    //todo —Å–¥–µ–ª–∞—Ç—å —á–µ–∫–±–æ–∫—Å –Ω–∞ UI "–∑–∞–∫—Ä—ã—Ç—å—Å—è –≤ + –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∂–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç)"
    //todo —Å–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫—É "–∑–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏"
    //todo —Å–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫—É "—É—Å—Ä–µ–¥–Ω–∏—Ç—å"
    @Transactional
    public PairData updateTrade(UpdateTradeRequest request) {
        validateRequest(request);

        final PairData pairData = loadFreshPairData(request.getPairData());
        if (pairData == null) {
            return request.getPairData();
        }

        final Settings settings = settingsService.getSettings();

        if (arePositionsClosed(pairData)) {
            return handleNoOpenPositions(pairData);
        }

        final ZScoreData zScoreData = calculateZScoreData(pairData, settings);
        logPairInfo(zScoreData);

        pairDataService.updateZScoreDataCurrent(pairData, zScoreData);
        pairDataService.addChanges(pairData); // –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏—Ç –¥–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤—ã—Ö–æ–¥–∞

        if (request.isCloseManually()) {
            return handleManualClose(pairData, settings);
        }

        final String exitReason = exitStrategyService.getExitReason(pairData, settings);
        if (exitReason != null) {
            return handleAutoClose(pairData, settings, exitReason);
        }

        pairDataService.save(pairData);
        tradeHistoryService.updateTradeLog(pairData, settings);
        return pairData;
    }

    private void validateRequest(UpdateTradeRequest request) {
        if (request == null || request.getPairData() == null) {
            throw new IllegalArgumentException("–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∞");
        }
    }

    private PairData loadFreshPairData(PairData pairData) {
        final PairData freshPairData = pairDataService.findById(pairData.getId());
        if (freshPairData == null || freshPairData.getStatus() == TradeStatus.CLOSED) {
            log.debug("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ–π –ø–∞—Ä—ã {}", pairData.getPairName());
            return null;
        }

        log.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∞ –¥–ª—è {}/{}", freshPairData.getLongTicker(), freshPairData.getShortTicker());
        return freshPairData;
    }

    private boolean arePositionsClosed(PairData pairData) {
        final Positioninfo openPositionsInfo = tradingIntegrationService.getOpenPositionsInfo(pairData);
        if (openPositionsInfo.isPositionsClosed()) {
            log.error("‚ùå –ü–æ–∑–∏—Ü–∏–∏ —É–∂–µ –∑–∞–∫—Ä—ã—Ç—ã –¥–ª—è –ø–∞—Ä—ã {}.", pairData.getPairName());
            return true;
        }
        return false;
    }

    private ZScoreData calculateZScoreData(PairData pairData, Settings settings) {
        final Map<String, List<Candle>> candlesMap = candlesService.getApplicableCandlesMap(pairData, settings);
        return zScoreService.calculateZScoreData(settings, candlesMap);
    }

    private void logPairInfo(ZScoreData zScoreData) {
        final ZScoreParam latest = zScoreData.getLastZScoreParam();
        log.info(String.format("–ù–∞—à–∞ –ø–∞—Ä–∞: long=%s short=%s | p=%.5f | adf=%.5f | z=%.2f | corr=%.2f",
                zScoreData.getUndervaluedTicker(), zScoreData.getOvervaluedTicker(),
                latest.getPvalue(), latest.getAdfpvalue(), latest.getZscore(), latest.getCorrelation()));
    }

    private PairData handleManualClose(PairData pairData, Settings settings) {
        final ArbitragePairTradeInfo closeInfo = tradingIntegrationService.closeArbitragePair(pairData);
        if (closeInfo == null || !closeInfo.isSuccess()) {
            return handleTradeError(pairData, UpdateTradeErrorType.MANUAL_CLOSE_FAILED);
        }

        log.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –ø–∞—Ä–∞ —á–µ—Ä–µ–∑ —Ç–æ—Ä–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É: {}", pairData.getPairName());

        pairData.setStatus(TradeStatus.CLOSED);
        pairData.setExitReason(ExitReasonType.EXIT_REASON_MANUALLY.getDescription());
        finalizeClosedTrade(pairData, settings);
        return pairData;
    }

    private void finalizeClosedTrade(PairData pairData, Settings settings) {
        pairDataService.addChanges(pairData);
        tradingIntegrationService.removePairFromLocalStorage(pairData);
        pairDataService.save(pairData);
        tradeHistoryService.updateTradeLog(pairData, settings);
    }

    private PairData handleNoOpenPositions(PairData pairData) {
        log.info("==> handleNoOpenPositions: –ù–ê–ß–ê–õ–û –¥–ª—è –ø–∞—Ä—ã {}", pairData.getPairName());
        log.info("‚ÑπÔ∏è –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –ø–∞—Ä—ã {}! –í–æ–∑–º–æ–∂–Ω–æ –æ–Ω–∏ –±—ã–ª–∏ –∑–∞–∫—Ä—ã—Ç—ã –≤—Ä—É—á–Ω—É—é –Ω–∞ –±–∏—Ä–∂–µ.", pairData.getPairName());

        final Positioninfo verificationResult = tradingIntegrationService.verifyPositionsClosed(pairData);
        log.info("–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π: {}", verificationResult);

        if (verificationResult.isPositionsClosed()) {
            log.info("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã –Ω–∞ –±–∏—Ä–∂–µ –¥–ª—è –ø–∞—Ä—ã {}, PnL: {} USDT ({} %)", pairData.getPairName(), verificationResult.getTotalPnLUSDT(), verificationResult.getTotalPnLPercent());
            PairData result = handleTradeError(pairData, UpdateTradeErrorType.MANUALLY_CLOSED_NO_POSITIONS);
            log.info("<== handleNoOpenPositions: –ö–û–ù–ï–¶ (–ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã) –¥–ª—è –ø–∞—Ä—ã {}", pairData.getPairName());
            return result;
        } else {
            log.warn("‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏–∏ –ù–ï –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ –±–∏—Ä–∂–µ –¥–ª—è –ø–∞—Ä—ã {}. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.", pairData.getPairName());
            PairData result = handleTradeError(pairData, UpdateTradeErrorType.POSITIONS_NOT_FOUND);
            log.info("<== handleNoOpenPositions: –ö–û–ù–ï–¶ (–ø–æ–∑–∏—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã) –¥–ª—è –ø–∞—Ä—ã {}", pairData.getPairName());
            return result;
        }
    }

    private PairData handleAutoClose(PairData pairData, Settings settings, String exitReason) {
        log.info("üö™ –ù–∞–π–¥–µ–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏: {} –¥–ª—è –ø–∞—Ä—ã {}", exitReason, pairData.getPairName());

        final ArbitragePairTradeInfo closeResult = tradingIntegrationService.closeArbitragePair(pairData);
        if (closeResult == null || !closeResult.isSuccess()) {
            pairData.setExitReason(exitReason);
            return handleTradeError(pairData, UpdateTradeErrorType.AUTO_CLOSE_FAILED);
        }

        log.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –ø–∞—Ä–∞: {}", pairData.getPairName());

        pairData.setStatus(TradeStatus.CLOSED);
        pairData.setExitReason(exitReason);
        finalizeClosedTrade(pairData, settings);
        return pairData;
    }

    private PairData handleTradeError(PairData pairData, UpdateTradeErrorType errorType) {
        log.error("‚ùå –û—à–∏–±–∫–∞: {} –¥–ª—è –ø–∞—Ä—ã {}", errorType.getDescription(), pairData.getPairName());

        pairData.setStatus(TradeStatus.ERROR);
        pairData.setErrorDescription(errorType.getDescription());
        pairDataService.save(pairData);
        // –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ —Ç–∫ –Ω—É–∂–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–¥–µ–ª–∫–∞–º!
        return pairData;
    }
}