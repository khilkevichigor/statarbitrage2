package com.example.statarbitrage.core.processors;

import com.example.statarbitrage.common.dto.Candle;
import com.example.statarbitrage.common.dto.ZScoreData;
import com.example.statarbitrage.common.dto.ZScoreParam;
import com.example.statarbitrage.common.model.PairData;
import com.example.statarbitrage.common.model.Settings;
import com.example.statarbitrage.common.model.TradeStatus;
import com.example.statarbitrage.core.dto.UpdatePairDataRequest;
import com.example.statarbitrage.core.services.*;
import com.example.statarbitrage.trading.model.CloseArbitragePairResult;
import com.example.statarbitrage.trading.model.PositionVerificationResult;
import com.example.statarbitrage.trading.model.TradeResult;
import com.example.statarbitrage.trading.services.TradingIntegrationService;
import com.example.statarbitrage.ui.dto.UpdateTradeRequest;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.List;
import java.util.Map;

@Slf4j
@Component
@RequiredArgsConstructor
public class UpdateTradeProcessor {
    private final PairDataService pairDataService;
    private final CandlesService candlesService;
    private final SettingsService settingsService;
    private final TradeLogService tradeLogService;
    private final ZScoreService zScoreService;
    private final TradingIntegrationService tradingIntegrationService;
    private final ExitStrategyService exitStrategyService;

    @Transactional
    public PairData updateTrade(UpdateTradeRequest request) {
        validateRequest(request);

        PairData pairData = loadFreshPairData(request.getPairData());
        if (pairData == null) {
            return request.getPairData();
        }

        Settings settings = settingsService.getSettings();
        ZScoreData zScoreData = calculateZScoreData(pairData, settings);

        logPairInfo(zScoreData);

        if (request.isCloseManually()) {
            return handleManualClose(pairData, zScoreData, settings);
        }

        // üéØ –ö–†–ò–¢–ò–ß–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏—Ç –î–û –ø—Ä–æ–≤–µ—Ä–∫–∏ exit strategy –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
        updateCurrentProfitBeforeExitCheck(pairData, zScoreData, settings);

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ—Ñ–∏—Ç —Ç–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –Ω–∞ –º–æ–º–µ–Ω—Ç –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è –æ–± exit –∏ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è
        String exitReason = exitStrategyService.getExitReason(pairData);
        if (exitReason != null) {
            // üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏—Ç –Ω–∞ –º–æ–º–µ–Ω—Ç –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è –æ–± exit (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å)
            pairData.setExitProfitSnapshot(pairData.getProfitChanges());
            log.info("üí∞ –°–æ—Ö—Ä–∞–Ω–µ–Ω –ø—Ä–æ—Ñ–∏—Ç –Ω–∞ –º–æ–º–µ–Ω—Ç exit: {}% –¥–ª—è –ø–∞—Ä—ã {}/{}",
                    pairData.getExitProfitSnapshot(), pairData.getLongTicker(), pairData.getShortTicker());
            return handleAutoClose(pairData, zScoreData, settings, exitReason);
        }

        return updateRegularTrade(pairData, zScoreData, settings);
    }

    private void validateRequest(UpdateTradeRequest request) {
        if (request == null || request.getPairData() == null) {
            throw new IllegalArgumentException("–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∞");
        }
    }

    private PairData loadFreshPairData(PairData pairData) {
        PairData freshPairData = pairDataService.findById(pairData.getId());
        if (freshPairData == null || freshPairData.getStatus() == TradeStatus.CLOSED) {
            log.debug("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ–π –ø–∞—Ä—ã {}/{}",
                    pairData.getLongTicker(), pairData.getShortTicker());
            return null;
        }

        log.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∞ –¥–ª—è {} - {}",
                freshPairData.getLongTicker(), freshPairData.getShortTicker());
        return freshPairData;
    }

    private ZScoreData calculateZScoreData(PairData pairData, Settings settings) {
        Map<String, List<Candle>> candlesMap = candlesService.getApplicableCandlesMap(pairData, settings);
        return zScoreService.calculateZScoreData(settings, candlesMap);
    }

    private void logPairInfo(ZScoreData zScoreData) {
        ZScoreParam latest = zScoreData.getLastZScoreParam();
        log.info(String.format("–ù–∞—à–∞ –ø–∞—Ä–∞: long=%s short=%s | p=%.5f | adf=%.5f | z=%.2f | corr=%.2f",
                zScoreData.getUndervaluedTicker(), zScoreData.getOvervaluedTicker(),
                latest.getPvalue(), latest.getAdfpvalue(), latest.getZscore(), latest.getCorrelation()
        ));
    }

    private PairData handleManualClose(PairData pairData, ZScoreData zScoreData, Settings settings) {
        if (!tradingIntegrationService.hasOpenPositions(pairData)) {
            return handleNoOpenPositions(pairData, settings);
        }

        // üéØ –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
        boolean isVirtualTrading = tradingIntegrationService.getCurrentTradingMode().name().contains("VIRTUAL");

//        if (isVirtualTrading) {
        // üìä –î–ª—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏: —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏—Ç –î–û –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π
        Map<String, List<Candle>> candlesMap = candlesService.getApplicableCandlesMap(pairData, settings);

        pairDataService.updateCurrentDataAndSave(UpdatePairDataRequest.builder()
                .isAddEntryPoints(false)
                .pairData(pairData)
                .zScoreData(zScoreData)
                .candlesMap(candlesMap)
                .isUpdateChanges(true)
                .isVirtual(isVirtualTrading)
                .build());
//            pairDataService.updateChangesAndSaveForVirtual(pairData);
//        }

        CloseArbitragePairResult closeResult = tradingIntegrationService.closeArbitragePair(pairData);
        if (closeResult == null || !closeResult.isSuccess()) {
            return handleTradeError(pairData, settings, TradeErrorType.MANUAL_CLOSE_FAILED);
        }

        log.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –ø–∞—Ä–∞ —á–µ—Ä–µ–∑ —Ç–æ—Ä–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É: {}/{}",
                pairData.getLongTicker(), pairData.getShortTicker());

        updatePairDataAfterClose(pairData, zScoreData, closeResult);

        if (isVirtualTrading) {
            // üíæ –î–ª—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ—Ñ–∏—Ç–∞
            pairDataService.save(pairData);
            tradeLogService.updateTradeLog(pairData, settings);
        } else {
            // üè¶ –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ closeResult
            updateProfitFromCloseResult(pairData, closeResult);
            savePairDataWithUpdates(pairData, settings);
        }

        return pairData;
    }

    private PairData handleNoOpenPositions(PairData pairData, Settings settings) {
        log.info("‚ÑπÔ∏è –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –ø–∞—Ä—ã {}/{}! –í–æ–∑–º–æ–∂–Ω–æ –æ–Ω–∏ –±—ã–ª–∏ –∑–∞–∫—Ä—ã—Ç—ã –≤—Ä—É—á–Ω—É—é –Ω–∞ –±–∏—Ä–∂–µ.",
                pairData.getLongTicker(), pairData.getShortTicker());

        //todo –ø–æ–¥—É–º–∞—Ç—å –Ω–∞–¥ —Ç–µ–º —á—Ç–æ –±—ã —Å–¥–µ–ª–∞—Ç—å UUID –¥–ª—è –ø–∞—Ä—ã –∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –µ–≥–æ –Ω–∞ –±–∏—Ä–∂—É –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–æ–∫!
        // –ß—Ç–æ –±—ã –ø–æ—Ç–æ–º –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ—ã –æ–± –æ—Ç–∫—Ä—ã—Ç—ã—Ö/–∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–∫–∞—Ö –±—ã–ª–æ –ø—Ä–æ—â–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∏—Ö —Ç–∫ –º–æ–Ω–µ—Ç—ã –º–æ–≥—É—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è –∏ –º–æ–≥—É—Ç –±—ã—Ç—å –±–∞–≥–∏
        // –≤ —Ç–æ–º —Ç—É –ª–∏ —Å–¥–µ–ª–∫—É –º—ã –Ω–∞—à–ª–∏ –∏–ª–∏ —ç—Ç–æ —Å–¥–µ–ª–∫–∞ –Ω–∞ –±–∏—Ä–∂–µ —Å–æ–≤—Å–µ–º —Å—Ç–∞—Ä–∞—è. –ó–∞ –¥–µ–Ω—å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–¥–µ–ª–æ–∫ –ø–æ –æ–¥–Ω–æ–π –∏ —Ç–æ–π –∂–µ –º–æ–Ω–µ—Ç–µ. –ò —Ç–æ–≥–¥–∞ –Ω–∞–≤–µ–Ω–æ–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –≤—Ö–æ–¥–∏—Ç—å –≤ –æ–¥–Ω–∏ –∏ —Ç–µ –∂–µ –º–æ–Ω–µ—Ç—ã (–Ω–æ –Ω–µ —Ñ–∞–∫—Ç)
        PositionVerificationResult verificationResult = tradingIntegrationService.verifyPositionsClosed(pairData);
        if (verificationResult.isPositionsClosed()) {
            log.info("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã –Ω–∞ –±–∏—Ä–∂–µ –¥–ª—è –ø–∞—Ä—ã {}/{}, PnL: {}",
                    pairData.getLongTicker(), pairData.getShortTicker(), verificationResult.getTotalPnL());
            return handleTradeError(pairData, settings, TradeErrorType.MANUALLY_CLOSED_NO_POSITIONS);
        } else {
            log.warn("‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ –±–∏—Ä–∂–µ –¥–ª—è –ø–∞—Ä—ã {}/{}",
                    pairData.getLongTicker(), pairData.getShortTicker());
            return handleTradeError(pairData, settings, TradeErrorType.POSITIONS_NOT_FOUND);
        }
    }

    private PairData handleAutoClose(PairData pairData, ZScoreData zScoreData, Settings settings, String exitReason) {
        log.info("üö™ –ù–∞–π–¥–µ–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏: {} –¥–ª—è –ø–∞—Ä—ã {}/{}",
                exitReason, pairData.getLongTicker(), pairData.getShortTicker());

        // üéØ –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
        boolean isVirtualTrading = tradingIntegrationService.getCurrentTradingMode().isVirtual();

        if (isVirtualTrading) {
            // üìä –î–ª—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç –Ω–∞ –º–æ–º–µ–Ω—Ç exit
            if (pairData.getExitProfitSnapshot() != null) {
                log.info("üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç –Ω–∞ –º–æ–º–µ–Ω—Ç exit: {}% –¥–ª—è –ø–∞—Ä—ã {}/{}",
                        pairData.getExitProfitSnapshot(), pairData.getLongTicker(), pairData.getShortTicker());
                pairData.setProfitChanges(pairData.getExitProfitSnapshot());
            } else {
                // Fallback: —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏—Ç –µ—Å–ª–∏ –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω
                Map<String, List<Candle>> candlesMap = candlesService.getApplicableCandlesMap(pairData, settings);

                pairDataService.updateCurrentDataAndSave(UpdatePairDataRequest.builder()
                        .isAddEntryPoints(false)
                        .pairData(pairData)
                        .zScoreData(zScoreData)
                        .candlesMap(candlesMap)
                        .isUpdateChanges(true)
                        .isVirtual(true)
                        .build());
//                pairDataService.updateChangesAndSaveForVirtual(pairData);
            }
        }

        CloseArbitragePairResult closeResult = tradingIntegrationService.closeArbitragePair(pairData);
        if (closeResult == null || !closeResult.isSuccess()) {
            pairData.setExitReason(exitReason);
            return handleTradeError(pairData, settings, TradeErrorType.AUTO_CLOSE_FAILED);
        }

        log.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –ø–∞—Ä–∞: {}/{}",
                pairData.getLongTicker(), pairData.getShortTicker());

        updatePairDataAfterClose(pairData, zScoreData, closeResult); //todo –ª–∏—à–Ω–µ–µ –¥–ª—è –≤–∏—Ä—Ç—É–∞–ª???
        pairData.setStatus(TradeStatus.CLOSED);
        pairData.setExitReason(exitReason);

        if (isVirtualTrading) {
            // üíæ –î–ª—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ—Ñ–∏—Ç–∞
            pairDataService.save(pairData);
            tradeLogService.updateTradeLog(pairData, settings);
        } else {
            // üè¶ –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ closeResult
            updateProfitFromCloseResult(pairData, closeResult);
            // üéØ –ù–ï –≤—ã–∑—ã–≤–∞–µ–º savePairDataWithUpdates, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Ñ–∏—Ç–∞ –≤ updateChangesAndSave
            pairDataService.save(pairData);
            tradeLogService.updateTradeLog(pairData, settings);
        }

        return pairData;
    }

    private PairData updateRegularTrade(PairData pairData, ZScoreData zScoreData, Settings settings) {
        // üìä –ü—Ä–æ—Ñ–∏—Ç —É–∂–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –≤ updateCurrentProfitBeforeExitCheck(), –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        pairDataService.save(pairData);
        tradeLogService.updateTradeLog(pairData, settings);
        return pairData;
    }

    private PairData handleTradeError(PairData pairData, Settings settings, TradeErrorType errorType) {
        log.error("‚ùå –û—à–∏–±–∫–∞: {} –¥–ª—è –ø–∞—Ä—ã {}/{}", errorType.getDescription(),
                pairData.getLongTicker(), pairData.getShortTicker());

        pairData.setStatus(errorType.getStatus());
        savePairDataWithUpdates(pairData, settings);
        return pairData;
    }

    private void updatePairDataAfterClose(PairData pairData, ZScoreData zScoreData, CloseArbitragePairResult closeResult) {
        TradeResult closeLongTradeResult = closeResult.getLongTradeResult();
        TradeResult closeShortTradeResult = closeResult.getShortTradeResult();
        pairDataService.updateCurrentDataAndSave(pairData, zScoreData, closeLongTradeResult, closeShortTradeResult);
    }

    private void savePairDataWithUpdates(PairData pairData, Settings settings) {
        pairDataService.save(pairData);
        pairDataService.updateChangesAndSave(pairData);
        tradeLogService.updateTradeLog(pairData, settings);
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π exit strategy
     * –ö—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ –∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
     */
    private void updateCurrentProfitBeforeExitCheck(PairData pairData, ZScoreData zScoreData, Settings settings) {
        try {
            // üìä –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –∏ –¥–∞–Ω–Ω—ã–µ
            Map<String, List<Candle>> candlesMap = candlesService.getApplicableCandlesMap(pairData, settings);

            // üéØ –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏
            boolean isVirtualTrading = tradingIntegrationService.getCurrentTradingMode().isVirtual();

            pairDataService.updateCurrentDataAndSave(UpdatePairDataRequest.builder()
                    .isAddEntryPoints(false)
                    .pairData(pairData)
                    .zScoreData(zScoreData)
                    .candlesMap(candlesMap)
                    .isUpdateChanges(true)
                    .isVirtual(isVirtualTrading)
                    .build());

//            if (isVirtualTrading) {
//                // üí° –î–ª—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
//                pairDataService.updateChangesAndSaveForVirtual(pairData);
//                log.debug("üìà –û–±–Ω–æ–≤–ª–µ–Ω –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç –¥–ª—è exit strategy (–≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è) {}/{}: {}%",
//                        pairData.getLongTicker(), pairData.getShortTicker(), pairData.getProfitChanges());
//            } else {
//                // üè¶ –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏: –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
//                pairDataService.updateChangesAndSave(pairData);
//                log.debug("üìà –û–±–Ω–æ–≤–ª–µ–Ω –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç –¥–ª—è exit strategy (—Ä–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è) {}/{}: {}%",
//                        pairData.getLongTicker(), pairData.getShortTicker(), pairData.getProfitChanges());
//            }

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏—Ç–∞ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π exit strategy –¥–ª—è –ø–∞—Ä—ã {}/{}: {}",
                    pairData.getLongTicker(), pairData.getShortTicker(), e.getMessage());
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
     */
    private void updateProfitFromCloseResult(PairData pairData, CloseArbitragePairResult closeResult) {
        try {
            TradeResult longResult = closeResult.getLongTradeResult();
            TradeResult shortResult = closeResult.getShortTradeResult();

            if (longResult == null || shortResult == null) {
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è –ø–∞—Ä—ã {}/{}",
                        pairData.getLongTicker(), pairData.getShortTicker());
                return;
            }

            // üí∞ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è
            pairData.setLongTickerCurrentPrice(longResult.getExecutionPrice().doubleValue());
            pairData.setShortTickerCurrentPrice(shortResult.getExecutionPrice().doubleValue());

            // üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç –Ω–∞ –º–æ–º–µ–Ω—Ç exit –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if (pairData.getExitProfitSnapshot() != null) {
                log.info("üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç –Ω–∞ –º–æ–º–µ–Ω—Ç exit –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏: {}% –¥–ª—è –ø–∞—Ä—ã {}/{}",
                        pairData.getExitProfitSnapshot(), pairData.getLongTicker(), pairData.getShortTicker());
                pairData.setProfitChanges(pairData.getExitProfitSnapshot());
            } else {
                // Fallback: —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö PnL
                BigDecimal totalPnL = longResult.getPnl().add(shortResult.getPnl());
                BigDecimal totalFees = longResult.getFees().add(shortResult.getFees());
                BigDecimal netPnL = totalPnL.subtract(totalFees);

                // üìà –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –ø–æ–∑–∏—Ü–∏–∏
                BigDecimal longEntryPrice = BigDecimal.valueOf(pairData.getLongTickerEntryPrice());
                BigDecimal shortEntryPrice = BigDecimal.valueOf(pairData.getShortTickerEntryPrice());
                BigDecimal avgEntryPrice = longEntryPrice.add(shortEntryPrice).divide(BigDecimal.valueOf(2), 4, RoundingMode.HALF_UP);

                if (avgEntryPrice.compareTo(BigDecimal.ZERO) > 0) {
                    BigDecimal profitPercent = netPnL.divide(avgEntryPrice, 4, RoundingMode.HALF_UP)
                            .multiply(BigDecimal.valueOf(100));
                    pairData.setProfitChanges(profitPercent);
                }

                log.info("üè¶ –†–∞—Å—Å—á–∏—Ç–∞–Ω –ø—Ä–æ—Ñ–∏—Ç –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ {}/{}: {}% (PnL: {}, –∫–æ–º–∏—Å—Å–∏–∏: {})",
                        pairData.getLongTicker(), pairData.getShortTicker(),
                        pairData.getProfitChanges(), totalPnL, totalFees);
            }

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏—Ç–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è –ø–∞—Ä—ã {}/{}: {}",
                    pairData.getLongTicker(), pairData.getShortTicker(), e.getMessage());
        }
    }
}
