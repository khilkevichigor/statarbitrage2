package com.example.statarbitrage.core.processors;

import com.example.statarbitrage.common.dto.Candle;
import com.example.statarbitrage.common.dto.UpdatePairDataRequest;
import com.example.statarbitrage.common.dto.ZScoreData;
import com.example.statarbitrage.common.dto.ZScoreParam;
import com.example.statarbitrage.common.model.PairData;
import com.example.statarbitrage.common.model.Settings;
import com.example.statarbitrage.common.model.TradeStatus;
import com.example.statarbitrage.core.services.*;
import com.example.statarbitrage.trading.model.CloseArbitragePairResult;
import com.example.statarbitrage.trading.model.TradeResult;
import com.example.statarbitrage.trading.services.TradingIntegrationService;
import com.example.statarbitrage.trading.services.TradingProviderFactory;
import com.example.statarbitrage.ui.dto.UpdateTradeRequest;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Map;

import static com.example.statarbitrage.common.constant.Constants.EXIT_REASON_MANUALLY;

@Slf4j
@Component
@RequiredArgsConstructor
public class UpdateTradeProcessor {
    private final PairDataService pairDataService;
    private final CandlesService candlesService;
    private final SettingsService settingsService;
    private final TradeLogService tradeLogService;
    private final ZScoreService zScoreService;
    private final TradingIntegrationService tradingIntegrationService;
    private final TradingProviderFactory tradingProviderFactory;
    private final ChangesService changesService;
    private final ExitStrategyService exitStrategyService;

    @Transactional
    public PairData updateTrade(UpdateTradeRequest request) {
        boolean isVirtual = tradingProviderFactory.getCurrentProvider().getProviderType().isVirtual();
        if (isVirtual) {
            return updateVirtualTrade(request);
        } else {
            return updateRealTrade(request);
        }
    }

    private PairData updateVirtualTrade(UpdateTradeRequest request) {
        PairData pairData = request.getPairData();
        boolean isCloseManually = request.isCloseManually();
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—ã - –µ—Å–ª–∏ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        if (pairData.getStatus() == TradeStatus.CLOSED) {
            log.debug("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ–π –ø–∞—Ä—ã {}/{}", pairData.getLongTicker(), pairData.getShortTicker());
            return pairData;
        }

        log.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∞ –¥–ª—è {} - {}", pairData.getLongTicker(), pairData.getShortTicker());
        Settings settings = settingsService.getSettings();

        Map<String, List<Candle>> candlesMap = candlesService.getApplicableCandlesMap(pairData, settings);
        ZScoreData zScoreData = zScoreService.calculateZScoreData(settings, candlesMap);

        logData(zScoreData);

        UpdatePairDataRequest updatePairDataRequest = UpdatePairDataRequest.builder()
                .isVirtual(true)
                .pairData(pairData)
                .zScoreData(zScoreData)
                .candlesMap(candlesMap)
                .build();

        pairDataService.update(updatePairDataRequest);

        changesService.calculate(pairData);

        String exitReason = exitStrategyService.getExitReason(pairData);
        if (exitReason != null) {
            pairData.setExitReason(exitReason);
            pairData.setStatus(TradeStatus.CLOSED);
        }

        //–ø–æ—Å–ª–µ –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ—Ñ–∏—Ç–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (isCloseManually) {
            pairData.setStatus(TradeStatus.CLOSED);
            pairData.setExitReason(EXIT_REASON_MANUALLY);
        }

        pairDataService.save(pairData);

        tradeLogService.saveLog(pairData);
        return pairData;
    }

    private PairData updateRealTrade(UpdateTradeRequest request) {
        PairData pairData = request.getPairData();
        boolean isCloseManually = request.isCloseManually();
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä—É –∏–∑ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        PairData freshPairData = pairDataService.findById(pairData.getId());
        if (freshPairData == null || freshPairData.getStatus() == TradeStatus.CLOSED) {
            log.debug("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ–π –ø–∞—Ä—ã {}/{}", pairData.getLongTicker(), pairData.getShortTicker());
            return freshPairData != null ? freshPairData : pairData;
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        pairData = freshPairData;

        log.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∞ –¥–ª—è {} - {}", pairData.getLongTicker(), pairData.getShortTicker());
        Settings settings = settingsService.getSettings();

        Map<String, List<Candle>> candlesMap = candlesService.getApplicableCandlesMap(pairData, settings);
        ZScoreData zScoreData = zScoreService.calculateZScoreData(settings, candlesMap);

        logData(zScoreData);

        pairDataService.updateReal(pairData, zScoreData, candlesMap);
        changesService.calculate(pairData);

        // –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –Ω–∞ "–ó–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é", –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ –°–ò–ù–•–†–û–ù–ù–û
        if (isCloseManually) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π –∑–∞–∫—Ä—ã—Ç–∏—è
            if (tradingIntegrationService.hasOpenPositions(pairData)) {
                CloseArbitragePairResult closeArbitragePairResult = tradingIntegrationService.closeArbitragePair(pairData);
                if (closeArbitragePairResult != null && closeArbitragePairResult.isSuccess()) {
                    log.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –ø–∞—Ä–∞ —á–µ—Ä–µ–∑ —Ç–æ—Ä–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É: {}/{}",
                            pairData.getLongTicker(), pairData.getShortTicker());

                    TradeResult closeLongTradeResult = closeArbitragePairResult.getLongTradeResult();
                    TradeResult closeShortTradeResult = closeArbitragePairResult.getShortTradeResult();

                    UpdatePairDataRequest updatePairDataRequest = UpdatePairDataRequest.builder()
                            .isVirtual(false)
                            .pairData(pairData)
                            .zScoreData(zScoreData)
                            .candlesMap(candlesMap)
                            .tradeResultLong(closeLongTradeResult)
                            .tradeResultShort(closeShortTradeResult)
                            .build();

                    pairDataService.update(updatePairDataRequest);
                } else {
                    log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—É—é –ø–∞—Ä—É —á–µ—Ä–µ–∑ —Ç–æ—Ä–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É: {}/{}",
                            pairData.getLongTicker(), pairData.getShortTicker());

                    pairData.setStatus(TradeStatus.ERROR_200);
                }
            } else {
                log.info("‚ÑπÔ∏è –ü–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–∞—Ä—ã {}/{} —É–∂–µ –±—ã–ª–∏ –∑–∞–∫—Ä—ã—Ç—ã –≤—Ä—É—á–Ω—É—é –Ω–∞ –±–∏—Ä–∂–µ. –¢–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å.",
                        pairData.getLongTicker(), pairData.getShortTicker());
            }

        } else {
            String exitReason = exitStrategyService.getExitReason(pairData);
            if (exitReason != null) {
                log.info("üö™ –ù–∞–π–¥–µ–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏: {} –¥–ª—è –ø–∞—Ä—ã {}/{}",
                        exitReason, pairData.getLongTicker(), pairData.getShortTicker());

                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—É—é –ø–∞—Ä—É —á–µ—Ä–µ–∑ —Ç–æ—Ä–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –°–ò–ù–•–†–û–ù–ù–û
                CloseArbitragePairResult closeArbitragePairResult = tradingIntegrationService.closeArbitragePair(pairData);
                if (closeArbitragePairResult != null && closeArbitragePairResult.isSuccess()) {
                    log.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –ø–∞—Ä–∞: {}/{}",
                            pairData.getLongTicker(), pairData.getShortTicker());

                    TradeResult closeLongTradeResult = closeArbitragePairResult.getLongTradeResult();
                    TradeResult closeShortTradeResult = closeArbitragePairResult.getShortTradeResult();

                    UpdatePairDataRequest updatePairDataRequest = UpdatePairDataRequest.builder()
                            .isVirtual(false)
                            .pairData(pairData)
                            .zScoreData(zScoreData)
                            .candlesMap(candlesMap)
                            .tradeResultLong(closeLongTradeResult)
                            .tradeResultShort(closeShortTradeResult)
                            .build();

                    pairDataService.update(updatePairDataRequest);
                    pairData.setExitReason(exitReason);
                    pairData.setStatus(TradeStatus.CLOSED);
                } else {
                    log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –ø–∞—Ä—ã: {}/{}",
                            pairData.getLongTicker(), pairData.getShortTicker());

                    pairData.setExitReason(exitReason);
                    pairData.setStatus(TradeStatus.ERROR_200);
                }
            }
        }
        changesService.calculate(pairData);
        tradeLogService.saveLog(pairData);

        return pairData;
    }

    private static void logData(ZScoreData zScoreData) {
        ZScoreParam latest = zScoreData.getLastZScoreParam(); // –ø–æ—Å–ª–µ–¥–Ω–∏–µ params
        log.info(String.format("–ù–∞—à–∞ –ø–∞—Ä–∞: underValued=%s overValued=%s | p=%.5f | adf=%.5f | z=%.2f | corr=%.2f",
                zScoreData.getUndervaluedTicker(), zScoreData.getOvervaluedTicker(),
                latest.getPvalue(), latest.getAdfpvalue(), latest.getZscore(), latest.getCorrelation()
        ));
    }
}
