package com.example.statarbitrage.core.processors;

import com.example.statarbitrage.common.dto.Candle;
import com.example.statarbitrage.common.dto.ZScoreData;
import com.example.statarbitrage.common.dto.ZScoreParam;
import com.example.statarbitrage.common.model.PairData;
import com.example.statarbitrage.common.model.Settings;
import com.example.statarbitrage.common.model.TradeStatus;
import com.example.statarbitrage.core.services.*;
import com.example.statarbitrage.trading.model.CloseArbitragePairResult;
import com.example.statarbitrage.trading.model.PositionVerificationResult;
import com.example.statarbitrage.trading.model.TradeResult;
import com.example.statarbitrage.trading.services.TradingIntegrationService;
import com.example.statarbitrage.ui.dto.UpdateTradeRequest;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Map;

@Slf4j
@Component
@RequiredArgsConstructor
public class UpdateTradeProcessor {
    private final PairDataService pairDataService;
    private final CandlesService candlesService;
    private final SettingsService settingsService;
    private final TradeLogService tradeLogService;
    private final ZScoreService zScoreService;
    private final TradingIntegrationService tradingIntegrationService;
    private final ExitStrategyService exitStrategyService;

    @Transactional
    public PairData updateTrade(UpdateTradeRequest request) {
        PairData pairData = request.getPairData();
        boolean isCloseManually = request.isCloseManually();
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä—É –∏–∑ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        PairData freshPairData = pairDataService.findById(pairData.getId());
        if (freshPairData == null || freshPairData.getStatus() == TradeStatus.CLOSED) {
            log.debug("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ–π –ø–∞—Ä—ã {}/{}", pairData.getLongTicker(), pairData.getShortTicker());
            return freshPairData != null ? freshPairData : pairData;
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        pairData = freshPairData;

        log.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∞ –¥–ª—è {} - {}", pairData.getLongTicker(), pairData.getShortTicker());
        Settings settings = settingsService.getSettings();

        Map<String, List<Candle>> candlesMap = candlesService.getApplicableCandlesMap(pairData, settings);
        ZScoreData zScoreData = zScoreService.calculateZScoreData(settings, candlesMap);

        ZScoreParam latest = zScoreData.getLastZScoreParam(); // –ø–æ—Å–ª–µ–¥–Ω–∏–µ params
        log.info(String.format("–ù–∞—à–∞ –ø–∞—Ä–∞: underValued=%s overValued=%s | p=%.5f | adf=%.5f | z=%.2f | corr=%.2f",
                zScoreData.getUndervaluedTicker(), zScoreData.getOvervaluedTicker(),
                latest.getPvalue(), latest.getAdfpvalue(), latest.getZscore(), latest.getCorrelation()
        ));

        // –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –Ω–∞ "–ó–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é", –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ –°–ò–ù–•–†–û–ù–ù–û
        if (isCloseManually) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π –∑–∞–∫—Ä—ã—Ç–∏—è
            if (!tradingIntegrationService.hasOpenPositions(pairData)) {
                log.info("‚ÑπÔ∏è –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–∞—Ä—ã {}/{}! –í–æ–∑–º–æ–∂–Ω–æ –æ–Ω–∏ –±—ã–ª–∏ –∑–∞–∫—Ä—ã—Ç—ã –≤—Ä—É—á–Ω—É—é –Ω–∞ –±–∏—Ä–∂–µ.",
                        pairData.getLongTicker(), pairData.getShortTicker());
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–∑–∏—Ü–∏–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã –Ω–∞ –±–∏—Ä–∂–µ –∏ –ø–æ–ª—É—á–∞–µ–º PnL
                PositionVerificationResult verificationResult = tradingIntegrationService.verifyPositionsClosed(pairData);
                if (verificationResult.isPositionsClosed()) {
                    log.info("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã –Ω–∞ –±–∏—Ä–∂–µ –¥–ª—è –ø–∞—Ä—ã {}/{}, PnL: {}",
                            pairData.getLongTicker(), pairData.getShortTicker(), verificationResult.getTotalPnL());
                    pairData.setStatus(TradeStatus.ERROR_800);
                    pairDataService.updateChangesWithSpecificPnLAndSave(pairData, verificationResult.getTotalPnL());
                    tradeLogService.updateTradeLog(pairData, settings);
                    return pairData;
                } else {
                    log.warn("‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ –±–∏—Ä–∂–µ –¥–ª—è –ø–∞—Ä—ã {}/{}",
                            pairData.getLongTicker(), pairData.getShortTicker());
                    pairData.setStatus(TradeStatus.ERROR_810);
                    pairDataService.save(pairData);
                    tradeLogService.updateTradeLog(pairData, settings);
                    return pairData;
                }
            }
            //–ó–∞–∫—Ä—ã–≤–∞–µ–º
            CloseArbitragePairResult closeArbitragePairResult = tradingIntegrationService.closeArbitragePair(pairData);
            if (closeArbitragePairResult == null || !closeArbitragePairResult.isSuccess()) {
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—É—é –ø–∞—Ä—É —á–µ—Ä–µ–∑ —Ç–æ—Ä–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É: {}/{}",
                        pairData.getLongTicker(), pairData.getShortTicker());

                pairData.setStatus(TradeStatus.ERROR_710);
                pairDataService.updateCurrentDataAndSave(pairData, zScoreData, candlesMap);
                pairDataService.updateChangesAndSave(pairData);
                tradeLogService.updateTradeLog(pairData, settings);
                return pairData;
            }
            log.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –ø–∞—Ä–∞ —á–µ—Ä–µ–∑ —Ç–æ—Ä–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É: {}/{}",
                    pairData.getLongTicker(), pairData.getShortTicker());

            TradeResult closeLongTradeResult = closeArbitragePairResult.getLongTradeResult();
            TradeResult closeShortTradeResult = closeArbitragePairResult.getShortTradeResult();
            pairDataService.updateCurrentDataAndSave(pairData, zScoreData, candlesMap, closeLongTradeResult, closeShortTradeResult);
            pairDataService.updateChangesAndSave(pairData);
            tradeLogService.updateTradeLog(pairData, settings);
            return pairData;
        }

        String exitReason = exitStrategyService.getExitReason(pairData);
        if (exitReason != null) {
            log.info("üö™ –ù–∞–π–¥–µ–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏: {} –¥–ª—è –ø–∞—Ä—ã {}/{}",
                    exitReason, pairData.getLongTicker(), pairData.getShortTicker());

            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—É—é –ø–∞—Ä—É —á–µ—Ä–µ–∑ —Ç–æ—Ä–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –°–ò–ù–•–†–û–ù–ù–û
            CloseArbitragePairResult closeArbitragePairResult = tradingIntegrationService.closeArbitragePair(pairData);
            if (closeArbitragePairResult == null || !closeArbitragePairResult.isSuccess()) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –ø–∞—Ä—ã: {}/{}",
                        pairData.getLongTicker(), pairData.getShortTicker());

                pairData.setExitReason(exitReason);
                pairData.setStatus(TradeStatus.ERROR_200);
                pairDataService.updateCurrentDataAndSave(pairData, zScoreData, candlesMap);
                pairDataService.updateChangesAndSave(pairData);
                tradeLogService.updateTradeLog(pairData, settings);
                return pairData;
            }
            log.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –ø–∞—Ä–∞: {}/{}",
                    pairData.getLongTicker(), pairData.getShortTicker());

            TradeResult closeLongTradeResult = closeArbitragePairResult.getLongTradeResult();
            TradeResult closeShortTradeResult = closeArbitragePairResult.getShortTradeResult();
            pairDataService.updateCurrentDataAndSave(pairData, zScoreData, candlesMap, closeLongTradeResult, closeShortTradeResult);
            pairData.setStatus(TradeStatus.CLOSED);
            pairData.setExitReason(exitReason);
            pairDataService.updateCurrentDataAndSave(pairData, zScoreData, candlesMap);
            pairDataService.updateChangesAndSave(pairData);
            tradeLogService.updateTradeLog(pairData, settings);
            return pairData;
        }

        pairDataService.updateCurrentDataAndSave(pairData, zScoreData, candlesMap);
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –æ—Ç–∫—Ä—ã—Ç—ã–º –ø–æ–∑–∏—Ü–∏—è–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º changes
        PositionVerificationResult openPositionsInfo = tradingIntegrationService.getOpenPositionsInfo(pairData);
        if (!openPositionsInfo.isPositionsClosed()) {
            // –ü–æ–∑–∏—Ü–∏–∏ –æ—Ç–∫—Ä—ã—Ç—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π PnL
            pairDataService.updateChangesWithSpecificPnLAndSave(pairData, openPositionsInfo.getTotalPnL());
        } else {
            // –ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –º–µ—Ç–æ–¥
            pairDataService.updateChangesAndSave(pairData);
        }
        tradeLogService.updateTradeLog(pairData, settings);

        return pairData;
    }
}
