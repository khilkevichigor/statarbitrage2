package com.example.statarbitrage.core.processors;

import com.example.statarbitrage.common.dto.Candle;
import com.example.statarbitrage.common.dto.ZScoreData;
import com.example.statarbitrage.common.dto.ZScoreParam;
import com.example.statarbitrage.common.model.PairData;
import com.example.statarbitrage.common.model.Settings;
import com.example.statarbitrage.common.model.TradeStatus;
import com.example.statarbitrage.core.services.*;
import com.example.statarbitrage.trading.model.ArbitragePairTradeInfo;
import com.example.statarbitrage.trading.model.TradeResult;
import com.example.statarbitrage.trading.services.TradingIntegrationService;
import com.example.statarbitrage.ui.dto.StartNewTradeRequest;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@Slf4j
@Component
@RequiredArgsConstructor
public class StartNewTradeProcessor {
    private final PairDataService pairDataService;
    private final CandlesService candlesService;
    private final SettingsService settingsService;
    private final ZScoreService zScoreService;
    private final TradingIntegrationService tradingIntegrationService;
    private final TradeLogService tradeLogService;
    private final CalculateChangesService calculateChangesService;
    private final EntryPointService entryPointService;

    @Transactional
    public PairData startNewTrade(StartNewTradeRequest request) {
        validateRequest(request);

        PairData pairData = request.getPairData();
        Settings settings = settingsService.getSettings();

        log.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ç—Ä–µ–π–¥ –¥–ª—è {} - {}", pairData.getLongTicker(), pairData.getShortTicker());

        // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        PairData validationResult = performPreValidation(pairData, settings);
        if (validationResult != null) {
            return validationResult;
        }

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        ZScoreData zScoreData = calculateAndValidateZScoreData(pairData, settings);
        if (zScoreData == null) {
            return pairData;
        }

        updateZScoreDataCurrent(pairData, zScoreData);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ç–∏–∫–µ—Ä–æ–≤
        if (!validateTickers(pairData, zScoreData)) {
            return handleTradeError(pairData, StartTradeErrorType.TICKERS_SWITCHED);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–∞
        if (!validateAutoTrading(pairData, request.isCheckAutoTrading())) {
            return handleTradeError(pairData, StartTradeErrorType.AUTO_TRADING_DISABLED);
        }

        logTradeInfo(zScoreData);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        if (!validateBalance(pairData)) {
            return handleTradeError(pairData, StartTradeErrorType.INSUFFICIENT_FUNDS);
        }

        // –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        return openTradePosition(pairData, zScoreData, settings);
    }

    private void updateZScoreDataCurrent(PairData pairData, ZScoreData zScoreData) {
        ZScoreParam latestParam = zScoreData.getLastZScoreParam();
        pairData.setZScoreCurrent(latestParam.getZscore());
        pairData.setCorrelationCurrent(latestParam.getCorrelation());
        pairData.setAdfPvalueCurrent(latestParam.getAdfpvalue());
        pairData.setPValueCurrent(latestParam.getPvalue());
        pairData.setMeanCurrent(latestParam.getMean());
        pairData.setStdCurrent(latestParam.getStd());
        pairData.setSpreadCurrent(latestParam.getSpread());
        pairData.setAlphaCurrent(latestParam.getAlpha());
        pairData.setBetaCurrent(latestParam.getBeta());

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ç–æ—á–∫–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é Z-Score –ø—Ä–∏ –∫–∞–∂–¥–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        if (zScoreData.getZscoreParams() != null && !zScoreData.getZscoreParams().isEmpty()) {
            // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å—é –Ω–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é –∏–∑ ZScoreData
            for (ZScoreParam param : zScoreData.getZscoreParams()) {
                pairData.addZScorePoint(param);
            }
        } else {
            // –ï—Å–ª–∏ –Ω–æ–≤–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Ö–æ—Ç—è –±—ã —Ç–µ–∫—É—â—É—é —Ç–æ—á–∫—É
            pairData.addZScorePoint(latestParam);
        }
    }

    private void validateRequest(StartNewTradeRequest request) {
        if (request == null || request.getPairData() == null) {
            throw new IllegalArgumentException("–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–π–¥–∞");
        }
    }

    private PairData performPreValidation(PairData pairData, Settings settings) {
        if (isLastZLessThenMinZ(pairData, settings)) {
            log.warn("ZCurrent < ZMin –¥–ª—è –ø–∞—Ä—ã {} - {}", pairData.getLongTicker(), pairData.getShortTicker());
            return handleTradeError(pairData, StartTradeErrorType.Z_SCORE_BELOW_MINIMUM);
        }
        return null;
    }

    private boolean isLastZLessThenMinZ(PairData pairData, Settings settings) {
        if (pairData == null) {
            throw new IllegalArgumentException("pairData is null");
        }

        double zScore = pairData.getZScoreCurrent();
        if (zScore < settings.getMinZ()) {
            if (zScore < 0) {
                log.warn("Skip this pair {} - {}. Z-score {} < 0",
                        pairData.getLongTicker(),
                        pairData.getShortTicker(),
                        zScore);
            } else {
                log.warn("Skip this pair {} - {}. Z-score {} < minZ {}",
                        pairData.getLongTicker(),
                        pairData.getShortTicker(),
                        zScore,
                        settings.getMinZ());
            }
            return true;
        }

        return false;
    }

    private ZScoreData calculateAndValidateZScoreData(PairData pairData, Settings settings) {
        Map<String, List<Candle>> candlesMap = candlesService.getApplicableCandlesMap(pairData, settings);
        Optional<ZScoreData> maybeZScoreData = zScoreService.calculateZScoreDataForNewTrade(pairData, settings, candlesMap);

        if (maybeZScoreData.isEmpty()) {
            log.warn("üìä ZScore –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã –¥–ª—è –ø–∞—Ä—ã {}/{}", pairData.getLongTicker(), pairData.getShortTicker());
            handleTradeError(pairData, StartTradeErrorType.Z_SCORE_DATA_EMPTY);
            return null;
        }

        return maybeZScoreData.get();
    }

    private boolean validateTickers(PairData pairData, ZScoreData zScoreData) {
        return Objects.equals(pairData.getLongTicker(), zScoreData.getUndervaluedTicker()) &&
                Objects.equals(pairData.getShortTicker(), zScoreData.getOvervaluedTicker());
    }

    private boolean validateAutoTrading(PairData pairData, boolean checkAutoTrading) {
        if (!checkAutoTrading) {
            log.info("üîß –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Ç—Ä–µ–π–¥–∞ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞ –¥–ª—è –ø–∞—Ä—ã {} - {}",
                    pairData.getLongTicker(), pairData.getShortTicker());
            return true;
        }

        Settings currentSettings = settingsService.getSettings();
        log.debug("üìñ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: –ß–∏—Ç–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î: autoTrading={}", currentSettings.isAutoTradingEnabled());

        if (!currentSettings.isAutoTradingEnabled()) {
            log.warn("üõë –ê–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω! –ü—Ä–æ–ø—É—Å–∫–∞—é –æ—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–π–¥–∞ –¥–ª—è –ø–∞—Ä—ã {} - {}",
                    pairData.getLongTicker(), pairData.getShortTicker());
            return false;
        }

        log.debug("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: –ê–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º");
        return true;
    }

    private void logTradeInfo(ZScoreData zScoreData) {
        ZScoreParam latest = zScoreData.getLastZScoreParam();
        log.info(String.format("–ù–∞—à –Ω–æ–≤—ã–π —Ç—Ä–µ–π–¥: underValued=%s overValued=%s | p=%.5f | adf=%.5f | z=%.2f | corr=%.2f",
                zScoreData.getUndervaluedTicker(), zScoreData.getOvervaluedTicker(),
                latest.getPvalue(), latest.getAdfpvalue(), latest.getZscore(), latest.getCorrelation()));
    }

    private boolean validateBalance(PairData pairData) {
        if (!tradingIntegrationService.canOpenNewPair()) {
            log.warn("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º –¥–µ–ø–æ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞—Ä—ã {}/{}",
                    pairData.getLongTicker(), pairData.getShortTicker());
            return false;
        }
        return true;
    }

    private PairData openTradePosition(PairData pairData, ZScoreData zScoreData, Settings settings) {
        ArbitragePairTradeInfo openResult = tradingIntegrationService.openArbitragePair(pairData); //todo –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å UUID?

        if (openResult == null || !openResult.isSuccess()) {
            log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—É—é –ø–∞—Ä—É —á–µ—Ä–µ–∑ —Ç–æ—Ä–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É: {}/{}",
                    pairData.getLongTicker(), pairData.getShortTicker());
            return handleTradeError(pairData, StartTradeErrorType.TRADE_OPEN_FAILED);
        }

        return finalizeSuccessfulTrade(pairData, zScoreData, openResult, settings);
    }

    private PairData finalizeSuccessfulTrade(PairData pairData, ZScoreData zScoreData,
                                             ArbitragePairTradeInfo openResult, Settings settings) {

        TradeResult openLongTradeResult = openResult.getLongTradeResult();
        TradeResult openShortTradeResult = openResult.getShortTradeResult();

        log.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –ø–∞—Ä–∞ —á–µ—Ä–µ–∑ —Ç–æ—Ä–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É: {}/{}",
                pairData.getLongTicker(), pairData.getShortTicker());

        pairData.setStatus(TradeStatus.TRADING);

        Map<String, List<Candle>> candlesMap = candlesService.getApplicableCandlesMap(pairData, settings);

        candlesService.addCurrentPricesFromCandles(pairData, candlesMap);
//        List<Candle> longTickerCandles = candlesMap.get(pairData.getLongTicker());
//        List<Candle> shortTickerCandles = candlesMap.get(pairData.getShortTicker());
//        double longTickerCurrentPrice = CandlesUtil.getLastClose(longTickerCandles);
//        double shortTickerCurrentPrice = CandlesUtil.getLastClose(shortTickerCandles);
//        pairData.setLongTickerCurrentPrice(longTickerCurrentPrice);
//        pairData.setShortTickerCurrentPrice(shortTickerCurrentPrice);

        entryPointService.addEntryPoints(pairData, zScoreData, openLongTradeResult, openShortTradeResult);
//        ZScoreParam latestParam = zScoreData.getLastZScoreParam();
//        pairData.setLongTickerEntryPrice(openLongTradeResult.getExecutionPrice().doubleValue());
//        pairData.setShortTickerEntryPrice(openShortTradeResult.getExecutionPrice().doubleValue());
//        pairData.setZScoreEntry(latestParam.getZscore());
//        pairData.setCorrelationEntry(latestParam.getCorrelation());
//        pairData.setAdfPvalueEntry(latestParam.getAdfpvalue());
//        pairData.setPValueEntry(latestParam.getPvalue());
//        pairData.setMeanEntry(latestParam.getMean());
//        pairData.setStdEntry(latestParam.getStd());
//        pairData.setSpreadEntry(latestParam.getSpread());
//        pairData.setAlphaEntry(latestParam.getAlpha());
//        pairData.setBetaEntry(latestParam.getBeta());
//        // –í—Ä–µ–º—è –≤—Ö–æ–¥–∞
//        pairData.setEntryTime(openLongTradeResult.getExecutionTime().atZone(java.time.ZoneId.systemDefault()).toEpochSecond() * 1000);
//
//        log.info("üîπ–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞: LONG {{}} = {}, SHORT {{}} = {}, Z = {}",
//                pairData.getLongTicker(), pairData.getLongTickerEntryPrice(),
//                pairData.getShortTicker(), pairData.getShortTickerEntryPrice(),
//                pairData.getZScoreEntry());

        pairDataService.save(pairData);

        calculateChangesService.updateChangesFromOpenPositions(pairData);
        tradeLogService.updateTradeLog(pairData, settings);
        return pairData;
    }

    private PairData handleTradeError(PairData pairData, StartTradeErrorType errorType) {
        log.error("‚ùå –û—à–∏–±–∫–∞: {} –¥–ª—è –ø–∞—Ä—ã {}/{}", errorType.getDescription(),
                pairData.getLongTicker(), pairData.getShortTicker());

        pairData.setStatus(TradeStatus.ERROR);
        pairData.setErrorDescription(errorType.getDescription());
        pairDataService.save(pairData);
        return pairData;
    }
}
