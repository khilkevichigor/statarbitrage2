package com.example.statarbitrage.core.processors;

import com.example.statarbitrage.common.dto.Candle;
import com.example.statarbitrage.common.dto.ZScoreData;
import com.example.statarbitrage.common.dto.ZScoreParam;
import com.example.statarbitrage.common.model.PairData;
import com.example.statarbitrage.common.model.Settings;
import com.example.statarbitrage.core.services.*;
import com.example.statarbitrage.trading.services.TradingIntegrationService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@Slf4j
@Component
@RequiredArgsConstructor
public class StartNewTradeProcessor {
    private final PairDataService pairDataService;
    private final CandlesService candlesService;
    private final SettingsService settingsService;
    private final TradeLogService tradeLogService;
    private final ZScoreService zScoreService;
    private final ValidateService validateService;
    private final TradingIntegrationService tradingIntegrationService;

    public PairData startNewTrade(PairData pairData) {
        Settings settings = settingsService.getSettings();
        log.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ç—Ä–µ–π–¥...");

        //–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É—Ä–∞–∫–∞
        if (validateService.isLastZLessThenMinZ(pairData, settings)) {
            //–µ—Å–ª–∏ –≤–ø–µ—Ä–≤—ã–µ –ø—Ä–æ–≥–æ–Ω—è–µ–º –∏ Z<ZMin
            pairDataService.delete(pairData);
            log.warn("–£–¥–∞–ª–∏–ª–∏ –ø–∞—Ä—É {} - {} —Ç.–∫. ZCurrent < ZMin", pairData.getLongTicker(), pairData.getShortTicker());
            return null;
        }

        Map<String, List<Candle>> candlesMap = candlesService.getApplicableCandlesMap(pairData, settings);
        Optional<ZScoreData> maybeZScoreData = zScoreService.calculateZScoreDataForNewTrade(pairData, settings, candlesMap);

        if (maybeZScoreData.isEmpty()) {
            log.warn("ZScore data is empty");
            return null;
        }

        ZScoreData zScoreData = maybeZScoreData.get();

        ZScoreParam latest = zScoreData.getLastZScoreParam(); // –ø–æ—Å–ª–µ–¥–Ω–∏–µ params

        if (!Objects.equals(pairData.getLongTicker(), zScoreData.getUndervaluedTicker()) || !Objects.equals(pairData.getShortTicker(), zScoreData.getOvervaluedTicker())) {
            String message = String.format("–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ—Ä–µ–π–¥–∞ –¥–ª—è –ø–∞—Ä—ã –ª–æ–Ω–≥=%s —à–æ—Ä—Ç=%s. –¢–∏–∫–µ—Ä—ã –ø–æ–º–µ–Ω—è–ª–∏—Å—å –º–µ—Å—Ç–∞–º–∏!!! –¢–æ—Ä–≥–æ–≤–∞—Ç—å –Ω–µ–ª—å–∑—è!!!", pairData.getLongTicker(), pairData.getShortTicker());
            log.error(message);
            throw new IllegalArgumentException(message);
        }

        log.info(String.format("–ù–∞—à –Ω–æ–≤—ã–π —Ç—Ä–µ–π–¥: underValued=%s overValued=%s | p=%.5f | adf=%.5f | z=%.2f | corr=%.2f", zScoreData.getUndervaluedTicker(), zScoreData.getOvervaluedTicker(), latest.getPvalue(), latest.getAdfpvalue(), latest.getZscore(), latest.getCorrelation()));

        List<Candle> longTickerCandles = candlesMap.get(pairData.getLongTicker());
        List<Candle> shortTickerCandles = candlesMap.get(pairData.getShortTicker());
        pairDataService.update(pairData, zScoreData, longTickerCandles, shortTickerCandles);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—É—é –ø–∞—Ä—É –Ω–∞ —Ç–æ—Ä–≥–æ–≤–æ–º –¥–µ–ø–æ
        if (tradingIntegrationService.canOpenNewPair()) {
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—É—é –ø–∞—Ä—É —á–µ—Ä–µ–∑ —Ç–æ—Ä–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
            tradingIntegrationService.openArbitragePair(pairData)
                .thenAccept(success -> {
                    if (success) {
                        log.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –ø–∞—Ä–∞ —á–µ—Ä–µ–∑ —Ç–æ—Ä–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É: {}/{}", 
                                pairData.getLongTicker(), pairData.getShortTicker());
                    } else {
                        log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—É—é –ø–∞—Ä—É —á–µ—Ä–µ–∑ —Ç–æ—Ä–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É: {}/{}", 
                                pairData.getLongTicker(), pairData.getShortTicker());
                    }
                })
                .exceptionally(throwable -> {
                    log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –ø–∞—Ä—ã {}/{}: {}", 
                            pairData.getLongTicker(), pairData.getShortTicker(), throwable.getMessage());
                    return null;
                });
        } else {
            log.warn("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º –¥–µ–ø–æ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞—Ä—ã {}/{}", 
                    pairData.getLongTicker(), pairData.getShortTicker());
        }

        tradeLogService.saveFromPairData(pairData);
        return pairData;
    }
}
