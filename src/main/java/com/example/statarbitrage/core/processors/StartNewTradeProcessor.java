package com.example.statarbitrage.core.processors;

import com.example.statarbitrage.common.dto.Candle;
import com.example.statarbitrage.common.dto.ZScoreData;
import com.example.statarbitrage.common.dto.ZScoreParam;
import com.example.statarbitrage.common.model.PairData;
import com.example.statarbitrage.common.model.Settings;
import com.example.statarbitrage.common.model.TradeStatus;
import com.example.statarbitrage.core.services.*;
import com.example.statarbitrage.trading.model.OpenArbitragePairResult;
import com.example.statarbitrage.trading.model.TradeResult;
import com.example.statarbitrage.trading.services.TradingIntegrationService;
import com.example.statarbitrage.trading.services.TradingProviderFactory;
import com.example.statarbitrage.ui.dto.StartNewTradeRequest;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@Slf4j
@Component
@RequiredArgsConstructor
public class StartNewTradeProcessor {
    private final PairDataService pairDataService;
    private final CandlesService candlesService;
    private final SettingsService settingsService;
    private final TradeLogService tradeLogService;
    private final ZScoreService zScoreService;
    private final ValidateService validateService;
    private final TradingIntegrationService tradingIntegrationService;
    private final TradingProviderFactory tradingProviderFactory;
    private final ChangesService changesService;
    private final ExitStrategyService exitStrategyService;

    @Transactional
    public PairData startNewTrade(StartNewTradeRequest startNewTradeRequest) {
        boolean isVirtual = tradingProviderFactory.getCurrentProvider().getProviderType().isVirtual();
        if (isVirtual) {
            return startNewVirtualTrade(startNewTradeRequest);
        } else {
            return startNewRealTrade(startNewTradeRequest);
        }
    }

    private PairData startNewVirtualTrade(StartNewTradeRequest request) {
        PairData pairData = request.getPairData();
        boolean checkAutoTrading = request.isCheckAutoTrading();
        log.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ç—Ä–µ–π–¥ –¥–ª—è {} - {}", pairData.getLongTicker(), pairData.getShortTicker());
        Settings settings = settingsService.getSettings();

        //–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É—Ä–∞–∫–∞
        if (validateService.isLastZLessThenMinZ(pairData, settings)) {
            //–µ—Å–ª–∏ –≤–ø–µ—Ä–≤—ã–µ –ø—Ä–æ–≥–æ–Ω—è–µ–º –∏ Z<ZMin
            pairDataService.delete(pairData);
            log.warn("–£–¥–∞–ª–∏–ª–∏ –ø–∞—Ä—É {} - {} —Ç.–∫. ZCurrent < ZMin", pairData.getLongTicker(), pairData.getShortTicker());
            return null;
        }

        Map<String, List<Candle>> candlesMap = candlesService.getApplicableCandlesMap(pairData, settings);
        Optional<ZScoreData> maybeZScoreData = zScoreService.calculateZScoreDataForNewTrade(pairData, settings, candlesMap);

        if (maybeZScoreData.isEmpty()) {
            log.warn("üìä –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–π–¥–∞. ZScore –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã –¥–ª—è –ø–∞—Ä—ã {}/{}", pairData.getLongTicker(), pairData.getShortTicker());
            return null;
        }

        ZScoreData zScoreData = maybeZScoreData.get();

        ZScoreParam latest = zScoreData.getLastZScoreParam(); // –ø–æ—Å–ª–µ–¥–Ω–∏–µ params

        if (!Objects.equals(pairData.getLongTicker(), zScoreData.getUndervaluedTicker()) || !Objects.equals(pairData.getShortTicker(), zScoreData.getOvervaluedTicker())) {
            String message = String.format("–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ—Ä–µ–π–¥–∞ –¥–ª—è –ø–∞—Ä—ã –ª–æ–Ω–≥=%s —à–æ—Ä—Ç=%s. –¢–∏–∫–µ—Ä—ã –ø–æ–º–µ–Ω—è–ª–∏—Å—å –º–µ—Å—Ç–∞–º–∏!!! –¢–æ—Ä–≥–æ–≤–∞—Ç—å –Ω–µ–ª—å–∑—è!!!", pairData.getLongTicker(), pairData.getShortTicker());
            log.error(message);
            throw new IllegalArgumentException(message);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—à–µ–Ω–æ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫)
        if (checkAutoTrading) {
            // –ü–æ–ª—É—á–∞–µ–º –°–í–ï–ñ–ò–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–∞
            Settings currentSettings = settingsService.getSettings();
            log.debug("üìñ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: –ß–∏—Ç–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î: autoTrading={}", currentSettings.isAutoTradingEnabled());
            if (!currentSettings.isAutoTradingEnabled()) {
                log.warn("üõë –ê–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω! –ü—Ä–æ–ø—É—Å–∫–∞—é –æ—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–π–¥–∞ –¥–ª—è –ø–∞—Ä—ã {} - {}", pairData.getLongTicker(), pairData.getShortTicker());
                return null;
            }
            log.debug("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: –ê–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º");
        } else {
            log.info("üîß –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Ç—Ä–µ–π–¥–∞ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞ –¥–ª—è –ø–∞—Ä—ã {} - {}", pairData.getLongTicker(), pairData.getShortTicker());
        }

        log.info(String.format("–ù–∞—à –Ω–æ–≤—ã–π —Ç—Ä–µ–π–¥: underValued=%s overValued=%s | p=%.5f | adf=%.5f | z=%.2f | corr=%.2f", zScoreData.getUndervaluedTicker(), zScoreData.getOvervaluedTicker(), latest.getPvalue(), latest.getAdfpvalue(), latest.getZscore(), latest.getCorrelation()));

        pairDataService.updateVirtual(pairData, zScoreData, candlesMap);
        changesService.calculateVirtual(pairData);
        String exitReason = exitStrategyService.getExitReason(pairData);
        if (exitReason != null) {
            pairData.setExitReason(exitReason);
            pairData.setStatus(TradeStatus.CLOSED);
        }
        pairDataService.save(pairData);

        tradeLogService.saveLog(pairData);

        return pairData;
    }

    //todo –º–æ–∂–µ—Ç –ø—Ä–æ–¥—É–º–∞—Ç—å –º–µ—Ö–∞–Ω–∏–∑–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ø —Å—Ç–∞—Ç—É—Å–æ–≤ –≤ PairData - –Ω–∞–ø—Ä–∏–º–µ—Ä
    //todo –ø–æ–ª—É—á–∏–ª–∏ ZScoreData - –¥–æ–±–∞–≤–∏–ª–∏ WITH_ZSCORE_DATA –∏–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ with_zscore_data = true, –æ—Ç–∫—Ä—ã–ª–∏ —Å–¥–µ–ª–∫–∏ - WITH_OPEN_POSITIONS –∏–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ with_open_positions=true
    //todo –∏ —Ç–¥! –ß—Ç–æ –±—ã –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ —Å–µ—Ç–∞—Ç—å –∏—Ö –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è! –ò –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —à–µ–¥—É–ª–ª–µ—Ä–æ–º –ø–æ–¥—á–∏—â–∞—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ PairData –≤ –±–¥.
    //todo –ª–∏–±–æ —Ç—É–ø–æ —É–¥–∞–ª—è—Ç—å pairData —á—É—Ç—å —á—Ç–æ!
    private PairData startNewRealTrade(StartNewTradeRequest request) {
        PairData pairData = request.getPairData();
        boolean checkAutoTrading = request.isCheckAutoTrading();
        log.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ç—Ä–µ–π–¥ –¥–ª—è {} - {}", pairData.getLongTicker(), pairData.getShortTicker());
        Settings settings = settingsService.getSettings();

        //–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É—Ä–∞–∫–∞
        if (validateService.isLastZLessThenMinZ(pairData, settings)) {
            //–µ—Å–ª–∏ –≤–ø–µ—Ä–≤—ã–µ –ø—Ä–æ–≥–æ–Ω—è–µ–º –∏ Z<ZMin
            pairDataService.delete(pairData);
            log.warn("–£–¥–∞–ª–∏–ª–∏ –ø–∞—Ä—É {} - {} —Ç.–∫. ZCurrent < ZMin", pairData.getLongTicker(), pairData.getShortTicker());
            return null;
        }

        Map<String, List<Candle>> candlesMap = candlesService.getApplicableCandlesMap(pairData, settings);
        Optional<ZScoreData> maybeZScoreData = zScoreService.calculateZScoreDataForNewTrade(pairData, settings, candlesMap);

        if (maybeZScoreData.isEmpty()) {
            pairDataService.delete(pairData); //todo –Ω–∞–ø—Ä–∏–º–µ—Ä –∑–¥–µ—Å—å —É–¥–∞–ª—è—Ç—å PairData —Ç–∫ –æ–Ω —É–∂–µ –Ω–µ –∞–∫—Ç—É–∞–ª–µ–Ω
            log.warn("üìä –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–π–¥–∞. ZScore –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã –¥–ª—è –ø–∞—Ä—ã {}/{}", pairData.getLongTicker(), pairData.getShortTicker());
            return null;
        }

        ZScoreData zScoreData = maybeZScoreData.get();

        ZScoreParam latest = zScoreData.getLastZScoreParam(); // –ø–æ—Å–ª–µ–¥–Ω–∏–µ params

        if (!Objects.equals(pairData.getLongTicker(), zScoreData.getUndervaluedTicker()) || !Objects.equals(pairData.getShortTicker(), zScoreData.getOvervaluedTicker())) {
            pairDataService.delete(pairData); //todo –Ω–∞–ø—Ä–∏–º–µ—Ä –∑–¥–µ—Å—å —É–¥–∞–ª—è—Ç—å PairData —Ç–∫ –æ–Ω —É–∂–µ –Ω–µ –∞–∫—Ç—É–∞–ª–µ–Ω
            String message = String.format("–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ—Ä–µ–π–¥–∞ –¥–ª—è –ø–∞—Ä—ã –ª–æ–Ω–≥=%s —à–æ—Ä—Ç=%s. –¢–∏–∫–µ—Ä—ã –ø–æ–º–µ–Ω—è–ª–∏—Å—å –º–µ—Å—Ç–∞–º–∏!!! –¢–æ—Ä–≥–æ–≤–∞—Ç—å –Ω–µ–ª—å–∑—è!!!", pairData.getLongTicker(), pairData.getShortTicker());
            log.error(message);
            throw new IllegalArgumentException(message);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—à–µ–Ω–æ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫)
        if (checkAutoTrading) {
            // –ü–æ–ª—É—á–∞–µ–º –°–í–ï–ñ–ò–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–∞
            Settings currentSettings = settingsService.getSettings();
            log.debug("üìñ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: –ß–∏—Ç–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î: autoTrading={}", currentSettings.isAutoTradingEnabled());
            if (!currentSettings.isAutoTradingEnabled()) {
                pairDataService.delete(pairData); //todo –Ω–∞–ø—Ä–∏–º–µ—Ä –∑–¥–µ—Å—å —É–¥–∞–ª—è—Ç—å PairData —Ç–∫ –æ–Ω —É–∂–µ –Ω–µ –∞–∫—Ç—É–∞–ª–µ–Ω
                log.warn("üõë –ê–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω! –ü—Ä–æ–ø—É—Å–∫–∞—é –æ—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–π–¥–∞ –¥–ª—è –ø–∞—Ä—ã {} - {}", pairData.getLongTicker(), pairData.getShortTicker());
                return null;
            }
            log.debug("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: –ê–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º");
        } else {
            log.info("üîß –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Ç—Ä–µ–π–¥–∞ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞ –¥–ª—è –ø–∞—Ä—ã {} - {}", pairData.getLongTicker(), pairData.getShortTicker());
        }

        log.info(String.format("–ù–∞—à –Ω–æ–≤—ã–π —Ç—Ä–µ–π–¥: underValued=%s overValued=%s | p=%.5f | adf=%.5f | z=%.2f | corr=%.2f", zScoreData.getUndervaluedTicker(), zScoreData.getOvervaluedTicker(), latest.getPvalue(), latest.getAdfpvalue(), latest.getZscore(), latest.getCorrelation()));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—É—é –ø–∞—Ä—É –Ω–∞ —Ç–æ—Ä–≥–æ–≤–æ–º –¥–µ–ø–æ
        if (tradingIntegrationService.canOpenNewPair()) {
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—É—é –ø–∞—Ä—É —á–µ—Ä–µ–∑ —Ç–æ—Ä–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –°–ò–ù–•–†–û–ù–ù–û
            OpenArbitragePairResult openArbitragePairResult = tradingIntegrationService.openArbitragePair(pairData, zScoreData, candlesMap);
            if (openArbitragePairResult != null && openArbitragePairResult.isSuccess()) {

                TradeResult openLongTradeResult = openArbitragePairResult.getLongTradeResult();
                TradeResult openShortTradeResult = openArbitragePairResult.getShortTradeResult();

                log.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –ø–∞—Ä–∞ —á–µ—Ä–µ–∑ —Ç–æ—Ä–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É: {}/{}",
                        pairData.getLongTicker(), pairData.getShortTicker());

                pairDataService.updateReal(pairData, zScoreData, candlesMap, openLongTradeResult, openShortTradeResult);
                changesService.calculateReal(pairData);

                //todo –º–æ–∂–µ—Ç getExitReason() –ª–∏—à–Ω–µ–µ —Ç—É—Ç –∏ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è —à–µ–¥—É–ª–ª–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updateTrades()
//                String exitReason = exitStrategyService.getExitReason(pairData);
//                if (exitReason != null) {
//                    log.info("üö™ –ù–∞–π–¥–µ–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏: {} –¥–ª—è –ø–∞—Ä—ã {}/{}",
//                            exitReason, pairData.getLongTicker(), pairData.getShortTicker());
//
//                    if (tradingIntegrationService.hasOpenPositions(pairData)) { //–µ—â–µ —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–∞ –≤—Å—è–∫–∏–π —á—Ç–æ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ –∑–∞–∫—Ä—ã—Ç—ã —Ä—É–∫–∞–º–∏ –Ω–∞ –æ–∫—Ö
//                        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—É—é –ø–∞—Ä—É —á–µ—Ä–µ–∑ —Ç–æ—Ä–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –°–ò–ù–•–†–û–ù–ù–û
//                        CloseArbitragePairResult closeArbitragePairResult = tradingIntegrationService.closeArbitragePair(pairData);
//                        if (closeArbitragePairResult != null && closeArbitragePairResult.isSuccess()) {
//                            log.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –ø–∞—Ä–∞: {}/{}",
//                                    pairData.getLongTicker(), pairData.getShortTicker());
//
//                            TradeResult closeLongTradeResult = closeArbitragePairResult.getLongTradeResult();
//                            TradeResult closeShortTradeResult = closeArbitragePairResult.getShortTradeResult();
//                            pairDataService.updateReal(pairData, zScoreData, candlesMap, closeLongTradeResult, closeShortTradeResult); //todo –º–æ–∂–µ—Ç –∏ –Ω–µ –Ω–∞–¥–æ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–∫ —Ç–∞–º –≤—Å–µ —Ç–æ–∂–µ —Å–∞–º–æ–µ —á—Ç–æ –∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ç—Ä–µ–π–¥–∞ –≤—ã—à–µ
//                            // –°–Ω–æ–≤–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π
//                            changesService.calculateReal(pairData);
//
//                            pairData.setExitReason(exitReason);
//                            pairData.setStatus(TradeStatus.CLOSED);
//                        } else {
//                            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –ø–∞—Ä—ã: {}/{}",
//                                    pairData.getLongTicker(), pairData.getShortTicker());
//
//                            pairData.setExitReason("ERROR_CLOSING: " + exitReason);
//                            pairData.setStatus(TradeStatus.ERROR_200);
//                        }
//
//                    } else {
//                        log.info("‚ÑπÔ∏è –ü–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–∞—Ä—ã {}/{} —É–∂–µ –±—ã–ª–∏ –∑–∞–∫—Ä—ã—Ç—ã –≤—Ä—É—á–Ω—É—é –Ω–∞ –±–∏—Ä–∂–µ. –¢–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å.",
//                                pairData.getLongTicker(), pairData.getShortTicker());
//
//                        // –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏–∏ —É–∂–µ –∑–∞–∫—Ä—ã—Ç—ã –Ω–∞ –±–∏—Ä–∂–µ, –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –±–µ–∑ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
//                        tradeLogService.saveLog(pairData);
//                    }
//                }

//                pairDataService.save(pairData);
                tradeLogService.saveLog(pairData);
            } else {
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—É—é –ø–∞—Ä—É —á–µ—Ä–µ–∑ —Ç–æ—Ä–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É: {}/{}",
                        pairData.getLongTicker(), pairData.getShortTicker());

                pairData.setStatus(TradeStatus.ERROR_100);
                pairDataService.save(pairData);
            }
        } else {
            log.warn("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º –¥–µ–ø–æ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞—Ä—ã {}/{}",
                    pairData.getLongTicker(), pairData.getShortTicker());

            pairData.setStatus(TradeStatus.ERROR_110);
            pairDataService.save(pairData);
        }

        return pairData;
    }
}
