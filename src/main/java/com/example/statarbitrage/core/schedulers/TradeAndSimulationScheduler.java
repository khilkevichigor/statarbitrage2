package com.example.statarbitrage.core.schedulers;

import com.example.statarbitrage.common.events.UpdateUiEvent;
import com.example.statarbitrage.common.model.PairData;
import com.example.statarbitrage.common.model.Settings;
import com.example.statarbitrage.common.model.TradeStatus;
import com.example.statarbitrage.core.processors.FetchPairsProcessor;
import com.example.statarbitrage.core.processors.StartNewTradeProcessor;
import com.example.statarbitrage.core.processors.UpdateTradeProcessor;
import com.example.statarbitrage.core.services.EventSendService;
import com.example.statarbitrage.core.services.PairDataService;
import com.example.statarbitrage.core.services.SettingsService;
import com.example.statarbitrage.trading.services.TradingIntegrationService;
import com.example.statarbitrage.trading.services.TradingProviderFactory;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;

@Slf4j
@Component
@RequiredArgsConstructor
public class TradeAndSimulationScheduler {

    // –§–ª–∞–≥–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —à–µ–¥—É–ª–ª–µ—Ä–æ–≤
    private final AtomicBoolean updateTradesRunning = new AtomicBoolean(false);
    private final AtomicBoolean maintainPairsRunning = new AtomicBoolean(false);

    private final SettingsService settingsService;
    private final PairDataService pairDataService;
    private final UpdateTradeProcessor updateTradeProcessor;
    private final StartNewTradeProcessor startNewTradeProcessor;
    private final FetchPairsProcessor fetchPairsProcessor;
    private final EventSendService eventSendService;
    private final TradingIntegrationService tradingIntegrationService;
    private final TradingProviderFactory tradingProviderFactory;

    @Scheduled(cron = "0 * * * * *") // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –≤ 0 —Å–µ–∫—É–Ω–¥
    public void updateTrades() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–∞—Ä
        if (maintainPairsRunning.get()) {
            log.info("‚è∏Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–æ - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–∞—Ä");
            return;
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if (!updateTradesRunning.compareAndSet(false, true)) {
            log.warn("‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–æ–≤ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è");
            return;
        }

        long schedulerStart = System.currentTimeMillis();
        List<PairData> tradingPairs = List.of();

        try {
            log.info("üîÑ –®–µ–¥—É–ª–ª–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–π–¥–æ–≤ –∑–∞–ø—É—â–µ–Ω...");
            // –í–°–ï–ì–î–ê –æ–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–π–¥—ã
            tradingPairs = pairDataService.findAllByStatusOrderByEntryTimeDesc(TradeStatus.TRADING);
            if (!tradingPairs.isEmpty()) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–π –≤ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
                tradingIntegrationService.updateAllPositions();

                tradingPairs.forEach(p -> {
                    try {
                        updateTradeProcessor.updateTrade(p, false);
                    } catch (Exception e) {
                        log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä—ã {}/{}: {}",
                                p.getLongTicker(), p.getShortTicker(), e.getMessage());
                        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–∞—Ä
                    }
                });
                // –û–±–Ω–æ–≤–ª—è–µ–º UI
                eventSendService.updateUI(UpdateUiEvent.builder().build());
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –≤ updateTrades()", e);
        } finally {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            updateTradesRunning.set(false);
        }

        long schedulerEnd = System.currentTimeMillis();
        log.info("‚è±Ô∏è –®–µ–¥—É–ª–ª–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–π–¥–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª —Ä–∞–±–æ—Ç—É –∑–∞ {} —Å–µ–∫. –û–±–Ω–æ–≤–ª–µ–Ω–æ {} —Ç—Ä–µ–π–¥–æ–≤", (schedulerEnd - schedulerStart) / 1000.0, tradingPairs.size());
    }

    @Scheduled(cron = "0 */5 * * * *") // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –≤ 0 —Å–µ–∫—É–Ω–¥
    public void maintainPairs() {
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–π–¥–æ–≤ –µ—Å–ª–∏ –æ–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
        if (updateTradesRunning.get()) {
            log.info("‚è≥ –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–∞—Ä –∂–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–π–¥–æ–≤...");
            // –ñ–¥–µ–º –º–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥
            int waitTime = 0;
            while (updateTradesRunning.get() && waitTime < 60_000) {
                try {
                    Thread.sleep(1000);
                    waitTime += 1000;
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    log.warn("–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–π–¥–æ–≤");
                    return;
                }
            }
            if (updateTradesRunning.get()) {
                log.warn("‚ö†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–∞—Ä –æ—Ç–º–µ–Ω–µ–Ω–æ - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–æ–≤ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ");
                return;
            }
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if (!maintainPairsRunning.compareAndSet(false, true)) {
            log.warn("‚ö†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–∞—Ä —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è");
            return;
        }

        log.info("üîÑ –®–µ–¥—É–ª–ª–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∫–æ–ª-–≤–∞ —Ç—Ä–µ–π–¥–æ–≤ –∑–∞–ø—É—â–µ–Ω...");
        long schedulerStart = System.currentTimeMillis();
        AtomicInteger count = new AtomicInteger();

        try {
            // –ï–°–õ–ò –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–π–¥–æ–≤
            Settings settings = settingsService.getSettings();
            if (settings.isAutoTradingEnabled()) {
                List<PairData> tradingPairs = pairDataService.findAllByStatusOrderByEntryTimeDesc(TradeStatus.TRADING);
                int maxActive = (int) settings.getUsePairs();
                int currentActive = tradingPairs.size();
                int missing = maxActive - currentActive;

                if (missing > 0) {
                    log.info("üÜï –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç {} –ø–∞—Ä (–∏–∑ {}) ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–±–æ—Ä", missing, maxActive);

                    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ SELECTED
                    pairDataService.deleteAllByStatus(TradeStatus.SELECTED);

                    // –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ –∏ —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º
                    List<PairData> newPairs = fetchPairsProcessor.fetchPairs(missing);
                    newPairs.forEach((v) -> {
                        try {
                            PairData startedNewTrade = startNewTradeProcessor.startNewTrade(v);
                            if (startedNewTrade != null) {
                                count.getAndIncrement();
                            }
                        } catch (Exception e) {
                            log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π —Ç—Ä–µ–π–¥ –¥–ª—è –ø–∞—Ä—ã {}/{}: {}",
                                    v.getLongTicker(), v.getShortTicker(), e.getMessage());
                            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–∞—Ä
                        }
                    });
                }
                if (count.get() > 0) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º UI
                    eventSendService.updateUI(UpdateUiEvent.builder().build());
                }
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –≤ maintainPairs()", e);
        } finally {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            maintainPairsRunning.set(false);
        }

        long schedulerEnd = System.currentTimeMillis();
        log.info("‚è±Ô∏è –®–µ–¥—É–ª–ª–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∫–æ–ª-–≤–∞ —Ç—Ä–µ–π–¥–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª —Ä–∞–±–æ—Ç—É –∑–∞ {} —Å–µ–∫. –ó–∞–ø—É—â–µ–Ω–æ {} –Ω–æ–≤—ã—Ö –ø–∞—Ä", (schedulerEnd - schedulerStart) / 1000.0, count);
    }
}
