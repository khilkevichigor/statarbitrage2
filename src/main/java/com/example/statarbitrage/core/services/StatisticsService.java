package com.example.statarbitrage.core.services;

import com.example.statarbitrage.common.dto.TradePairsStatisticsDto;
import com.example.statarbitrage.common.model.PairData;
import com.example.statarbitrage.common.model.TradeStatus;
import com.example.statarbitrage.core.repositories.TradeHistoryRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.util.Objects;
import java.util.Optional;

@Slf4j
@Service
@RequiredArgsConstructor
public class StatisticsService {

    private final TradeHistoryRepository tradeHistoryRepository;
    private final PairDataService pairDataService;
    private final TradeHistoryService tradeHistoryService;

//    @EventListener(ApplicationReadyEvent.class) //postConstruct –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–∫ –±–¥ –Ω–µ –≥–æ—Ç–æ–≤–∞ –µ—â–µ //todo –ü–†–û–¢–ï–°–¢–ò–¢–¨!!! —Å–¥–µ–ª–∞—Ç—å update –≤ –ø—Ä–æ–ø–µ—Ä—Ç—è—Ö –¥–ª—è –ë–î
//    @Transactional
//    public void deleteUnfinishedTrades() { //–æ—á–∏—â–∞–µ–º —á—Ç–æ–±—ã –±–¥ –±—ã–ª–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –¥–∞–∂–µ –ø–æ—Å–ª–µ —Å—Ç–æ–ø–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º —Ç—Ä–µ–π–¥–æ–º //todo –≤—ã–ø–∏–ª–∏—Ç—å –æ—Ç—Å—é–¥–∞
//        // todo –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å —á—Ç–æ –±—ã –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ ERROR –∏ —Å–µ—Ç–∏—Ç—å –¥–µ—Å–∫—Ä–∏–ø—à–Ω ERROR_AFTER_RESTART –∏–ª–∏
//        // todo —Å–¥–µ–ª–∞—Ç—å –º–µ—Ç–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å updateTradeProcessor —á—Ç–æ –±—ã –∞–∫—Ç—É–∞–ª–∏–∑–∏–æ–ª–≤–∞—Ç—å –ø–∞—Ä—ã
//        int deleted = tradeHistoryRepository.deleteUnfinishedTrades();
//        log.info("üßπ –£–¥–∞–ª–µ–Ω–æ {} –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤", deleted);
//    }

    public TradePairsStatisticsDto collectStatistics() {
        BigDecimal unrealized = pairDataService.findAllByStatusOrderByEntryTimeDesc(TradeStatus.TRADING).stream()
                .map(PairData::getProfitChanges)
                .filter(Objects::nonNull)
                .reduce(BigDecimal.ZERO, BigDecimal::add);

        BigDecimal realized = Optional.ofNullable(tradeHistoryService.getSumRealizedProfit()).orElse(BigDecimal.ZERO);

        BigDecimal combined = unrealized.add(realized);

        return TradePairsStatisticsDto.builder()

                .tradePairsWithErrorToday(tradeHistoryRepository.getByStatusForToday(TradeStatus.ERROR))
                .tradePairsWithErrorTotal(tradeHistoryRepository.getByStatusTotal(TradeStatus.ERROR))

                .tradePairsToday(tradeHistoryRepository.getTradesToday())
                .tradePairsTotal(tradeHistoryRepository.getTradesTotal())

                .avgProfitToday(tradeHistoryRepository.getAvgProfitToday())
                .avgProfitTotal(tradeHistoryRepository.getAvgProfitTotal())

                .sumProfitToday(tradeHistoryRepository.getSumProfitToday())
                .sumProfitTotal(tradeHistoryRepository.getSumProfitTotal())

                .exitByStopToday(tradeHistoryRepository.getByExitReasonForToday(ExitReasonType.EXIT_REASON_BY_STOP.name()))
                .exitByStopTotal(tradeHistoryRepository.getAllByExitReason(ExitReasonType.EXIT_REASON_BY_STOP.name()))

                .exitByTakeToday(tradeHistoryRepository.getByExitReasonForToday(ExitReasonType.EXIT_REASON_BY_TAKE.name()))
                .exitByTakeTotal(tradeHistoryRepository.getAllByExitReason(ExitReasonType.EXIT_REASON_BY_TAKE.name()))

                .exitByZMinToday(tradeHistoryRepository.getByExitReasonForToday(ExitReasonType.EXIT_REASON_BY_Z_MIN.name()))
                .exitByZMinTotal(tradeHistoryRepository.getAllByExitReason(ExitReasonType.EXIT_REASON_BY_Z_MIN.name()))

                .exitByZMaxToday(tradeHistoryRepository.getByExitReasonForToday(ExitReasonType.EXIT_REASON_BY_Z_MAX.name()))
                .exitByZMaxTotal(tradeHistoryRepository.getAllByExitReason(ExitReasonType.EXIT_REASON_BY_Z_MAX.name()))

                .exitByTimeToday(tradeHistoryRepository.getByExitReasonForToday(ExitReasonType.EXIT_REASON_BY_TIME.name()))
                .exitByTimeTotal(tradeHistoryRepository.getAllByExitReason(ExitReasonType.EXIT_REASON_BY_TIME.name()))

                .exitByManuallyToday(tradeHistoryRepository.getByExitReasonForToday(ExitReasonType.EXIT_REASON_MANUALLY.name()))
                .exitByManuallyTotal(tradeHistoryRepository.getAllByExitReason(ExitReasonType.EXIT_REASON_MANUALLY.name()))

                .sumProfitUnrealized(unrealized)
                .sumProfitRealized(realized)
                .sumProfitCombined(combined)

                .build();
    }
}
