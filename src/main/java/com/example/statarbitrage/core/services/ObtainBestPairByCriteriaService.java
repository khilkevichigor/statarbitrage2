package com.example.statarbitrage.core.services;

import com.example.statarbitrage.common.dto.ZScoreData;
import com.example.statarbitrage.common.dto.ZScoreParam;
import com.example.statarbitrage.common.model.Settings;
import com.example.statarbitrage.common.utils.NumberFormatter;
import lombok.Data;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Optional;

@Slf4j
@Service
@RequiredArgsConstructor
public class ObtainBestPairByCriteriaService {

    /**
     * –£–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–π –ø–∞—Ä—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–ø–æ–∑–∏—Ç–Ω—ã–π —Å–∫–æ—Ä –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ–≥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ Z-Score
     */
    public Optional<ZScoreData> getBestByCriteria(Settings settings, List<ZScoreData> dataList) {
        if (dataList == null || dataList.isEmpty()) {
            return Optional.empty();
        }

        log.debug("üéØ –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à—É—é –ø–∞—Ä—É –∏–∑ {} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤", dataList.size());

        List<PairCandidate> candidates = new ArrayList<>();

        for (ZScoreData z : dataList) {
            PairCandidate candidate = evaluatePair(z, settings);
            if (candidate != null) {
                candidates.add(candidate);
            }
        }

        if (candidates.isEmpty()) {
            log.warn("‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä –ø–æ—Å–ª–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏");
            return Optional.empty();
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–º—É —Å–∫–æ—Ä—É (–ª—É—á—à–∏–π –ø–µ—Ä–≤—ã–π)
        candidates.sort(Comparator.comparingDouble(PairCandidate::getCompositeScore).reversed());

        PairCandidate best = candidates.get(0);
        log.info("üèÜ –í—ã–±—Ä–∞–Ω–∞ –ª—É—á—à–∞—è –ø–∞—Ä–∞: {}/{} —Å–æ —Å–∫–æ—Ä–æ–º {}. –î–µ—Ç–∞–ª–∏: Z-Score={}, –ö–æ—Ä—Ä={}, P-Value(corr)={}, P-Value(coint)={}, R¬≤={}",
                best.getData().getUndervaluedTicker(),
                best.getData().getOvervaluedTicker(),
                NumberFormatter.format(best.getCompositeScore(), 2),
                NumberFormatter.format(best.getZScore(), 2),
                NumberFormatter.format(best.getCorrelation(), 3),
                NumberFormatter.format(best.getPValue(), 4),
                NumberFormatter.format(best.getAdfValue(), 4),
                NumberFormatter.format(best.getRSquared(), 3)
        );

        // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ø-3 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        logTopCandidates(candidates);

        return Optional.of(best.getData());
    }

    /**
     * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –ø–∞—Ä—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å –∫–æ–º–ø–æ–∑–∏—Ç–Ω—ã–º —Å–∫–æ—Ä–æ–º
     */
    private PairCandidate evaluatePair(ZScoreData z, Settings settings) {
        List<ZScoreParam> params = z.getZscoreHistory();

        double zVal, pValue, adf, corr, rSquared;

        if (params != null && !params.isEmpty()) {
            // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            ZScoreParam last = params.get(params.size() - 1);
            zVal = last.getZscore();
            pValue = last.getPvalue();
            adf = last.getAdfpvalue();
            corr = last.getCorrelation();
            rSquared = z.getAvgRSquared() != null ? z.getAvgRSquared() : 0.0;
        } else {
            // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            if (z.getLatestZscore() == null || z.getCorrelation() == null) {
                log.debug("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—É —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {}/{}",
                        z.getUndervaluedTicker(), z.getOvervaluedTicker());
                return null;
            }

            zVal = z.getLatestZscore();
            corr = z.getCorrelation();
            pValue = z.getCorrelationPvalue() != null ? z.getCorrelationPvalue() : 0.0;
            adf = z.getCointegrationPvalue() != null ? z.getCointegrationPvalue() : 0.0;
            rSquared = z.getAvgRSquared() != null ? z.getAvgRSquared() : 0.0;
        }

        // ====== –¢–û–õ–¨–ö–û –ö–û–ú–ü–û–ó–ò–¢–ù–´–ô –°–ö–û–† (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏) ======
        // –í—Å—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ FilterIncompleteZScoreParamsService

        double compositeScore = calculateCompositeScore(zVal, corr, adf, pValue, rSquared, z, settings);

        return new PairCandidate(z, compositeScore, zVal, corr, adf, pValue, rSquared);
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–º–ø–æ–∑–∏—Ç–Ω—ã–π —Å–∫–æ—Ä –¥–ª—è —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä
     * –£—á–∏—Ç—ã–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã —Å –≤–µ—Å–∞–º–∏
     */
    private double calculateCompositeScore(double zVal, double corr, double adf,
                                           double pValue, double rSquared,
                                           ZScoreData data, Settings settings) {
        double score = 0.0;

        // 1. Z-Score –∫–æ–º–ø–æ–Ω–µ–Ω—Ç (40% –≤–µ—Å–∞) - –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
        double zScoreComponent = Math.abs(zVal) * 40.0;

        // 2. –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (25% –≤–µ—Å–∞) - –£—á–∏—Ç—ã–≤–∞–µ—Ç Johansen –∏ ADF
        double cointegrationComponent = 0.0;
        double johansenWeight = 0.6; // 60% –≤–µ—Å –¥–ª—è Johansen
        double adfWeight = 0.4;      // 40% –≤–µ—Å –¥–ª—è ADF

        boolean hasJohansen = data.getCointegrationPvalue() != null && data.getCointegrationPvalue() > 0;
        boolean hasAdf = adf > 0;

        if (hasJohansen && hasAdf) {
            // –û–±–∞ —Ç–µ—Å—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã: –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω—É—é –æ—Ü–µ–Ω–∫—É
            double johansenScore = (1.0 - data.getCointegrationPvalue());
            double adfScore = (1.0 - Math.min(adf, 1.0));
            cointegrationComponent = (johansenScore * johansenWeight + adfScore * adfWeight) * 25.0;
            log.trace("–†–∞—Å—á–µ—Ç –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è {}/{}: Johansen ({}) –∏ ADF ({}) -> {}",
                    data.getUndervaluedTicker(), data.getOvervaluedTicker(),
                    NumberFormatter.format(johansenScore, 2), NumberFormatter.format(adfScore, 2),
                    NumberFormatter.format(cointegrationComponent, 2));

        } else if (hasJohansen) {
            // –¢–æ–ª—å–∫–æ Johansen
            cointegrationComponent = (1.0 - data.getCointegrationPvalue()) * 25.0;
        } else if (hasAdf) {
            // –¢–æ–ª—å–∫–æ ADF
            cointegrationComponent = (1.0 - Math.min(adf, 1.0)) * 25.0; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π –≤–µ—Å
        }

        // 3. R-squared –∫–æ–º–ø–æ–Ω–µ–Ω—Ç (20% –≤–µ—Å–∞) - –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏
        double rSquaredComponent = rSquared * 20.0;

        // 4. –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç (10% –≤–µ—Å–∞)
        double correlationComponent = Math.abs(corr) * 10.0;

        // 5. –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å (5% –≤–µ—Å–∞)
        double significanceComponent = (1.0 - Math.min(pValue, 1.0)) * 5.0;

        score = zScoreComponent + cointegrationComponent + rSquaredComponent +
                correlationComponent + significanceComponent;

        // –ë–û–ù–£–°–´ –∑–∞ –æ—Å–æ–±—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞:

        // –ë–æ–Ω—É—Å –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Johansen —Ç–µ—Å—Ç–∞ (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π)
        if (data.getCointegrationPvalue() != null && data.getTraceStatistic() != null) {
            score += 5.0; // –ë–æ–Ω—É—Å –∑–∞ Johansen

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ —Å–∏–ª—å–Ω—É—é –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é (trace >> critical)
            if (data.getCriticalValue95() != null &&
                    data.getTraceStatistic() > data.getCriticalValue95() * 1.5) {
                score += 3.0;
            }
        }

        // –ë–æ–Ω—É—Å –∑–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
        if (data.getStablePeriods() != null && data.getTotalObservations() != null) {
            double stabilityRatio = (double) data.getStablePeriods() / data.getTotalObservations();
            if (stabilityRatio > 0.8) {
                score += 2.0; // –ë–æ–Ω—É—Å –∑–∞ –≤—ã—Å–æ–∫—É—é —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
            }
        }

        // –®–¢–†–ê–§–´ –∑–∞ —Ä–∏—Å–∫–∏:

        // –®—Ç—Ä–∞—Ñ –∑–∞ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫—É—é –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é (–º–æ–∂–µ—Ç –±—ã—Ç—å –ª–æ–∂–Ω–æ–π)
        if (Math.abs(corr) > 0.95) {
            score -= 3.0; // –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Å–æ–∫–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è
        }

        // –®—Ç—Ä–∞—Ñ –∑–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å Z-Score (–µ—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è)
        if (data.getZscoreHistory() != null && data.getZscoreHistory().size() >= 10) {
            double volatility = calculateZScoreVolatility(data.getZscoreHistory());
            if (volatility > 2.0) {
                score -= volatility; // –®—Ç—Ä–∞—Ñ –∑–∞ –≤—ã—Å–æ–∫—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            }
        }

        return Math.max(0.0, score); // –ù–µ –¥–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —Å–∫–æ—Ä–∞–º
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å Z-Score
     */
    private double calculateZScoreVolatility(List<ZScoreParam> params) {
        if (params.size() < 10) return 0.0;

        List<Double> recentZScores = params.subList(params.size() - 10, params.size())
                .stream()
                .map(ZScoreParam::getZscore)
                .toList();

        double mean = recentZScores.stream().mapToDouble(Double::doubleValue).average().orElse(0.0);
        double variance = recentZScores.stream()
                .mapToDouble(z -> Math.pow(z - mean, 2))
                .average()
                .orElse(0.0);

        return Math.sqrt(variance);
    }

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç —Ç–æ–ø –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
     */
    private void logTopCandidates(List<PairCandidate> candidates) {
        log.info("üèÖ –¢–æ–ø-3 –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:");

        for (int i = 0; i < Math.min(3, candidates.size()); i++) {
            PairCandidate candidate = candidates.get(i);
            ZScoreData data = candidate.getData();

            log.info("   {}. {}/{} - –°–∫–æ—Ä: {}, Z: {}, –ö–æ—Ä—Ä: {}, Johansen: {}",
                    i + 1,
                    data.getUndervaluedTicker(),
                    data.getOvervaluedTicker(),
                    com.example.statarbitrage.common.utils.NumberFormatter.format(candidate.getCompositeScore(), 1),
                    com.example.statarbitrage.common.utils.NumberFormatter.format(candidate.getZScore(), 2),
                    com.example.statarbitrage.common.utils.NumberFormatter.format(candidate.getCorrelation(), 3),
                    data.getCointegrationPvalue() != null ? "‚úÖ" : "‚ùå");
        }
    }

    /**
     * –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
     */
    @Data
    private static class PairCandidate {
        // Getters
        private final ZScoreData data;
        private final double compositeScore;
        private final double zScore;
        private final double correlation;
        private final double adfValue;
        private final double pValue;
        private final double rSquared;

        public PairCandidate(ZScoreData data, double compositeScore, double zScore,
                             double correlation, double adfValue, double pValue, double rSquared) {
            this.data = data;
            this.compositeScore = compositeScore;
            this.zScore = zScore;
            this.correlation = correlation;
            this.adfValue = adfValue;
            this.pValue = pValue;
            this.rSquared = rSquared;
        }
    }
}
