package com.example.statarbitrage.core.services;

import com.example.statarbitrage.common.model.PairData;
import com.example.statarbitrage.trading.model.ArbitragePairTradeInfo;
import com.example.statarbitrage.trading.model.Position;
import com.example.statarbitrage.trading.model.PositionVerificationResult;
import com.example.statarbitrage.trading.model.TradeResult;
import com.example.statarbitrage.trading.services.TradingIntegrationService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.math.RoundingMode;

@Slf4j
@Service
@RequiredArgsConstructor
public class CalculateChangesService {
    
    private static final BigDecimal PERCENTAGE_MULTIPLIER = BigDecimal.valueOf(100);
    private static final BigDecimal DIVISION_FOR_AVERAGE = BigDecimal.valueOf(2);
    private static final int PROFIT_CALCULATION_SCALE = 4;
    private static final int PERCENTAGE_CALCULATION_SCALE = 10;
    private static final int DISPLAY_SCALE = 2;
    private static final long MILLISECONDS_IN_MINUTE = 1000 * 60;
    
    private final TradingIntegrationService tradingIntegrationService;

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—è ProfitUpdateService –¥–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
     */
    public void updateChangesFromOpenPositions(PairData pairData) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö
            PositionVerificationResult openPositionsInfo = tradingIntegrationService.getOpenPositionsInfo(pairData);

            Position longPosition = openPositionsInfo.getLongPosition();
            Position shortPosition = openPositionsInfo.getShortPosition();

            if (longPosition == null || shortPosition == null) {
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏—è—Ö –¥–ª—è –ø–∞—Ä—ã {}/{}",
                        pairData.getLongTicker(), pairData.getShortTicker());
                return;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–∑–∏—Ü–∏–π
            updateFromPositions(pairData, longPosition, shortPosition, "üìä", "–æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π");

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –ø–∞—Ä—ã {}/{}: {}",
                    pairData.getLongTicker(), pairData.getShortTicker(), e.getMessage());
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—è ProfitUpdateService –¥–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
     */
    public void updateChangesFromTradeResults(PairData pairData, ArbitragePairTradeInfo tradeInfo) {
        try {
            TradeResult longResult = tradeInfo.getLongTradeResult();
            TradeResult shortResult = tradeInfo.getShortTradeResult();

            if (longResult == null || shortResult == null) {
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è –ø–∞—Ä—ã {}/{}",
                        pairData.getLongTicker(), pairData.getShortTicker());
                return;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏
            updateFromTradeResults(pairData, longResult, shortResult, "üè¶", "—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–∫—Ä—ã—Ç–∏—è");

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è –ø–∞—Ä—ã {}/{}: {}",
                    pairData.getLongTicker(), pairData.getShortTicker(), e.getMessage());
        }
    }

    /**
     * –û–±—â–∏–π –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
     */
    private void updateFromPositions(PairData pairData, Position longPosition, Position shortPosition, 
                                   String logEmoji, String operationType) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
        pairData.setLongTickerCurrentPrice(longPosition.getCurrentPrice().doubleValue());
        pairData.setShortTickerCurrentPrice(shortPosition.getCurrentPrice().doubleValue());

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç
        BigDecimal totalPnL = longPosition.getUnrealizedPnL().add(shortPosition.getUnrealizedPnL());
        BigDecimal totalFees = longPosition.getOpeningFees().add(shortPosition.getOpeningFees());
        
        updateProfitAndStatistics(pairData, totalPnL, totalFees, logEmoji, operationType);
    }

    /**
     * –û–±—â–∏–π –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏
     */
    private void updateFromTradeResults(PairData pairData, TradeResult longResult, TradeResult shortResult,
                                      String logEmoji, String operationType) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ü–µ–Ω –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        pairData.setLongTickerCurrentPrice(longResult.getExecutionPrice().doubleValue());
        pairData.setShortTickerCurrentPrice(shortResult.getExecutionPrice().doubleValue());

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∏—Å—Ç—ã–π –ø—Ä–æ—Ñ–∏—Ç
        BigDecimal totalPnL = longResult.getPnl().add(shortResult.getPnl());
        BigDecimal totalFees = longResult.getFees().add(shortResult.getFees());
        
        updateProfitAndStatistics(pairData, totalPnL, totalFees, logEmoji, operationType);
    }

    /**
     * –û–±—â–∏–π –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏—Ç–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    private void updateProfitAndStatistics(PairData pairData, BigDecimal totalPnL, BigDecimal totalFees,
                                         String logEmoji, String operationType) {
        BigDecimal netPnL = totalPnL.subtract(totalFees);

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –ø–æ–∑–∏—Ü–∏–∏
        BigDecimal profitPercent = calculateProfitPercent(
                netPnL,
                pairData.getLongTickerEntryPrice(),
                pairData.getShortTickerEntryPrice()
        );

        pairData.setProfitChanges(profitPercent);

        log.info("{} –û–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ñ–∏—Ç –∏–∑ {}: {}/{}: {}% (PnL: {}, –∫–æ–º–∏—Å—Å–∏–∏: {})",
                logEmoji, operationType, pairData.getLongTicker(), pairData.getShortTicker(),
                profitPercent, totalPnL, totalFees);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —ç–∫—Å—Ç—Ä–µ–º—É–º—ã
        updatePairDataStatistics(pairData);

        log.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ {} –¥–ª—è –ø–∞—Ä—ã {}/{}",
                operationType, pairData.getLongTicker(), pairData.getShortTicker());
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Ñ–∏—Ç–∞ –æ—Ç —Å—Ä–µ–¥–Ω–µ–π –≤—Ö–æ–¥–Ω–æ–π —Ü–µ–Ω—ã
     * –ï–¥–∏–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π
     */
    private BigDecimal calculateProfitPercent(BigDecimal netPnL, double longEntryPrice, double shortEntryPrice) {
        try {
            BigDecimal longEntry = BigDecimal.valueOf(longEntryPrice);
            BigDecimal shortEntry = BigDecimal.valueOf(shortEntryPrice);
            BigDecimal avgEntryPrice = longEntry.add(shortEntry).divide(DIVISION_FOR_AVERAGE, PROFIT_CALCULATION_SCALE, RoundingMode.HALF_UP);

            if (avgEntryPrice.compareTo(BigDecimal.ZERO) <= 0) {
                log.warn("‚ö†Ô∏è –°—Ä–µ–¥–Ω—è—è –≤—Ö–æ–¥–Ω–∞—è —Ü–µ–Ω–∞ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ –Ω—É–ª—é: {}", avgEntryPrice);
                return BigDecimal.ZERO;
            }

            return netPnL.divide(avgEntryPrice, PROFIT_CALCULATION_SCALE, RoundingMode.HALF_UP)
                    .multiply(PERCENTAGE_MULTIPLIER);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø—Ä–æ—Ñ–∏—Ç–∞: {}", e.getMessage());
            return BigDecimal.ZERO;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —ç–∫—Å—Ç—Ä–µ–º—É–º—ã –¥–ª—è –ø–∞—Ä—ã
     */
    private void updatePairDataStatistics(PairData pairData) {
        PercentageChanges percentageChanges = calculatePercentageChanges(pairData);
        long currentTimeInMinutes = calculateTimeInMinutes(pairData.getEntryTime());
        ProfitExtremums profitExtremums = updateProfitExtremums(pairData, currentTimeInMinutes);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Å—Ç—Ä–µ–º—É–º—ã –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫
        updateExtremumValues(pairData, percentageChanges.longReturnPct(), percentageChanges.shortReturnPct(), 
                           BigDecimal.valueOf(pairData.getZScoreCurrent()), BigDecimal.valueOf(pairData.getCorrelationCurrent()));

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ PairData
        setPairDataChanges(pairData, percentageChanges, profitExtremums);
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        logFinalResults(pairData, percentageChanges);
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
     */
    private PercentageChanges calculatePercentageChanges(PairData pairData) {
        BigDecimal longCurrent = BigDecimal.valueOf(pairData.getLongTickerCurrentPrice());
        BigDecimal shortCurrent = BigDecimal.valueOf(pairData.getShortTickerCurrentPrice());
        BigDecimal longEntry = BigDecimal.valueOf(pairData.getLongTickerEntryPrice());
        BigDecimal shortEntry = BigDecimal.valueOf(pairData.getShortTickerEntryPrice());

        BigDecimal longReturnPct = longCurrent.subtract(longEntry)
                .divide(longEntry, PERCENTAGE_CALCULATION_SCALE, RoundingMode.HALF_UP)
                .multiply(PERCENTAGE_MULTIPLIER);

        BigDecimal shortReturnPct = shortEntry.subtract(shortCurrent)
                .divide(shortEntry, PERCENTAGE_CALCULATION_SCALE, RoundingMode.HALF_UP)
                .multiply(PERCENTAGE_MULTIPLIER);

        BigDecimal zScoreEntry = BigDecimal.valueOf(pairData.getZScoreEntry());
        BigDecimal zScoreCurrent = BigDecimal.valueOf(pairData.getZScoreCurrent());

        return new PercentageChanges(
                longReturnPct.setScale(DISPLAY_SCALE, RoundingMode.HALF_UP),
                shortReturnPct.setScale(DISPLAY_SCALE, RoundingMode.HALF_UP),
                zScoreCurrent.subtract(zScoreEntry).setScale(DISPLAY_SCALE, RoundingMode.HALF_UP),
                longReturnPct,
                shortReturnPct,
                longEntry,
                shortEntry,
                longCurrent,
                shortCurrent
        );
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö —Å –º–æ–º–µ–Ω—Ç–∞ –≤—Ö–æ–¥–∞
     */
    private long calculateTimeInMinutes(long entryTime) {
        long now = System.currentTimeMillis();
        return (now - entryTime) / MILLISECONDS_IN_MINUTE;
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —ç–∫—Å—Ç—Ä–µ–º—É–º—ã –ø—Ä–æ—Ñ–∏—Ç–∞
     */
    private ProfitExtremums updateProfitExtremums(PairData pairData, long currentTimeInMinutes) {
        BigDecimal currentProfitForStats = pairData.getProfitChanges() != null ? pairData.getProfitChanges() : BigDecimal.ZERO;
        
        BigDecimal currentMinProfit = pairData.getMinProfitRounded();
        BigDecimal currentMaxProfit = pairData.getMaxProfitRounded();
        long currentTimeToMax = pairData.getTimeInMinutesSinceEntryToMax();
        long currentTimeToMin = pairData.getTimeInMinutesSinceEntryToMin();

        BigDecimal maxProfitRounded;
        long timeInMinutesSinceEntryToMax;
        if (currentMaxProfit == null || currentProfitForStats.compareTo(currentMaxProfit) > 0) {
            maxProfitRounded = currentProfitForStats;
            timeInMinutesSinceEntryToMax = currentTimeInMinutes;
            log.debug("üöÄ –ù–æ–≤—ã–π –º–∞–∫—Å–∏–º—É–º –ø—Ä–∏–±—ã–ª–∏: {}% –∑–∞ {} –º–∏–Ω", maxProfitRounded, timeInMinutesSinceEntryToMax);
        } else {
            maxProfitRounded = currentMaxProfit;
            timeInMinutesSinceEntryToMax = currentTimeToMax;
        }

        BigDecimal minProfitRounded;
        long timeInMinutesSinceEntryToMin;
        if (currentMinProfit == null || currentProfitForStats.compareTo(currentMinProfit) < 0) {
            minProfitRounded = currentProfitForStats;
            timeInMinutesSinceEntryToMin = currentTimeInMinutes;
            log.debug("üìâ –ù–æ–≤—ã–π –º–∏–Ω–∏–º—É–º –ø—Ä–∏–±—ã–ª–∏: {}% –∑–∞ {} –º–∏–Ω", minProfitRounded, timeInMinutesSinceEntryToMin);
        } else {
            minProfitRounded = currentMinProfit;
            timeInMinutesSinceEntryToMin = currentTimeToMin;
        }

        return new ProfitExtremums(maxProfitRounded, minProfitRounded, timeInMinutesSinceEntryToMax, 
                                 timeInMinutesSinceEntryToMin, currentProfitForStats);
    }

    /**
     * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ PairData
     */
    private void setPairDataChanges(PairData pairData, PercentageChanges changes, ProfitExtremums extremums) {
        pairData.setLongChanges(changes.longReturnRounded());
        pairData.setShortChanges(changes.shortReturnRounded());
        pairData.setZScoreChanges(changes.zScoreRounded());
        pairData.setMinProfitRounded(extremums.minProfit());
        pairData.setMaxProfitRounded(extremums.maxProfit());
        pairData.setTimeInMinutesSinceEntryToMax(extremums.timeToMax());
        pairData.setTimeInMinutesSinceEntryToMin(extremums.timeToMin());
    }

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
     */
    private void logFinalResults(PairData pairData, PercentageChanges changes) {
        log.info("–§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –ø–∞—Ä—ã {}/{}", pairData.getLongTicker(), pairData.getShortTicker());
        log.info("üìä LONG {}: Entry: {}, Current: {}, Changes: {}%", 
                pairData.getLongTicker(), changes.longEntry(), changes.longCurrent(), changes.longReturnRounded());
        log.info("üìâ SHORT {}: Entry: {}, Current: {}, Changes: {}%", 
                pairData.getShortTicker(), changes.shortEntry(), changes.shortCurrent(), changes.shortReturnRounded());
        log.info("üí∞ –¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏—Ç: {}%", pairData.getProfitChanges());
        log.info("üìà Max profit: {}%, Min profit: {}%", pairData.getMaxProfitRounded(), pairData.getMinProfitRounded());
    }

    /**
     * –ó–∞–ø–∏—Å–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
     */
    private record PercentageChanges(
            BigDecimal longReturnRounded,
            BigDecimal shortReturnRounded,
            BigDecimal zScoreRounded,
            BigDecimal longReturnPct,
            BigDecimal shortReturnPct,
            BigDecimal longEntry,
            BigDecimal shortEntry,
            BigDecimal longCurrent,
            BigDecimal shortCurrent
    ) {}

    private record ProfitExtremums(
            BigDecimal maxProfit,
            BigDecimal minProfit,
            long timeToMax,
            long timeToMin,
            BigDecimal currentProfit
    ) {}

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —ç–∫—Å—Ç—Ä–µ–º—É–º—ã –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫
     */
    private void updateExtremumValues(PairData pairData, BigDecimal longReturnPct, BigDecimal shortReturnPct,
                                      BigDecimal zScoreCurrent, BigDecimal corrCurrent) {
        BigDecimal minZ = updateMin(pairData.getMinZ(), zScoreCurrent);
        BigDecimal maxZ = updateMax(pairData.getMaxZ(), zScoreCurrent);
        BigDecimal minLong = updateMin(pairData.getMinLong(), longReturnPct);
        BigDecimal maxLong = updateMax(pairData.getMaxLong(), longReturnPct);
        BigDecimal minShort = updateMin(pairData.getMinShort(), shortReturnPct);
        BigDecimal maxShort = updateMax(pairData.getMaxShort(), shortReturnPct);
        BigDecimal minCorr = updateMin(pairData.getMinCorr(), corrCurrent);
        BigDecimal maxCorr = updateMax(pairData.getMaxCorr(), corrCurrent);

        pairData.setMinZ(minZ);
        pairData.setMaxZ(maxZ);
        pairData.setMinLong(minLong);
        pairData.setMaxLong(maxLong);
        pairData.setMinShort(minShort);
        pairData.setMaxShort(maxShort);
        pairData.setMinCorr(minCorr);
        pairData.setMaxCorr(maxCorr);
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
     */
    private BigDecimal updateMin(BigDecimal currentMin, BigDecimal newValue) {
        if (currentMin == null) return newValue;
        return newValue.compareTo(currentMin) < 0 ? newValue : currentMin;
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
     */
    private BigDecimal updateMax(BigDecimal currentMax, BigDecimal newValue) {
        if (currentMax == null) return newValue;
        return newValue.compareTo(currentMax) > 0 ? newValue : currentMax;
    }
}
