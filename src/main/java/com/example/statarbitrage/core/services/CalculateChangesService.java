package com.example.statarbitrage.core.services;

import com.example.statarbitrage.common.dto.ChangesData;
import com.example.statarbitrage.common.model.PairData;
import com.example.statarbitrage.trading.model.Position;
import com.example.statarbitrage.trading.model.Positioninfo;
import com.example.statarbitrage.trading.services.TradingIntegrationService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.math.RoundingMode;

@Slf4j
@Service
@RequiredArgsConstructor
public class CalculateChangesService {

    private static final long MILLISECONDS_IN_MINUTE = 1000 * 60;
    private static final RoundingMode DEFAULT_ROUNDING_MODE = RoundingMode.HALF_UP;
    private static final int DEFAULT_SCALE = 2;

    private final TradingIntegrationService tradingIntegrationService;

    public ChangesData getChanges(PairData pairData) {
        log.info("==> getChanges: –ù–ê–ß–ê–õ–û –¥–ª—è –ø–∞—Ä—ã {}", pairData.getPairName());
        try {
            log.info("–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏—è—Ö...");
            Positioninfo positionsInfo = tradingIntegrationService.getPositionInfo(pairData);
            log.info("–ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∑–∏—Ü–∏—è—Ö: {}", positionsInfo);

            if (positionsInfo == null || positionsInfo.getLongPosition() == null || positionsInfo.getShortPosition() == null) {
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏—è—Ö –¥–ª—è –ø–∞—Ä—ã {}. PositionInfo: {}", pairData.getPairName(), positionsInfo);
                return new ChangesData();
            }

            ChangesData result = getFromPositions(pairData, positionsInfo);
            log.info("<== getChanges: –ö–û–ù–ï–¶ –¥–ª—è –ø–∞—Ä—ã {}. –†–µ–∑—É–ª—å—Ç–∞—Ç: {}", pairData.getPairName(), result);
            return result;

        } catch (Exception e) {
            log.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö (getChanges) –¥–ª—è –ø–∞—Ä—ã {}: {}", pairData.getPairName(), e.getMessage(), e);
        }
        log.info("<== getChanges: –ö–û–ù–ï–¶ (—Å –æ—à–∏–±–∫–æ–π) –¥–ª—è –ø–∞—Ä—ã {}", pairData.getPairName());
        return new ChangesData();
    }

    private ChangesData getFromPositions(PairData pairData, Positioninfo positionsInfo) {
        log.info("--> getFromPositions: –ù–ê–ß–ê–õ–û –¥–ª—è –ø–∞—Ä—ã {}", pairData.getPairName());
        Position longPosition = positionsInfo.getLongPosition();
        Position shortPosition = positionsInfo.getShortPosition();
        boolean isPositionsClosed = positionsInfo.isPositionsClosed();
        log.info("–°—Ç–∞—Ç—É—Å –ø–æ–∑–∏—Ü–∏–π: isPositionsClosed = {}", isPositionsClosed);

        ChangesData changesData = new ChangesData();
        changesData.setLongCurrentPrice(longPosition.getCurrentPrice());
        changesData.setShortCurrentPrice(shortPosition.getCurrentPrice());
        log.info("–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã: LONG {} = {}, SHORT {} = {}", longPosition.getSymbol(), longPosition.getCurrentPrice(), shortPosition.getSymbol(), shortPosition.getCurrentPrice());

        return isPositionsClosed ?
                getFromClosedPositions(pairData, changesData, longPosition, shortPosition) :
                getFromOpenPositions(pairData, changesData, longPosition, shortPosition);
    }

    private ChangesData getFromOpenPositions(PairData pairData, ChangesData changesData, Position longPosition, Position shortPosition) {
        log.info("--> getFromOpenPositions –¥–ª—è –ø–∞—Ä—ã {}", pairData.getPairName());

        BigDecimal netPnlUSDT = scale(longPosition.getUnrealizedPnLUSDT().add(shortPosition.getUnrealizedPnLUSDT()));
//        BigDecimal netPnlPercent = scale(longPosition.getUnrealizedPnLPercent().add(shortPosition.getUnrealizedPnLPercent())); //todo –Ω–µ —Ç–æ —á—Ç–æ –Ω–∞ –æ–∫—Ö... —Å—Ç—Ä–∞–Ω–Ω–æ
        BigDecimal netPnlPercent = scale(calcPercent(longPosition, shortPosition));
        BigDecimal totalFees = scale(longPosition.getOpeningFees().add(shortPosition.getOpeningFees()));

        log.info("–ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL –≤ USDT: {}, –≤ %: {}, –∫–æ–º–∏—Å—Å–∏–∏: {}", netPnlUSDT, netPnlPercent, totalFees);

        return getProfitAndStatistics(pairData, changesData, netPnlUSDT, netPnlPercent, false, longPosition, shortPosition);
    }

    //—Å–∞–º–∏ —Å—á–∏—Ç–∞–µ–º –æ–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç
    private BigDecimal calcPercent(Position longPosition, Position shortPosition) {
        BigDecimal totalAllocatedAmount = longPosition.getAllocatedAmount().add(shortPosition.getAllocatedAmount());
        BigDecimal netPnlUSDT = longPosition.getUnrealizedPnLUSDT().add(shortPosition.getUnrealizedPnLUSDT());
        if (totalAllocatedAmount.compareTo(BigDecimal.ZERO) == 0) {
            return BigDecimal.ZERO; // –∑–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
        }
        return netPnlUSDT
                .divide(totalAllocatedAmount, 8, RoundingMode.HALF_UP) // –¥–µ–ª–∏–º —Å –Ω—É–∂–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
                .multiply(BigDecimal.valueOf(100));
    }


    private ChangesData getFromClosedPositions(PairData pairData, ChangesData changesData, Position longPosition, Position shortPosition) {
        log.info("--> getFromClosedPositions –¥–ª—è –ø–∞—Ä—ã {}", pairData.getPairName());

        BigDecimal netPnlUSDT = scale(longPosition.getRealizedPnLUSDT().add(shortPosition.getRealizedPnLUSDT()));
        BigDecimal netPnlPercent = scale(longPosition.getRealizedPnLPercent().add(shortPosition.getRealizedPnLPercent()));
        BigDecimal totalFees = scale(
                safeAdd(longPosition.getOpeningFees(), longPosition.getClosingFees())
                        .add(safeAdd(shortPosition.getOpeningFees(), shortPosition.getClosingFees())));

        log.info("–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL –≤ USDT: {}, –≤ %: {}, –∫–æ–º–∏—Å—Å–∏–∏: {}", netPnlUSDT, netPnlPercent, totalFees);

        return getProfitAndStatistics(pairData, changesData, netPnlUSDT, netPnlPercent, true, longPosition, shortPosition);
    }

    private ChangesData getProfitAndStatistics(PairData pairData, ChangesData changesData, BigDecimal netPnlUSDT, BigDecimal netPnlPercent,
                                               boolean isPositionsClosed,
                                               Position longPosition, Position shortPosition) {

        changesData.setLongAllocatedAmount(scale(longPosition.getAllocatedAmount()));
        changesData.setShortAllocatedAmount(scale(shortPosition.getAllocatedAmount()));

        BigDecimal totalInvestmentUSDT = scale(longPosition.getAllocatedAmount().add(shortPosition.getAllocatedAmount()));
        changesData.setTotalInvestmentUSDT(totalInvestmentUSDT);

        changesData.setLongChanges(scale(longPosition.getUnrealizedPnLPercent()));
        changesData.setShortChanges(scale(shortPosition.getUnrealizedPnLPercent()));

        changesData.setProfitUSDTChanges(netPnlUSDT);
        changesData.setProfitPercentChanges(netPnlPercent);

        log.info("–ü—Ä–æ—Ñ–∏—Ç: {} USDT ({} %) –∏–∑ {}", netPnlUSDT, netPnlPercent, isPositionsClosed ? "–∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π" : "–æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π");

        return getStatistics(pairData, changesData);
    }

    private ChangesData getStatistics(PairData pairData, ChangesData changesData) {
        BigDecimal zScoreEntry = BigDecimal.valueOf(pairData.getZScoreEntry());
        BigDecimal zScoreCurrent = BigDecimal.valueOf(pairData.getZScoreCurrent());
        changesData.setZScoreChanges(scale(zScoreCurrent.subtract(zScoreEntry)));

        long currentTimeInMinutes = calculateTimeInMinutes(pairData.getEntryTime());
        ProfitExtremums profitExtremums = updateProfitExtremums(changesData, currentTimeInMinutes);

        updateExtremumValues(pairData, changesData, changesData.getLongChanges(), changesData.getShortChanges(),
                BigDecimal.valueOf(pairData.getZScoreCurrent()), BigDecimal.valueOf(pairData.getCorrelationCurrent()));

        changesData.setMinProfitChanges(profitExtremums.minProfit());
        changesData.setMaxProfitChanges(profitExtremums.maxProfit());
        changesData.setTimeInMinutesSinceEntryToMax(profitExtremums.timeToMax());
        changesData.setTimeInMinutesSinceEntryToMin(profitExtremums.timeToMin());

        logFinalResults(pairData, changesData);

        return changesData;
    }

    private long calculateTimeInMinutes(long entryTime) {
        return (System.currentTimeMillis() - entryTime) / MILLISECONDS_IN_MINUTE;
    }

    private ProfitExtremums updateProfitExtremums(ChangesData changesData, long currentTimeInMinutes) {
        BigDecimal currentProfit = changesData.getProfitPercentChanges() != null ? changesData.getProfitPercentChanges() : BigDecimal.ZERO;
        MaxProfitResult max = updateMaxProfit(currentProfit, changesData.getMaxProfitChanges(), changesData.getTimeInMinutesSinceEntryToMax(), currentTimeInMinutes);
        MinProfitResult min = updateMinProfit(currentProfit, changesData.getMinProfitChanges(), changesData.getTimeInMinutesSinceEntryToMin(), currentTimeInMinutes);
        return new ProfitExtremums(max.maxProfit(), min.minProfit(), max.timeToMax(), min.timeToMin(), currentProfit);
    }

    private MaxProfitResult updateMaxProfit(BigDecimal current, BigDecimal max, long timeToMax, long now) {
        return (max == null || current.compareTo(max) > 0) ? new MaxProfitResult(current, now) : new MaxProfitResult(max, timeToMax);
    }

    private MinProfitResult updateMinProfit(BigDecimal current, BigDecimal min, long timeToMin, long now) {
        return (min == null || current.compareTo(min) < 0) ? new MinProfitResult(current, now) : new MinProfitResult(min, timeToMin);
    }

    private void logFinalResults(PairData pairData, ChangesData changesData) {
        log.info("üìä LONG {}: Entry: {}, Current: {}, Changes: {} %", pairData.getLongTicker(), pairData.getLongTickerEntryPrice(), changesData.getLongCurrentPrice(), changesData.getLongChanges());
        log.info("üìâ SHORT {}: Entry: {}, Current: {}, Changes: {} %", pairData.getShortTicker(), pairData.getShortTickerEntryPrice(), changesData.getShortCurrentPrice(), changesData.getShortChanges());
        log.info("üí∞ –¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏—Ç: {} USDT ({} %)", changesData.getProfitUSDTChanges(), changesData.getProfitPercentChanges());
        log.info("üìà Max profit: {} %, Min profit: {} %", changesData.getMaxProfitChanges(), changesData.getMinProfitChanges()); //todo –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç —ç–∫—Å—Ç—Ä–µ–º—É–º—ã!
    }

    private void updateExtremumValues(PairData pairData, ChangesData changesData, BigDecimal longPct, BigDecimal shortPct,
                                      BigDecimal zScore, BigDecimal corr) {
        changesData.setMinZ(updateMin(pairData.getMinZ(), zScore));
        changesData.setMaxZ(updateMax(pairData.getMaxZ(), zScore));
        changesData.setMinLong(updateMin(pairData.getMinLong(), longPct));
        changesData.setMaxLong(updateMax(pairData.getMaxLong(), longPct));
        changesData.setMinShort(updateMin(pairData.getMinShort(), shortPct));
        changesData.setMaxShort(updateMax(pairData.getMaxShort(), shortPct));
        changesData.setMinCorr(updateMin(pairData.getMinCorr(), corr));
        changesData.setMaxCorr(updateMax(pairData.getMaxCorr(), corr));
    }

    private BigDecimal updateMin(BigDecimal currentMin, BigDecimal newVal) {
        return (currentMin == null || newVal.compareTo(currentMin) < 0) ? newVal : currentMin;
    }

    private BigDecimal updateMax(BigDecimal currentMax, BigDecimal newVal) {
        return (currentMax == null || newVal.compareTo(currentMax) > 0) ? newVal : currentMax;
    }

    private BigDecimal safeAdd(BigDecimal a, BigDecimal b) {
        return (a != null ? a : BigDecimal.ZERO).add(b != null ? b : BigDecimal.ZERO);
    }

    private BigDecimal scale(BigDecimal value) {
        return value != null ? value.setScale(DEFAULT_SCALE, DEFAULT_ROUNDING_MODE) : null;
    }

    private record ProfitExtremums(BigDecimal maxProfit, BigDecimal minProfit, long timeToMax, long timeToMin, BigDecimal currentProfit) {
    }

    private record MaxProfitResult(BigDecimal maxProfit, long timeToMax) {
    }

    private record MinProfitResult(BigDecimal minProfit, long timeToMin) {
    }
}
