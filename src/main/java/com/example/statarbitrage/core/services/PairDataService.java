package com.example.statarbitrage.core.services;

import com.example.statarbitrage.common.dto.Candle;
import com.example.statarbitrage.common.dto.ZScoreData;
import com.example.statarbitrage.common.dto.ZScoreParam;
import com.example.statarbitrage.common.model.PairData;
import com.example.statarbitrage.common.model.TradeStatus;
import com.example.statarbitrage.common.utils.CandlesUtil;
import com.example.statarbitrage.core.repositories.PairDataRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.dao.OptimisticLockingFailureException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.util.*;
import java.util.stream.Collectors;

import static com.example.statarbitrage.common.constant.Constants.EXIT_REASON_MANUALLY;

@Slf4j
@Service
@RequiredArgsConstructor
public class PairDataService {
    private final ChangesService changesService;
    private final ExitStrategyService exitStrategyService;
    private final PairDataRepository pairDataRepository;

    public List<PairData> createPairDataList(List<ZScoreData> top, Map<String, List<Candle>> candlesMap) {
        List<PairData> result = new ArrayList<>();

        for (ZScoreData zScoreData : top) {
            try {
                List<Candle> underValuedTickerCandles = candlesMap.get(zScoreData.getUndervaluedTicker());
                List<Candle> overValuedTickerCandles = candlesMap.get(zScoreData.getOvervaluedTicker());
                PairData newPairData = createPairData(zScoreData, underValuedTickerCandles, overValuedTickerCandles);
                result.add(newPairData);
            } catch (Exception e) {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PairData –¥–ª—è –ø–∞—Ä—ã {}/{}: {}",
                        zScoreData.getUndervaluedTicker(),
                        zScoreData.getOvervaluedTicker(),
                        e.getMessage());
            }
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        List<PairData> savedPairs = new ArrayList<>();
        for (PairData pair : result) {
            try {
                save(pair);
                savedPairs.add(pair);
            } catch (RuntimeException e) {
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä—É {}/{}: {} - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º",
                        pair.getLongTicker(), pair.getShortTicker(), e.getMessage());
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–∞—Ä
            }
        }

        log.info("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {}/{} –ø–∞—Ä", savedPairs.size(), result.size());

        return result;
    }

    private static PairData createPairData(ZScoreData zScoreData, List<Candle> underValuedTickerCandles, List<Candle> overValuedTickerCandles) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if (underValuedTickerCandles == null || underValuedTickerCandles.isEmpty() || overValuedTickerCandles == null || overValuedTickerCandles.isEmpty()) {
            log.warn("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–≤–µ—á–∞–º –¥–ª—è –ø–∞—Ä—ã: {} - {}", zScoreData.getUndervaluedTicker(), zScoreData.getOvervaluedTicker());
            throw new IllegalArgumentException("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π");
        }

        PairData pairData = new PairData();

        pairData.setStatus(TradeStatus.SELECTED);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        pairData.setLongTicker(zScoreData.getUndervaluedTicker());
        pairData.setShortTicker(zScoreData.getOvervaluedTicker());

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        ZScoreParam latestParam = zScoreData.getLastZScoreParam();

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
        pairData.setLongTickerCurrentPrice(CandlesUtil.getLastClose(underValuedTickerCandles));
        pairData.setShortTickerCurrentPrice(CandlesUtil.getLastClose(overValuedTickerCandles));

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        pairData.setZScoreCurrent(latestParam.getZscore());
        pairData.setCorrelationCurrent(latestParam.getCorrelation());
        pairData.setAdfPvalueCurrent(latestParam.getAdfpvalue());
        pairData.setPValueCurrent(latestParam.getPvalue());
        pairData.setMeanCurrent(latestParam.getMean());
        pairData.setStdCurrent(latestParam.getStd());
        pairData.setSpreadCurrent(latestParam.getSpread());
        pairData.setAlphaCurrent(latestParam.getAlpha());
        pairData.setBetaCurrent(latestParam.getBeta());

        if (pairData.getZScoreEntry() != 0) {
            BigDecimal zScoreChanges = BigDecimal.valueOf(latestParam.getZscore()).subtract(BigDecimal.valueOf(pairData.getZScoreEntry()));
            pairData.setZScoreChanges(zScoreChanges);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é Z-Score –∏–∑ ZScoreData
        if (zScoreData.getZscoreParams() != null && !zScoreData.getZscoreParams().isEmpty()) {
            // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            for (ZScoreParam param : zScoreData.getZscoreParams()) {
                pairData.addZScorePoint(param);
            }
        } else {
            // –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Ö–æ—Ç—è –±—ã —Ç–µ–∫—É—â—É—é —Ç–æ—á–∫—É
            pairData.addZScorePoint(latestParam);
        }

        return pairData;
    }

    @Transactional
    public void update(PairData pairData, ZScoreData zScoreData, List<Candle> longTickerCandles, List<Candle> shortTickerCandles, boolean isCloseManually) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if (longTickerCandles == null || longTickerCandles.isEmpty() || shortTickerCandles == null || shortTickerCandles.isEmpty()) {
            log.warn("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–≤–µ—á–∞–º –¥–ª—è –ø–∞—Ä—ã: {} - {}", zScoreData.getUndervaluedTicker(), zScoreData.getOvervaluedTicker());
            throw new IllegalArgumentException("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π");
        }

        double longTickerCurrentPrice = CandlesUtil.getLastClose(longTickerCandles);
        double shortTickerCurrentPrice = CandlesUtil.getLastClose(shortTickerCandles);

        pairData.setLongTickerCurrentPrice(longTickerCurrentPrice);
        pairData.setShortTickerCurrentPrice(shortTickerCurrentPrice);

        ZScoreParam latestParam = zScoreData.getLastZScoreParam();

        //–¢–æ—á–∫–∏ –≤—Ö–æ–¥–∞
        if (pairData.getStatus() == TradeStatus.SELECTED) {

            pairData.setStatus(TradeStatus.TRADING);

            pairData.setLongTickerEntryPrice(longTickerCurrentPrice);
            pairData.setShortTickerEntryPrice(shortTickerCurrentPrice);

            pairData.setZScoreEntry(latestParam.getZscore());
            pairData.setCorrelationEntry(latestParam.getCorrelation());
            pairData.setAdfPvalueEntry(latestParam.getAdfpvalue());
            pairData.setPValueEntry(latestParam.getPvalue());
            pairData.setMeanEntry(latestParam.getMean());
            pairData.setStdEntry(latestParam.getStd());
            pairData.setSpreadEntry(latestParam.getSpread());
            pairData.setAlphaEntry(latestParam.getAlpha());
            pairData.setBetaEntry(latestParam.getBeta());

            // –°—Ç–∞–≤–∏–º –≤—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ long-—Å–≤–µ—á–∫–µ
            pairData.setEntryTime(latestParam.getTimestamp());

            log.info("üîπ–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞: LONG {{}} = {}, SHORT {{}} = {}, Z = {}",
                    pairData.getLongTicker(), pairData.getLongTickerEntryPrice(),
                    pairData.getShortTicker(), pairData.getShortTickerEntryPrice(),
                    pairData.getZScoreEntry());
        }

        //updateCurrentCointParams
        pairData.setZScoreCurrent(latestParam.getZscore());
        pairData.setCorrelationCurrent(latestParam.getCorrelation());
        pairData.setAdfPvalueCurrent(latestParam.getAdfpvalue());
        pairData.setPValueCurrent(latestParam.getPvalue());
        pairData.setMeanCurrent(latestParam.getMean());
        pairData.setStdCurrent(latestParam.getStd());
        pairData.setSpreadCurrent(latestParam.getSpread());
        pairData.setAlphaCurrent(latestParam.getAlpha());
        pairData.setBetaCurrent(latestParam.getBeta());

        changesService.calculateAndAdd(pairData);

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ç–æ—á–∫–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é Z-Score –ø—Ä–∏ –∫–∞–∂–¥–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        if (zScoreData.getZscoreParams() != null && !zScoreData.getZscoreParams().isEmpty()) {
            // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å—é –Ω–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é –∏–∑ ZScoreData
            for (ZScoreParam param : zScoreData.getZscoreParams()) {
                pairData.addZScorePoint(param);
            }
        } else {
            // –ï—Å–ª–∏ –Ω–æ–≤–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Ö–æ—Ç—è –±—ã —Ç–µ–∫—É—â—É—é —Ç–æ—á–∫—É
            pairData.addZScorePoint(latestParam);
        }

        String exitReason = exitStrategyService.getExitReason(pairData);
        if (exitReason != null) {
            pairData.setExitReason(exitReason);
            pairData.setStatus(TradeStatus.CLOSED);
        }

        //–ø–æ—Å–ª–µ –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ—Ñ–∏—Ç–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (isCloseManually) {
            pairData.setStatus(TradeStatus.CLOSED);
            pairData.setExitReason(EXIT_REASON_MANUALLY);
        }

        save(pairData);
    }

    @Transactional
    public void save(PairData pairData) {
        saveWithRetry(pairData, 10);
    }

    private void saveWithRetry(PairData pairData, int maxRetries) {
        int attempts = 0;
        PairData currentEntity = pairData;

        while (attempts < maxRetries) {
            try {
                log.debug("üíæ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è PairData #{} (–ø–æ–ø—ã—Ç–∫–∞ {}/{}) –≤–µ—Ä—Å–∏—è: {}",
                        currentEntity.getId(), attempts + 1, maxRetries, currentEntity.getVersion());

                PairData savedEntity = pairDataRepository.save(currentEntity);
                log.debug("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ PairData #{} –≤–µ—Ä—Å–∏—è: {}",
                        savedEntity.getId(), savedEntity.getVersion());
                return; // –£—Å–ø–µ—à–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ

            } catch (OptimisticLockingFailureException e) {
                attempts++;
                log.warn("‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ PairData #{} (–ø–æ–ø—ã—Ç–∫–∞ {}/{}) –¥–ª—è –ø–∞—Ä—ã {}/{}: {}",
                        currentEntity.getId(), attempts, maxRetries,
                        currentEntity.getLongTicker(), currentEntity.getShortTicker(), e.getMessage());

                if (attempts >= maxRetries) {
                    log.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å PairData #{} –ø–æ—Å–ª–µ {} –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –ø–∞—Ä—ã {}/{}",
                            currentEntity.getId(), maxRetries,
                            currentEntity.getLongTicker(), currentEntity.getShortTicker());
                    throw new RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã –ø–æ—Å–ª–µ " + maxRetries + " –ø–æ–ø—ã—Ç–æ–∫", e);
                }

                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –∏–∑ –ë–î –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π entity –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
                try {
                    Thread.sleep(1000 + (attempts * 1000L)); // Exponential backoff: 50ms, 75ms, 100ms

                    if (currentEntity.getId() != null) {
                        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
                        Optional<PairData> freshDataOpt = pairDataRepository.findById(currentEntity.getId());
                        if (freshDataOpt.isPresent()) {
                            PairData freshData = freshDataOpt.get();

                            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π entity —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π –∏ –Ω–∞—à–∏–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
                            currentEntity = mergeWithFreshData(currentEntity, freshData);

                            log.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å–∏—è –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ #{}: —Å—Ç–∞—Ä–∞—è={}, –Ω–æ–≤–∞—è={}",
                                    attempts + 1, freshData.getVersion(), currentEntity.getVersion());
                        } else {
                            log.warn("‚ùå PairData #{} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ë–î –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º –¥–ª—è –ø–∞—Ä—ã {}/{}. –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.",
                                    currentEntity.getId(), currentEntity.getLongTicker(), currentEntity.getShortTicker());
                            // –ü–æ–º–µ—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è rollback –∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
                            throw new RuntimeException("–ó–∞–ø–∏—Å—å –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º –≤–æ –≤—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è");
                        }
                    }
                } catch (InterruptedException ie) {
                    Thread.currentThread().interrupt();
                    throw new RuntimeException("–ü—Ä–µ—Ä–≤–∞–Ω –ø–æ—Ç–æ–∫ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", ie);
                }
            }
        }
    }

    /**
     * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ detached entity —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î
     */
    private PairData mergeWithFreshData(PairData modifiedEntity, PairData freshEntity) {
        // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –Ω–∞—à–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–≤–µ–∂—É—é entity —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π
        freshEntity.setStatus(modifiedEntity.getStatus());
        freshEntity.setLongTicker(modifiedEntity.getLongTicker());
        freshEntity.setShortTicker(modifiedEntity.getShortTicker());

        // –¶–µ–Ω—ã
        freshEntity.setLongTickerEntryPrice(modifiedEntity.getLongTickerEntryPrice());
        freshEntity.setLongTickerCurrentPrice(modifiedEntity.getLongTickerCurrentPrice());
        freshEntity.setShortTickerEntryPrice(modifiedEntity.getShortTickerEntryPrice());
        freshEntity.setShortTickerCurrentPrice(modifiedEntity.getShortTickerCurrentPrice());

        // –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Ö–æ–¥–∞
        freshEntity.setZScoreEntry(modifiedEntity.getZScoreEntry());
        freshEntity.setCorrelationEntry(modifiedEntity.getCorrelationEntry());
        freshEntity.setAdfPvalueEntry(modifiedEntity.getAdfPvalueEntry());
        freshEntity.setPValueEntry(modifiedEntity.getPValueEntry());
        freshEntity.setMeanEntry(modifiedEntity.getMeanEntry());
        freshEntity.setStdEntry(modifiedEntity.getStdEntry());
        freshEntity.setSpreadEntry(modifiedEntity.getSpreadEntry());
        freshEntity.setAlphaEntry(modifiedEntity.getAlphaEntry());
        freshEntity.setBetaEntry(modifiedEntity.getBetaEntry());

        // –¢–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        freshEntity.setZScoreCurrent(modifiedEntity.getZScoreCurrent());
        freshEntity.setCorrelationCurrent(modifiedEntity.getCorrelationCurrent());
        freshEntity.setAdfPvalueCurrent(modifiedEntity.getAdfPvalueCurrent());
        freshEntity.setPValueCurrent(modifiedEntity.getPValueCurrent());
        freshEntity.setMeanCurrent(modifiedEntity.getMeanCurrent());
        freshEntity.setStdCurrent(modifiedEntity.getStdCurrent());
        freshEntity.setSpreadCurrent(modifiedEntity.getSpreadCurrent());
        freshEntity.setAlphaCurrent(modifiedEntity.getAlphaCurrent());
        freshEntity.setBetaCurrent(modifiedEntity.getBetaCurrent());

        // –ò–∑–º–µ–Ω–µ–Ω–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        freshEntity.setZScoreChanges(modifiedEntity.getZScoreChanges());
        freshEntity.setLongChanges(modifiedEntity.getLongChanges());
        freshEntity.setShortChanges(modifiedEntity.getShortChanges());
        freshEntity.setProfitChanges(modifiedEntity.getProfitChanges());

        // –í—Ä–µ–º–µ–Ω–∞ –∏ –º–µ—Ç—Ä–∏–∫–∏
        freshEntity.setEntryTime(modifiedEntity.getEntryTime());
        freshEntity.setUpdatedTime(modifiedEntity.getUpdatedTime());
        freshEntity.setTimestamp(modifiedEntity.getTimestamp());

        // –ú–∏–Ω–∏–º—É–º—ã –∏ –º–∞–∫—Å–∏–º—É–º—ã
        freshEntity.setMaxProfitRounded(modifiedEntity.getMaxProfitRounded());
        freshEntity.setMinProfitRounded(modifiedEntity.getMinProfitRounded());
        freshEntity.setTimeInMinutesSinceEntryToMin(modifiedEntity.getTimeInMinutesSinceEntryToMin());
        freshEntity.setTimeInMinutesSinceEntryToMax(modifiedEntity.getTimeInMinutesSinceEntryToMax());

        freshEntity.setMaxZ(modifiedEntity.getMaxZ());
        freshEntity.setMinZ(modifiedEntity.getMinZ());
        freshEntity.setMaxLong(modifiedEntity.getMaxLong());
        freshEntity.setMinLong(modifiedEntity.getMinLong());
        freshEntity.setMaxShort(modifiedEntity.getMaxShort());
        freshEntity.setMinShort(modifiedEntity.getMinShort());
        freshEntity.setMaxCorr(modifiedEntity.getMaxCorr());
        freshEntity.setMinCorr(modifiedEntity.getMinCorr());

        // –ü—Ä–∏—á–∏–Ω–∞ –≤—ã—Ö–æ–¥–∞
        freshEntity.setExitReason(modifiedEntity.getExitReason());

        // –ò—Å—Ç–æ—Ä–∏—è Z-Score (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å)
        if (modifiedEntity.getZScoreHistoryJson() != null) {
            freshEntity.setZScoreHistoryJson(modifiedEntity.getZScoreHistoryJson());
        }

        return freshEntity;
    }

    public List<PairData> findAllByStatusOrderByEntryTimeDesc(TradeStatus status) {
        return pairDataRepository.findAllByStatusOrderByEntryTimeDesc(status);
    }

    public List<PairData> findAllByStatusOrderByUpdatedTimeDesc(TradeStatus status) {
        return pairDataRepository.findAllByStatusOrderByUpdatedTimeDesc(status);
    }

    public int deleteAllByStatus(TradeStatus status) {
        return pairDataRepository.deleteAllByStatus(status);
    }

    public void delete(PairData pairData) {
        pairDataRepository.delete(pairData);
    }

    public void excludeExistingTradingPairs(List<ZScoreData> zScoreDataList) {
        if (zScoreDataList == null || zScoreDataList.isEmpty()) return;

        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ —Ç–æ—Ä–≥—É—é—â–∏—Ö—Å—è –ø–∞—Ä
        List<PairData> tradingPairs = findAllByStatusOrderByEntryTimeDesc(TradeStatus.TRADING);

        // –°–æ–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–∞—Ä –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "BTC-USDT-ETH-USDT")
        Set<String> tradingSet = tradingPairs.stream()
                .map(pair -> buildKey(pair.getLongTicker(), pair.getShortTicker()))
                .collect(Collectors.toSet());

        // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç–µ –ø–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ —Ç–æ—Ä–≥—É—é—Ç—Å—è
        zScoreDataList.removeIf(z -> {
            String key = buildKey(z.getUndervaluedTicker(), z.getOvervaluedTicker());
            return tradingSet.contains(key);
        });
    }

    // –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞ –ø–∞—Ä—ã, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø–æ—Ä—è–¥–∫–∞
    private String buildKey(String ticker1, String ticker2) {
        List<String> sorted = Arrays.asList(ticker1, ticker2);
        Collections.sort(sorted);
        return sorted.get(0) + "-" + sorted.get(1);
    }

    public BigDecimal getUnrealizedProfitTotal() {
        List<PairData> tradingPairs = findAllByStatusOrderByEntryTimeDesc(TradeStatus.TRADING);
        return tradingPairs.stream()
                .map(PairData::getProfitChanges)
                .filter(p -> p != null)
                .reduce(BigDecimal.ZERO, BigDecimal::add);
    }

}
