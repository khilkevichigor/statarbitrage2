package com.example.statarbitrage.core.services;

import com.example.statarbitrage.common.dto.ZScoreData;
import com.example.statarbitrage.common.dto.ZScoreParam;
import com.example.statarbitrage.common.model.Settings;
import com.example.statarbitrage.common.utils.NumberFormatter;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@Slf4j
@Service
@RequiredArgsConstructor
public class FilterIncompleteZScoreParamsServiceV2 {

    private final PairDataService pairDataService;
    private final PixelSpreadService pixelSpreadService;

    /**
     * –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏—Å—Ç–µ–º—ã –æ—á–∫–æ–≤
     * <p>
     * –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï:
     * - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏)
     * - –†–∞—Å—á–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–∫–æ—Ä–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã (0-100 –æ—á–∫–æ–≤)
     * - ObtainBestPairServiceV2 –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à—É—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫–æ—Ä–∞
     * - –ù–ï–¢ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ Johansen - –∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞!
     */
    public void filter(List<ZScoreData> zScoreDataList, Settings settings) {
        double expected = settings.getExpectedZParamsCount();

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        analyzeInputData(zScoreDataList);

        log.info("üîç –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π: {}, –≤—Å–µ–≥–æ –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {}", expected, zScoreDataList.size());

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ø–∏—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        List<ZScoreData> originalList = List.copyOf(zScoreDataList);
        int before = zScoreDataList.size();
        Map<String, Integer> filterStats = new HashMap<>();

        zScoreDataList.removeIf(data -> {
            String reason = shouldFilterPair(data, settings, expected);
            if (reason != null) {
                filterStats.merge(reason, 1, Integer::sum);
                log.info("‚ö†Ô∏è –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {}/{} ‚Äî {}. –î–µ—Ç–∞–ª–∏: Z-Score={}, ADF p-value={}, R¬≤={}",
                        data.getUnderValuedTicker(), data.getOverValuedTicker(), reason,
                        NumberFormatter.format(getLatestZScore(data, data.getZScoreHistory()), 2),
                        getAdfPValue(data, data.getZScoreHistory()) != null ? NumberFormatter.format(getAdfPValue(data, data.getZScoreHistory()), 4) : "N/A",
                        getRSquared(data) != null ? NumberFormatter.format(getRSquared(data), 3) : "N/A"
                );
                return true;
            }
            // –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–∫–æ—Ä –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã
            double qualityScore = calculatePairQualityScoreInternal(data, settings);
            log.info("üìä –ü–∞—Ä–∞ {}/{} –ø—Ä–æ—à–ª–∞ –±–∞–∑–æ–≤—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é. –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–∫–æ—Ä: {}",
                    data.getUnderValuedTicker(), data.getOverValuedTicker(),
                    NumberFormatter.format(qualityScore, 2));
            return false;
        });

        int after = zScoreDataList.size();
        log.info("‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {} ‚Üí {} –ø–∞—Ä", before, after);

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏—á–∏–Ω–∞–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        filterStats.forEach((reason, count) ->
                log.debug("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ - {}: {} –ø–∞—Ä", reason, count));

        // –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        logFilteringStatistics(originalList, zScoreDataList, settings);
    }

    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç API
     */
    private void analyzeInputData(List<ZScoreData> zScoreDataList) {
        if (zScoreDataList.isEmpty()) return;

        ZScoreData sample = zScoreDataList.get(0);
        boolean hasOldFormat = sample.getZScoreHistory() != null && !sample.getZScoreHistory().isEmpty();
        boolean hasNewFormat = sample.getLatestZScore() != null;
        boolean hasJohansenData = sample.getJohansenCointPValue() != null;

        log.info("üìã –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:");
        log.info("   üìä –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (zscoreParams): {}", hasOldFormat ? "‚úÖ" : "‚ùå");
        log.info("   üÜï –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç (latest_zscore): {}", hasNewFormat ? "‚úÖ" : "‚ùå");
        log.info("   üî¨ Johansen —Ç–µ—Å—Ç: {}", hasJohansenData ? "‚úÖ –î–û–°–¢–£–ü–ï–ù" : "‚ùå");

        if (hasJohansenData) {
            double minJohansenPValue = zScoreDataList.stream()
                    .filter(d -> d.getJohansenCointPValue() != null)
                    .mapToDouble(ZScoreData::getJohansenCointPValue)
                    .min()
                    .orElse(1.0);
            log.info("   üìà –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π Johansen p-value: {}", String.format("%.6f", minJohansenPValue));
        }
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ–ª–∂–Ω–∞ –ª–∏ –±—ã—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–∞ –ø–∞—Ä–∞ (–ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø)
     * –û—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ - –æ—Å—Ç–∞–ª—å–Ω–æ–µ —á–µ—Ä–µ–∑ —Å–∫–æ—Ä–∏–Ω–≥!
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏—á–∏–Ω—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ null –µ—Å–ª–∏ –ø–∞—Ä–∞ –ø—Ä–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
     */
    private String shouldFilterPair(ZScoreData data, Settings settings, double expectedSize) {
        List<ZScoreParam> params = data.getZScoreHistory();
        String pairName = data.getUnderValuedTicker() + "/" + data.getOverValuedTicker();

        log.debug("‚öôÔ∏è –ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—ã {} (–æ—Å–Ω–æ–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —á–µ—Ä–µ–∑ —Å–∫–æ—Ä–∏–Ω–≥):", pairName);

        // ====== –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò (—Ç–æ–ª—å–∫–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ!) ======

        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö
        String reason = isDataMissing(data, params) ? "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ Z-score" : null;
        if (reason != null) {
            log.debug("   ‚ùå {}: {}", pairName, reason);
            return reason;
        }

        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤
        reason = isTickersInvalid(data) ? "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã" : null;
        if (reason != null) {
            log.debug("   ‚ùå {}: {}", pairName, reason);
            return reason;
        }

        // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ Z-Score –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–∫–ª—é—á–µ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä!)
        double currentZScore = getLatestZScore(data, params);
        if (currentZScore <= 0) {
            reason = String.format("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π/–Ω—É–ª–µ–≤–æ–π Z-score: %.2f (–Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–∞)", currentZScore);
            log.debug("   ‚ùå {}: {}", pairName, reason);
            return reason;
        }
        log.debug("   ‚úÖ {}: –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π Z-score: {}", pairName, NumberFormatter.format(currentZScore, 2));


        return null; // –ü–∞—Ä–∞ –ø—Ä–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    }

    // ============ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –§–ò–õ–¨–¢–†–ê–¶–ò–ò ============

    private boolean isDataMissing(ZScoreData data, List<ZScoreParam> params) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Z-score –¥–∞–Ω–Ω—ã—Ö –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        if (params != null && !params.isEmpty()) {
            return false; // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
        }
        return data.getLatestZScore() == null; // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ–º latest_zscore
    }

    private boolean isTickersInvalid(ZScoreData data) {
        return data.getUnderValuedTicker() == null ||
                data.getOverValuedTicker() == null ||
                data.getUnderValuedTicker().isEmpty() ||
                data.getOverValuedTicker().isEmpty() ||
                data.getUnderValuedTicker().equals(data.getOverValuedTicker());
    }

    private String checkCointegration(ZScoreData data, List<ZScoreParam> params, Settings settings) {
        // –ü–†–ò–û–†–ò–¢–ï–¢ 1: Johansen —Ç–µ—Å—Ç (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        if (data.getJohansenCointPValue() != null) {
            Double johansenPValue = data.getJohansenCointPValue();
            log.debug("üî¨ Johansen p-value: {} –¥–ª—è –ø–∞—Ä—ã {}/{}",
                    NumberFormatter.format(johansenPValue, 6), // Use NumberFormatter
                    data.getUnderValuedTicker(),
                    data.getOverValuedTicker());

            // –î–ª—è Johansen —Ç–µ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π –ø–æ—Ä–æ–≥ (0.05)
            double johansenThreshold = 0.05; //todo –≤—ã–Ω–µ—Å—Ç–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if (johansenPValue > johansenThreshold) {
                return String.format("–ù–ï –∫–æ–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã (Johansen): p-value=%s > %.6f",
                        NumberFormatter.format(johansenPValue, 6), johansenThreshold);
            }

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ Johansen —Ç–µ—Å—Ç–∞
            if (data.getJohansenTraceStatistic() != null && data.getJohansenCriticalValue95() != null) {
                if (data.getJohansenError() != null) {
                    return "–û—à–∏–±–∫–∞ –≤ Johansen —Ç–µ—Å—Ç–µ: " + data.getJohansenError();
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º trace statistic - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
                if (data.getJohansenTraceStatistic() <= data.getJohansenCriticalValue95()) {
                    return String.format("–°–ª–∞–±–∞—è –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (Johansen): trace=%.2f ‚â§ critical=%.2f",
                            data.getJohansenTraceStatistic(), data.getJohansenCriticalValue95());
                }
            }

            log.debug("‚úÖ –ü–∞—Ä–∞ {}/{} –ø—Ä–æ—à–ª–∞ Johansen —Ç–µ—Å—Ç (p-value={})",
                    data.getUnderValuedTicker(), data.getOverValuedTicker(),
                    NumberFormatter.format(johansenPValue, 6)); // Use NumberFormatter
            return null; // –ü—Ä–æ—à–ª–∏ Johansen —Ç–µ—Å—Ç
        }

        // –ü–†–ò–û–†–ò–¢–ï–¢ 2: Fallback –∫ ADF –µ—Å–ª–∏ –Ω–µ—Ç Johansen –¥–∞–Ω–Ω—ã—Ö
        Double adfPValue = getAdfPValue(data, params);
        if (adfPValue == null) {
            log.debug("‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ADF p-value –¥–ª—è –ø–∞—Ä—ã {}/{}", data.getUnderValuedTicker(), data.getOverValuedTicker());
            return "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç cointegration p-value"; // Return reason for filtering
        }

        // –î–ª—è ADF —Ç–µ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å –º–∏–Ω–∏–º—É–º–æ–º –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        double adfThreshold = Math.max(settings.getMaxAdfValue(), 0.1); // –ú–∏–Ω–∏–º—É–º 0.1 –¥–ª—è crypto

        if (adfPValue > adfThreshold) {
            return String.format("–°–ª–∞–±–∞—è –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (ADF): p-value=%s > %.6f",
                    NumberFormatter.format(adfPValue, 6), adfThreshold); // Use NumberFormatter
        }

        log.debug("‚úÖ –ü–∞—Ä–∞ {}/{} –ø—Ä–æ—à–ª–∞ ADF —Ç–µ—Å—Ç (p-value={})",
                data.getUnderValuedTicker(), data.getOverValuedTicker(),
                NumberFormatter.format(adfPValue, 6)); // Use NumberFormatter
        return null;
    }

    private String checkRSquared(ZScoreData data, Settings settings) {
        Double rSquared = getRSquared(data);
        if (rSquared == null) {
            return "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç R-squared";
        }

        if (rSquared < settings.getMinRSquared()) {
            return String.format("–°–ª–∞–±–∞—è –º–æ–¥–µ–ª—å: R¬≤=%.4f < %.4f", rSquared, settings.getMinRSquared());
        }

        return null;
    }

    private String checkCointegrationStability(ZScoreData data, List<ZScoreParam> params, Settings settings) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ DataQuality –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        if (data.getStablePeriods() != null && data.getTotalObservations() != null) {
            if (data.getTotalObservations() > 0) {
                double stabilityRatio = (double) data.getStablePeriods() / data.getTotalObservations();
                double minStabilityRatio = 0.7; // 70% —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤

                if (stabilityRatio < minStabilityRatio) {
                    return String.format("–ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞—è –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: %.1f%% < %.1f%%",
                            stabilityRatio * 100, minStabilityRatio * 100);
                }
            }
            return null;
        }

        // Fallback –∫ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        if (params == null || params.size() < 100) {
            return null; // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        }

        int windowSize = (int) settings.getMinWindowSize();
        int stableWindows = 0;
        int totalWindows = 0;

        for (int i = windowSize; i <= params.size(); i += windowSize / 2) {
            List<ZScoreParam> window = params.subList(Math.max(0, i - windowSize), i);

            double avgAdfPValue = window.stream()
                    .filter(p -> p.getAdfpvalue() != 0)
                    .mapToDouble(ZScoreParam::getAdfpvalue)
                    .average()
                    .orElse(1.0);

            totalWindows++;
            if (avgAdfPValue < 0.05) {
                stableWindows++;
            }
        }

        double stabilityRatio = (double) stableWindows / totalWindows;
        double minStabilityRatio = 0.7;

        if (stabilityRatio < minStabilityRatio) {
            return String.format("–ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞—è –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: %.2f%% < %.2f%%",
                    stabilityRatio * 100, minStabilityRatio * 100);
        }

        return null;
    }

    private String checkCorrelationSignificance(ZScoreData data, List<ZScoreParam> params, Settings settings) {
        Double pValue = getCorrelationPValue(data, params);

        if (pValue == null) {
            return "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç correlation p-value";
        }

        if (pValue > settings.getMaxPValue()) {
            return String.format("–ù–µ–∑–Ω–∞—á–∏–º–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: p-value=%.6f > %.6f",
                    pValue, settings.getMaxPValue());
        }

        return null;
    }

    private String checkCorrelation(ZScoreData data, Settings settings) {
        Double correlation = data.getPearsonCorr();
        if (correlation == null) {
            return "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è";
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        double absCorrelation = Math.abs(correlation);
        if (absCorrelation < settings.getMinCorrelation()) {
            return String.format("–°–ª–∞–±–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: |%.4f| < %.4f",
                    correlation, settings.getMinCorrelation());
        }

        return null;
    }

    private String checkZScoreSignal(ZScoreData data, List<ZScoreParam> params, Settings settings) {
        double lastZScore = getLatestZScore(data, params);

        // –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ Z-Score - –æ–Ω–∏ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π —Ç–∏–∫–µ—Ä–æ–≤
        if (lastZScore < 0) {
            return String.format("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π Z-score: %.2f (—Ä–æ–ª–∏ —Ç–∏–∫–µ—Ä–æ–≤ –ø–µ—Ä–µ–ø—É—Ç–∞–Ω—ã)", lastZScore);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ Z-Score –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        if (lastZScore < settings.getMinZ()) {
            return String.format("–°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª: Z-score=%.2f < %.2f", lastZScore, settings.getMinZ());
        }

        return null;
    }

    private String checkAdditionalTradingFilters(ZScoreData data, List<ZScoreParam> params, Settings settings) {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏

        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ Z-Score (–º–æ–≥—É—Ç –±—ã—Ç—å –≤—ã–±—Ä–æ—Å–∞–º–∏)
        double lastZScore = getLatestZScore(data, params);
        if (Math.abs(lastZScore) > 5.0) {
            return String.format("–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π Z-score: %.2f", lastZScore);
        }

        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–Ω–¥–∞ Z-Score (–Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã–º)
        if (params != null && params.size() >= 10) {
            double zScoreVolatility = calculateZScoreVolatility(params);
            if (zScoreVolatility > 10.0) {
                return String.format("–í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å Z-score: %.2f", zScoreVolatility);
            }
        }

        return null;
    }

    // ============ –£–¢–ò–õ–ò–¢–ù–´–ï –ú–ï–¢–û–î–´ ============

    private Double getAdfPValue(ZScoreData data, List<ZScoreParam> params) {
        if (params != null && !params.isEmpty()) {
            // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç API
            ZScoreParam lastParam = params.get(params.size() - 1);
            return lastParam.getAdfpvalue();
        } else {
            // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç API - –∏—Å–ø–æ–ª—å–∑—É–µ–º avgAdfPvalue –¥–ª—è ADF —Ç–µ—Å—Ç–∞
            return data.getAvgAdfPvalue();
        }
    }

    private Double getCorrelationPValue(ZScoreData data, List<ZScoreParam> params) {
        if (params != null && !params.isEmpty()) {
            // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç API
            ZScoreParam lastParam = params.get(params.size() - 1);
            return lastParam.getPvalue();
        } else {
            // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç API
            return data.getPearsonCorrPValue();
        }
    }

    private double getLatestZScore(ZScoreData data, List<ZScoreParam> params) {
        if (params != null && !params.isEmpty()) {
            // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç API
            return params.get(params.size() - 1).getZscore();
        } else if (data.getLatestZScore() != null) {
            // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç API
            return data.getLatestZScore();
        } else {
            return 0.0;
        }
    }

    private Double getRSquared(ZScoreData data) {
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
        if (data.getAvgRSquared() != null) {
            return data.getAvgRSquared();
        }

        return null;
    }

    private double calculateZScoreVolatility(List<ZScoreParam> params) {
        if (params.size() < 10) return 0.0;

        // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–Ω–∞—á–µ–Ω–∏–π Z-Score
        List<Double> recentZScores = params.subList(params.size() - 10, params.size())
                .stream()
                .map(ZScoreParam::getZscore)
                .toList();

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
        double mean = recentZScores.stream().mapToDouble(Double::doubleValue).average().orElse(0.0);
        double variance = recentZScores.stream()
                .mapToDouble(z -> Math.pow(z - mean, 2))
                .average()
                .orElse(0.0);

        return Math.sqrt(variance);
    }

    // ============ –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê –û–¶–ï–ù–ö–ò –ö–ê–ß–ï–°–¢–í–ê –ü–ê–† ============

    /**
     * –ü–£–ë–õ–ò–ß–ù–´–ô –ú–ï–¢–û–î –¥–ª—è ObtainBestPairServiceV2
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–∫–æ—Ä –ø–∞—Ä—ã —Å –ö–û–ù–§–ò–ì–£–†–ò–†–£–ï–ú–´–ú–ò –í–ï–°–ê–ú–ò –∏–∑ Settings
     * 
     * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∫–æ—Ä–∞ (–≤–µ—Å–∞ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ UI):
     * - Z-Score —Å–∏–ª–∞ - –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
     * - –ü–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ - –≤–∞–∂–Ω–æ—Å—Ç—å —Ä–∞–∑–¥–≤–∏–∂–∫–∏ —Ü–µ–Ω  
     * - –ö–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è - Johansen + ADF —Ç–µ—Å—Ç—ã
     * - –ö–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏ - R-squared + —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
     * - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - P-values –∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
     * - –ë–æ–Ω—É—Å—ã - –∑–∞ –ø–æ–ª–Ω–æ—Ç—É –¥–∞–Ω–Ω—ã—Ö
     */
    public double calculatePairQualityScore(ZScoreData data, Settings settings) {
        return calculatePairQualityScoreInternal(data, settings);
    }

    /**
     * –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–æ—Ä–∞
     */
    private double calculatePairQualityScoreInternal(ZScoreData data, Settings settings) {
        double totalScore = 0.0;
        List<ZScoreParam> params = data.getZScoreHistory();
        String pairName = data.getUnderValuedTicker() + "/" + data.getOverValuedTicker();

        log.info("üéØ –†–∞—Å—Å—á–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–∫–æ—Ä–∞ –¥–ª—è {} —Å –ù–ê–°–¢–†–ê–ò–í–ê–ï–ú–´–ú–ò –≤–µ—Å–∞–º–∏", pairName);

        // ====== 1. Z-SCORE –°–ò–õ–ê (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –≤–µ—Å) ======
        if (settings.isUseZScoreScoring()) {
            double zScore = getLatestZScore(data, params);
            double maxWeight = settings.getZScoreScoringWeight();
            double zScorePoints = Math.min(Math.abs(zScore) * (maxWeight / 5.0), maxWeight); // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ –≤–µ—Å—É
            totalScore += zScorePoints;
            log.info("  üéØ Z-Score –∫–æ–º–ø–æ–Ω–µ–Ω—Ç: {} –æ—á–∫–æ–≤ (Z-score={}, –≤–µ—Å={})",
                    NumberFormatter.format(zScorePoints, 1), NumberFormatter.format(zScore, 2), maxWeight);
        }

        // ====== 2. –ü–ò–ö–°–ï–õ–¨–ù–´–ô –°–ü–†–ï–î (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –≤–µ—Å, –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç!) ======
        if (settings.isUsePixelSpreadScoring()) {
            double pixelSpreadScore = calculatePixelSpreadScoreComponent(data, settings);
            totalScore += pixelSpreadScore;
            log.info("  üìè –ü–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: {} –æ—á–∫–æ–≤ (–≤–µ—Å={})",
                    NumberFormatter.format(pixelSpreadScore, 1), settings.getPixelSpreadScoringWeight());
        }

        // ====== 3. –ö–û–ò–ù–¢–ï–ì–†–ê–¶–ò–Ø (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –≤–µ—Å) ======
        if (settings.isUseCointegrationScoring()) {
            double cointegrationScore = calculateCointegrationScoreComponent(data, params, settings);
            totalScore += cointegrationScore;
            log.info("  üî¨ –ö–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {} –æ—á–∫–æ–≤ (–≤–µ—Å={})",
                    NumberFormatter.format(cointegrationScore, 1), settings.getCointegrationScoringWeight());
        }

        // ====== 4. –ö–ê–ß–ï–°–¢–í–û –ú–û–î–ï–õ–ò (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –≤–µ—Å) ======
        if (settings.isUseModelQualityScoring()) {
            double modelQualityScore = calculateModelQualityScoreComponent(data, params, settings);
            totalScore += modelQualityScore;
            log.info("  üìä –ö–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏: {} –æ—á–∫–æ–≤ (–≤–µ—Å={})",
                    NumberFormatter.format(modelQualityScore, 1), settings.getModelQualityScoringWeight());
        }

        // ====== 5. –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ê–Ø –ó–ù–ê–ß–ò–ú–û–°–¢–¨ (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –≤–µ—Å) ======
        if (settings.isUseStatisticsScoring()) {
            double statisticalScore = calculateStatisticalSignificanceScoreComponent(data, params, settings);
            totalScore += statisticalScore;
            log.info("  üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {} –æ—á–∫–æ–≤ (–≤–µ—Å={})",
                    NumberFormatter.format(statisticalScore, 1), settings.getStatisticsScoringWeight());
        }

        // ====== 6. –ë–û–ù–£–°–´ (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –≤–µ—Å) ======
        if (settings.isUseBonusScoring()) {
            double bonusScore = calculateBonusScoreComponent(data, settings);
            totalScore += bonusScore;
            log.info("  üéÅ –ë–æ–Ω—É—Å—ã: {} –æ—á–∫–æ–≤ (–≤–µ—Å={})",
                    NumberFormatter.format(bonusScore, 1), settings.getBonusScoringWeight());
        }

        log.info("üèÜ –ò—Ç–æ–≥–æ–≤—ã–π —Å–∫–æ—Ä –¥–ª—è {}: {} –æ—á–∫–æ–≤ (–ù–ê–°–¢–†–ê–ò–í–ê–ï–ú–´–ï –í–ï–°–ê)", pairName, NumberFormatter.format(totalScore, 1));
        return totalScore; // –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ 100 –æ—á–∫–æ–≤ - —Ç–µ–ø–µ—Ä—å —Å—É–º–º–∞ –≤–µ—Å–æ–≤ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è
    }

    /**
     * –ù–û–í–´–ô –ö–û–ú–ü–û–ù–ï–ù–¢: –†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–∞ –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ–ª–Ω—ã–π –≤–µ—Å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 25 –æ—á–∫–æ–≤ = —Ä–∞–≤–Ω–æ Johansen/ADF)
     */
    private double calculatePixelSpreadScoreComponent(ZScoreData data, Settings settings) {
        try {
            // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é PairData –ø–æ —Ç–∏–∫–µ—Ä–∞–º
            String longTicker = data.getUnderValuedTicker();  // undervalued = long
            String shortTicker = data.getOverValuedTicker(); // overvalued = short

            // –ü–æ–ª—É—á–∞–µ–º PairData –∏–∑ –±–∞–∑—ã (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
            var existingPairs = pairDataService.findByTickers(longTicker, shortTicker);

            if (!existingPairs.isEmpty()) {
                var pairData = existingPairs.get(0);

                // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞
                double avgSpread = pixelSpreadService.getAveragePixelSpread(pairData);
                double maxSpread = pixelSpreadService.getMaxPixelSpread(pairData);

                if (avgSpread > 0) {
                    double maxWeight = settings.getPixelSpreadScoringWeight();
                    
                    // –õ–æ–≥–∏–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ (–Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞ –ø–æ–ª–Ω—ã–π –≤–µ—Å):
                    // avg < 20px: 0% –æ—Ç –≤–µ—Å–∞
                    // avg 20-40px: 25-50% –æ—Ç –≤–µ—Å–∞  
                    // avg 40-80px: 50-75% –æ—Ç –≤–µ—Å–∞
                    // avg > 80px: 75-100% –æ—Ç –≤–µ—Å–∞
                    double scoreRatio;
                    if (avgSpread < 20) {
                        scoreRatio = 0.0;
                    } else if (avgSpread < 40) {
                        scoreRatio = 0.25 + (avgSpread - 20) / 20 * 0.25; // 25-50%
                    } else if (avgSpread < 80) {
                        scoreRatio = 0.50 + (avgSpread - 40) / 40 * 0.25; // 50-75%
                    } else {
                        scoreRatio = 0.75 + Math.min((avgSpread - 80) / 40, 1.0) * 0.25; // 75-100%
                    }

                    // –ë–æ–Ω—É—Å –∑–∞ –≤—ã—Å–æ–∫–∏–π –º–∞–∫—Å–∏–º—É–º (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å)
                    if (maxSpread > 100) {
                        scoreRatio = Math.min(scoreRatio + 0.1, 1.0); // +10% –±–æ–Ω—É—Å
                    }

                    double totalScore = maxWeight * scoreRatio;

                    log.info("    üìè –ü–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: avg={:.1f}px, max={:.1f}px ‚Üí {:.1f} –±–∞–ª–ª–æ–≤ ({:.0f}% –æ—Ç {})",
                            avgSpread, maxSpread, totalScore, scoreRatio * 100, maxWeight);

                    return totalScore;
                }
            }

            return 0.0; // –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–∏–∫—Å–µ–ª—å–Ω–æ–º —Å–ø—Ä–µ–¥–µ

        } catch (Exception e) {
            log.warn("    üìè –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–æ—Ä–∞ –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞: {}", e.getMessage());
            return 0.0;
        }
    }

    /**
     * –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ê–Ø –°–ò–°–¢–ï–ú–ê –í–ï–°–û–í –¥–ª—è –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –≤–µ—Å)
     * <p>
     * –ü—Ä–∏–Ω—Ü–∏–ø: —Ä–∞–≤–Ω—ã–µ –≤–µ—Å–∞ –∫–æ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –æ–±–∞ —Ç–µ—Å—Ç–∞, –ø–æ–ª–Ω—ã–π –≤–µ—Å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–º—É –¥–æ—Å—Ç—É–ø–Ω–æ–º—É
     * - Johansen + ADF –¥–æ—Å—Ç—É–ø–Ω—ã: 50% + 50% –æ—Ç –≤–µ—Å–∞
     * - –¢–æ–ª—å–∫–æ Johansen: 100% –æ—Ç –≤–µ—Å–∞
     * - –¢–æ–ª—å–∫–æ ADF: 100% –æ—Ç –≤–µ—Å–∞
     * - –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö: 0 –æ—á–∫–æ–≤
     */
    private double calculateCointegrationScoreComponent(ZScoreData data, List<ZScoreParam> params, Settings settings) {
        boolean hasJohansen = data.getJohansenCointPValue() != null && data.getJohansenCointPValue() > 0;
        boolean hasAdf = getAdfPValue(data, params) != null && getAdfPValue(data, params) > 0;

        String pairName = data.getUnderValuedTicker() + "/" + data.getOverValuedTicker();

        if (!hasJohansen && !hasAdf) {
            log.info("  üî¨ {}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏", pairName);
            return 0.0;
        }

        double maxWeight = settings.getCointegrationScoringWeight();
        double score = 0.0;

        if (hasJohansen && hasAdf) {
            // –û–ë–ê –¢–ï–°–¢–ê –î–û–°–¢–£–ü–ù–´ - —Ä–∞–≤–Ω—ã–µ –≤–µ—Å–∞ –ø–æ 50% –æ—Ç –ø–æ–ª–Ω–æ–≥–æ –≤–µ—Å–∞
            log.info("  üî¨ {}: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –≤–µ—Å–∞ - –æ–±–∞ —Ç–µ—Å—Ç–∞ ({}+{})", pairName, maxWeight/2, maxWeight/2);

            // Johansen (50% –æ—Ç –≤–µ—Å–∞)
            double johansenPValue = data.getJohansenCointPValue();
            double johansenScore = Math.max(0, (0.05 - johansenPValue) / 0.05) * (maxWeight / 2.0);
            score += johansenScore;

            // ADF (50% –æ—Ç –≤–µ—Å–∞)
            Double adfPValue = getAdfPValue(data, params);
            double adfScore = Math.max(0, (0.05 - Math.min(adfPValue, 0.05)) / 0.05) * (maxWeight / 2.0);
            score += adfScore;

            log.info("    Johansen: {} –æ—á–∫–æ–≤ (p-value={})",
                    NumberFormatter.format(johansenScore, 1),
                    NumberFormatter.format(johansenPValue, 6));
            log.info("    ADF: {} –æ—á–∫–æ–≤ (p-value={})",
                    NumberFormatter.format(adfScore, 1),
                    NumberFormatter.format(adfPValue, 6));

        } else if (hasJohansen) {
            // –¢–û–õ–¨–ö–û JOHANSEN - –ø–æ–ª–Ω—ã–π –≤–µ—Å
            log.info("  üî¨ {}: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –≤–µ—Å–∞ - —Ç–æ–ª—å–∫–æ Johansen ({})", pairName, maxWeight);

            double johansenPValue = data.getJohansenCointPValue();
            double johansenScore = Math.max(0, (0.05 - johansenPValue) / 0.05) * maxWeight;
            score += johansenScore;

            log.info("    Johansen: {} –æ—á–∫–æ–≤ (p-value={})",
                    NumberFormatter.format(johansenScore, 1),
                    NumberFormatter.format(johansenPValue, 6));

        } else if (hasAdf) {
            // –¢–û–õ–¨–ö–û ADF - –ø–æ–ª–Ω—ã–π –≤–µ—Å
            log.info("  üî¨ {}: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –≤–µ—Å–∞ - —Ç–æ–ª—å–∫–æ ADF ({})", pairName, maxWeight);

            Double adfPValue = getAdfPValue(data, params);
            double adfScore = Math.max(0, (0.05 - Math.min(adfPValue, 0.05)) / 0.05) * maxWeight;
            score += adfScore;

            log.info("    ADF: {} –æ—á–∫–æ–≤ (p-value={})",
                    NumberFormatter.format(adfScore, 1),
                    NumberFormatter.format(adfPValue, 6));
        }

        // –ù–µ–±–æ–ª—å—à–æ–π –±–æ–Ω—É—Å –∑–∞ trace statistic (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å Johansen) - 5% –æ—Ç –≤–µ—Å–∞
        if (hasJohansen && data.getJohansenTraceStatistic() != null && data.getJohansenCriticalValue95() != null) {
            if (data.getJohansenTraceStatistic() > data.getJohansenCriticalValue95()) {
                double traceBonus = maxWeight * 0.05; // 5% –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤–µ—Å–∞
                score += traceBonus;
                log.info("    –ë–æ–Ω—É—Å trace statistic: +{} –æ—á–∫–æ–≤", NumberFormatter.format(traceBonus, 1));
            }
        }

        return score; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–∫–æ—Ä –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    }

    private double calculateModelQualityScoreComponent(ZScoreData data, List<ZScoreParam> params, Settings settings) {
        double maxWeight = settings.getModelQualityScoringWeight();
        double score = 0.0;

        // R-squared (75% –æ—Ç –≤–µ—Å–∞)
        Double rSquared = getRSquared(data);
        if (rSquared != null && rSquared > 0) {
            score += rSquared * (maxWeight * 0.75); // 75% –æ—Ç –≤–µ—Å–∞ –ø—Ä–∏ R¬≤ = 1.0
        }

        // –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å (25% –æ—Ç –≤–µ—Å–∞)
        if (data.getStablePeriods() != null && data.getTotalObservations() != null && data.getTotalObservations() > 0) {
            double stabilityRatio = (double) data.getStablePeriods() / data.getTotalObservations();
            score += stabilityRatio * (maxWeight * 0.25); // 25% –æ—Ç –≤–µ—Å–∞
        }

        return score;
    }

    private double calculateStatisticalSignificanceScoreComponent(ZScoreData data, List<ZScoreParam> params, Settings settings) {
        double maxWeight = settings.getStatisticsScoringWeight();
        double score = 0.0;

        // Pearson –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è P-value (50% –æ—Ç –≤–µ—Å–∞)
        Double pearsonPValue = getCorrelationPValue(data, params);
        if (pearsonPValue != null && pearsonPValue >= 0) {
            score += Math.max(0, (0.05 - Math.min(pearsonPValue, 0.05)) / 0.05) * (maxWeight * 0.5);
        }

        // –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å–∏–ª–∞ (50% –æ—Ç –≤–µ—Å–∞)
        if (data.getPearsonCorr() != null) {
            double absCorr = Math.abs(data.getPearsonCorr());
            score += Math.min(absCorr, 1.0) * (maxWeight * 0.5);
        }

        return score;
    }

    private double calculateBonusScoreComponent(ZScoreData data, Settings settings) {
        double maxWeight = settings.getBonusScoringWeight();
        double bonusScore = 0.0;

        // –ë–æ–Ω—É—Å –∑–∞ –ø–æ–ª–Ω–æ—Ç—É –¥–∞–Ω–Ω—ã—Ö Johansen (30% –æ—Ç –≤–µ—Å–∞)
        if (data.getJohansenCointPValue() != null && data.getJohansenTraceStatistic() != null) {
            bonusScore += maxWeight * 0.3;
        }

        // –ë–æ–Ω—É—Å –∑–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å (20% –æ—Ç –≤–µ—Å–∞)
        if (data.getStablePeriods() != null && data.getTotalObservations() != null) {
            bonusScore += maxWeight * 0.2;
        }

        // –ë–æ–Ω—É—Å –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏ (30% –æ—Ç –≤–µ—Å–∞)
        if (data.getAvgRSquared() != null && data.getAvgRSquared() > 0.8) {
            bonusScore += maxWeight * 0.3;
        }

        // –ó–ê–ú–ï–¢–ö–ê: –ü–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ —Ç–µ–ø–µ—Ä—å –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç!
        // –û–Ω –±–æ–ª—å—à–µ –Ω–µ –≤ –±–æ–Ω—É—Å–∞—Ö, –∞ –∏–º–µ–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–µ—Å —Ä–∞–≤–Ω—ã–π Johansen/ADF

        return bonusScore;
    }


    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
     */
    private void logFilteringStatistics(List<ZScoreData> originalList, List<ZScoreData> filteredList, Settings settings) {
        int total = originalList.size();
        int remaining = filteredList.size();
        int filtered = total - remaining;

        log.info("üìà === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –§–ò–õ–¨–¢–†–ê–¶–ò–ò –ü–ê–†–´ ===");
        log.info("üìä –í—Å–µ–≥–æ –ø–∞—Ä: {}", total);
        log.info("‚úÖ –ü—Ä–æ—à–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã: {} ({}%)", remaining, String.format("%.1f", (remaining * 100.0 / total)));
        log.info("‚ùå –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {} ({}%)", filtered, String.format("%.1f", (filtered * 100.0 / total)));

        // –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–∞—Ä
        if (!filteredList.isEmpty()) {
            analyzeRemainingPairs(filteredList);
        }

        log.info("‚öôÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã (—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è):");
        if (settings.isUseMaxAdfValueFilter())
            log.info("   üî¨ –ö–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: Johansen p-value < 0.05, ADF p-value < {}", settings.getMaxAdfValue()); //todo –≤—ã–ø–∏–ª–∏—Ç—å —Ö–∞—Ä–¥–∫–æ–¥ 0.05
        if (settings.isUseMinRSquaredFilter())
            log.info("   üìà R-squared: > {}", settings.getMinRSquared());
        if (settings.isUseMinCorrelationFilter())
            log.info("   üîó –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è: |–∑–Ω–∞—á–µ–Ω–∏–µ| > {}", settings.getMinCorrelation());
        if (settings.isUseMaxPValueFilter())
            log.info("   üìä P-value –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: < {}", settings.getMaxPValue());
        if (settings.isUseMinZFilter())
            log.info("   ‚ö° Z-Score: –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –∏ > {}", settings.getMinZ());
        log.info("   üö´ –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ Z-Score –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏");
        log.info("   üéØ –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ ObtainBestPairServiceV2 –ø–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–º—É —Å–∫–æ—Ä—É (–≤–º–µ—Å—Ç–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤)");
    }

    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–∞—Ä –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
     */
    private void analyzeRemainingPairs(List<ZScoreData> filteredList) {
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Z-Score
        double avgZScore = filteredList.stream()
                .mapToDouble(d -> Math.abs(getLatestZScore(d, d.getZScoreHistory())))
                .average().orElse(0.0);

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        double avgCorrelation = filteredList.stream()
                .filter(d -> d.getPearsonCorr() != null)
                .mapToDouble(d -> Math.abs(d.getPearsonCorr()))
                .average().orElse(0.0);

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ R-squared
        double avgRSquared = filteredList.stream()
                .map(this::getRSquared)
                .filter(Objects::nonNull)
                .mapToDouble(Double::doubleValue)
                .average().orElse(0.0);

        // –ü–æ–¥—Å—á–µ—Ç –ø–∞—Ä —Å Johansen —Ç–µ—Å—Ç–æ–º
        long johansenPairs = filteredList.stream()
                .filter(d -> d.getJohansenCointPValue() != null)
                .count();

        log.info("üìã –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä:");
        log.info("   üìä –°—Ä–µ–¥–Ω–∏–π |Z-Score|: {}", String.format("%.2f", avgZScore));
        log.info("   üîó –°—Ä–µ–¥–Ω—è—è |–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è|: {}", String.format("%.3f", avgCorrelation));
        log.info("   üìà –°—Ä–µ–¥–Ω–∏–π R¬≤: {}", String.format("%.3f", avgRSquared));
        log.info("   üî¨ –ü–∞—Ä—ã —Å Johansen —Ç–µ—Å—Ç–æ–º: {}/{} ({}%)",
                johansenPairs, filteredList.size(), String.format("%.1f", (johansenPairs * 100.0 / filteredList.size())));
    }
}
