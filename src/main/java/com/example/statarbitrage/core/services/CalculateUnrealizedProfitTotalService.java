package com.example.statarbitrage.core.services;

import com.example.statarbitrage.common.model.PairData;
import com.example.statarbitrage.common.model.TradeStatus;
import com.example.statarbitrage.core.repositories.PairDataRepository;
import com.example.statarbitrage.trading.model.Position;
import com.example.statarbitrage.trading.model.Positioninfo;
import com.example.statarbitrage.trading.services.TradingIntegrationService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.List;
import java.util.Objects;

@Slf4j
@Service
@RequiredArgsConstructor
public class CalculateUnrealizedProfitTotalService {
    private final PairDataRepository pairDataRepository;
    private final TradingIntegrationService tradingIntegrationService;

    public BigDecimal getUnrealizedProfitPercentTotal() {
        List<PairData> tradingPairs = pairDataRepository.findAllByStatusOrderByEntryTimeDesc(TradeStatus.TRADING);

        BigDecimal totalWeightedProfit = BigDecimal.ZERO;
        BigDecimal totalAllocatedAmount = BigDecimal.ZERO;

        for (PairData pair : tradingPairs) {
            try {
                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏—è—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–∞—Ä—ã
                Positioninfo positionInfo = tradingIntegrationService.getPositionInfo(pair);

                if (positionInfo == null) {
                    log.warn("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∑–∏—Ü–∏—è—Ö –¥–ª—è –ø–∞—Ä—ã {}", pair.getPairName());
                    continue;
                }

                Position longPosition = positionInfo.getLongPosition();
                Position shortPosition = positionInfo.getShortPosition();

                if (longPosition == null || shortPosition == null) {
                    log.warn("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–∞—Ä—ã {}: long={}, short={}",
                            pair.getPairName(), longPosition != null, shortPosition != null);
                    continue;
                }

                // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ allocated amounts
                BigDecimal longAlloc = safeGet(longPosition.getAllocatedAmount());
                BigDecimal shortAlloc = safeGet(shortPosition.getAllocatedAmount());
                BigDecimal pairTotalAlloc = longAlloc.add(shortAlloc);

                if (pairTotalAlloc.compareTo(BigDecimal.ZERO) <= 0) {
                    log.warn("‚ö†Ô∏è –ù—É–ª–µ–≤–æ–µ allocatedAmount –¥–ª—è –ø–∞—Ä—ã {}", pair.getPairName());
                    continue;
                }

                // –í–∑–≤–µ—à–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç –¥–ª—è –ø–∞—Ä—ã: (P1 * A1 + P2 * A2) / (A1 + A2)
                BigDecimal longPnlPercent = safeGet(longPosition.getUnrealizedPnLPercent());
                BigDecimal shortPnlPercent = safeGet(shortPosition.getUnrealizedPnLPercent());

                BigDecimal pairWeightedPnlPercent = longPnlPercent.multiply(longAlloc)
                        .add(shortPnlPercent.multiply(shortAlloc))
                        .divide(pairTotalAlloc, 8, RoundingMode.HALF_UP);

                // –î–æ–±–∞–≤–ª—è–µ–º –∫ –æ–±—â–∏–º —Å—É–º–º–∞–º
                totalWeightedProfit = totalWeightedProfit.add(pairWeightedPnlPercent.multiply(pairTotalAlloc));
                totalAllocatedAmount = totalAllocatedAmount.add(pairTotalAlloc);

                log.info("üìä –ü–∞—Ä–∞ {}: allocatedAmount={}, weightedPnL%={}",
                        pair.getPairName(), pairTotalAlloc, pairWeightedPnlPercent);

            } catch (Exception e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ø—Ä–æ—Ñ–∏—Ç–∞ –¥–ª—è –ø–∞—Ä—ã {}: {}", pair.getPairName(), e.getMessage());
            }
        }

        // –û–±—â–∏–π –≤–∑–≤–µ—à–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç
        if (totalAllocatedAmount.compareTo(BigDecimal.ZERO) > 0) {
            BigDecimal result = totalWeightedProfit.divide(totalAllocatedAmount, 8, RoundingMode.HALF_UP);
            log.info("‚úÖ –û–±—â–∏–π –≤–∑–≤–µ—à–µ–Ω–Ω—ã–π PnL%: {} (totalAllocated: {})", result, totalAllocatedAmount);
            return result;
        } else {
            log.warn("‚ö†Ô∏è –û–±—â–∏–π allocatedAmount —Ä–∞–≤–µ–Ω –Ω—É–ª—é");
            return BigDecimal.ZERO;
        }
    }

    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å –∑–∞–º–µ–Ω–æ–π null –Ω–∞ ZERO
     */
    private BigDecimal safeGet(BigDecimal value) {
        return value != null ? value : BigDecimal.ZERO;
    }

    public BigDecimal getUnrealizedProfitUSDTTotal() {
        List<PairData> tradingPairs = pairDataRepository.findAllByStatusOrderByEntryTimeDesc(TradeStatus.TRADING);
        return tradingPairs.stream()
                .map(PairData::getProfitUSDTChanges)
                .filter(Objects::nonNull)
                .reduce(BigDecimal.ZERO, BigDecimal::add);
    }
}
