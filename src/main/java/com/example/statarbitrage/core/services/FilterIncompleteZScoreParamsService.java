package com.example.statarbitrage.core.services;

import com.example.statarbitrage.common.dto.ZScoreData;
import com.example.statarbitrage.common.dto.ZScoreParam;
import com.example.statarbitrage.common.model.PairData;
import com.example.statarbitrage.common.model.Settings;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Slf4j
@Service
@RequiredArgsConstructor
public class FilterIncompleteZScoreParamsService {
    private final PairDataService pairDataService;

    /**
     * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä –¥–ª—è –ø–∞—Ä–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞
     * –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     * –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Johansen —Ç–µ—Å—Ç–∞ –∏ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ Python API
     */
    public void filter(PairData pairData, List<ZScoreData> zScoreDataList, Settings settings) {
        double expected = settings.getExpectedZParamsCount();

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        analyzeInputData(zScoreDataList);

        log.info("üîç –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π: {}, –≤—Å–µ–≥–æ –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {}", expected, zScoreDataList.size());

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ø–∏—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        List<ZScoreData> originalList = List.copyOf(zScoreDataList);
        int before = zScoreDataList.size();
        Map<String, Integer> filterStats = new HashMap<>();

        zScoreDataList.removeIf(data -> {
            String reason = shouldFilterPair(data, settings, expected);
            if (reason != null) {
                filterStats.merge(reason, 1, Integer::sum);
                // –£–¥–∞–ª—è–µ–º PairData —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–∫–æ–≥–¥–∞ pairData == null)
                // –ü—Ä–∏ –µ–¥–∏–Ω–∏—á–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–¥–ª—è –Ω–æ–≤—ã—Ö —Ç—Ä–µ–π–¥–æ–≤) PairData –Ω–µ —É–¥–∞–ª—è–µ–º
                log.debug("‚ö†Ô∏è –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {}/{} ‚Äî {}",
                        data.getUndervaluedTicker(), data.getOvervaluedTicker(), reason);
                return true;
            }
            return false;
        });

        int after = zScoreDataList.size();
        log.info("‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {} ‚Üí {} –ø–∞—Ä", before, after);

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏—á–∏–Ω–∞–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        filterStats.forEach((reason, count) ->
                log.debug("üìä {}: {} –ø–∞—Ä", reason, count));

        // –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        logFilteringStatistics(originalList, zScoreDataList, settings);
    }

    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç API
     */
    private void analyzeInputData(List<ZScoreData> zScoreDataList) {
        if (zScoreDataList.isEmpty()) return;

        ZScoreData sample = zScoreDataList.get(0);
        boolean hasOldFormat = sample.getZscoreHistory() != null && !sample.getZscoreHistory().isEmpty();
        boolean hasNewFormat = sample.getLatestZscore() != null;
        boolean hasJohansenData = sample.getCointegrationPvalue() != null;

        log.info("üìã –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:");
        log.info("   üìä –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (zscoreParams): {}", hasOldFormat ? "‚úÖ" : "‚ùå");
        log.info("   üÜï –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç (latest_zscore): {}", hasNewFormat ? "‚úÖ" : "‚ùå");
        log.info("   üî¨ Johansen —Ç–µ—Å—Ç: {}", hasJohansenData ? "‚úÖ –î–û–°–¢–£–ü–ï–ù" : "‚ùå");

        if (hasJohansenData) {
            double minJohansenPValue = zScoreDataList.stream()
                    .filter(d -> d.getCointegrationPvalue() != null)
                    .mapToDouble(ZScoreData::getCointegrationPvalue)
                    .min()
                    .orElse(1.0);
            log.info("   üìà –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π Johansen p-value: {}", String.format("%.6f", minJohansenPValue));
        }
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ–ª–∂–Ω–∞ –ª–∏ –±—ã—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–∞ –ø–∞—Ä–∞
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏—á–∏–Ω—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ null –µ—Å–ª–∏ –ø–∞—Ä–∞ –ø—Ä–æ—à–ª–∞ –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
     */
    private String shouldFilterPair(ZScoreData data, Settings settings, double expectedSize) {
        List<ZScoreParam> params = data.getZscoreHistory();

        // ====== –≠–¢–ê–ü 1: –ë–´–°–¢–†–´–ï –ü–†–û–í–ï–†–ö–ò (–¥–µ—à–µ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏) ======

        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö
        if (isDataMissing(data, params)) {
            return "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ Z-score";
        }

        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤
        if (isTickersInvalid(data)) {
            return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã";
        }

        // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –≤—ã–±–æ—Ä–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ API)
        if (params != null && !params.isEmpty()) {
            int actualSize = params.size();
            if (actualSize < expectedSize) {
                return String.format("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π: %d < %.0f", actualSize, expectedSize);
            }
        }

        // ====== –≠–¢–ê–ü 2: –ö–û–ò–ù–¢–ï–ì–†–ê–¶–ò–Ø (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ!) ======

        // 4. Johansen/ADF —Ç–µ—Å—Ç –Ω–∞ –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é (–ü–†–ò–û–†–ò–¢–ï–¢!)
        if (settings.isUseMaxAdfValueFilter()) {
            String cointegrationReason = checkCointegration(data, params, settings);
            if (cointegrationReason != null) return cointegrationReason;
        }

        // ====== –≠–¢–ê–ü 3: –ö–ê–ß–ï–°–¢–í–û –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–û–ô –ú–û–î–ï–õ–ò ======

        // 5. R-squared (–æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏)
        if (settings.isUseMinRSquaredFilter()) {
            String rSquaredReason = checkRSquared(data, settings);
            if (rSquaredReason != null) return rSquaredReason;
        }

        // 6. –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –≤—Ä–µ–º–µ–Ω–∏
        if (settings.isUseCointegrationStabilityFilter()) {
            String stabilityReason = checkCointegrationStability(data, params, settings);
            if (stabilityReason != null) return stabilityReason;
        }

        // ====== –≠–¢–ê–ü 4: –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ê–Ø –ó–ù–ê–ß–ò–ú–û–°–¢–¨ ======

        // 7. P-value –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        if (settings.isUseMinPValueFilter()) {
            String pValueReason = checkCorrelationSignificance(data, params, settings);
            if (pValueReason != null) return pValueReason;
        }

        // 8. –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ - –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–æ–∂–Ω–æ–π!)
        if (settings.isUseMinCorrelationFilter()) {
            String correlationReason = checkCorrelation(data, settings);
            if (correlationReason != null) return correlationReason;
        }

        // ====== –≠–¢–ê–ü 5: –¢–û–†–ì–û–í–´–ï –°–ò–ì–ù–ê–õ–´ (–≤ –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—á–µ—Ä–µ–¥—å!) ======

        // 9. Z-Score —Ñ–∏–ª—å—Ç—Ä (—Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª)
        if (settings.isUseMinZFilter()) {
            String zScoreReason = checkZScoreSignal(data, params, settings);
            if (zScoreReason != null) return zScoreReason;
        }

        // 10. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        String tradingReason = checkAdditionalTradingFilters(data, params, settings);
        if (tradingReason != null) return tradingReason;

        return null; // –ü–∞—Ä–∞ –ø—Ä–æ—à–ª–∞ –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
    }

    // ============ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –§–ò–õ–¨–¢–†–ê–¶–ò–ò ============

    private boolean isDataMissing(ZScoreData data, List<ZScoreParam> params) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Z-score –¥–∞–Ω–Ω—ã—Ö –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        if (params != null && !params.isEmpty()) {
            return false; // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
        }
        return data.getLatestZscore() == null; // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ–º latest_zscore
    }

    private boolean isTickersInvalid(ZScoreData data) {
        return data.getUndervaluedTicker() == null ||
                data.getOvervaluedTicker() == null ||
                data.getUndervaluedTicker().isEmpty() ||
                data.getOvervaluedTicker().isEmpty() ||
                data.getUndervaluedTicker().equals(data.getOvervaluedTicker());
    }

    private String checkCointegration(ZScoreData data, List<ZScoreParam> params, Settings settings) {
        // –ü–†–ò–û–†–ò–¢–ï–¢ 1: Johansen —Ç–µ—Å—Ç (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        if (data.getCointegrationPvalue() != null) {
            Double johansenPValue = data.getCointegrationPvalue();
            log.debug("üî¨ Johansen p-value: {} –¥–ª—è –ø–∞—Ä—ã {}/{}",
                    String.format("%.6f", johansenPValue),
                    data.getUndervaluedTicker(),
                    data.getOvervaluedTicker());

            if (johansenPValue > settings.getMaxAdfValue()) {
                return String.format("–ù–ï –∫–æ–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã (Johansen): p-value=%.6f > %.6f",
                        johansenPValue, settings.getMaxAdfValue());
            }

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ Johansen —Ç–µ—Å—Ç–∞
            if (data.getTraceStatistic() != null) {
                if (data.getError() != null) {
                    return "–û—à–∏–±–∫–∞ –≤ Johansen —Ç–µ—Å—Ç–µ: " + data.getError();
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º trace statistic
                if (data.getTraceStatistic() != null && data.getCriticalValue95() != null) {
                    if (data.getTraceStatistic() <= data.getCriticalValue95()) {
                        return String.format("–°–ª–∞–±–∞—è –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (Johansen): trace=%.2f ‚â§ critical=%.2f",
                                data.getTraceStatistic(), data.getCriticalValue95());
                    }
                }
            }

            log.debug("‚úÖ –ü–∞—Ä–∞ {}/{} –ø—Ä–æ—à–ª–∞ Johansen —Ç–µ—Å—Ç",
                    data.getUndervaluedTicker(), data.getOvervaluedTicker());
            return null; // –ü—Ä–æ—à–ª–∏ Johansen —Ç–µ—Å—Ç
        }

        // –ü–†–ò–û–†–ò–¢–ï–¢ 2: Fallback –∫ ADF –µ—Å–ª–∏ –Ω–µ—Ç Johansen –¥–∞–Ω–Ω—ã—Ö
        Double adfPValue = getAdfPValue(data, params);
        if (adfPValue == null) {
            return "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç cointegration p-value";
        }

        // –î–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –º—è–≥–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ ADF
        double adfThreshold = Math.max(settings.getMaxAdfValue(), 0.15); // –ú–∏–Ω–∏–º—É–º 0.15 –¥–ª—è crypto

        if (adfPValue > adfThreshold) {
            return String.format("–°–ª–∞–±–∞—è –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (ADF): p-value=%.6f > %.6f",
                    adfPValue, adfThreshold);
        }

        log.debug("‚úÖ –ü–∞—Ä–∞ {}/{} –ø—Ä–æ—à–ª–∞ ADF —Ç–µ—Å—Ç",
                data.getUndervaluedTicker(), data.getOvervaluedTicker());
        return null;
    }

    private String checkRSquared(ZScoreData data, Settings settings) {
        Double rSquared = getRSquared(data);
        if (rSquared == null) {
            return "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç R-squared";
        }

        if (rSquared < settings.getMinRSquared()) {
            return String.format("–°–ª–∞–±–∞—è –º–æ–¥–µ–ª—å: R¬≤=%.4f < %.4f", rSquared, settings.getMinRSquared());
        }

        return null;
    }

    private String checkCointegrationStability(ZScoreData data, List<ZScoreParam> params, Settings settings) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ DataQuality –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        if (data.getStablePeriods() != null && data.getTotalObservations() != null) {
            if (data.getTotalObservations() > 0) {
                double stabilityRatio = (double) data.getStablePeriods() / data.getTotalObservations();
                double minStabilityRatio = 0.7; // 70% —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤

                if (stabilityRatio < minStabilityRatio) {
                    return String.format("–ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞—è –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: %.1f%% < %.1f%%",
                            stabilityRatio * 100, minStabilityRatio * 100);
                }
            }
            return null;
        }

        // Fallback –∫ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        if (params == null || params.size() < 100) {
            return null; // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        }

        int windowSize = (int) settings.getMinWindowSize();
        int stableWindows = 0;
        int totalWindows = 0;

        for (int i = windowSize; i <= params.size(); i += windowSize / 2) {
            List<ZScoreParam> window = params.subList(Math.max(0, i - windowSize), i);

            double avgAdfPValue = window.stream()
                    .filter(p -> p.getAdfpvalue() != 0)
                    .mapToDouble(ZScoreParam::getAdfpvalue)
                    .average()
                    .orElse(1.0);

            totalWindows++;
            if (avgAdfPValue < 0.05) {
                stableWindows++;
            }
        }

        double stabilityRatio = (double) stableWindows / totalWindows;
        double minStabilityRatio = 0.7;

        if (stabilityRatio < minStabilityRatio) {
            return String.format("–ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞—è –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: %.2f%% < %.2f%%",
                    stabilityRatio * 100, minStabilityRatio * 100);
        }

        return null;
    }

    private String checkCorrelationSignificance(ZScoreData data, List<ZScoreParam> params, Settings settings) {
        Double pValue = getCorrelationPValue(data, params);

        if (pValue == null) {
            return "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç correlation p-value";
        }

        if (pValue > settings.getMinPValue()) {
            return String.format("–ù–µ–∑–Ω–∞—á–∏–º–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: p-value=%.6f > %.6f",
                    pValue, settings.getMinPValue());
        }

        return null;
    }

    private String checkCorrelation(ZScoreData data, Settings settings) {
        Double correlation = data.getCorrelation();
        if (correlation == null) {
            return "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è";
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        double absCorrelation = Math.abs(correlation);
        if (absCorrelation < settings.getMinCorrelation()) {
            return String.format("–°–ª–∞–±–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: |%.4f| < %.4f",
                    correlation, settings.getMinCorrelation());
        }

        return null;
    }

    private String checkZScoreSignal(ZScoreData data, List<ZScoreParam> params, Settings settings) {
        double lastZScore = getLatestZScore(data, params);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ Z-Score –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        double absZScore = Math.abs(lastZScore);
        if (absZScore < settings.getMinZ()) {
            return String.format("–°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª: |Z-score|=%.2f < %.2f",
                    absZScore, settings.getMinZ());
        }

        return null;
    }

    private String checkAdditionalTradingFilters(ZScoreData data, List<ZScoreParam> params, Settings settings) {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏

        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ Z-Score (–º–æ–≥—É—Ç –±—ã—Ç—å –≤—ã–±—Ä–æ—Å–∞–º–∏)
        double lastZScore = getLatestZScore(data, params);
        if (Math.abs(lastZScore) > 5.0) {
            return String.format("–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π Z-score: %.2f", lastZScore);
        }

        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–Ω–¥–∞ Z-Score (–Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã–º)
        if (params != null && params.size() >= 10) {
            double zScoreVolatility = calculateZScoreVolatility(params);
            if (zScoreVolatility > 10.0) {
                return String.format("–í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å Z-score: %.2f", zScoreVolatility);
            }
        }

        return null;
    }

    // ============ –£–¢–ò–õ–ò–¢–ù–´–ï –ú–ï–¢–û–î–´ ============

    private Double getAdfPValue(ZScoreData data, List<ZScoreParam> params) {
        if (params != null && !params.isEmpty()) {
            // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç API
            ZScoreParam lastParam = params.get(params.size() - 1);
            return lastParam.getAdfpvalue();
        } else {
            // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç API - ADF –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ cointegration_pvalue –µ—Å–ª–∏ –Ω–µ—Ç Johansen
            return data.getCointegrationPvalue();
        }
    }

    private Double getCorrelationPValue(ZScoreData data, List<ZScoreParam> params) {
        if (params != null && !params.isEmpty()) {
            // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç API
            ZScoreParam lastParam = params.get(params.size() - 1);
            return lastParam.getPvalue();
        } else {
            // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç API
            return data.getCorrelationPvalue();
        }
    }

    private double getLatestZScore(ZScoreData data, List<ZScoreParam> params) {
        if (params != null && !params.isEmpty()) {
            // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç API
            return params.get(params.size() - 1).getZscore();
        } else if (data.getLatestZscore() != null) {
            // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç API
            return data.getLatestZscore();
        } else {
            return 0.0;
        }
    }

    private Double getRSquared(ZScoreData data) {
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
        if (data.getAvgRSquared() != null) {
            return data.getAvgRSquared();
        }

        return null;
    }

    private double calculateZScoreVolatility(List<ZScoreParam> params) {
        if (params.size() < 10) return 0.0;

        // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–Ω–∞—á–µ–Ω–∏–π Z-Score
        List<Double> recentZScores = params.subList(params.size() - 10, params.size())
                .stream()
                .map(ZScoreParam::getZscore)
                .toList();

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
        double mean = recentZScores.stream().mapToDouble(Double::doubleValue).average().orElse(0.0);
        double variance = recentZScores.stream()
                .mapToDouble(z -> Math.pow(z - mean, 2))
                .average()
                .orElse(0.0);

        return Math.sqrt(variance);
    }

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
     */
    private void logFilteringStatistics(List<ZScoreData> originalList, List<ZScoreData> filteredList, Settings settings) {
        int total = originalList.size();
        int remaining = filteredList.size();
        int filtered = total - remaining;

        log.info("üìà === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –§–ò–õ–¨–¢–†–ê–¶–ò–ò –ü–ê–†–´ ===");
        log.info("üìä –í—Å–µ–≥–æ –ø–∞—Ä: {}", total);
        log.info("‚úÖ –ü—Ä–æ—à–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã: {} ({}%)", remaining, String.format("%.1f", (remaining * 100.0 / total)));
        log.info("‚ùå –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {} ({}%)", filtered, String.format("%.1f", (filtered * 100.0 / total)));

        // –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–∞—Ä
        if (!filteredList.isEmpty()) {
            analyzeRemainingPairs(filteredList);
        }

        log.info("‚öôÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:");
        if (settings.isUseMaxAdfValueFilter())
            log.info("   üî¨ –ö–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: p-value < {}", settings.getMaxAdfValue());
        if (settings.isUseMinRSquaredFilter())
            log.info("   üìà R-squared: > {}", settings.getMinRSquared());
        if (settings.isUseMinCorrelationFilter())
            log.info("   üîó –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è: > {}", settings.getMinCorrelation());
        if (settings.isUseMinPValueFilter())
            log.info("   üìä P-value –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: < {}", settings.getMinPValue());
        if (settings.isUseMinZFilter())
            log.info("   ‚ö° Z-Score: > {}", settings.getMinZ());
    }

    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–∞—Ä –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
     */
    private void analyzeRemainingPairs(List<ZScoreData> filteredList) {
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Z-Score
        double avgZScore = filteredList.stream()
                .mapToDouble(d -> Math.abs(getLatestZScore(d, d.getZscoreHistory())))
                .average().orElse(0.0);

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        double avgCorrelation = filteredList.stream()
                .filter(d -> d.getCorrelation() != null)
                .mapToDouble(d -> Math.abs(d.getCorrelation()))
                .average().orElse(0.0);

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ R-squared
        double avgRSquared = filteredList.stream()
                .map(this::getRSquared)
                .filter(r -> r != null)
                .mapToDouble(Double::doubleValue)
                .average().orElse(0.0);

        // –ü–æ–¥—Å—á–µ—Ç –ø–∞—Ä —Å Johansen —Ç–µ—Å—Ç–æ–º
        long johansenPairs = filteredList.stream()
                .filter(d -> d.getCointegrationPvalue() != null)
                .count();

        log.info("üìã –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä:");
        log.info("   üìä –°—Ä–µ–¥–Ω–∏–π |Z-Score|: {}", String.format("%.2f", avgZScore));
        log.info("   üîó –°—Ä–µ–¥–Ω—è—è |–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è|: {}", String.format("%.3f", avgCorrelation));
        log.info("   üìà –°—Ä–µ–¥–Ω–∏–π R¬≤: {}", String.format("%.3f", avgRSquared));
        log.info("   üî¨ –ü–∞—Ä—ã —Å Johansen —Ç–µ—Å—Ç–æ–º: {}/{} ({}%)",
                johansenPairs, filteredList.size(), String.format("%.1f", (johansenPairs * 100.0 / filteredList.size())));
    }
}
