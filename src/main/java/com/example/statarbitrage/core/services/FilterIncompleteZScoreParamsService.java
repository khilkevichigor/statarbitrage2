package com.example.statarbitrage.core.services;

import com.example.statarbitrage.common.dto.ZScoreData;
import com.example.statarbitrage.common.dto.ZScoreParam;
import com.example.statarbitrage.common.model.PairData;
import com.example.statarbitrage.common.model.Settings;
import com.example.statarbitrage.common.utils.NumberFormatter;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.*;

@Slf4j
@Service
@RequiredArgsConstructor
public class FilterIncompleteZScoreParamsService {

    private final PairDataService pairDataService;

    /**
     * –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
     *
     * @param pairData
     * @param zScoreDataList
     * @param settings
     */
    public void filterV1(PairData pairData, List<ZScoreData> zScoreDataList, Settings settings) {
        double expected = settings.getExpectedZParamsCount();
        double maxZScore = zScoreDataList.stream()
                .map(data -> (data.getZScoreHistory() != null && !data.getZScoreHistory().isEmpty()) ? data.getZScoreHistory().get(data.getZScoreHistory().size() - 1) : null)
                .filter(Objects::nonNull)
                .map(ZScoreParam::getZscore)
                .max(Comparator.naturalOrder())
                .orElse(0d);
        log.info("üîç –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º: {}, –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π Z-—Å–∫–æ—Ä: {}", expected, maxZScore);

        int before = zScoreDataList.size();

        zScoreDataList.removeIf(data -> {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö (–∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è API –µ—Å–ª–∏ zscoreParams –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç)
            List<ZScoreParam> params = data.getZScoreHistory();
            int actualSize = params != null ? params.size() :
                    (data.getTotalObservations() != null ? data.getTotalObservations() : 0);

            // –î–ª—è –Ω–æ–≤–æ–≥–æ API –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π - –¥–∞–Ω–Ω—ã–µ —É–∂–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω—ã
            boolean isIncompleteBySize = false;
            if (params != null && !params.isEmpty()) {
                // –¢–æ–ª—å–∫–æ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π
                isIncompleteBySize = actualSize < expected;
                if (isIncompleteBySize) {
                    if (pairData != null) {
                        pairDataService.delete(pairData);
                        log.warn("‚ö†Ô∏è –£–¥–∞–ª–∏–ª–∏ –ø–∞—Ä—É {}/{} ‚Äî –Ω–∞–±–ª—é–¥–µ–Ω–∏–π {} (–æ–∂–∏–¥–∞–ª–æ—Å—å {})",
                                data.getUnderValuedTicker(), data.getOverValuedTicker(), actualSize, expected);
                    }
                }
            }

            // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π Z-score (–∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è API –µ—Å–ª–∏ zscoreParams –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç)
            double lastZScore;
            if (params != null && !params.isEmpty()) {
                lastZScore = params.get(params.size() - 1).getZscore(); //todo
            } else if (data.getLatestZScore() != null) {
                lastZScore = data.getLatestZScore();
            } else {
                if (pairData != null) {
                    pairDataService.delete(pairData);
                    log.warn("‚ö†Ô∏è –£–¥–∞–ª–∏–ª–∏ –ø–∞—Ä—É {}/{} ‚Äî –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Z-score",
                            data.getUnderValuedTicker(), data.getOverValuedTicker());
                }
                return true;
            }

            boolean isIncompleteByZ = settings.isUseMinZFilter() && lastZScore < settings.getMinZ();
            if (isIncompleteByZ) {
                if (pairData != null) {
                    pairDataService.delete(pairData);
                    log.warn("‚ö†Ô∏è –£–¥–∞–ª–∏–ª–∏ –ø–∞—Ä—É {}/{} ‚Äî Z-—Å–∫–æ—Ä={} < Z-—Å–∫–æ—Ä Min={}",
                            data.getUnderValuedTicker(), data.getOverValuedTicker(), lastZScore, settings.getMinZ());
                }
            }

            // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ R-squared
            boolean isIncompleteByRSquared = false;
            if (settings.isUseMinRSquaredFilter() && data.getAvgRSquared() != null && data.getAvgRSquared() < settings.getMinRSquared()) {
                isIncompleteByRSquared = true;
                if (pairData != null) {
                    pairDataService.delete(pairData);
                    log.warn("‚ö†Ô∏è –£–¥–∞–ª–∏–ª–∏ –ø–∞—Ä—É {}/{} ‚Äî RSquared={} < MinRSquared={}",
                            data.getUnderValuedTicker(), data.getOverValuedTicker(), data.getAvgRSquared(), settings.getMinRSquared());
                }
            }

            // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ Correlation
            boolean isIncompleteByCorrelation = false;
            if (settings.isUseMinCorrelationFilter() && data.getPearsonCorr() != null && data.getPearsonCorr() < settings.getMinCorrelation()) {
                isIncompleteByCorrelation = true;
                if (pairData != null) {
                    pairDataService.delete(pairData);
                    log.warn("‚ö†Ô∏è –£–¥–∞–ª–∏–ª–∏ –ø–∞—Ä—É {}/{} ‚Äî Correlation={} < MinCorrelation={}",
                            data.getUnderValuedTicker(), data.getOverValuedTicker(), data.getPearsonCorr(), settings.getMinCorrelation());
                }
            }

            // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ pValue
            boolean isIncompleteByPValue = false;
            if (settings.isUseMaxPValueFilter()) {
                Double pValue = null;
                if (params != null && !params.isEmpty()) {
                    // –î–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º pValue –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                    pValue = params.get(params.size() - 1).getPvalue();
                } else if (data.getPearsonCorrPValue() != null) {
                    // –î–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º correlation_pvalue
                    pValue = data.getPearsonCorrPValue();
                }

                if (pValue != null && pValue > settings.getMaxPValue()) {
                    isIncompleteByPValue = true;
                    if (pairData != null) {
                        pairDataService.delete(pairData);
                        log.warn("‚ö†Ô∏è –£–¥–∞–ª–∏–ª–∏ –ø–∞—Ä—É {}/{} ‚Äî pValue={} > MinPValue={}",
                                data.getUnderValuedTicker(), data.getOverValuedTicker(), pValue, settings.getMaxPValue());
                    }
                }
            }

            // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ adfValue
            boolean isIncompleteByAdfValue = false;
            if (settings.isUseMaxAdfValueFilter()) {
                Double adfValue = null;
                if (params != null && !params.isEmpty()) {
                    // –î–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º adfpvalue –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                    adfValue = params.get(params.size() - 1).getAdfpvalue(); //todo –∑–¥–µ—Å—å —Å–º–µ—Å—å —Å—Ç–∞—Ä–æ–π –∏ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏! –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å!!!
                } else if (data.getJohansenCointPValue() != null) {
                    // –î–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º cointegration_pvalue
                    adfValue = data.getJohansenCointPValue(); //todo –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —ç—Ç–æ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ???
                }

                if (adfValue != null && adfValue > settings.getMaxAdfValue()) {
                    isIncompleteByAdfValue = true;
                    if (pairData != null) {
                        pairDataService.delete(pairData);
                        log.warn("‚ö†Ô∏è –£–¥–∞–ª–∏–ª–∏ –ø–∞—Ä—É {}/{} ‚Äî adfValue={} > MaxAdfValue={}",
                                data.getUnderValuedTicker(), data.getOverValuedTicker(), adfValue, settings.getMaxAdfValue());
                    }
                }
            }

            return isIncompleteBySize || isIncompleteByZ || isIncompleteByRSquared || isIncompleteByCorrelation || isIncompleteByPValue || isIncompleteByAdfValue;
        });

        int after = zScoreDataList.size();
        log.debug("‚úÖ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å {} –∏–∑ {} –ø–∞—Ä", after, before);
    }

    /**
     * –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
     * <p>
     * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä –¥–ª—è –ø–∞—Ä–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞
     * –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     * –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Johansen —Ç–µ—Å—Ç–∞ –∏ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ Python API
     */
    public void filterV2(List<ZScoreData> zScoreDataList, Settings settings) {
        double expected = settings.getExpectedZParamsCount();

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        analyzeInputData(zScoreDataList);

        log.info("üîç –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π: {}, –≤—Å–µ–≥–æ –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {}", expected, zScoreDataList.size());

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ø–∏—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        List<ZScoreData> originalList = List.copyOf(zScoreDataList);
        int before = zScoreDataList.size();
        Map<String, Integer> filterStats = new HashMap<>();

        zScoreDataList.removeIf(data -> {
            String reason = shouldFilterPair(data, settings, expected);
            if (reason != null) {
                filterStats.merge(reason, 1, Integer::sum);
                log.info("‚ö†Ô∏è –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {}/{} ‚Äî {}. –î–µ—Ç–∞–ª–∏: Z-Score={}, ADF p-value={}, R¬≤={}",
                        data.getUnderValuedTicker(), data.getOverValuedTicker(), reason,
                        NumberFormatter.format(getLatestZScore(data, data.getZScoreHistory()), 2),
                        getAdfPValue(data, data.getZScoreHistory()) != null ? NumberFormatter.format(getAdfPValue(data, data.getZScoreHistory()), 4) : "N/A",
                        getRSquared(data) != null ? NumberFormatter.format(getRSquared(data), 3) : "N/A"
                );
                return true;
            }
            log.info("‚úÖ –ü–∞—Ä–∞ {}/{} –ø—Ä–æ—à–ª–∞ –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã.", data.getUnderValuedTicker(), data.getOverValuedTicker());
            return false;
        });

        int after = zScoreDataList.size();
        log.info("‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {} ‚Üí {} –ø–∞—Ä", before, after);

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏—á–∏–Ω–∞–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        filterStats.forEach((reason, count) ->
                log.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ - {}: {} –ø–∞—Ä", reason, count));

        // –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        logFilteringStatistics(originalList, zScoreDataList, settings);
    }

    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç API
     */
    private void analyzeInputData(List<ZScoreData> zScoreDataList) {
        if (zScoreDataList.isEmpty()) return;

        ZScoreData sample = zScoreDataList.get(0);
        boolean hasOldFormat = sample.getZScoreHistory() != null && !sample.getZScoreHistory().isEmpty();
        boolean hasNewFormat = sample.getLatestZScore() != null;
        boolean hasJohansenData = sample.getJohansenCointPValue() != null;

        log.info("üìã –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:");
        log.info("   üìä –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (zscoreParams): {}", hasOldFormat ? "‚úÖ" : "‚ùå");
        log.info("   üÜï –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç (latest_zscore): {}", hasNewFormat ? "‚úÖ" : "‚ùå");
        log.info("   üî¨ Johansen —Ç–µ—Å—Ç: {}", hasJohansenData ? "‚úÖ –î–û–°–¢–£–ü–ï–ù" : "‚ùå");

        if (hasJohansenData) {
            double minJohansenPValue = zScoreDataList.stream()
                    .filter(d -> d.getJohansenCointPValue() != null)
                    .mapToDouble(ZScoreData::getJohansenCointPValue)
                    .min()
                    .orElse(1.0);
            log.info("   üìà –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π Johansen p-value: {}", String.format("%.6f", minJohansenPValue));
        }
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ–ª–∂–Ω–∞ –ª–∏ –±—ã—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–∞ –ø–∞—Ä–∞
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏—á–∏–Ω—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ null –µ—Å–ª–∏ –ø–∞—Ä–∞ –ø—Ä–æ—à–ª–∞ –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
     */
    private String shouldFilterPair(ZScoreData data, Settings settings, double expectedSize) {
        List<ZScoreParam> params = data.getZScoreHistory();
        String pairName = data.getUnderValuedTicker() + "/" + data.getOverValuedTicker();

        log.info("‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—ã {} –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:", pairName);

        // ====== –≠–¢–ê–ü 1: –ë–´–°–¢–†–´–ï –ü–†–û–í–ï–†–ö–ò (–¥–µ—à–µ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏) ======

        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö
        String reason = isDataMissing(data, params) ? "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ Z-score" : null;
        if (reason != null) {
            log.info("   ‚ùå {}: {}", pairName, reason);
            return reason;
        }
        log.info("   ‚úÖ {}: –î–∞–Ω–Ω—ã–µ Z-score –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç.", pairName);

        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤
        reason = isTickersInvalid(data) ? "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã" : null;
        if (reason != null) {
            log.info("   ‚ùå {}: {}", pairName, reason);
            return reason;
        }
        log.info("   ‚úÖ {}: –¢–∏–∫–µ—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.", pairName);

        // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –≤—ã–±–æ—Ä–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ API)
        if (params != null && !params.isEmpty()) {
            int actualSize = params.size();
            if (actualSize < expectedSize) {
                reason = String.format("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π: %d < %.0f", actualSize, expectedSize);
                log.info("   ‚ùå {}: {}", pairName, reason);
                return reason;
            }
            log.info("   ‚úÖ {}: –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π ({} >= {}).", pairName, actualSize, expectedSize);
        } else {
            log.info("   ‚ÑπÔ∏è {}: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –≤—ã–±–æ—Ä–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç API).", pairName);
        }


        // ====== –≠–¢–ê–ü 2: –ö–û–ò–ù–¢–ï–ì–†–ê–¶–ò–Ø (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ!) ======

        // 4. Johansen/ADF —Ç–µ—Å—Ç –Ω–∞ –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é (–ü–†–ò–û–†–ò–¢–ï–¢!)
        if (settings.isUseMaxAdfValueFilter()) {
            reason = checkCointegration(data, params, settings);
            if (reason != null) {
                log.info("   ‚ùå {}: {}", pairName, reason);
                return reason;
            }
            log.info("   ‚úÖ {}: –ü—Ä–æ—à–ª–∞ —Ç–µ—Å—Ç –Ω–∞ –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é.", pairName);
        } else {
            log.info("   ‚ÑπÔ∏è {}: –§–∏–ª—å—Ç—Ä –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω.", pairName);
        }


        // ====== –≠–¢–ê–ü 3: –ö–ê–ß–ï–°–¢–í–û –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–û–ô –ú–û–î–ï–õ–ò ======

        // 5. R-squared (–æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏)
        if (settings.isUseMinRSquaredFilter()) {
            reason = checkRSquared(data, settings);
            if (reason != null) {
                log.info("   ‚ùå {}: {}", pairName, reason);
                return reason;
            }
            log.info("   ‚úÖ {}: –ü—Ä–æ—à–ª–∞ —Ñ–∏–ª—å—Ç—Ä R-squared (R¬≤={}).", pairName, com.example.statarbitrage.common.utils.NumberFormatter.format(getRSquared(data), 3));
        } else {
            log.info("   ‚ÑπÔ∏è {}: –§–∏–ª—å—Ç—Ä R-squared –æ—Ç–∫–ª—é—á–µ–Ω.", pairName);
        }

        // 6. –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –≤—Ä–µ–º–µ–Ω–∏
        if (settings.isUseCointegrationStabilityFilter()) {
            reason = checkCointegrationStability(data, params, settings);
            if (reason != null) {
                log.info("   ‚ùå {}: {}", pairName, reason);
                return reason;
            }
            log.info("   ‚úÖ {}: –ü—Ä–æ—à–ª–∞ —Ñ–∏–ª—å—Ç—Ä —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.", pairName);
        } else {
            log.info("   ‚ÑπÔ∏è {}: –§–∏–ª—å—Ç—Ä —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω.", pairName);
        }


        // ====== –≠–¢–ê–ü 4: –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ê–Ø –ó–ù–ê–ß–ò–ú–û–°–¢–¨ ======

        // 7. P-value –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        if (settings.isUseMaxPValueFilter()) {
            reason = checkCorrelationSignificance(data, params, settings);
            if (reason != null) {
                log.info("   ‚ùå {}: {}", pairName, reason);
                return reason;
            }
            log.info("   ‚úÖ {}: –ü—Ä–æ—à–ª–∞ —Ñ–∏–ª—å—Ç—Ä P-value –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ (P-value={}).", pairName, com.example.statarbitrage.common.utils.NumberFormatter.format(getCorrelationPValue(data, params), 4));
        } else {
            log.info("   ‚ÑπÔ∏è {}: –§–∏–ª—å—Ç—Ä P-value –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω.", pairName);
        }

        // 8. –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ - –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–æ–∂–Ω–æ–π!)
        if (settings.isUseMinCorrelationFilter()) {
            reason = checkCorrelation(data, settings);
            if (reason != null) {
                log.info("   ‚ùå {}: {}", pairName, reason);
                return reason;
            }
            log.info("   ‚úÖ {}: –ü—Ä–æ—à–ª–∞ —Ñ–∏–ª—å—Ç—Ä –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ (–ö–æ—Ä—Ä={}).", pairName, com.example.statarbitrage.common.utils.NumberFormatter.format(data.getPearsonCorr(), 3));
        } else {
            log.info("   ‚ÑπÔ∏è {}: –§–∏–ª—å—Ç—Ä –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω.", pairName);
        }


        // ====== –≠–¢–ê–ü 5: –¢–û–†–ì–û–í–´–ï –°–ò–ì–ù–ê–õ–´ (–≤ –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—á–µ—Ä–µ–¥—å!) ======

        // 9. Z-Score —Ñ–∏–ª—å—Ç—Ä (—Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª)
        if (settings.isUseMinZFilter()) {
            reason = checkZScoreSignal(data, params, settings);
            if (reason != null) {
                log.info("   ‚ùå {}: {}", pairName, reason);
                return reason;
            }
            log.info("   ‚úÖ {}: –ü—Ä–æ—à–ª–∞ —Ñ–∏–ª—å—Ç—Ä Z-Score (Z={}).", pairName, com.example.statarbitrage.common.utils.NumberFormatter.format(getLatestZScore(data, params), 2));
        } else {
            log.info("   ‚ÑπÔ∏è {}: –§–∏–ª—å—Ç—Ä Z-Score –æ—Ç–∫–ª—é—á–µ–Ω.", pairName);
        }

        // 10. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        reason = checkAdditionalTradingFilters(data, params, settings);
        if (reason != null) {
            log.info("   ‚ùå {}: {}", pairName, reason);
            return reason;
        }
        log.info("   ‚úÖ {}: –ü—Ä–æ—à–ª–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã.", pairName);

        return null; // –ü–∞—Ä–∞ –ø—Ä–æ—à–ª–∞ –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
    }

    // ============ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –§–ò–õ–¨–¢–†–ê–¶–ò–ò ============

    private boolean isDataMissing(ZScoreData data, List<ZScoreParam> params) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Z-score –¥–∞–Ω–Ω—ã—Ö –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        if (params != null && !params.isEmpty()) {
            return false; // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
        }
        return data.getLatestZScore() == null; // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ–º latest_zscore
    }

    private boolean isTickersInvalid(ZScoreData data) {
        return data.getUnderValuedTicker() == null ||
                data.getOverValuedTicker() == null ||
                data.getUnderValuedTicker().isEmpty() ||
                data.getOverValuedTicker().isEmpty() ||
                data.getUnderValuedTicker().equals(data.getOverValuedTicker());
    }

    private String checkCointegration(ZScoreData data, List<ZScoreParam> params, Settings settings) {
        // –ü–†–ò–û–†–ò–¢–ï–¢ 1: Johansen —Ç–µ—Å—Ç (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        if (data.getJohansenCointPValue() != null) {
            Double johansenPValue = data.getJohansenCointPValue();
            log.debug("üî¨ Johansen p-value: {} –¥–ª—è –ø–∞—Ä—ã {}/{}",
                    NumberFormatter.format(johansenPValue, 6), // Use NumberFormatter
                    data.getUnderValuedTicker(),
                    data.getOverValuedTicker());

            // –î–ª—è Johansen —Ç–µ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π –ø–æ—Ä–æ–≥ (0.05)
            double johansenThreshold = 0.05; //todo –≤—ã–Ω–µ—Å—Ç–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if (johansenPValue > johansenThreshold) {
                return String.format("–ù–ï –∫–æ–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã (Johansen): p-value=%s > %.6f",
                        NumberFormatter.format(johansenPValue, 6), johansenThreshold);
            }

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ Johansen —Ç–µ—Å—Ç–∞
            if (data.getJohansenTraceStatistic() != null && data.getJohansenCriticalValue95() != null) {
                if (data.getJohansenError() != null) {
                    return "–û—à–∏–±–∫–∞ –≤ Johansen —Ç–µ—Å—Ç–µ: " + data.getJohansenError();
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º trace statistic - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
                if (data.getJohansenTraceStatistic() <= data.getJohansenCriticalValue95()) {
                    return String.format("–°–ª–∞–±–∞—è –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (Johansen): trace=%.2f ‚â§ critical=%.2f",
                            data.getJohansenTraceStatistic(), data.getJohansenCriticalValue95());
                }
            }

            log.debug("‚úÖ –ü–∞—Ä–∞ {}/{} –ø—Ä–æ—à–ª–∞ Johansen —Ç–µ—Å—Ç (p-value={})",
                    data.getUnderValuedTicker(), data.getOverValuedTicker(),
                    com.example.statarbitrage.common.utils.NumberFormatter.format(johansenPValue, 6)); // Use NumberFormatter
            return null; // –ü—Ä–æ—à–ª–∏ Johansen —Ç–µ—Å—Ç
        }

        // –ü–†–ò–û–†–ò–¢–ï–¢ 2: Fallback –∫ ADF –µ—Å–ª–∏ –Ω–µ—Ç Johansen –¥–∞–Ω–Ω—ã—Ö
        Double adfPValue = getAdfPValue(data, params);
        if (adfPValue == null) {
            log.debug("‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ADF p-value –¥–ª—è –ø–∞—Ä—ã {}/{}", data.getUnderValuedTicker(), data.getOverValuedTicker());
            return "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç cointegration p-value"; // Return reason for filtering
        }

        // –î–ª—è ADF —Ç–µ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å –º–∏–Ω–∏–º—É–º–æ–º –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        double adfThreshold = Math.max(settings.getMaxAdfValue(), 0.1); // –ú–∏–Ω–∏–º—É–º 0.1 –¥–ª—è crypto

        if (adfPValue > adfThreshold) {
            return String.format("–°–ª–∞–±–∞—è –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (ADF): p-value=%s > %.6f",
                    com.example.statarbitrage.common.utils.NumberFormatter.format(adfPValue, 6), adfThreshold); // Use NumberFormatter
        }

        log.debug("‚úÖ –ü–∞—Ä–∞ {}/{} –ø—Ä–æ—à–ª–∞ ADF —Ç–µ—Å—Ç (p-value={})",
                data.getUnderValuedTicker(), data.getOverValuedTicker(),
                com.example.statarbitrage.common.utils.NumberFormatter.format(adfPValue, 6)); // Use NumberFormatter
        return null;
    }

    private String checkRSquared(ZScoreData data, Settings settings) {
        Double rSquared = getRSquared(data);
        if (rSquared == null) {
            return "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç R-squared";
        }

        if (rSquared < settings.getMinRSquared()) {
            return String.format("–°–ª–∞–±–∞—è –º–æ–¥–µ–ª—å: R¬≤=%.4f < %.4f", rSquared, settings.getMinRSquared());
        }

        return null;
    }

    private String checkCointegrationStability(ZScoreData data, List<ZScoreParam> params, Settings settings) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ DataQuality –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        if (data.getStablePeriods() != null && data.getTotalObservations() != null) {
            if (data.getTotalObservations() > 0) {
                double stabilityRatio = (double) data.getStablePeriods() / data.getTotalObservations();
                double minStabilityRatio = 0.7; // 70% —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤

                if (stabilityRatio < minStabilityRatio) {
                    return String.format("–ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞—è –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: %.1f%% < %.1f%%",
                            stabilityRatio * 100, minStabilityRatio * 100);
                }
            }
            return null;
        }

        // Fallback –∫ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        if (params == null || params.size() < 100) {
            return null; // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        }

        int windowSize = (int) settings.getMinWindowSize();
        int stableWindows = 0;
        int totalWindows = 0;

        for (int i = windowSize; i <= params.size(); i += windowSize / 2) {
            List<ZScoreParam> window = params.subList(Math.max(0, i - windowSize), i);

            double avgAdfPValue = window.stream()
                    .filter(p -> p.getAdfpvalue() != 0)
                    .mapToDouble(ZScoreParam::getAdfpvalue)
                    .average()
                    .orElse(1.0);

            totalWindows++;
            if (avgAdfPValue < 0.05) {
                stableWindows++;
            }
        }

        double stabilityRatio = (double) stableWindows / totalWindows;
        double minStabilityRatio = 0.7;

        if (stabilityRatio < minStabilityRatio) {
            return String.format("–ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞—è –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: %.2f%% < %.2f%%",
                    stabilityRatio * 100, minStabilityRatio * 100);
        }

        return null;
    }

    private String checkCorrelationSignificance(ZScoreData data, List<ZScoreParam> params, Settings settings) {
        Double pValue = getCorrelationPValue(data, params);

        if (pValue == null) {
            return "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç correlation p-value";
        }

        if (pValue > settings.getMaxPValue()) {
            return String.format("–ù–µ–∑–Ω–∞—á–∏–º–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: p-value=%.6f > %.6f",
                    pValue, settings.getMaxPValue());
        }

        return null;
    }

    private String checkCorrelation(ZScoreData data, Settings settings) {
        Double correlation = data.getPearsonCorr();
        if (correlation == null) {
            return "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è";
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        double absCorrelation = Math.abs(correlation);
        if (absCorrelation < settings.getMinCorrelation()) {
            return String.format("–°–ª–∞–±–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: |%.4f| < %.4f",
                    correlation, settings.getMinCorrelation());
        }

        return null;
    }

    private String checkZScoreSignal(ZScoreData data, List<ZScoreParam> params, Settings settings) {
        double lastZScore = getLatestZScore(data, params);

        // –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ Z-Score - –æ–Ω–∏ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π —Ç–∏–∫–µ—Ä–æ–≤
        if (lastZScore < 0) {
            return String.format("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π Z-score: %.2f (—Ä–æ–ª–∏ —Ç–∏–∫–µ—Ä–æ–≤ –ø–µ—Ä–µ–ø—É—Ç–∞–Ω—ã)", lastZScore);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ Z-Score –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        if (lastZScore < settings.getMinZ()) {
            return String.format("–°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª: Z-score=%.2f < %.2f", lastZScore, settings.getMinZ());
        }

        return null;
    }

    private String checkAdditionalTradingFilters(ZScoreData data, List<ZScoreParam> params, Settings settings) {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏

        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ Z-Score (–º–æ–≥—É—Ç –±—ã—Ç—å –≤—ã–±—Ä–æ—Å–∞–º–∏)
        double lastZScore = getLatestZScore(data, params);
        if (Math.abs(lastZScore) > 5.0) {
            return String.format("–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π Z-score: %.2f", lastZScore);
        }

        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–Ω–¥–∞ Z-Score (–Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã–º)
        if (params != null && params.size() >= 10) {
            double zScoreVolatility = calculateZScoreVolatility(params);
            if (zScoreVolatility > 10.0) {
                return String.format("–í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å Z-score: %.2f", zScoreVolatility);
            }
        }

        return null;
    }

    // ============ –£–¢–ò–õ–ò–¢–ù–´–ï –ú–ï–¢–û–î–´ ============

    private Double getAdfPValue(ZScoreData data, List<ZScoreParam> params) {
        if (params != null && !params.isEmpty()) {
            // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç API
            ZScoreParam lastParam = params.get(params.size() - 1);
            return lastParam.getAdfpvalue();
        } else {
            // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç API - –∏—Å–ø–æ–ª—å–∑—É–µ–º avgAdfPvalue –¥–ª—è ADF —Ç–µ—Å—Ç–∞
            return data.getAvgAdfPvalue();
        }
    }

    private Double getCorrelationPValue(ZScoreData data, List<ZScoreParam> params) {
        if (params != null && !params.isEmpty()) {
            // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç API
            ZScoreParam lastParam = params.get(params.size() - 1);
            return lastParam.getPvalue();
        } else {
            // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç API
            return data.getPearsonCorrPValue();
        }
    }

    private double getLatestZScore(ZScoreData data, List<ZScoreParam> params) {
        if (params != null && !params.isEmpty()) {
            // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç API
            return params.get(params.size() - 1).getZscore();
        } else if (data.getLatestZScore() != null) {
            // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç API
            return data.getLatestZScore();
        } else {
            return 0.0;
        }
    }

    private Double getRSquared(ZScoreData data) {
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
        if (data.getAvgRSquared() != null) {
            return data.getAvgRSquared();
        }

        return null;
    }

    private double calculateZScoreVolatility(List<ZScoreParam> params) {
        if (params.size() < 10) return 0.0;

        // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–Ω–∞—á–µ–Ω–∏–π Z-Score
        List<Double> recentZScores = params.subList(params.size() - 10, params.size())
                .stream()
                .map(ZScoreParam::getZscore)
                .toList();

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
        double mean = recentZScores.stream().mapToDouble(Double::doubleValue).average().orElse(0.0);
        double variance = recentZScores.stream()
                .mapToDouble(z -> Math.pow(z - mean, 2))
                .average()
                .orElse(0.0);

        return Math.sqrt(variance);
    }

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
     */
    private void logFilteringStatistics(List<ZScoreData> originalList, List<ZScoreData> filteredList, Settings settings) {
        int total = originalList.size();
        int remaining = filteredList.size();
        int filtered = total - remaining;

        log.info("üìà === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –§–ò–õ–¨–¢–†–ê–¶–ò–ò –ü–ê–†–´ ===");
        log.info("üìä –í—Å–µ–≥–æ –ø–∞—Ä: {}", total);
        log.info("‚úÖ –ü—Ä–æ—à–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã: {} ({}%)", remaining, String.format("%.1f", (remaining * 100.0 / total)));
        log.info("‚ùå –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {} ({}%)", filtered, String.format("%.1f", (filtered * 100.0 / total)));

        // –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–∞—Ä
        if (!filteredList.isEmpty()) {
            analyzeRemainingPairs(filteredList);
        }

        log.info("‚öôÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã (—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è):");
        if (settings.isUseMaxAdfValueFilter())
            log.info("   üî¨ –ö–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: Johansen p-value < 0.05, ADF p-value < {}", settings.getMaxAdfValue()); //todo –≤—ã–ø–∏–ª–∏—Ç—å —Ö–∞—Ä–¥–∫–æ–¥ 0.05
        if (settings.isUseMinRSquaredFilter())
            log.info("   üìà R-squared: > {}", settings.getMinRSquared());
        if (settings.isUseMinCorrelationFilter())
            log.info("   üîó –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è: |–∑–Ω–∞—á–µ–Ω–∏–µ| > {}", settings.getMinCorrelation());
        if (settings.isUseMaxPValueFilter())
            log.info("   üìä P-value –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: < {}", settings.getMaxPValue());
        if (settings.isUseMinZFilter())
            log.info("   ‚ö° Z-Score: –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –∏ > {}", settings.getMinZ());
        log.info("   üö´ –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ Z-Score –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏");
        log.info("   üéØ –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ ObtainBestPairByCriteriaService –ø–æ –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–º—É —Å–∫–æ—Ä—É");
    }

    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–∞—Ä –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
     */
    private void analyzeRemainingPairs(List<ZScoreData> filteredList) {
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Z-Score
        double avgZScore = filteredList.stream()
                .mapToDouble(d -> Math.abs(getLatestZScore(d, d.getZScoreHistory())))
                .average().orElse(0.0);

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        double avgCorrelation = filteredList.stream()
                .filter(d -> d.getPearsonCorr() != null)
                .mapToDouble(d -> Math.abs(d.getPearsonCorr()))
                .average().orElse(0.0);

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ R-squared
        double avgRSquared = filteredList.stream()
                .map(this::getRSquared)
                .filter(r -> r != null)
                .mapToDouble(Double::doubleValue)
                .average().orElse(0.0);

        // –ü–æ–¥—Å—á–µ—Ç –ø–∞—Ä —Å Johansen —Ç–µ—Å—Ç–æ–º
        long johansenPairs = filteredList.stream()
                .filter(d -> d.getJohansenCointPValue() != null)
                .count();

        log.info("üìã –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä:");
        log.info("   üìä –°—Ä–µ–¥–Ω–∏–π |Z-Score|: {}", String.format("%.2f", avgZScore));
        log.info("   üîó –°—Ä–µ–¥–Ω—è—è |–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è|: {}", String.format("%.3f", avgCorrelation));
        log.info("   üìà –°—Ä–µ–¥–Ω–∏–π R¬≤: {}", String.format("%.3f", avgRSquared));
        log.info("   üî¨ –ü–∞—Ä—ã —Å Johansen —Ç–µ—Å—Ç–æ–º: {}/{} ({}%)",
                johansenPairs, filteredList.size(), String.format("%.1f", (johansenPairs * 100.0 / filteredList.size())));
    }
}
