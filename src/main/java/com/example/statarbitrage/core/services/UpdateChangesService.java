package com.example.statarbitrage.core.services;

import com.example.statarbitrage.common.model.PairData;
import com.example.statarbitrage.trading.model.ArbitragePairTradeInfo;
import com.example.statarbitrage.trading.model.Position;
import com.example.statarbitrage.trading.model.PositionVerificationResult;
import com.example.statarbitrage.trading.model.TradeResult;
import com.example.statarbitrage.trading.services.TradingIntegrationService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.List;

@Slf4j
@Service
@RequiredArgsConstructor
public class UpdateChangesService {
    private final TradingIntegrationService tradingIntegrationService;

    /**
     * –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ñ–∏—Ç–∞ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π (–¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –º–µ—Ç–æ–¥)
     */
    public void updateChanges(PairData pairData) {
        try {
            BigDecimal longCurrent = BigDecimal.valueOf(pairData.getLongTickerCurrentPrice());
            BigDecimal shortCurrent = BigDecimal.valueOf(pairData.getShortTickerCurrentPrice());
            BigDecimal zScoreEntry = BigDecimal.valueOf(pairData.getZScoreEntry());
            BigDecimal zScoreCurrent = BigDecimal.valueOf(pairData.getZScoreCurrent());
            BigDecimal corrCurrent = BigDecimal.valueOf(pairData.getCorrelationCurrent());

            // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–π —Å –±–∏—Ä–∂–∏ –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            tradingIntegrationService.updatePositions(List.of(pairData.getLongTicker(), pairData.getShortTicker()));

            // –ó–∞—Ç–µ–º –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π PnL –¥–ª—è –¥–∞–Ω–Ω–æ–π –ø–∞—Ä—ã —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
            BigDecimal realPnL = tradingIntegrationService.getPositionPnL(pairData);

            // –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–∑–∏—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –∏ –≤—Ö–æ–¥–Ω—ã—Ö —Ü–µ–Ω
            BigDecimal longEntry = BigDecimal.valueOf(pairData.getLongTickerEntryPrice());
            BigDecimal shortEntry = BigDecimal.valueOf(pairData.getShortTickerEntryPrice());

            // –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ LONG –ø–æ–∑–∏—Ü–∏–∏
            BigDecimal longReturnPct = longCurrent.subtract(longEntry)
                    .divide(longEntry, 10, RoundingMode.HALF_UP)
                    .multiply(BigDecimal.valueOf(100));

            // –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ SHORT –ø–æ–∑–∏—Ü–∏–∏ (–∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ)
            BigDecimal shortReturnPct = shortEntry.subtract(shortCurrent)
                    .divide(shortEntry, 10, RoundingMode.HALF_UP)
                    .multiply(BigDecimal.valueOf(100));

            // üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ—Ñ–∏—Ç–∞
            BigDecimal positionSize = tradingIntegrationService.getPositionSize(pairData);
            if (positionSize == null || positionSize.compareTo(BigDecimal.ZERO) <= 0) {
                // Fallback: –ø—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–Ω –≤—Ö–æ–¥–∞
                BigDecimal longPositionValue = longEntry.multiply(BigDecimal.valueOf(50)); // –ü—Ä–∏–º–µ—Ä–Ω–æ 50 USDT –Ω–∞ –ø–æ–∑–∏—Ü–∏—é
                BigDecimal shortPositionValue = shortEntry.multiply(BigDecimal.valueOf(50)); // –ü—Ä–∏–º–µ—Ä–Ω–æ 50 USDT –Ω–∞ –ø–æ–∑–∏—Ü–∏—é
                positionSize = longPositionValue.add(shortPositionValue);
            }

            // üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ñ–∏—Ç–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏, –∞ –Ω–µ –æ—Ç –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
            BigDecimal profitPercentFromPosition = BigDecimal.ZERO;
            if (positionSize.compareTo(BigDecimal.ZERO) > 0) {
                profitPercentFromPosition = realPnL
                        .divide(positionSize, 10, RoundingMode.HALF_UP)
                        .multiply(BigDecimal.valueOf(100));
            }

            // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            long entryTime = pairData.getEntryTime();
            long now = System.currentTimeMillis();
            long currentTimeInMinutes = (now - entryTime) / (1000 * 60);

            // –û–∫—Ä—É–≥–ª–µ–Ω–∏—è
            BigDecimal longReturnRounded = longReturnPct.setScale(2, RoundingMode.HALF_UP);
            BigDecimal shortReturnRounded = shortReturnPct.setScale(2, RoundingMode.HALF_UP);
            BigDecimal profitRounded = profitPercentFromPosition.setScale(2, RoundingMode.HALF_UP);
            BigDecimal zScoreRounded = zScoreCurrent.subtract(zScoreEntry).setScale(2, RoundingMode.HALF_UP);

            // üîÑ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–∞–∫—Å–∏–º—É–º–æ–≤ –∏ –º–∏–Ω–∏–º—É–º–æ–≤ —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏
            BigDecimal currentMinProfit = pairData.getMinProfitRounded();
            BigDecimal currentMaxProfit = pairData.getMaxProfitRounded();
            long currentTimeToMax = pairData.getTimeInMinutesSinceEntryToMax();
            long currentTimeToMin = pairData.getTimeInMinutesSinceEntryToMin();

            // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º –ø—Ä–∏–±—ã–ª–∏
            BigDecimal maxProfitRounded;
            long timeInMinutesSinceEntryToMax;
            if (currentMaxProfit == null || profitRounded.compareTo(currentMaxProfit) > 0) {
                maxProfitRounded = profitRounded;
                timeInMinutesSinceEntryToMax = currentTimeInMinutes;
                log.debug("üöÄ –ù–æ–≤—ã–π –º–∞–∫—Å–∏–º—É–º –ø—Ä–∏–±—ã–ª–∏ (—Ä–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è): {}% –∑–∞ {} –º–∏–Ω", maxProfitRounded, timeInMinutesSinceEntryToMax);
            } else {
                maxProfitRounded = currentMaxProfit;
                timeInMinutesSinceEntryToMax = currentTimeToMax;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –º–∏–Ω–∏–º—É–º –ø—Ä–∏–±—ã–ª–∏
            BigDecimal minProfitRounded;
            long timeInMinutesSinceEntryToMin;
            if (currentMinProfit == null || profitRounded.compareTo(currentMinProfit) < 0) {
                minProfitRounded = profitRounded;
                timeInMinutesSinceEntryToMin = currentTimeInMinutes;
                log.debug("üìâ –ù–æ–≤—ã–π –º–∏–Ω–∏–º—É–º –ø—Ä–∏–±—ã–ª–∏ (—Ä–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è): {}% –∑–∞ {} –º–∏–Ω", minProfitRounded, timeInMinutesSinceEntryToMin);
            } else {
                minProfitRounded = currentMinProfit;
                timeInMinutesSinceEntryToMin = currentTimeToMin;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Å—Ç—Ä–µ–º—É–º—ã –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫
            updateExtremumValues(pairData, longReturnPct, shortReturnPct, zScoreCurrent, corrCurrent);

            // ‚úÖ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ PairData
            pairData.setLongChanges(longReturnRounded);
            pairData.setShortChanges(shortReturnRounded);
            pairData.setProfitChanges(profitRounded);
            pairData.setZScoreChanges(zScoreRounded);
            pairData.setMinProfitRounded(minProfitRounded);
            pairData.setMaxProfitRounded(maxProfitRounded);
            pairData.setTimeInMinutesSinceEntryToMax(timeInMinutesSinceEntryToMax);
            pairData.setTimeInMinutesSinceEntryToMin(timeInMinutesSinceEntryToMin);

            log.info("–ü—Ä–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞ –¥–ª—è –ø–∞—Ä—ã {}/{}:", pairData.getLongTicker(), pairData.getShortTicker());
            log.info("üìä LONG {}: Entry: {}, Current: {}, Changes: {}%", pairData.getLongTicker(), longEntry, longCurrent, longReturnRounded);
            log.info("üìâ SHORT {}: Entry: {}, Current: {}, Changes: {}%", pairData.getShortTicker(), shortEntry, shortCurrent, shortReturnRounded);
            log.info("üí∞ –¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏—Ç: {}%", profitRounded);
            log.info("üìà Max profit: {}%, Min profit: {}%", maxProfitRounded, minProfitRounded);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏—Ç–∞ –¥–ª—è –ø–∞—Ä—ã {}/{}: {}",
                    pairData.getLongTicker(), pairData.getShortTicker(), e.getMessage());
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—è ProfitUpdateService –¥–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
     */
    public void updateChangesFromTradeResults(PairData pairData, ArbitragePairTradeInfo tradeInfo) {
        try {
            TradeResult longResult = tradeInfo.getLongTradeResult();
            TradeResult shortResult = tradeInfo.getShortTradeResult();

            if (longResult == null || shortResult == null) {
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è –ø–∞—Ä—ã {}/{}",
                        pairData.getLongTicker(), pairData.getShortTicker());
                return;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ü–µ–Ω –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
            pairData.setLongTickerCurrentPrice(longResult.getExecutionPrice().doubleValue());
            pairData.setShortTickerCurrentPrice(shortResult.getExecutionPrice().doubleValue());

            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∏—Å—Ç—ã–π –ø—Ä–æ—Ñ–∏—Ç
            BigDecimal totalPnL = longResult.getPnl().add(shortResult.getPnl());
            BigDecimal totalFees = longResult.getFees().add(shortResult.getFees());
            BigDecimal netPnL = totalPnL.subtract(totalFees);

            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –ø–æ–∑–∏—Ü–∏–∏
            BigDecimal profitPercent = calculateProfitPercent(
                    netPnL,
                    pairData.getLongTickerEntryPrice(),
                    pairData.getShortTickerEntryPrice()
            );

            pairData.setProfitChanges(profitPercent);

            log.info("üè¶ –û–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ñ–∏—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–∫—Ä—ã—Ç–∏—è {}/{}: {}% (PnL: {}, –∫–æ–º–∏—Å—Å–∏–∏: {})",
                    pairData.getLongTicker(), pairData.getShortTicker(),
                    profitPercent, totalPnL, totalFees);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —ç–∫—Å—Ç—Ä–µ–º—É–º—ã
            updatePairDataStatistics(pairData);

            log.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è –ø–∞—Ä—ã {}/{}",
                    pairData.getLongTicker(), pairData.getShortTicker());

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è –ø–∞—Ä—ã {}/{}: {}",
                    pairData.getLongTicker(), pairData.getShortTicker(), e.getMessage());
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—è ProfitUpdateService –¥–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
     */
    public void updateChangesFromOpenPositions(PairData pairData) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö
            PositionVerificationResult openPositionsInfo = tradingIntegrationService.getOpenPositionsInfo(pairData);

            Position longPosition = openPositionsInfo.getLongPosition();
            Position shortPosition = openPositionsInfo.getShortPosition();

            if (longPosition == null || shortPosition == null) {
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏—è—Ö –¥–ª—è –ø–∞—Ä—ã {}/{}",
                        pairData.getLongTicker(), pairData.getShortTicker());
                return;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
            pairData.setLongTickerCurrentPrice(longPosition.getCurrentPrice().doubleValue());
            pairData.setShortTickerCurrentPrice(shortPosition.getCurrentPrice().doubleValue());

            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç
            BigDecimal totalPnL = longPosition.getUnrealizedPnL().add(shortPosition.getUnrealizedPnL());
            BigDecimal totalFees = longPosition.getOpeningFees().add(shortPosition.getOpeningFees());
            BigDecimal netPnL = totalPnL.subtract(totalFees);

            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –ø–æ–∑–∏—Ü–∏–∏
            BigDecimal profitPercent = calculateProfitPercent(
                    netPnL,
                    pairData.getLongTickerEntryPrice(),
                    pairData.getShortTickerEntryPrice()
            );

            pairData.setProfitChanges(profitPercent);

            log.info("üìä –û–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ñ–∏—Ç –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π {}/{}: {}% (PnL: {}, –∫–æ–º–∏—Å—Å–∏–∏: {})",
                    pairData.getLongTicker(), pairData.getShortTicker(),
                    profitPercent, totalPnL, totalFees);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —ç–∫—Å—Ç—Ä–µ–º—É–º—ã
            updatePairDataStatistics(pairData);

            log.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –ø–∞—Ä—ã {}/{}",
                    pairData.getLongTicker(), pairData.getShortTicker());

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –ø–∞—Ä—ã {}/{}: {}",
                    pairData.getLongTicker(), pairData.getShortTicker(), e.getMessage());
        }
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Ñ–∏—Ç–∞ –æ—Ç —Å—Ä–µ–¥–Ω–µ–π –≤—Ö–æ–¥–Ω–æ–π —Ü–µ–Ω—ã
     * –ï–¥–∏–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π
     */
    private BigDecimal calculateProfitPercent(BigDecimal netPnL, double longEntryPrice, double shortEntryPrice) {
        try {
            BigDecimal longEntry = BigDecimal.valueOf(longEntryPrice);
            BigDecimal shortEntry = BigDecimal.valueOf(shortEntryPrice);
            BigDecimal avgEntryPrice = longEntry.add(shortEntry).divide(BigDecimal.valueOf(2), 4, RoundingMode.HALF_UP);

            if (avgEntryPrice.compareTo(BigDecimal.ZERO) <= 0) {
                log.warn("‚ö†Ô∏è –°—Ä–µ–¥–Ω—è—è –≤—Ö–æ–¥–Ω–∞—è —Ü–µ–Ω–∞ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ –Ω—É–ª—é: {}", avgEntryPrice);
                return BigDecimal.ZERO;
            }

            return netPnL.divide(avgEntryPrice, 4, RoundingMode.HALF_UP)
                    .multiply(BigDecimal.valueOf(100));

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø—Ä–æ—Ñ–∏—Ç–∞: {}", e.getMessage());
            return BigDecimal.ZERO;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —ç–∫—Å—Ç—Ä–µ–º—É–º—ã –¥–ª—è –ø–∞—Ä—ã
     */
    private void updatePairDataStatistics(PairData pairData) {
        BigDecimal longCurrent = BigDecimal.valueOf(pairData.getLongTickerCurrentPrice());
        BigDecimal shortCurrent = BigDecimal.valueOf(pairData.getShortTickerCurrentPrice());

        BigDecimal zScoreEntry = BigDecimal.valueOf(pairData.getZScoreEntry());
        BigDecimal zScoreCurrent = BigDecimal.valueOf(pairData.getZScoreCurrent());
        BigDecimal corrCurrent = BigDecimal.valueOf(pairData.getCorrelationCurrent());

        // –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–∑–∏—Ü–∏–π
        BigDecimal longEntry = BigDecimal.valueOf(pairData.getLongTickerEntryPrice());
        BigDecimal shortEntry = BigDecimal.valueOf(pairData.getShortTickerEntryPrice());

        BigDecimal longReturnPct = longCurrent.subtract(longEntry)
                .divide(longEntry, 10, RoundingMode.HALF_UP)
                .multiply(BigDecimal.valueOf(100));

        BigDecimal shortReturnPct = shortEntry.subtract(shortCurrent)
                .divide(shortEntry, 10, RoundingMode.HALF_UP)
                .multiply(BigDecimal.valueOf(100));

        // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        long entryTime = pairData.getEntryTime();
        long now = System.currentTimeMillis();
        long currentTimeInMinutes = (now - entryTime) / (1000 * 60);

        // –û–∫—Ä—É–≥–ª–µ–Ω–∏—è
        BigDecimal longReturnRounded = longReturnPct.setScale(2, RoundingMode.HALF_UP);
        BigDecimal shortReturnRounded = shortReturnPct.setScale(2, RoundingMode.HALF_UP);
        BigDecimal zScoreRounded = zScoreCurrent.subtract(zScoreEntry).setScale(2, RoundingMode.HALF_UP);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        BigDecimal currentProfitForStats = pairData.getProfitChanges() != null ? pairData.getProfitChanges() : BigDecimal.ZERO;

        // –û–±–Ω–æ–≤–ª—è–µ–º min/max –ø—Ä–æ—Ñ–∏—Ç–∞
        BigDecimal currentMinProfit = pairData.getMinProfitRounded();
        BigDecimal currentMaxProfit = pairData.getMaxProfitRounded();
        long currentTimeToMax = pairData.getTimeInMinutesSinceEntryToMax();
        long currentTimeToMin = pairData.getTimeInMinutesSinceEntryToMin();

        BigDecimal maxProfitRounded;
        long timeInMinutesSinceEntryToMax;
        if (currentMaxProfit == null || currentProfitForStats.compareTo(currentMaxProfit) > 0) {
            maxProfitRounded = currentProfitForStats;
            timeInMinutesSinceEntryToMax = currentTimeInMinutes;
            log.debug("üöÄ –ù–æ–≤—ã–π –º–∞–∫—Å–∏–º—É–º –ø—Ä–∏–±—ã–ª–∏: {}% –∑–∞ {} –º–∏–Ω", maxProfitRounded, timeInMinutesSinceEntryToMax);
        } else {
            maxProfitRounded = currentMaxProfit;
            timeInMinutesSinceEntryToMax = currentTimeToMax;
        }

        BigDecimal minProfitRounded;
        long timeInMinutesSinceEntryToMin;
        if (currentMinProfit == null || currentProfitForStats.compareTo(currentMinProfit) < 0) {
            minProfitRounded = currentProfitForStats;
            timeInMinutesSinceEntryToMin = currentTimeInMinutes;
            log.debug("üìâ –ù–æ–≤—ã–π –º–∏–Ω–∏–º—É–º –ø—Ä–∏–±—ã–ª–∏: {}% –∑–∞ {} –º–∏–Ω", minProfitRounded, timeInMinutesSinceEntryToMin);
        } else {
            minProfitRounded = currentMinProfit;
            timeInMinutesSinceEntryToMin = currentTimeToMin;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Å—Ç—Ä–µ–º—É–º—ã –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫
        updateExtremumValues(pairData, longReturnPct, shortReturnPct, zScoreCurrent, corrCurrent);

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ PairData (–ø—Ä–æ—Ñ–∏—Ç –ù–ï —Ç—Ä–æ–≥–∞–µ–º - –æ–Ω —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ ProfitUpdateService)
        pairData.setLongChanges(longReturnRounded);
        pairData.setShortChanges(shortReturnRounded);
        pairData.setZScoreChanges(zScoreRounded);
        pairData.setMinProfitRounded(minProfitRounded);
        pairData.setMaxProfitRounded(maxProfitRounded);
        pairData.setTimeInMinutesSinceEntryToMax(timeInMinutesSinceEntryToMax);
        pairData.setTimeInMinutesSinceEntryToMin(timeInMinutesSinceEntryToMin);

        log.info("–§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –ø–∞—Ä—ã {}/{}", pairData.getLongTicker(), pairData.getShortTicker());
        log.info("üìä LONG {}: Entry: {}, Current: {}, Changes: {}%", pairData.getLongTicker(), longEntry, longCurrent, longReturnRounded);
        log.info("üìâ SHORT {}: Entry: {}, Current: {}, Changes: {}%", pairData.getShortTicker(), shortEntry, shortCurrent, shortReturnRounded);
        log.info("üí∞ –¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏—Ç: {}%", currentProfitForStats);
        log.info("üìà Max profit: {}%, Min profit: {}%", maxProfitRounded, minProfitRounded);
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —ç–∫—Å—Ç—Ä–µ–º—É–º—ã –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫
     */
    private void updateExtremumValues(PairData pairData, BigDecimal longReturnPct, BigDecimal shortReturnPct,
                                      BigDecimal zScoreCurrent, BigDecimal corrCurrent) {
        BigDecimal minZ = updateMin(pairData.getMinZ(), zScoreCurrent);
        BigDecimal maxZ = updateMax(pairData.getMaxZ(), zScoreCurrent);
        BigDecimal minLong = updateMin(pairData.getMinLong(), longReturnPct);
        BigDecimal maxLong = updateMax(pairData.getMaxLong(), longReturnPct);
        BigDecimal minShort = updateMin(pairData.getMinShort(), shortReturnPct);
        BigDecimal maxShort = updateMax(pairData.getMaxShort(), shortReturnPct);
        BigDecimal minCorr = updateMin(pairData.getMinCorr(), corrCurrent);
        BigDecimal maxCorr = updateMax(pairData.getMaxCorr(), corrCurrent);

        pairData.setMinZ(minZ);
        pairData.setMaxZ(maxZ);
        pairData.setMinLong(minLong);
        pairData.setMaxLong(maxLong);
        pairData.setMinShort(minShort);
        pairData.setMaxShort(maxShort);
        pairData.setMinCorr(minCorr);
        pairData.setMaxCorr(maxCorr);
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
     */
    private BigDecimal updateMin(BigDecimal currentMin, BigDecimal newValue) {
        if (currentMin == null) return newValue;
        return newValue.compareTo(currentMin) < 0 ? newValue : currentMin;
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
     */
    private BigDecimal updateMax(BigDecimal currentMax, BigDecimal newValue) {
        if (currentMax == null) return newValue;
        return newValue.compareTo(currentMax) > 0 ? newValue : currentMax;
    }
}
