package com.example.statarbitrage.core.services;

import com.example.statarbitrage.client_python.PythonRestClient;
import com.example.statarbitrage.common.dto.Candle;
import com.example.statarbitrage.common.dto.ZScoreData;
import com.example.statarbitrage.common.dto.ZScoreParam;
import com.example.statarbitrage.common.model.PairData;
import com.example.statarbitrage.common.model.Settings;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.*;

@Slf4j
@Service
@RequiredArgsConstructor
public class ZScoreService {

    private final PairDataService pairDataService;
    private final ValidateService validateService;
    private final PythonRestClient pythonRestClient;

    /**
     * –°—á–∏—Ç–∞–µ—Ç Z –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä –∏–∑ —Å–≤–µ—á–µ–π.
     */
    private List<ZScoreData> calculateZScoreData(Settings settings, Map<String, List<Candle>> candlesMap, boolean excludeExistingPairs) {
        List<ZScoreData> rawZScoreList = pythonRestClient.fetchZScoreData(settings, candlesMap); //ZScoreParams is null
        if (rawZScoreList == null || rawZScoreList.isEmpty()) {
            log.warn("‚ö†Ô∏è ZScoreService: –ø–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –æ—Ç Python");
            return Collections.emptyList();
        }
        checkZScoreParamsSize(rawZScoreList);
        filterIncompleteZScoreParams(null, rawZScoreList, settings);
        if (excludeExistingPairs) {
            pairDataService.excludeExistingTradingPairs(rawZScoreList);
        }
        return rawZScoreList;
    }

    private void checkZScoreParamsSize(List<ZScoreData> rawZScoreList) {
        log.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ ZScore –¥–∞–Ω–Ω—ã—Ö:");
        for (ZScoreData z : rawZScoreList) {
            List<ZScoreParam> params = z.getZscoreParams();
            int size = params != null ? params.size() : 0;
            String longTicker = z.getUndervaluedTicker();
            String shortTicker = z.getOvervaluedTicker();

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–æ–≤–æ–≥–æ API –µ—Å–ª–∏ zscoreParams –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
            double lastZ = size > 0 ? params.get(size - 1).getZscore() :
                    (z.getLatest_zscore() != null ? z.getLatest_zscore() : 0.0);
            int observations = size > 0 ? size :
                    (z.getTotal_observations() != null ? z.getTotal_observations() : 0);

            String msg = String.format(
                    "üìä –ü–∞—Ä–∞: %s / %s | –ù–∞–±–ª—é–¥–µ–Ω–∏–π: %d | –ü–æ—Å–ª–µ–¥–Ω–∏–π Z: %.2f",
                    longTicker, shortTicker, observations, lastZ
            );
            log.info(msg);
        }
    }

    private void filterIncompleteZScoreParams(PairData pairData, List<ZScoreData> zScoreDataList, Settings settings) {
        double expected = settings.getExpectedZParamsCount();
        log.info("üîç –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π: {}", expected);

        int before = zScoreDataList.size();

        zScoreDataList.removeIf(data -> {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö (–∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è API –µ—Å–ª–∏ zscoreParams –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç)
            List<ZScoreParam> params = data.getZscoreParams();
            int actualSize = params != null ? params.size() :
                    (data.getTotal_observations() != null ? data.getTotal_observations() : 0);

            // –î–ª—è –Ω–æ–≤–æ–≥–æ API –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π - –¥–∞–Ω–Ω—ã–µ —É–∂–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω—ã
            boolean isIncompleteBySize = false;
            if (params != null && !params.isEmpty()) {
                // –¢–æ–ª—å–∫–æ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π
                isIncompleteBySize = actualSize < expected;
                if (isIncompleteBySize) {
                    if (pairData != null) {
                        pairDataService.delete(pairData);
                        log.warn("‚ùå –£–¥–∞–ª–∏–ª–∏ –ø–∞—Ä—É {} / {} ‚Äî –Ω–∞–±–ª—é–¥–µ–Ω–∏–π {} (–æ–∂–∏–¥–∞–ª–æ—Å—å {})",
                                data.getUndervaluedTicker(), data.getOvervaluedTicker(), actualSize, expected);
                    }
                }
            }

            // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π Z-score (–∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è API –µ—Å–ª–∏ zscoreParams –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç)
            double lastZScore;
            if (params != null && !params.isEmpty()) {
                lastZScore = params.get(params.size() - 1).getZscore();
            } else if (data.getLatest_zscore() != null) {
                lastZScore = data.getLatest_zscore();
            } else {
                if (pairData != null) {
                    pairDataService.delete(pairData);
                    log.warn("‚ùå –£–¥–∞–ª–∏–ª–∏ –ø–∞—Ä—É {} / {} ‚Äî –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Z-score",
                            data.getUndervaluedTicker(), data.getOvervaluedTicker());
                }
                return true;
            }

            boolean isIncompleteByZ = lastZScore < settings.getMinZ();
            if (isIncompleteByZ) {
                if (pairData != null) {
                    pairDataService.delete(pairData);
                    log.warn("‚ùå –£–¥–∞–ª–∏–ª–∏ –ø–∞—Ä—É {} / {} ‚Äî Z={} < MinZ={}",
                            data.getUndervaluedTicker(), data.getOvervaluedTicker(), lastZScore, settings.getMinZ());
                }
            }
            return isIncompleteBySize || isIncompleteByZ;
        });

        int after = zScoreDataList.size();
        log.info("‚úÖ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å {} –∏–∑ {} –ø–∞—Ä", after, before);
    }

    public ZScoreData calculateZScoreData(Settings settings, Map<String, List<Candle>> candlesMap) {
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ Python
        ZScoreData zScoreData = pythonRestClient.analyzePair(candlesMap, settings, true);
        if (zScoreData == null) {
            log.warn("‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∞ - zScoreData is null");
            throw new IllegalStateException("‚ö†Ô∏è ‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∞ - zScoreData is null");
        }

        return zScoreData;
    }

    public Optional<ZScoreData> calculateZScoreDataForNewTrade(PairData pairData, Settings settings, Map<String, List<Candle>> candlesMap) {
        ZScoreData zScoreData = pythonRestClient.analyzePair(candlesMap, settings, true);
        if (zScoreData == null) {
            log.warn("‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ zScoreData –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–π–¥–∞! zScoreData is null");
            throw new IllegalStateException("‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ zScoreData –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–π–¥–∞! zScoreData is null");
        }

        List<ZScoreData> zScoreSingletonList = new ArrayList<>(Collections.singletonList(zScoreData));

        checkZScoreParamsSize(zScoreSingletonList);
        filterIncompleteZScoreParams(pairData, zScoreSingletonList, settings);

        return Optional.of(zScoreData);
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ø-N –ª—É—á—à–∏—Ö –ø–∞—Ä.
     */
    public List<ZScoreData> getTopNPairs(Settings settings,
                                         Map<String, List<Candle>> candlesMap,
                                         int count) {

        List<ZScoreData> all = calculateZScoreData(settings, candlesMap, true);
        return obtainTopNBestPairs(candlesMap, settings, all, count);
    }

    private List<ZScoreData> obtainTopNBestPairs(Map<String, List<Candle>> candlesMap, Settings settings, List<ZScoreData> zScoreDataList, int topN) {
        if (zScoreDataList == null || zScoreDataList.isEmpty()) {
            throw new IllegalArgumentException("–û—Ç–æ–±—Ä–∞–Ω–æ 0 –ø–∞—Ä");
        }
        if (topN <= 0) {
            throw new IllegalArgumentException("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä: topN={" + topN + "}");
        }

        List<ZScoreData> bestPairs = new ArrayList<>();
        List<ZScoreData> remainingPairs = new ArrayList<>(zScoreDataList); // –∫–æ–ø–∏—è —Å–ø–∏—Å–∫–∞

        for (int i = 0; i < topN; i++) {
            Optional<ZScoreData> maybeBest = getBestByCriteria(settings, remainingPairs);
            if (maybeBest.isPresent()) {
                ZScoreData best = maybeBest.get();
                logLastZ(best);

                //–¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–∞
                ZScoreData detailedZScoreData = getDetailedZScoreData(best, candlesMap, settings);

                bestPairs.add(detailedZScoreData);
                remainingPairs.remove(best); // –∏—Å–∫–ª—é—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞—Ä—É –∏–∑ –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ—Ç–±–æ—Ä–∞
            }
        }

        return bestPairs;
    }

    private ZScoreData getDetailedZScoreData(ZScoreData best, Map<String, List<Candle>> candlesMap, Settings settings) {
        String overvalued = best.getOvervaluedTicker();
        String undervalued = best.getUndervaluedTicker();

        if (overvalued == null || undervalued == null) {
            throw new IllegalArgumentException("Tickers in 'best' are not initialized");
        }

        log.info("üîç Preparing pair analysis for: {} (undervalued) / {} (overvalued)", undervalued, overvalued);

        // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É —Ç–æ–ª—å–∫–æ —Å –Ω—É–∂–Ω—ã–º–∏ —Ç–∏–∫–µ—Ä–∞–º–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        Map<String, List<Candle>> filteredCandlesMap = new LinkedHashMap<>();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–∫–µ—Ä–∞
        if (!candlesMap.containsKey(undervalued)) {
            throw new IllegalArgumentException("Missing candles data for undervalued ticker: " + undervalued);
        }
        if (!candlesMap.containsKey(overvalued)) {
            throw new IllegalArgumentException("Missing candles data for overvalued ticker: " + overvalued);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–∫–µ—Ä—ã –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        filteredCandlesMap.put(undervalued, candlesMap.get(undervalued));
        filteredCandlesMap.put(overvalued, candlesMap.get(overvalued));

        log.info("üìä Filtered candles map contains {} tickers: {}", filteredCandlesMap.size(), filteredCandlesMap.keySet());

        // –ü–µ—Ä–µ–¥–∞—ë–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ Python
        ZScoreData zScoreData = pythonRestClient.analyzePair(filteredCandlesMap, settings, true);

        if (zScoreData.getLatest_zscore() < 0) {
            String message = String.format("–ü–æ—Å–ª–µ–¥–Ω–∏–π Z {%.2f} < 0 –ø–æ—Å–ª–µ \"/analyze-pair\" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ—ã –æ –ø–∞—Ä–µ %s - %s!!!", zScoreData.getLatest_zscore(), undervalued, overvalued);
            log.error(message);
            throw new IllegalStateException(message);
        }
        return zScoreData;
    }

    private void logLastZ(ZScoreData zScoreData) {
        List<ZScoreParam> params = zScoreData.getZscoreParams();

        if (params != null && !params.isEmpty()) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            int size = params.size();
            log.info("üß™ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 Z-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è {} / {}:", zScoreData.getUndervaluedTicker(), zScoreData.getOvervaluedTicker());
            log.info(String.format("%-5s %-8s %-10s %-10s %-20s", "N", "Z", "ADF", "Corr", "Timestamp"));

            for (int i = Math.max(0, size - 5); i < size; i++) {
                ZScoreParam p = params.get(i);
                log.info(String.format(
                        "%-5d %-8.2f %-10.4f %-10.2f %-20s",
                        i + 1, p.getZscore(), p.getAdfpvalue(), p.getCorrelation(), p.getTimestamp()
                ));
            }
        } else {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            log.info("üß™ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {} / {}:", zScoreData.getUndervaluedTicker(), zScoreData.getOvervaluedTicker());
            log.info("  Latest Z-Score: {}", zScoreData.getLatest_zscore());
            log.info("  Correlation: {}", zScoreData.getCorrelation());
            log.info("  Correlation P-Value: {}", zScoreData.getCorrelation_pvalue());
            log.info("  Cointegration P-Value: {}", zScoreData.getCointegration_pvalue());
            log.info("  Total Observations: {}", zScoreData.getTotal_observations());
            log.info("  Avg R-Squared: {}", zScoreData.getAvg_r_squared());
        }
    }

    public Optional<ZScoreData> getBestByCriteria(Settings settings, List<ZScoreData> dataList) {
        ZScoreData best = null;
        double maxZ = Double.NEGATIVE_INFINITY;

        for (ZScoreData z : dataList) {
            List<ZScoreParam> params = z.getZscoreParams();

            double zVal, pValue, adf, corr;

            if (params != null && !params.isEmpty()) {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                ZScoreParam last = params.get(params.size() - 1);
                zVal = last.getZscore();
                pValue = last.getPvalue();
                adf = last.getAdfpvalue();
                corr = last.getCorrelation();
            } else {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                if (z.getLatest_zscore() == null || z.getCorrelation() == null) continue;

                zVal = z.getLatest_zscore();
                corr = z.getCorrelation();

                // –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                pValue = z.getCorrelation_pvalue() != null ? z.getCorrelation_pvalue() : 0.0;
                adf = z.getCointegration_pvalue() != null ? z.getCointegration_pvalue() : 0.0;
            }

            // 1. Z >= minZ (—Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ Z-score, –∏—Å–∫–ª—é—á–∞–µ–º –∑–µ—Ä–∫–∞–ª—å–Ω—ã–µ –ø–∞—Ä—ã)
            if (zVal < settings.getMinZ()) continue;

            // 2. pValue <= minPValue
            if (pValue > settings.getMinPvalue()) continue;

            // 3. adfValue <= minAdfValue
            if (adf > settings.getMinAdfValue()) continue;

            // 4. corr >= minCorr
            if (corr < settings.getMinCorrelation()) continue;

            // 5. –í—ã–±–∏—Ä–∞–µ–º —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º Z (—Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ)
            if (zVal > maxZ) {
                maxZ = zVal;
                best = z;
            }
        }

        return Optional.ofNullable(best);
    }
}
