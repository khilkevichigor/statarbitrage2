package com.example.statarbitrage.core.services;

import com.example.statarbitrage.client_python.PythonRestClient;
import com.example.statarbitrage.common.dto.Candle;
import com.example.statarbitrage.common.dto.ZScoreData;
import com.example.statarbitrage.common.dto.ZScoreParam;
import com.example.statarbitrage.common.model.PairData;
import com.example.statarbitrage.common.model.Settings;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.*;

@Slf4j
@Service
@RequiredArgsConstructor
public class ZScoreService {

    private final PairDataService pairDataService;
    private final PythonRestClient pythonRestClient;
    private final FilterIncompleteZScoreParamsService filterIncompleteZScoreParamsService;
    private final ObtainBestPairByCriteriaService obtainBestPairByCriteriaService;

    private void checkZScoreParamsSize(List<ZScoreData> rawZScoreList) {
        log.debug("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ ZScore –¥–∞–Ω–Ω—ã—Ö:");
        for (ZScoreData z : rawZScoreList) {
            List<ZScoreParam> params = z.getZScoreHistory();
            int size = params != null ? params.size() : 0;
            String longTicker = z.getUnderValuedTicker();
            String shortTicker = z.getOverValuedTicker();

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–æ–≤–æ–≥–æ API –µ—Å–ª–∏ zscoreParams –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
            double lastZ = size > 0 ? params.get(size - 1).getZscore() :
                    (z.getLatestZScore() != null ? z.getLatestZScore() : 0.0);
            int observations = size > 0 ? size :
                    (z.getTotalObservations() != null ? z.getTotalObservations() : 0);

            String msg = String.format(
                    "üìä –ü–∞—Ä–∞: %s / %s | –ù–∞–±–ª—é–¥–µ–Ω–∏–π: %d | –ü–æ—Å–ª–µ–¥–Ω–∏–π Z: %.2f",
                    longTicker, shortTicker, observations, lastZ
            );
            log.debug(msg);
        }
    }

    private void filterIncompleteZScoreParams(PairData pairData, List<ZScoreData> zScoreDataList, Settings settings) {
        double expected = settings.getExpectedZParamsCount();
        double maxZScore = zScoreDataList.stream()
                .map(data -> (data.getZScoreHistory() != null && !data.getZScoreHistory().isEmpty()) ? data.getZScoreHistory().get(data.getZScoreHistory().size() - 1) : null)
                .filter(Objects::nonNull)
                .map(ZScoreParam::getZscore)
                .max(Comparator.naturalOrder())
                .orElse(0d);
        log.info("üîç –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º: {}, –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π Z-—Å–∫–æ—Ä: {}", expected, maxZScore);

        int before = zScoreDataList.size();

        zScoreDataList.removeIf(data -> {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö (–∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è API –µ—Å–ª–∏ zscoreParams –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç)
            List<ZScoreParam> params = data.getZScoreHistory();
            int actualSize = params != null ? params.size() :
                    (data.getTotalObservations() != null ? data.getTotalObservations() : 0);

            // –î–ª—è –Ω–æ–≤–æ–≥–æ API –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π - –¥–∞–Ω–Ω—ã–µ —É–∂–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω—ã
            boolean isIncompleteBySize = false;
            if (params != null && !params.isEmpty()) {
                // –¢–æ–ª—å–∫–æ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π
                isIncompleteBySize = actualSize < expected;
                if (isIncompleteBySize) {
                    if (pairData != null) {
                        pairDataService.delete(pairData);
                        log.warn("‚ö†Ô∏è –£–¥–∞–ª–∏–ª–∏ –ø–∞—Ä—É {}/{} ‚Äî –Ω–∞–±–ª—é–¥–µ–Ω–∏–π {} (–æ–∂–∏–¥–∞–ª–æ—Å—å {})",
                                data.getUnderValuedTicker(), data.getOverValuedTicker(), actualSize, expected);
                    }
                }
            }

            // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π Z-score (–∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è API –µ—Å–ª–∏ zscoreParams –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç)
            double lastZScore;
            if (params != null && !params.isEmpty()) {
                lastZScore = params.get(params.size() - 1).getZscore(); //todo
            } else if (data.getLatestZScore() != null) {
                lastZScore = data.getLatestZScore();
            } else {
                if (pairData != null) {
                    pairDataService.delete(pairData);
                    log.warn("‚ö†Ô∏è –£–¥–∞–ª–∏–ª–∏ –ø–∞—Ä—É {}/{} ‚Äî –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Z-score",
                            data.getUnderValuedTicker(), data.getOverValuedTicker());
                }
                return true;
            }

            boolean isIncompleteByZ = settings.isUseMinZFilter() && lastZScore < settings.getMinZ();
            if (isIncompleteByZ) {
                if (pairData != null) {
                    pairDataService.delete(pairData);
                    log.warn("‚ö†Ô∏è –£–¥–∞–ª–∏–ª–∏ –ø–∞—Ä—É {}/{} ‚Äî Z-—Å–∫–æ—Ä={} < Z-—Å–∫–æ—Ä Min={}",
                            data.getUnderValuedTicker(), data.getOverValuedTicker(), lastZScore, settings.getMinZ());
                }
            }

            // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ R-squared
            boolean isIncompleteByRSquared = false;
            if (settings.isUseMinRSquaredFilter() && data.getAvgRSquared() != null && data.getAvgRSquared() < settings.getMinRSquared()) {
                isIncompleteByRSquared = true;
                if (pairData != null) {
                    pairDataService.delete(pairData);
                    log.warn("‚ö†Ô∏è –£–¥–∞–ª–∏–ª–∏ –ø–∞—Ä—É {}/{} ‚Äî RSquared={} < MinRSquared={}",
                            data.getUnderValuedTicker(), data.getOverValuedTicker(), data.getAvgRSquared(), settings.getMinRSquared());
                }
            }

            // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ Correlation
            boolean isIncompleteByCorrelation = false;
            if (settings.isUseMinCorrelationFilter() && data.getPearsonCorr() != null && data.getPearsonCorr() < settings.getMinCorrelation()) {
                isIncompleteByCorrelation = true;
                if (pairData != null) {
                    pairDataService.delete(pairData);
                    log.warn("‚ö†Ô∏è –£–¥–∞–ª–∏–ª–∏ –ø–∞—Ä—É {}/{} ‚Äî Correlation={} < MinCorrelation={}",
                            data.getUnderValuedTicker(), data.getOverValuedTicker(), data.getPearsonCorr(), settings.getMinCorrelation());
                }
            }

            // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ pValue
            boolean isIncompleteByPValue = false;
            if (settings.isUseMinPValueFilter()) {
                Double pValue = null;
                if (params != null && !params.isEmpty()) {
                    // –î–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º pValue –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                    pValue = params.get(params.size() - 1).getPvalue();
                } else if (data.getPearsonCorrPValue() != null) {
                    // –î–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º correlation_pvalue
                    pValue = data.getPearsonCorrPValue();
                }

                if (pValue != null && pValue > settings.getMinPValue()) {
                    isIncompleteByPValue = true;
                    if (pairData != null) {
                        pairDataService.delete(pairData);
                        log.warn("‚ö†Ô∏è –£–¥–∞–ª–∏–ª–∏ –ø–∞—Ä—É {}/{} ‚Äî pValue={} > MinPValue={}",
                                data.getUnderValuedTicker(), data.getOverValuedTicker(), pValue, settings.getMinPValue());
                    }
                }
            }

            // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ adfValue
            boolean isIncompleteByAdfValue = false;
            if (settings.isUseMaxAdfValueFilter()) {
                Double adfValue = null;
                if (params != null && !params.isEmpty()) {
                    // –î–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º adfpvalue –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                    adfValue = params.get(params.size() - 1).getAdfpvalue(); //todo –∑–¥–µ—Å—å —Å–º–µ—Å—å —Å—Ç–∞—Ä–æ–π –∏ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏! –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å!!!
                } else if (data.getJohansenCointPValue() != null) {
                    // –î–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º cointegration_pvalue
                    adfValue = data.getJohansenCointPValue(); //todo –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —ç—Ç–æ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ???
                }

                if (adfValue != null && adfValue > settings.getMaxAdfValue()) {
                    isIncompleteByAdfValue = true;
                    if (pairData != null) {
                        pairDataService.delete(pairData);
                        log.warn("‚ö†Ô∏è –£–¥–∞–ª–∏–ª–∏ –ø–∞—Ä—É {}/{} ‚Äî adfValue={} > MaxAdfValue={}",
                                data.getUnderValuedTicker(), data.getOverValuedTicker(), adfValue, settings.getMaxAdfValue());
                    }
                }
            }

            return isIncompleteBySize || isIncompleteByZ || isIncompleteByRSquared || isIncompleteByCorrelation || isIncompleteByPValue || isIncompleteByAdfValue;
        });

        int after = zScoreDataList.size();
        log.debug("‚úÖ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å {} –∏–∑ {} –ø–∞—Ä", after, before);
    }

    public ZScoreData calculateZScoreData(Settings settings, Map<String, List<Candle>> candlesMap) {
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ Python
        ZScoreData zScoreData = pythonRestClient.analyzePair(candlesMap, settings, true);
        if (zScoreData == null) {
            log.warn("‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∞ - zScoreData is null");
            throw new IllegalStateException("‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∞ - zScoreData is null");
        }

        return zScoreData;
    }

    /**
     * –°—á–∏—Ç–∞–µ—Ç Z –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä –∏–∑ —Å–≤–µ—á–µ–π.
     */
    private List<ZScoreData> calculateZScoreData(Settings settings, Map<String, List<Candle>> candlesMap, boolean excludeExistingPairs) {

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        List<ZScoreData> rawZScoreDataList = pythonRestClient.fetchZScoreData(settings, candlesMap); //ZScoreParams is null

        if (rawZScoreDataList == null || rawZScoreDataList.isEmpty()) {
            log.warn("‚ö†Ô∏è ZScoreService: –ø–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –æ—Ç Python");
            return Collections.emptyList();
        }
        checkZScoreParamsSize(rawZScoreDataList);
//        filterIncompleteZScoreParams(null, rawZScoreDataList, settings);
        filterIncompleteZScoreParamsService.filterV2(rawZScoreDataList, settings);
        if (excludeExistingPairs) {
            pairDataService.excludeExistingTradingPairs(rawZScoreDataList);
        }
        return rawZScoreDataList;
    }

    public Optional<ZScoreData> calculateZScoreDataForNewTrade(PairData pairData, Settings settings, Map<String, List<Candle>> candlesMap) {
        ZScoreData zScoreData = pythonRestClient.analyzePair(candlesMap, settings, true);
        if (zScoreData == null) {
            log.warn("‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ zScoreData –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–π–¥–∞! zScoreData is null");
            throw new IllegalStateException("‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ zScoreData –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–π–¥–∞! zScoreData is null");
        }

        List<ZScoreData> zScoreDataSingletonList = new ArrayList<>(Collections.singletonList(zScoreData));
        checkZScoreParamsSize(zScoreDataSingletonList);

        // –ù–ï –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –¥–ª—è –Ω–æ–≤—ã—Ö —Ç—Ä–µ–π–¥–æ–≤ - –ø–∞—Ä–∞ —É–∂–µ –±—ã–ª–∞ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–∞ —Ä–∞–Ω–µ–µ –≤ FetchPairsProcessor
        // filterIncompleteZScoreParamsService.filter(pairData, zScoreDataSingletonList, settings);
        log.debug("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–∂–µ –æ—Ç–æ–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä—ã {}", pairData.getPairName());

        return zScoreDataSingletonList.isEmpty() ? Optional.empty() : Optional.of(zScoreDataSingletonList.get(0));
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ø-N –ª—É—á—à–∏—Ö –ø–∞—Ä.
     */
    public List<ZScoreData> getTopNPairs(Settings settings,
                                         Map<String, List<Candle>> candlesMap,
                                         int count) {

        List<ZScoreData> all = calculateZScoreData(settings, candlesMap, true);
        return obtainTopNBestPairs(candlesMap, settings, all, count);
    }

    private List<ZScoreData> obtainTopNBestPairs(Map<String, List<Candle>> candlesMap, Settings settings, List<ZScoreData> zScoreDataList, int topN) {
        if (topN <= 0) {
            log.warn("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä: topN={}", topN);
            return Collections.emptyList();
        }
        if (zScoreDataList == null || zScoreDataList.isEmpty()) {
            return Collections.emptyList();
        }

        List<ZScoreData> bestPairs = new ArrayList<>();
        List<ZScoreData> remainingPairs = new ArrayList<>(zScoreDataList); // –∫–æ–ø–∏—è —Å–ø–∏—Å–∫–∞

        for (int i = 0; i < topN; i++) {
//            Optional<ZScoreData> maybeBest = getBestByCriteria(settings, remainingPairs);
            Optional<ZScoreData> maybeBest = obtainBestPairByCriteriaService.getBestByCriteriaV2(settings, remainingPairs);
            if (maybeBest.isPresent()) {
                ZScoreData best = maybeBest.get();

                //—Å–º–æ—Ç—Ä–∏–º —á—Ç–æ –º—ã –æ—Ç–æ–±—Ä–∞–ª–∏ –ø–æ —Ç–∏–∫–µ—Ä–∞–º
                List<String> actualBestTickers = new ArrayList<>();
                bestPairs.forEach(b -> {
                    actualBestTickers.add(b.getUnderValuedTicker());
                    actualBestTickers.add(b.getOverValuedTicker());
                });
                //–±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –Ω–æ–≤—ã–µ —Ç–∏–∫–µ—Ä—ã –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ—Ç –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ
                if (actualBestTickers.contains(best.getUnderValuedTicker()) || actualBestTickers.contains(best.getOverValuedTicker())) {
                    log.warn("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—É {}/{} —Ç.–∫. —Ç–∞–∫–∏–µ —Ç–∏–∫–µ—Ä—ã —É–∂–µ –µ—Å—Ç—å –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ! –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –≤–µ–¥–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫!",
                            best.getUnderValuedTicker(), best.getOverValuedTicker());
                    continue;
                }

                logLastZ(best);

                //–¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–∞
                ZScoreData detailedZScoreData = getDetailedZScoreData(best, candlesMap, settings);

                bestPairs.add(detailedZScoreData);
                remainingPairs.remove(best); // –∏—Å–∫–ª—é—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞—Ä—É –∏–∑ –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ—Ç–±–æ—Ä–∞
            }
        }

        return bestPairs;
    }

    private ZScoreData getDetailedZScoreData(ZScoreData best, Map<String, List<Candle>> candlesMap, Settings settings) {
        String overvalued = best.getOverValuedTicker();
        String undervalued = best.getUnderValuedTicker();

        if (overvalued == null || undervalued == null) {
            throw new IllegalArgumentException("–¢–∏–∫–µ—Ä—ã –≤ –æ–±—ä–µ–∫—Ç–µ 'best' –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã");
        }

        log.debug("üîç –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è: {} (undervalued) / {} (overvalued)", undervalued, overvalued);

        // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É —Ç–æ–ª—å–∫–æ —Å –Ω—É–∂–Ω—ã–º–∏ —Ç–∏–∫–µ—Ä–∞–º–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        Map<String, List<Candle>> filteredCandlesMap = new LinkedHashMap<>();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–∫–µ—Ä–∞
        if (!candlesMap.containsKey(undervalued)) {
            throw new IllegalArgumentException("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π –¥–ª—è undervalued —Ç–∏–∫–µ—Ä–∞: " + undervalued);
        }
        if (!candlesMap.containsKey(overvalued)) {
            throw new IllegalArgumentException("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π –¥–ª—è overvalued —Ç–∏–∫–µ—Ä–∞: " + overvalued);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–∫–µ—Ä—ã –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        filteredCandlesMap.put(undervalued, candlesMap.get(undervalued));
        filteredCandlesMap.put(overvalued, candlesMap.get(overvalued));

        log.debug("üìä –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–∞—è –º–∞–ø–∞ —Å–≤–µ—á–µ–π —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–∏–∫–µ—Ä–æ–≤: {{}} {}", filteredCandlesMap.size(), filteredCandlesMap.keySet());

        // –ü–µ—Ä–µ–¥–∞—ë–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ Python
        ZScoreData zScoreData = pythonRestClient.analyzePair(filteredCandlesMap, settings, true);

        if (zScoreData.getLatestZScore() < 0) {
            String message = String.format("‚ùå –ü–æ—Å–ª–µ–¥–Ω–∏–π Z-—Å–∫–æ—Ä {%.2f} < 0 –ø–æ—Å–ª–µ \"/analyze-pair\" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ—ã –æ –ø–∞—Ä–µ %s - %s!!!", zScoreData.getLatestZScore(), undervalued, overvalued);
            log.error(message);
            throw new IllegalStateException(message);
        }
        return zScoreData;
    }

    private void logLastZ(ZScoreData zScoreData) {
        List<ZScoreParam> params = zScoreData.getZScoreHistory();

        if (params != null && !params.isEmpty()) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            int size = params.size();
            log.debug("üß™ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 Z-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è {}/{}:", zScoreData.getUnderValuedTicker(), zScoreData.getOverValuedTicker());
            log.debug(String.format("% -5s % -8s % -10s % -10s % -20s", "N", "Z", "ADF", "Corr", "Timestamp"));

            for (int i = Math.max(0, size - 5); i < size; i++) {
                ZScoreParam p = params.get(i);
                log.debug(String.format(
                        "%-5d %-8.2f %-10.4f %-10.2f %-20s",
                        i + 1, p.getZscore(), p.getAdfpvalue(), p.getCorrelation(), p.getTimestamp()
                ));
            }
        } else {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            log.debug("üß™ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {}/{}:", zScoreData.getUnderValuedTicker(), zScoreData.getOverValuedTicker());
            log.debug("  Latest Z-Score: {}", zScoreData.getLatestZScore());
            log.debug("  Correlation: {}", zScoreData.getPearsonCorr());
            log.debug("  Correlation P-Value: {}", zScoreData.getPearsonCorrPValue());
            log.debug("  Cointegration P-Value: {}", zScoreData.getJohansenCointPValue());
            log.debug("  Total Observations: {}", zScoreData.getTotalObservations());
            log.debug("  Avg R-Squared: {}", zScoreData.getAvgRSquared());
        }
    }

    public Optional<ZScoreData> getBestByCriteria(Settings settings, List<ZScoreData> dataList) {
        ZScoreData best = null;
        double maxZ = Double.NEGATIVE_INFINITY;

        for (ZScoreData z : dataList) {
            List<ZScoreParam> params = z.getZScoreHistory();

            double zVal, pValue, adf, corr;

            if (params != null && !params.isEmpty()) {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                ZScoreParam last = params.get(params.size() - 1);
                zVal = last.getZscore();
                pValue = last.getPvalue();
                adf = last.getAdfpvalue();
                corr = last.getCorrelation();
            } else {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                if (z.getLatestZScore() == null || z.getPearsonCorr() == null) continue;

                zVal = z.getLatestZScore();
                corr = z.getPearsonCorr();

                // –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                pValue = z.getPearsonCorrPValue() != null ? z.getPearsonCorrPValue() : 0.0;
                adf = z.getJohansenCointPValue() != null ? z.getJohansenCointPValue() : 0.0;
            }

            // 1. Z >= minZ (—Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ Z-score, –∏—Å–∫–ª—é—á–∞–µ–º –∑–µ—Ä–∫–∞–ª—å–Ω—ã–µ –ø–∞—Ä—ã)
            if (settings.isUseMinZFilter() && zVal < settings.getMinZ()) continue;

            // 2. pValue <= minPValue
            if (settings.isUseMinPValueFilter() && pValue > settings.getMinPValue()) continue;

            // 3. adfValue <= maxAdfValue
            if (settings.isUseMaxAdfValueFilter() && adf > settings.getMaxAdfValue()) continue;

            // 4. corr >= minCorr
            if (settings.isUseMinCorrelationFilter() && corr < settings.getMinCorrelation()) continue;

            // 5. –í—ã–±–∏—Ä–∞–µ–º —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º Z (—Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ)
            if (zVal > maxZ) {
                maxZ = zVal;
                best = z;
            }
        }

        return Optional.ofNullable(best);
    }
}
