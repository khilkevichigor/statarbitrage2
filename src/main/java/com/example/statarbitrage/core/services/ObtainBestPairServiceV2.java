package com.example.statarbitrage.core.services;

import com.example.statarbitrage.common.dto.ZScoreData;
import com.example.statarbitrage.common.dto.ZScoreParam;
import com.example.statarbitrage.common.model.Settings;
import com.example.statarbitrage.common.utils.NumberFormatter;
import lombok.Data;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Optional;

@Slf4j
@Service
@RequiredArgsConstructor
public class ObtainBestPairServiceV2 {

    /**
     * –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª—É—á—à–µ–π –ø–∞—Ä—ã (–û–ë–ù–û–í–õ–ï–ù–û!)
     * <p>
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ù–û–í–£–Æ —Å–∏—Å—Ç–µ–º—É –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–∞—Ä:
     * - –ù–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ Johansen —Ç–µ—Å—Ç—É - –≤—Å–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ!
     * - Z-Score(40p) + –ö–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è(25p) + –ö–∞—á–µ—Å—Ç–≤–æ(20p) + –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞(10p) + –ë–æ–Ω—É—Å(5p)
     * - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–∫–æ—Ä: 100 –æ—á–∫–æ–≤
     */
    public Optional<ZScoreData> getBestPair(Settings settings, List<ZScoreData> dataList) {
        if (dataList == null || dataList.isEmpty()) {
            return Optional.empty();
        }

        log.info("üéØ –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê: –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à—É—é –ø–∞—Ä—É –∏–∑ {} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ —Å–∫–æ—Ä—É –∫–∞—á–µ—Å—Ç–≤–∞ (–±–µ–∑ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ Johansen)", dataList.size());

        List<PairCandidate> candidates = new ArrayList<>();

        for (ZScoreData z : dataList) {
            PairCandidate candidate = evaluatePair(z, settings);
            if (candidate != null) {
                candidates.add(candidate);
            }
        }

        if (candidates.isEmpty()) {
            log.warn("‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä –ø–æ—Å–ª–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏");
            return Optional.empty();
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–º—É —Å–∫–æ—Ä—É (–ª—É—á—à–∏–π –ø–µ—Ä–≤—ã–π)
        candidates.sort(Comparator.comparingDouble(PairCandidate::getCompositeScore).reversed());

        PairCandidate best = candidates.get(0);
        log.info("üèÜ –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê: –í—ã–±—Ä–∞–Ω–∞ –ª—É—á—à–∞—è –ø–∞—Ä–∞ {}/{} —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º —Å–∫–æ—Ä–æ–º {}. –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫–æ—Ä–∏–Ω–≥ –≤ Filter! –î–µ—Ç–∞–ª–∏: Z-Score={}, –ö–æ—Ä—Ä={}, P-Value(corr)={}, P-Value(coint)={}, R¬≤={}",
                best.getData().getUnderValuedTicker(),
                best.getData().getOverValuedTicker(),
                NumberFormatter.format(best.getCompositeScore(), 2),
                NumberFormatter.format(best.getZScore(), 2),
                NumberFormatter.format(best.getCorrelation(), 3),
                NumberFormatter.format(best.getPValue(), 4),
                NumberFormatter.format(best.getAdfValue(), 4),
                NumberFormatter.format(best.getRSquared(), 3)
        );

        // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ø-3 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        logTopCandidates(candidates);

        return Optional.of(best.getData());
    }

    /**
     * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –ø–∞—Ä—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ù–û–í–û–ô —Å–∏—Å—Ç–µ–º—ã –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
     * –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ - –≤—Å—è –ª–æ–≥–∏–∫–∞ —Å–∫–æ—Ä–∏–Ω–≥–∞ –≤ FilterIncompleteZScoreParamsServiceV2
     */
    private PairCandidate evaluatePair(ZScoreData z, Settings settings) {
        List<ZScoreParam> params = z.getZScoreHistory();

        double zVal, pValue, adf, corr, rSquared;

        if (params != null && !params.isEmpty()) {
            // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            ZScoreParam last = params.get(params.size() - 1);
            zVal = last.getZscore();
            pValue = last.getPvalue();
            adf = last.getAdfpvalue();
            corr = last.getCorrelation();
            rSquared = z.getAvgRSquared() != null ? z.getAvgRSquared() : 0.0;
        } else {
            // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            if (z.getLatestZScore() == null || z.getPearsonCorr() == null) {
                log.warn("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—É —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {}/{}",
                        z.getUnderValuedTicker(), z.getOverValuedTicker());
                return null;
            }

            zVal = z.getLatestZScore();
            corr = z.getPearsonCorr();
            pValue = z.getPearsonCorrPValue() != null ? z.getPearsonCorrPValue() : 0.0;
            adf = z.getJohansenCointPValue() != null ? z.getJohansenCointPValue() : 0.0;
            rSquared = z.getAvgRSquared() != null ? z.getAvgRSquared() : 0.0;
        }

        // ====== –ü–†–û–°–¢–û–ô –ö–ê–õ–ö–£–õ–Ø–¢–û–† –°–ö–û–†–ê (–æ—Å–Ω–æ–≤–Ω–æ–π –≤ Filter) ======
        // –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–∫–æ—Ä–∏–Ω–≥–∞ –≤—ã–Ω–µ—Å–µ–Ω–∞ –≤ FilterIncompleteZScoreParamsServiceV2

        double simplifiedScore = calculateSimplifiedScore(zVal, z);

        return new PairCandidate(z, simplifiedScore, zVal, corr, adf, pValue, rSquared);
    }

    /**
     * –£–ü–†–û–©–ï–ù–ù–´–ô –∫–∞–ª–∫—É–ª—è—Ç–æ—Ä —Å–∫–æ—Ä–∞ (–æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫–æ—Ä–∏–Ω–≥ –≤ Filter)
     * –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–∫–æ—Ä–∏–Ω–≥–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ FilterIncompleteZScoreParamsServiceV2.calculatePairQualityScore()
     */
    private double calculateSimplifiedScore(double zVal, ZScoreData data) {
        // –ü—Ä–æ—Å—Ç–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–∞ - –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤ FilterIncompleteZScoreParamsServiceV2
        double score = 0.0;

        // Z-Score - –≥–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        score += Math.abs(zVal) * 10.0; // –ë–∞–∑–æ–≤—ã–µ –æ—á–∫–∏ –∑–∞ Z-Score

        // –ü—Ä–æ—Å—Ç—ã–µ –±–æ–Ω—É—Å—ã
        if (data.getJohansenCointPValue() != null) {
            score += 5.0; // –ë–æ–Ω—É—Å –∑–∞ Johansen —Ç–µ—Å—Ç
        }

        if (data.getAvgRSquared() != null && data.getAvgRSquared() > 0.8) {
            score += 3.0; // –ë–æ–Ω—É—Å –∑–∞ –≤—ã—Å–æ–∫–∏–π R-squared
        }

        if (data.getPearsonCorr() != null) {
            score += Math.abs(data.getPearsonCorr()) * 2.0; // –ë–æ–Ω—É—Å –∑–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é
        }

        return Math.max(0.0, score);
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å Z-Score
     */
    private double calculateZScoreVolatility(List<ZScoreParam> params) {
        if (params.size() < 10) return 0.0;

        List<Double> recentZScores = params.subList(params.size() - 10, params.size())
                .stream()
                .map(ZScoreParam::getZscore)
                .toList();

        double mean = recentZScores.stream().mapToDouble(Double::doubleValue).average().orElse(0.0);
        double variance = recentZScores.stream()
                .mapToDouble(z -> Math.pow(z - mean, 2))
                .average()
                .orElse(0.0);

        return Math.sqrt(variance);
    }

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç —Ç–æ–ø –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
     */
    private void logTopCandidates(List<PairCandidate> candidates) {
        log.info("üèÖ –¢–æ–ø-3 –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:");

        for (int i = 0; i < Math.min(3, candidates.size()); i++) {
            PairCandidate candidate = candidates.get(i);
            ZScoreData data = candidate.getData();

            String johansenStatus = "‚ùå";
            if (data.getJohansenCointPValue() != null && data.getJohansenCointPValue() > 0) {
                johansenStatus = String.format("‚úÖ (p=%.4f)", data.getJohansenCointPValue());
            }

            log.info("   {}. {}/{} -> –°–∫–æ—Ä: {}, Z: {}, –ö–æ—Ä—Ä: {}, R¬≤: {}, Johansen: {}, ADF: {}",
                    i + 1,
                    data.getUnderValuedTicker(),
                    data.getOverValuedTicker(),
                    NumberFormatter.format(candidate.getCompositeScore(), 2),
                    NumberFormatter.format(candidate.getZScore(), 2),
                    NumberFormatter.format(candidate.getCorrelation(), 3),
                    NumberFormatter.format(candidate.getRSquared(), 3),
                    johansenStatus,
                    NumberFormatter.format(candidate.getAdfValue(), 4)
            );
        }
    }

    /**
     * –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
     */
    @Data
    private static class PairCandidate {
        // Getters
        private final ZScoreData data;
        private final double compositeScore;
        private final double zScore;
        private final double correlation;
        private final double adfValue;
        private final double pValue;
        private final double rSquared;

        public PairCandidate(ZScoreData data, double compositeScore, double zScore,
                             double correlation, double adfValue, double pValue, double rSquared) {
            this.data = data;
            this.compositeScore = compositeScore;
            this.zScore = zScore;
            this.correlation = correlation;
            this.adfValue = adfValue;
            this.pValue = pValue;
            this.rSquared = rSquared;
        }
    }
}
