package com.example.statarbitrage.processor;

import com.example.statarbitrage.dto.TradingPair;
import com.example.statarbitrage.model.Candle;
import com.example.statarbitrage.model.PairData;
import com.example.statarbitrage.model.Settings;
import com.example.statarbitrage.model.TradeStatus;
import com.example.statarbitrage.service.ModernPairDataService;
import com.example.statarbitrage.service.ModernZScoreService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.Map;

/**
 * –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç TradingPair –≤–º–µ—Å—Ç–æ ZScoreData
 */
@Slf4j
@Component
@RequiredArgsConstructor
public class ModernUpdateTradeProcessor {
    
    private final ModernZScoreService zScoreService;
    private final ModernPairDataService pairDataService;

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–∞
     */
    public boolean updateTrade(PairData pairData, Settings settings, Map<String, List<Candle>> candlesMap) {
        log.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∞: {} / {}", 
            pairData.getLongTicker(), pairData.getShortTicker());
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã
            TradingPair currentData = zScoreService.analyzeSpecificPair(
                pairData.getLongTicker(), 
                pairData.getShortTicker(), 
                candlesMap, 
                settings);
            
            if (currentData == null) {
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞—Ä—ã {} / {}", 
                    pairData.getLongTicker(), pairData.getShortTicker());
                return false;
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            double previousZ = pairData.getZScoreCurrent();
            TradeStatus previousStatus = pairData.getStatus();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            pairDataService.updatePairData(pairData, currentData, candlesMap);
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            analyzeTradeChanges(pairData, currentData, previousZ, previousStatus);
            
            // –õ–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            logTradeUpdate(pairData, currentData, previousZ);
            
            return true;
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–π–¥–∞ {}: {}", 
                pairData.getLongTicker(), e.getMessage(), e);
            return false;
        }
    }

    /**
     * –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤
     */
    public int updateActiveTrades(List<PairData> activeTrades, Settings settings, Map<String, List<Candle>> candlesMap) {
        log.info("üîÑ –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ {} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–π–¥–æ–≤", activeTrades.size());
        
        int successCount = 0;
        
        for (PairData trade : activeTrades) {
            try {
                boolean updated = updateTrade(trade, settings, candlesMap);
                if (updated) {
                    successCount++;
                }
            } catch (Exception e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–π–¥–∞ {}: {}", trade.getLongTicker(), e.getMessage());
            }
        }
        
        log.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {} –∏–∑ {} —Ç—Ä–µ–π–¥–æ–≤", successCount, activeTrades.size());
        return successCount;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ç—Ä–µ–π–¥–∞
     */
    public boolean shouldExitTrade(PairData pairData, Settings settings) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ Z-score (–≤–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ä–µ–¥–Ω–µ–º—É)
        if (isZScoreNearZero(pairData, settings)) {
            log.info("üéØ –¢—Ä–µ–π–¥ {} –≥–æ—Ç–æ–≤ –∫ –≤—ã—Ö–æ–¥—É: Z-score –ø—Ä–∏–±–ª–∏–∑–∏–ª—Å—è –∫ –Ω—É–ª—é ({})", 
                pairData.getLongTicker(), String.format("%.2f", pairData.getZScoreCurrent()));
            return true;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
        if (isMaxHoldingTimeReached(pairData, settings)) {
            log.info("‚è∞ –¢—Ä–µ–π–¥ {} –≥–æ—Ç–æ–≤ –∫ –≤—ã—Ö–æ–¥—É: –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è", 
                pairData.getLongTicker());
            return true;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å —É—Å–ª–æ–≤–∏—è
        if (isStopLossTriggered(pairData, settings)) {
            log.info("üõë –¢—Ä–µ–π–¥ {} –≥–æ—Ç–æ–≤ –∫ –≤—ã—Ö–æ–¥—É: —Å—Ä–∞–±–æ—Ç–∞–ª —Å—Ç–æ–ø-–ª–æ—Å—Å", 
                pairData.getLongTicker());
            return true;
        }
        
        return false;
    }

    /**
     * –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ç—Ä–µ–π–¥–µ
     */
    private void analyzeTradeChanges(PairData pairData, TradingPair currentData, 
                                   double previousZ, TradeStatus previousStatus) {
        double currentZ = pairData.getZScoreCurrent();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–≤–æ—Ä–æ—Ç —Ç—Ä–µ–Ω–¥–∞
        if (hasZScoreReversed(previousZ, currentZ)) {
            log.info("üîÑ –†–ê–ó–í–û–†–û–¢ Z-SCORE –≤ —Ç—Ä–µ–π–¥–µ {}: {} ‚Üí {}", 
                pairData.getLongTicker(), String.format("%.2f", previousZ), String.format("%.2f", currentZ));
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        if (pairData.getStatus() != previousStatus) {
            log.info("üìä –ò–ó–ú–ï–ù–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê —Ç—Ä–µ–π–¥–∞ {}: {} ‚Üí {}", 
                pairData.getLongTicker(), previousStatus, pairData.getStatus());
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞
        double signalStrength = Math.abs(currentZ);
        if (signalStrength > 3.0) {
            log.warn("‚ö†Ô∏è –°–ò–õ–¨–ù–´–ô –°–ò–ì–ù–ê–õ –≤ —Ç—Ä–µ–π–¥–µ {}: Z-score = {}, –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è = {}", 
                pairData.getLongTicker(), String.format("%.2f", currentZ), 
                String.format("%.2f", currentData.getCorrelation() != null ? currentData.getCorrelation() : 0.0));
        }
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–π–¥–∞
     */
    private void logTradeUpdate(PairData pairData, TradingPair currentData, double previousZ) {
        log.info("üìà –û–ë–ù–û–í–õ–ï–ù–ò–ï –¢–†–ï–ô–î–ê: {}", pairData.getLongTicker());
        log.info("   Z-Score: {} ‚Üí {} (–∏–∑–º–µ–Ω–µ–Ω–∏–µ: {})", 
            String.format("%.2f", previousZ), 
            String.format("%.2f", pairData.getZScoreCurrent()), 
            String.format("%.2f", pairData.getZScoreCurrent() - previousZ));
        log.info("   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {}", currentData.getStatisticsString());
        log.info("   –°—Ç–∞—Ç—É—Å: {}", pairData.getStatus());
        
        // –†–∞—Å—á–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ P&L (–µ—Å–ª–∏ –µ—Å—Ç—å —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞)
        if (pairData.getLongTickerEntryPrice() > 0 && pairData.getShortTickerEntryPrice() > 0) {
            double longPnl = ((pairData.getLongTickerCurrentPrice() - pairData.getLongTickerEntryPrice()) 
                            / pairData.getLongTickerEntryPrice()) * 100;
            double shortPnl = ((pairData.getShortTickerEntryPrice() - pairData.getShortTickerCurrentPrice()) 
                             / pairData.getShortTickerEntryPrice()) * 100;
            double totalPnl = (longPnl + shortPnl) / 2;
            
            log.info("   P&L: LONG={}%, SHORT={}%, TOTAL={}%", 
                String.format("%.2f", longPnl), String.format("%.2f", shortPnl), String.format("%.2f", totalPnl));
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ Z-score
     */
    private boolean hasZScoreReversed(double previousZ, double currentZ) {
        return (previousZ > 0 && currentZ < 0) || (previousZ < 0 && currentZ > 0);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è Z-score –∫ –Ω—É–ª—é
     */
    private boolean isZScoreNearZero(PairData pairData, Settings settings) {
        double currentZ = Math.abs(pairData.getZScoreCurrent());
        double exitThreshold = settings.getExitZMin() > 0 ? settings.getExitZMin() : 0.5;
        return currentZ <= exitThreshold;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è
     */
    private boolean isMaxHoldingTimeReached(PairData pairData, Settings settings) {
        if (settings.getExitTimeHours() <= 0) {
            return false;
        }
        
        long currentTime = System.currentTimeMillis();
        long entryTime = pairData.getTimestamp();
        long holdingHours = (currentTime - entryTime) / (1000 * 60 * 60);
        
        return holdingHours >= settings.getExitTimeHours();
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
     */
    private boolean isStopLossTriggered(PairData pairData, Settings settings) {
        if (settings.getExitStop() <= 0 || pairData.getLongTickerEntryPrice() <= 0) {
            return false;
        }
        
        // –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç P&L
        double longPnl = ((pairData.getLongTickerCurrentPrice() - pairData.getLongTickerEntryPrice()) 
                        / pairData.getLongTickerEntryPrice()) * 100;
        double shortPnl = ((pairData.getShortTickerEntryPrice() - pairData.getShortTickerCurrentPrice()) 
                         / pairData.getShortTickerEntryPrice()) * 100;
        double totalPnl = (longPnl + shortPnl) / 2;
        
        return totalPnl <= settings.getExitStop();
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç—Ä–µ–π–¥–∞ –∫ –∑–∞–∫—Ä—ã—Ç–∏—é
     */
    public void prepareTradeForExit(PairData pairData, String reason) {
        log.info("üö™ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç—Ä–µ–π–¥–∞ {} –∫ –∑–∞–∫—Ä—ã—Ç–∏—é. –ü—Ä–∏—á–∏–Ω–∞: {}", 
            pairData.getLongTicker(), reason);
        
        pairData.setStatus(TradeStatus.CLOSING);
        
        log.info("‚úÖ –¢—Ä–µ–π–¥ {} –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –∫ –∑–∞–∫—Ä—ã—Ç–∏—é", pairData.getLongTicker());
    }
}