package com.example.statarbitrage.processor;

import com.example.statarbitrage.dto.TradingPair;
import com.example.statarbitrage.model.Candle;
import com.example.statarbitrage.model.PairData;
import com.example.statarbitrage.model.Settings;
import com.example.statarbitrage.model.TradeStatus;
import com.example.statarbitrage.service.ModernPairDataService;
import com.example.statarbitrage.service.ModernZScoreService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.Map;
import java.util.Optional;

/**
 * –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–æ–≤—ã—Ö —Ç—Ä–µ–π–¥–æ–≤
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç TradingPair –≤–º–µ—Å—Ç–æ ZScoreData
 */
@Slf4j
@Component
@RequiredArgsConstructor
public class ModernStartTradeProcessor {
    
    private final ModernZScoreService zScoreService;
    private final ModernPairDataService pairDataService;

    /**
     * –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–π–¥–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä—ã
     */
    public boolean startNewTrade(PairData pairData, Settings settings, Map<String, List<Candle>> candlesMap) {
        log.info("üöÄ –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–π–¥–∞ –¥–ª—è –ø–∞—Ä—ã: {} / {}", 
            pairData.getLongTicker(), pairData.getShortTicker());
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã
            Optional<TradingPair> tradingPairOpt = zScoreService.calculateTradingPairForNewTrade(settings, candlesMap);
            
            if (tradingPairOpt.isEmpty()) {
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–π–¥–∞");
                return false;
            }
            
            TradingPair tradingPair = tradingPairOpt.get();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–∞ –∂–µ –ø–∞—Ä–∞
            if (!isSamePair(pairData, tradingPair)) {
                log.warn("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–Ω–∞—è –ø–∞—Ä–∞ {} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–π {} / {}", 
                    tradingPair.getDisplayName(), pairData.getLongTicker(), pairData.getShortTicker());
                return false;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Ç—Ä–µ–π–¥
            if (!isValidForNewTrade(tradingPair, settings)) {
                log.warn("‚ö†Ô∏è –ü–∞—Ä–∞ {} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è–º –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–π–¥–∞: {}", 
                    tradingPair.getDisplayName(), tradingPair.getStatisticsString());
                return false;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º PairData –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            pairDataService.updatePairData(pairData, tradingPair, candlesMap);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å TRADING –∏ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞
            startTradingProcess(pairData, candlesMap);
            
            // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ä—Ç
            logSuccessfulTradeStart(pairData, tradingPair);
            
            return true;
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–π–¥–∞ –¥–ª—è {}: {}", 
                pairData.getLongTicker(), e.getMessage(), e);
            return false;
        }
    }

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∏ –∑–∞–ø—É—Å–∫ –ª—É—á—à–µ–≥–æ —Ç—Ä–µ–π–¥–∞
     */
    public Optional<PairData> startBestAvailableTrade(Settings settings, 
                                                     Map<String, List<Candle>> candlesMap,
                                                     List<PairData> activePairs) {
        log.info("üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ª—É—á—à–µ–≥–æ —Ç—Ä–µ–π–¥–∞");
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –ª—É—á—à—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –ø–∞—Ä—É
            Optional<TradingPair> bestPairOpt = zScoreService.calculateTradingPairForNewTrade(settings, candlesMap);
            
            if (bestPairOpt.isEmpty()) {
                log.info("‚ÑπÔ∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç—Ä–µ–π–¥–∞");
                return Optional.empty();
            }
            
            TradingPair bestPair = bestPairOpt.get();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–∞ –Ω–µ —Ç–æ—Ä–≥—É–µ—Ç—Å—è —É–∂–µ
            boolean alreadyTrading = activePairs.stream()
                    .anyMatch(active -> isSamePair(active, bestPair));
            
            if (alreadyTrading) {
                log.info("‚ÑπÔ∏è –õ—É—á—à–∞—è –ø–∞—Ä–∞ {} —É–∂–µ —Ç–æ—Ä–≥—É–µ—Ç—Å—è", bestPair.getDisplayName());
                return Optional.empty();
            }
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π PairData –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–π–¥
            PairData newPairData = pairDataService.createPairData(bestPair, candlesMap);
            
            boolean started = startNewTrade(newPairData, settings, candlesMap);
            
            if (started) {
                log.info("üéâ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—â–µ–Ω —Ç—Ä–µ–π–¥: {}", newPairData.getLongTicker());
                return Optional.of(newPairData);
            } else {
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç—Ä–µ–π–¥ –¥–ª—è {}", bestPair.getDisplayName());
                return Optional.empty();
            }
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ç—Ä–µ–π–¥–∞: {}", e.getMessage(), e);
            return Optional.empty();
        }
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–π–¥–∞
     */
    private boolean isValidForNewTrade(TradingPair pair, Settings settings) {
        // –û—Å–Ω–æ–≤–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
        if (!pair.isValidForTradingExtended(
                settings.getMinCorrelation(), 
                settings.getMinPvalue(), 
                settings.getMinZ(),
                settings.getMinAdfValue())) {
            return false;
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–π–¥–∞
        double signalStrength = pair.getSignalStrength();
        if (signalStrength < settings.getMinZ() * 1.2) { // –¢—Ä–µ–±—É–µ–º 20% –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ Z
            log.debug("Signal strength {:.2f} below threshold {:.2f}", 
                signalStrength, settings.getMinZ() * 1.2);
            return false;
        }
        
        return true;
    }

    /**
     * –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
     */
    private void startTradingProcess(PairData pairData, Map<String, List<Candle>> candlesMap) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ –∏–∑ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω
        double longPrice = pairData.getLongTickerCurrentPrice();
        double shortPrice = pairData.getShortTickerCurrentPrice();
        
        pairData.setLongTickerEntryPrice(longPrice);
        pairData.setShortTickerEntryPrice(shortPrice);
        pairData.setZScoreEntry(pairData.getZScoreCurrent());
        pairData.setStatus(TradeStatus.TRADING);
        
        log.info("üíπ –¢–æ—á–∫–∏ –≤—Ö–æ–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: LONG {} = ${:.2f}, SHORT {} = ${:.2f}, Z = {:.2f}",
            pairData.getLongTicker(), pairData.getLongTickerEntryPrice(),
            pairData.getShortTicker(), pairData.getShortTickerEntryPrice(),
            pairData.getZScoreEntry());
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ç—Ä–µ–π–¥–∞
     */
    private void logSuccessfulTradeStart(PairData pairData, TradingPair tradingPair) {
        log.info("üéâ –ù–û–í–´–ô –¢–†–ï–ô–î –ó–ê–ü–£–©–ï–ù:");
        log.info("   –ü–∞—Ä–∞: {} ‚Üí {}", 
            tradingPair.getBuyTicker(), tradingPair.getSellTicker());
        log.info("   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {}", tradingPair.getStatisticsString());
        log.info("   –¶–µ–Ω—ã –≤—Ö–æ–¥–∞: LONG=${:.2f}, SHORT=${:.2f}", 
            pairData.getLongTickerEntryPrice(), pairData.getShortTickerEntryPrice());
        log.info("   Z-Score –≤—Ö–æ–¥–∞: {:.2f}", pairData.getZScoreEntry());
        log.info("   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {}", tradingPair.getTradeDirection());
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ PairData –∏ TradingPair –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç –æ–¥–Ω—É –ø–∞—Ä—É
     */
    private boolean isSamePair(PairData pairData, TradingPair tradingPair) {
        return (pairData.getLongTicker().equals(tradingPair.getBuyTicker()) &&
                pairData.getShortTicker().equals(tradingPair.getSellTicker())) ||
               (pairData.getLongTicker().equals(tradingPair.getSellTicker()) &&
                pairData.getShortTicker().equals(tradingPair.getBuyTicker()));
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä—ã –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ
     */
    public void preparePairForTrading(PairData pairData, Settings settings, Map<String, List<Candle>> candlesMap) {
        log.info("üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä—ã {} –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ", pairData.getLongTicker());
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
        pairDataService.updatePairData(pairData, 
            pairDataService.convertToTradingPair(pairData), candlesMap);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å SELECTED
        pairData.setStatus(TradeStatus.SELECTED);
        
        log.info("‚úÖ –ü–∞—Ä–∞ {} –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ", pairData.getLongTicker());
    }
}