package com.example.statarbitrage.processor;

import com.example.statarbitrage.dto.TradingPair;
import com.example.statarbitrage.model.Candle;
import com.example.statarbitrage.model.PairData;
import com.example.statarbitrage.model.Settings;
import com.example.statarbitrage.service.ModernPairDataService;
import com.example.statarbitrage.service.ModernZScoreService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.Map;

/**
 * –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç TradingPair –≤–º–µ—Å—Ç–æ ZScoreData
 */
@Slf4j
@Component
@RequiredArgsConstructor
public class ModernFetchPairsProcessor {
    
    private final ModernZScoreService zScoreService;
    private final ModernPairDataService pairDataService;

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –¥–ª—è UI
     */
    public List<PairData> fetchPairs(Settings settings, Map<String, List<Candle>> candlesMap, int count) {
        log.info("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ {} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä —á–µ—Ä–µ–∑ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä", count);
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø–∞—Ä—ã —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API
            List<TradingPair> tradingPairs = zScoreService.getTopNPairs(settings, candlesMap, count);
            
            if (tradingPairs.isEmpty()) {
                log.warn("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫—Ä–∏—Ç–µ—Ä–∏—è–º");
                return List.of();
            }
            
            // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ä—ã
            log.info("üìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã:");
            for (int i = 0; i < tradingPairs.size(); i++) {
                TradingPair pair = tradingPairs.get(i);
                log.info("{}. {} ‚Üí {} | {}", 
                    i + 1,
                    pair.getBuyTicker(),
                    pair.getSellTicker(),
                    pair.getStatisticsString());
            }
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PairData –¥–ª—è UI
            List<PairData> pairDataList = pairDataService.createPairDataList(tradingPairs, candlesMap);
            
            log.info("‚úÖ –°–æ–∑–¥–∞–Ω–æ {} –æ–±—ä–µ–∫—Ç–æ–≤ PairData –¥–ª—è UI", pairDataList.size());
            return pairDataList;
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä: {}", e.getMessage(), e);
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä", e);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ª—É—á—à–µ–π –ø–∞—Ä—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
     */
    public PairData fetchBestPair(Settings settings, Map<String, List<Candle>> candlesMap) {
        log.info("üéØ –ü–æ–∏—Å–∫ –ª—É—á—à–µ–π —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏");
        
        TradingPair bestPair = zScoreService.calculateTradingPairData(settings, candlesMap);
        
        if (bestPair == null) {
            log.warn("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏");
            return null;
        }
        
        log.info("üèÜ –õ—É—á—à–∞—è –ø–∞—Ä–∞: {} | {}", bestPair.getDisplayName(), bestPair.getStatisticsString());
        
        return pairDataService.createPairData(bestPair, candlesMap);
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
     */
    public List<TradingPair> validateAndFilterPairs(List<TradingPair> pairs, Settings settings) {
        log.info("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è {} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä", pairs.size());
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
        zScoreService.validatePairsSize(pairs, 1);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö Z-score
        zScoreService.validatePositiveZScore(pairs);
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
        List<TradingPair> validPairs = pairs.stream()
                .filter(pair -> pair.isValidForTradingExtended(
                    settings.getMinCorrelation(),
                    settings.getMinPvalue(),
                    settings.getMinZ(),
                    settings.getMinAdfValue()))
                .toList();
        
        log.info("‚úÖ –ü—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é {} –ø–∞—Ä –∏–∑ {}", validPairs.size(), pairs.size());
        return validPairs;
    }

    /**
     * –ò—Å–∫–ª—é—á–µ–Ω–∏–µ —É–∂–µ —Ç–æ—Ä–≥—É—é—â–∏—Ö—Å—è –ø–∞—Ä
     */
    public List<TradingPair> excludeActivePairs(List<TradingPair> newPairs, List<PairData> activePairs) {
        log.info("üö´ –ò—Å–∫–ª—é—á–µ–Ω–∏–µ {} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä –∏–∑ {} –Ω–æ–≤—ã—Ö", activePairs.size(), newPairs.size());
        
        return pairDataService.excludeExistingTradingPairs(newPairs, activePairs);
    }

    /**
     * –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏
     */
    public List<PairData> fetchValidPairs(Settings settings, 
                                         Map<String, List<Candle>> candlesMap, 
                                         List<PairData> activePairs, 
                                         int count) {
        log.info("üîÑ –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ª—É—á–µ–Ω–∏—è {} –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä", count);
        
        try {
            // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–∞—Ä—ã
            List<TradingPair> allPairs = zScoreService.getTopNPairs(settings, candlesMap, count * 2); // –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            
            // 2. –í–∞–ª–∏–¥–∏—Ä—É–µ–º
            List<TradingPair> validPairs = validateAndFilterPairs(allPairs, settings);
            
            // 3. –ò—Å–∫–ª—é—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ
            List<TradingPair> newPairs = excludeActivePairs(validPairs, activePairs);
            
            // 4. –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            List<TradingPair> limitedPairs = newPairs.stream().limit(count).toList();
            
            // 5. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PairData
            List<PairData> result = pairDataService.createPairDataList(limitedPairs, candlesMap);
            
            log.info("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω: –ø–æ–ª—É—á–µ–Ω–æ {} —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–∞—Ä", result.size());
            return result;
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–ª–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä: {}", e.getMessage(), e);
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä", e);
        }
    }
}