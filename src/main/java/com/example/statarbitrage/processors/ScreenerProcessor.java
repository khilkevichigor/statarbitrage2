package com.example.statarbitrage.processors;

import com.example.statarbitrage.api.OkxClient;
import com.example.statarbitrage.events.SendAsTextEvent;
import com.example.statarbitrage.messages.SignalMessageBuilder;
import com.example.statarbitrage.model.CoinParameters;
import com.example.statarbitrage.model.UserSettings;
import com.example.statarbitrage.services.CoinParametersService;
import com.example.statarbitrage.services.ConditionService;
import com.example.statarbitrage.services.EventSendService;
import com.example.statarbitrage.services.SettingsService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

import java.util.HashSet;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.stream.Collectors;

@Slf4j
@Component
@RequiredArgsConstructor
public class ScreenerProcessor {
    private final OkxClient okxClient;
    private final EventSendService eventSendService;
    private final SettingsService settingsService;
    private final CoinParametersService coinParametersService;
    private final ConditionService conditionService;
    private Set<String> previouslyFoundCoins = new HashSet<>();

    public void process(String chatId, String symol) {
        UserSettings userSettings = settingsService.getSettings(Long.parseLong(chatId));
        List<Double> btcCloses = okxClient.getCloses("BTC-USDT-SWAP", userSettings.getHtf().getTfName(), 300); // –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        if (Objects.nonNull(symol)) {
            scanCoin(chatId, symol, userSettings, btcCloses);
        } else {
            scanAll(chatId, userSettings, btcCloses);
        }
    }

    private void scanCoin(String chatId, String symbol, UserSettings userSettings, List<Double> btcCloses) {
        CoinParameters coinParameters = coinParametersService.getParameters(symbol, userSettings, btcCloses);
        if (!conditionService.checkAndSetEmoji(userSettings, coinParameters)) {
            //ignore
        }
        String signalMessage = SignalMessageBuilder.buildSignalText(userSettings, coinParameters);
        sendSignal(chatId, signalMessage);
    }

    private void scanAll(String chatId, UserSettings userSettings, List<Double> btcCloses) {
        sendText(chatId, "üîé –ò—â—É –º–æ–Ω–µ—Ç—ã...");
        long startTime = System.currentTimeMillis();

        Set<String> swapTickers = okxClient.getSwapTickers();
        int totalSymbols = swapTickers.size();

        ExecutorService executor = Executors.newFixedThreadPool(5); // –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ 20, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        List<CompletableFuture<Boolean>> futures = swapTickers.stream()
                .map(symbol -> CompletableFuture.supplyAsync(() -> {
                    try {
                        CoinParameters coinParameters = coinParametersService.getParameters(symbol, userSettings, btcCloses);
                        if (!conditionService.checkAndSetEmoji(userSettings, coinParameters)) {
                            return false;
                        }
                        String signalMessage = SignalMessageBuilder.buildSignalText(userSettings, coinParameters);
                        sendSignal(chatId, signalMessage);
                        return true;
                    } catch (Exception e) {
                        log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {}: {}", symbol, e.getMessage(), e);
                        return false;
                    }
                }, executor))
                .toList();

        // –î–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á –∏ –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤
        long foundCount = futures.stream()
                .map(CompletableFuture::join)
                .filter(Boolean::booleanValue)
                .count();

        executor.shutdown();

        long endTime = System.currentTimeMillis();
        long durationMillis = endTime - startTime;
        long minutes = durationMillis / 1000 / 60;
        long seconds = (durationMillis / 1000) % 60;

        sendText(chatId, String.format("–ù–∞ —ç—Ç–æ–º –≤—Å–µ! –ù–∞–π–¥–µ–Ω–æ: %d (–∏–∑ %d –º–æ–Ω–µ—Ç –∑–∞ %d –º–∏–Ω %d —Å–µ–∫)", foundCount, totalSymbols, minutes, seconds));
    }

    public String scanAllAuto(String chatId) {
        long startTime = System.currentTimeMillis();
        UserSettings userSettings = settingsService.getSettings(Long.parseLong(chatId));
        List<Double> btcCloses = okxClient.getCloses("BTC-USDT-SWAP", userSettings.getHtf().getTfName(), 300); // –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏

        Set<String> swapTickers = okxClient.getSwapTickers();
        if (userSettings.isUseTopGainersLosers()) {
            swapTickers = coinParametersService.getTopGainersLosers(swapTickers, userSettings.getTopGainersLosersQnty());
        }
        int totalSymbols = swapTickers.size();

        ExecutorService executor = Executors.newFixedThreadPool(5); // –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        Set<String> currentFoundCoins = ConcurrentHashMap.newKeySet(); // –ø–æ—Ç–æ–∫–æ-–±–µ–∑–æ–ø–∞—Å–Ω—ã–π Set
        List<CompletableFuture<String>> futures = swapTickers.stream()
                .map(symbol -> CompletableFuture.supplyAsync(() -> {
                    try {
                        CoinParameters coinParameters = coinParametersService.getParameters(symbol, userSettings, btcCloses);

                        if (!conditionService.checkAndSetEmoji(userSettings, coinParameters)) {
                            return null;
                        }
                        String shortSymbol = symbol.replace("-USDT-SWAP", "") + " " + coinParameters.getEmoji();

                        String info = SignalMessageBuilder.getInfo(coinParameters, userSettings);

                        currentFoundCoins.add(shortSymbol);

                        boolean isNew = !previouslyFoundCoins.contains(shortSymbol);

                        return isNew ? shortSymbol + "*" + info : shortSymbol + info;
                    } catch (Exception e) {
                        log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {}: {}", symbol, e.getMessage(), e);
                        return null;
                    }
                }, executor))
                .toList();

        List<String> foundSymbols = futures.stream()
                .map(CompletableFuture::join)
                .filter(Objects::nonNull)
                .toList();

        executor.shutdown();

        // –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã ‚Äî –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–µ
        previouslyFoundCoins.retainAll(currentFoundCoins); // —É–¥–∞–ª–∏—Ç—å —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ –Ω–µ –ø–æ—è–≤–ª—è—é—Ç—Å—è
        previouslyFoundCoins.addAll(currentFoundCoins); // –¥–æ–±–∞–≤–∏—Ç—å –≤—Å–µ —Ç–µ–∫—É—â–∏–µ

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –≤ —Å—Ç–æ–ª–±–∏–∫
        String output = foundSymbols.stream()
                .sorted(String::compareToIgnoreCase)
                .collect(Collectors.joining("\n"));

        long durationMillis = System.currentTimeMillis() - startTime;
        long minutes = durationMillis / 1000 / 60;
        long seconds = (durationMillis / 1000) % 60;
        log.info("–°–∫–∞–Ω –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ {} –∏–∑ {} –∑–∞ {} –º–∏–Ω {} —Å–µ–∫", foundSymbols.size(), totalSymbols, minutes, seconds);

        return String.join(", ", output);
    }

    private void sendSignal(String chatId, String text) {
        System.out.println(text);
        sendText(chatId, text);
    }

    private void sendText(String chatId, String text) {
        eventSendService.sendAsText(SendAsTextEvent.builder()
                .chatId(chatId)
                .text(text)
                .enableMarkdown(true)
                .build());
    }
}
