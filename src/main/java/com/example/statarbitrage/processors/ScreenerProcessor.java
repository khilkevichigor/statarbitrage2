package com.example.statarbitrage.processors;

import com.example.statarbitrage.api.OkxClient;
import com.example.statarbitrage.events.SendAsPhotoEvent;
import com.example.statarbitrage.events.SendAsTextEvent;
import com.example.statarbitrage.model.EntryData;
import com.example.statarbitrage.model.Settings;
import com.example.statarbitrage.model.ZScoreEntry;
import com.example.statarbitrage.python.PythonScripts;
import com.example.statarbitrage.python.PythonScriptsExecuter;
import com.example.statarbitrage.services.EventSendService;
import com.example.statarbitrage.services.SettingsService;
import com.example.statarbitrage.utils.JsonUtils;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Component;

import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicBoolean;

@Slf4j
@Component
@RequiredArgsConstructor
public class ScreenerProcessor {

    private final OkxClient okxClient;
    private final EventSendService eventSendService;
    private final SettingsService settingsService;

    // ObjectMapper —Å–æ–∑–¥–∞—ë–º –æ–¥–∏–Ω —Ä–∞–∑, –æ–Ω –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–µ–Ω
    private final ObjectMapper mapper = new ObjectMapper();
    private final Map<String, AtomicBoolean> runningTrades = new ConcurrentHashMap<>();

    @Async
    public void testTrade(String chatId) {
        AtomicBoolean isRunning = runningTrades.computeIfAbsent(chatId, k -> new AtomicBoolean(false));
        if (!isRunning.compareAndSet(false, true)) {
            log.warn("testTrade —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–ª—è chatId = {}", chatId);
            return;
        }
        try {
            ZScoreEntry topPair = getzScoreEntry();
            EntryData entryData = getEntryData();

            // 2. –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            Settings settings = settingsService.getSettings(Long.parseLong(chatId));
            if (settings == null) {
                log.warn("‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è chatId {}", chatId);
                return;
            }

            // 3. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è
            List<Double> longTickerCloses = okxClient.getCloses(topPair.getLongticker(), settings.getTimeframe(), settings.getCandleLimit());
            List<Double> shortTickerCloses = okxClient.getCloses(topPair.getShortticker(), settings.getTimeframe(), settings.getCandleLimit());
            if (longTickerCloses.isEmpty() || shortTickerCloses.isEmpty()) {
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã –¥–ª—è –ø–∞—Ä—ã: {} –∏ {}", topPair.getLongticker(), topPair.getShortticker());
                return;
            }

            ConcurrentHashMap<String, List<Double>> topPairCloses = new ConcurrentHashMap<>();
            topPairCloses.put(topPair.getLongticker(), longTickerCloses);
            topPairCloses.put(topPair.getShortticker(), shortTickerCloses);

            saveAllClosesToJson(topPairCloses);

            updateCurrentPrices(entryData, topPairCloses);

            entryData = getEntryData();

            // 4. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â—ë –Ω–µ –∑–∞–¥–∞–Ω—ã
            if (entryData.getLongTickerEntryPrice() == 0.0 || entryData.getShortTickerEntryPrice() == 0.0) {
                entryData.setLongticker(topPair.getLongticker());
                entryData.setShortticker(topPair.getShortticker());
                entryData.setLongTickerEntryPrice(longTickerCloses.get(longTickerCloses.size() - 1));
                entryData.setShortTickerEntryPrice(shortTickerCloses.get(shortTickerCloses.size() - 1));
                entryData.setMeanEntry(topPair.getMean());
                entryData.setSpreadEntry(topPair.getSpread());

                JsonUtils.writeEntryDataJson("entry_data.json", Collections.singletonList(entryData)); //—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–∞–∑—É!

                log.info("üîπ–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞: LONG {{}} = {}, SHORT {{}} = {}, SPREAD = {}, MEAN = {}", entryData.getLongticker(), entryData.getLongTickerEntryPrice(), entryData.getShortticker(), entryData.getShortTickerEntryPrice(), entryData.getSpreadEntry(), entryData.getMeanEntry());
                return; //–ø–æ–∫–∞ –Ω–µ –Ω–∞–¥–æ —Å—á–∏—Ç–∞—Ç—å –ø—Ä–∏–±—ã–ª—å
            }

            log.info("üêç–ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã...");

            // 6. –ó–∞–ø—É—Å–∫–∞–µ–º Python-—Å–∫—Ä–∏–ø—Ç—ã
            PythonScriptsExecuter.execute(PythonScripts.Z_SCORE.getName(), false);
            log.info("–ò—Å–ø–æ–ª–Ω–∏–ª–∏ " + PythonScripts.Z_SCORE.getName());

            clearChartDir();
            log.info("–û—á–∏—Å—Ç–∏–ª–∏ –ø–∞–ø–∫—É —Å —á–∞—Ä—Ç–∞–º–∏");

            PythonScriptsExecuter.execute(PythonScripts.CREATE_CHARTS.getName(), false);
            log.info("–ò—Å–ø–æ–ª–Ω–∏–ª–∏ " + PythonScripts.CREATE_CHARTS.getName());

            log.info("üêç—Å–∫—Ä–∏–ø—Ç—ã –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∏");

            //–ø–æ—Å–ª–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ —Å–Ω–æ–≤–∞ –±–µ—Ä–µ–º —Å–≤–µ–∂–∏–π —Ñ–∞–π–ª
            topPair = getzScoreEntry();

            double meanChangeAbs = topPair.getMean() - entryData.getMeanEntry();
            double spreadChangeAbs = topPair.getSpread() - entryData.getSpreadEntry();

            double meanChangePercent = 100.0 * Math.abs(meanChangeAbs) / Math.abs(entryData.getMeanEntry());
            if (meanChangeAbs < 0) meanChangePercent = -meanChangePercent;

            double spreadChangePercent = 100.0 * Math.abs(spreadChangeAbs) / Math.abs(entryData.getSpreadEntry());
            if (spreadChangeAbs < 0) spreadChangePercent = -spreadChangePercent;

            log.info("üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ MEAN: {} (–∞–±—Å–æ–ª—é—Ç–Ω–æ), {}% (–æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ)",
                    String.format("%+.5f", meanChangeAbs),
                    String.format("%+.2f", meanChangePercent));

            log.info("üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ SPREAD: {} (–∞–±—Å–æ–ª—é—Ç–Ω–æ), {}% (–æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ)",
                    String.format("%+.5f", spreadChangeAbs),
                    String.format("%+.2f", spreadChangePercent));

            // 7. –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏

            // –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            BigDecimal longEntry = BigDecimal.valueOf(entryData.getLongTickerEntryPrice());
            BigDecimal longCurrent = BigDecimal.valueOf(entryData.getLongTickerCurrentPrice());
            BigDecimal shortEntry = BigDecimal.valueOf(entryData.getShortTickerEntryPrice());
            BigDecimal shortCurrent = BigDecimal.valueOf(entryData.getShortTickerCurrentPrice());

            // –†–∞—Å—á—ë—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–∏–∫–µ—Ä—É –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
            BigDecimal longReturnPct = longCurrent.subtract(longEntry)
                    .divide(longEntry, 10, RoundingMode.HALF_UP)
                    .multiply(BigDecimal.valueOf(100));

            BigDecimal shortReturnPct = shortEntry.subtract(shortCurrent)
                    .divide(shortEntry, 10, RoundingMode.HALF_UP)
                    .multiply(BigDecimal.valueOf(100));

            // üëâ –ü–ª–µ—á–æ (–¥–æ–ø—É—Å—Ç–∏–º –ø–æ $500 –≤ –∫–∞–∂–¥—É—é –ø–æ–∑–∏—Ü–∏—é)
            BigDecimal capitalPerLeg = BigDecimal.valueOf(500);
            BigDecimal totalCapital = capitalPerLeg.multiply(BigDecimal.valueOf(2)); // $1000

            // –ü—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –ø–æ –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
            BigDecimal longPL = longReturnPct.multiply(capitalPerLeg)
                    .divide(BigDecimal.valueOf(100), 10, RoundingMode.HALF_UP);

            BigDecimal shortPL = shortReturnPct.multiply(capitalPerLeg)
                    .divide(BigDecimal.valueOf(100), 10, RoundingMode.HALF_UP);

            BigDecimal totalPL = longPL.add(shortPL);

            // –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å –≤ %
            BigDecimal profitPercentFromTotal = totalPL
                    .divide(totalCapital, 10, RoundingMode.HALF_UP)
                    .multiply(BigDecimal.valueOf(100));

            // –û–∫—Ä—É–≥–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            BigDecimal longReturnRounded = longReturnPct.setScale(2, RoundingMode.HALF_UP);
            BigDecimal shortReturnRounded = shortReturnPct.setScale(2, RoundingMode.HALF_UP);
            BigDecimal profitRounded = profitPercentFromTotal.setScale(2, RoundingMode.HALF_UP);

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ –æ–±—ä–µ–∫—Ç –∏ –ª–æ–≥–∏—Ä—É–µ–º
            entryData.setProfit(profitRounded + "%");

            log.info("üìä LONG {{}}: Entry: {}, Current: {}, Profit: {}%", entryData.getLongticker(), entryData.getLongTickerEntryPrice(), entryData.getLongTickerCurrentPrice(), longReturnRounded);
            log.info("üìä SHORT {{}}: Entry: {}, Current: {}, Profit: {}%", entryData.getShortticker(), entryData.getShortTickerEntryPrice(), entryData.getShortTickerCurrentPrice(), shortReturnRounded);
            log.info("üí∞–ü—Ä–æ—Ñ–∏—Ç –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞ {}$: {}", totalCapital, profitRounded + "%");


            // 8. –û–±–Ω–æ–≤–ª—è–µ–º entry_data.json
            JsonUtils.writeEntryDataJson("entry_data.json", Collections.singletonList(entryData));

            // 9. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
            File chartDir = new File("charts");
            File[] chartFiles = chartDir.listFiles((dir, name) -> name.toLowerCase().endsWith(".png"));

            if (chartFiles != null && chartFiles.length > 0) {
                File chart = chartFiles[0];
                try {
                    String message = "üí∞–ü—Ä–æ—Ñ–∏—Ç: " + entryData.getProfit() + ", –≥–¥–µ LONG: " + longReturnRounded + "%, SHORT: " + shortReturnRounded + "%";
                    sendChart(chatId, chart, message);
                } catch (Exception e) {
                    log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Ä—Ç–∞: {}", e.getMessage(), e);
                }
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –≤ testTrade: {}", e.getMessage(), e);
        } finally {
            isRunning.set(false);
        }
    }

    @Async
    public void sendBestChart(String chatId) {
        long startTime = System.currentTimeMillis();

        deleteSpecificFilesInProjectRoot(List.of("z_score.json", "entry_data.json", "all_closes.json"));
        log.info("–£–¥–∞–ª–∏–ª–∏ z_score.json, entry_data.json, all_closes.json");

        Settings settings = settingsService.getSettings(Long.parseLong(chatId));

        Set<String> swapTickers = okxClient.getSwapTickers();
        int totalSymbols = swapTickers.size();

        ExecutorService executor = Executors.newFixedThreadPool(5);

        ConcurrentHashMap<String, List<Double>> allCloses = new ConcurrentHashMap<>();
        try {
            List<CompletableFuture<Void>> futures = swapTickers.stream()
                    .map(symbol -> CompletableFuture.runAsync(() -> {
                        try {
                            List<Double> closes = okxClient.getCloses(symbol, settings.getTimeframe(), settings.getCandleLimit());
                            allCloses.put(symbol, closes);
                        } catch (Exception e) {
                            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {}: {}", symbol, e.getMessage(), e);
                        }
                    }, executor))
                    .toList();

            // –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
            CompletableFuture.allOf(futures.toArray(new CompletableFuture[0])).join();
        } finally {
            executor.shutdown();
        }
        log.info("–°–æ–±—Ä–∞–ª–∏ —Ü–µ–Ω—ã –¥–ª—è {} –º–æ–Ω–µ—Ç", allCloses.size());

        List.of("USDC-USDT-SWAP").forEach(allCloses::remove);
        log.info("–£–¥–∞–ª–∏–ª–∏ —Ü–µ–Ω—ã —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞");

        //–°–æ—Ö—Ä–∞–Ω—è–µ–º allCloses –≤ JSON-—Ñ–∞–π–ª
        saveAllClosesToJson(allCloses);
        log.info("–°–æ—Ö—Ä–∞–Ω–∏–ª–∏ —Ü–µ–Ω—ã –≤ all_closes.json");

        log.info("üêç–ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã...");

        PythonScriptsExecuter.execute(PythonScripts.Z_SCORE.getName(), true);
        log.info("–ò—Å–ø–æ–ª–Ω–∏–ª–∏ " + PythonScripts.Z_SCORE.getName());

        keepBestPairByZscoreAndPvalue();
        log.info("üîç –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –ª—É—á—à—É—é –ø–∞—Ä—É –≤ z_score.json");

        clearChartDir();
        log.info("–û—á–∏—Å—Ç–∏–ª–∏ –ø–∞–ø–∫—É —Å —á–∞—Ä—Ç–∞–º–∏");

        PythonScriptsExecuter.execute(PythonScripts.CREATE_CHARTS.getName(), true);
        log.info("–ò—Å–ø–æ–ª–Ω–∏–ª–∏ " + PythonScripts.CREATE_CHARTS.getName());

        log.info("üêç—Å–∫—Ä–∏–ø—Ç—ã –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∏");

        ZScoreEntry topPair = getzScoreEntry(); // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é (–ª—É—á—à—É—é) –ø–∞—Ä—É

        EntryData entryData = createEntryData(topPair);//—Å–æ–∑–¥–∞–µ–º –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–∏—Å–∫–∞
        log.info("–°–æ–∑–¥–∞–ª–∏ entry_data.json");

        updateCurrentPrices(entryData, allCloses);
        log.info("–û–±–æ–≥–∞—Ç–∏–ª–∏ entry_data.json —Ü–µ–Ω–∞–º–∏ –∏–∑ all_closes.json");

        File chartDir = new File("charts");
        File[] chartFiles = chartDir.listFiles((dir, name) -> name.toLowerCase().endsWith(".png"));

        if (chartFiles != null && chartFiles.length > 0) {
            File chart = chartFiles[0];
            try {
                sendChart(chatId, chart, "üìäLONG " + topPair.getLongticker() + ", SHORT " + topPair.getShortticker());
                log.info("–û—Ç–ø—Ä–∞–≤–∏–ª–∏ —á–∞—Ä—Ç –≤ —Ç–µ–ª–µ–≥—Ä–∞–º");
            } catch (Exception e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Ä—Ç–∞: {}", e.getMessage(), e);
            }
        }

        long durationMillis = System.currentTimeMillis() - startTime;
        long minutes = durationMillis / 1000 / 60;
        long seconds = (durationMillis / 1000) % 60;
        log.info("–°–∫–∞–Ω –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {} —Ç–∏–∫–µ—Ä–æ–≤ –∑–∞ {} –º–∏–Ω {} —Å–µ–∫", totalSymbols, minutes, seconds);
    }

    public void deleteSpecificFilesInProjectRoot(List<String> fileNames) {
        File projectRoot = new File(".");
        for (String fileName : fileNames) {
            File file = new File(projectRoot, fileName);
            if (file.exists()) {
                boolean deleted = file.delete();
                if (deleted) {
                    log.info("‚úÖ –£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª: {}", file.getAbsolutePath());
                } else {
                    log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª: {}", file.getAbsolutePath());
                }
            } else {
                log.info("‚ÑπÔ∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {}", file.getAbsolutePath());
            }
        }
    }

    private void updateCurrentPrices(EntryData entryData, ConcurrentHashMap<String, List<Double>> allCloses) {
        try {
            String longTicker = entryData.getLongticker();
            String shortTicker = entryData.getShortticker();

            List<Double> longTickerCloses = allCloses.get(longTicker);
            List<Double> shortTickerCloses = allCloses.get(shortTicker);

            if (longTickerCloses == null || longTickerCloses.isEmpty() || shortTickerCloses == null || shortTickerCloses.isEmpty()) {
                log.warn("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ü–µ–Ω–∞–º –¥–ª—è –ø–∞—Ä—ã: {} - {}", longTicker, shortTicker);
            }

            entryData.setLongTickerCurrentPrice(longTickerCloses.get(longTickerCloses.size() - 1));
            entryData.setShortTickerCurrentPrice(shortTickerCloses.get(shortTickerCloses.size() - 1));

            JsonUtils.writeEntryDataJson("entry_data.json", Collections.singletonList(entryData));
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–æ–≥–∞—â–µ–Ω–∏–∏ z_score.json –∏–∑ all_closes.json: {}", e.getMessage(), e);
        }
    }

    private void clearChartDir() {
        // --- –æ—á–∏—â–∞–µ–º –ø–∞–ø–∫—É charts –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ ---
        String chartsDir = "charts";
        clearDirectory(chartsDir);
    }

    private void clearDirectory(String dirPath) {
        File dir = new File(dirPath);
        if (dir.exists() && dir.isDirectory()) {
            File[] files = dir.listFiles();
            if (files != null) {
                for (File file : files) {
                    if (file.isDirectory()) {
                        clearDirectory(file.getAbsolutePath());
                    }
                    if (!file.delete()) {
                        log.warn("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª: {}", file.getAbsolutePath());
                    }
                }
            }
        }
    }

    private void keepBestPairByZscoreAndPvalue() {
        //–û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –ª—É—á—à—É—é –ø–∞—Ä—É –ø–æ zscore/pvalue
        String zScorePath = "z_score.json";
        try {
            File zFile = new File(zScorePath);
            if (zFile.exists()) {
                List<ZScoreEntry> allEntries = List.of(mapper.readValue(zFile, ZScoreEntry[].class));

                //–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π pvalue –∏ –ø—Ä–∏ —Ä–∞–≤–µ–Ω—Å—Ç–≤–µ ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π zscore
                ZScoreEntry best = allEntries.stream()
                        .min((e1, e2) -> {
                            int cmp = Double.compare(e1.getPvalue(), e2.getPvalue());
                            if (cmp == 0) {
                                //–ü—Ä–∏ —Ä–∞–≤–Ω—ã—Ö pvalue –±–µ—Ä—ë–º —Å –±–æ–ª—å—à–∏–º zscore
                                return -Double.compare(e1.getZscore(), e2.getZscore());
                            }
                            return cmp;
                        })
                        .orElse(null);

                if (best != null) {
                    mapper.writeValue(zFile, List.of(best));
                }
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ z_score.json: {}", e.getMessage(), e);
        }
    }

    private void sendChart(String chatId, File chartFile, String caption) {
        try {
            eventSendService.sendAsPhoto(SendAsPhotoEvent.builder()
                    .chatId(chatId)
                    .photo(chartFile)
                    .caption(caption)
                    .build());
            log.info("üì§ –ß–∞—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram: {}", chartFile.getName());
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Ä—Ç–∞: {}", e.getMessage(), e);
        }
    }

    private void sendSignal(String chatId, String text) {
        System.out.println(text);
        sendText(chatId, text);
    }

    private void sendText(String chatId, String text) {
        eventSendService.sendAsText(SendAsTextEvent.builder()
                .chatId(chatId)
                .text(text)
                .enableMarkdown(true)
                .build());
    }

    private static ZScoreEntry getzScoreEntry() {
        int maxAttempts = 5;
        int waitMillis = 300;

        for (int attempt = 1; attempt <= maxAttempts; attempt++) {
            List<ZScoreEntry> zScores = JsonUtils.readZScoreJson("z_score.json");
            if (zScores != null && !zScores.isEmpty()) {
                return zScores.get(0);
            }

            log.warn("–ü–æ–ø—ã—Ç–∫–∞ {}: z_score.json –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω", attempt);
            try {
                Thread.sleep(waitMillis);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                throw new RuntimeException("–û–∂–∏–¥–∞–Ω–∏–µ —á—Ç–µ–Ω–∏—è z_score.json –ø—Ä–µ—Ä–≤–∞–Ω–æ", e);
            }
        }

        log.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å z_score.json –ø–æ—Å–ª–µ {} –ø–æ–ø—ã—Ç–æ–∫", maxAttempts);
        throw new RuntimeException("‚ö†Ô∏è z_score.json –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–æ–∫");
    }


    private static EntryData getEntryData() {
        List<EntryData> entryData = JsonUtils.readEntryDataJson("entry_data.json");
        if (entryData == null || entryData.isEmpty()) {
            String message = "‚ö†Ô∏èentry_data.json –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω";
            log.warn(message);
            throw new RuntimeException(message);
        }
        return entryData.get(0);
    }

    private EntryData getOrCreateEntryData() {
        String jsonFilePath = "entry_data.json";
        List<EntryData> entryDataList = JsonUtils.readEntryDataJson(jsonFilePath);
        if (entryDataList == null || entryDataList.isEmpty()) {
            try {
                EntryData entryData = new EntryData();
                mapper.writeValue(new File(jsonFilePath), Collections.singletonList(entryData));
                return JsonUtils.readEntryDataJson(jsonFilePath).get(0);
            } catch (IOException e) {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ entry_data.json: {}", e.getMessage(), e);
            }
        }
        return entryDataList.get(0);
    }

    private EntryData createEntryData(ZScoreEntry topPair) {
        String jsonFilePath = "entry_data.json";
        try {
            EntryData entryData = new EntryData();
            entryData.setPvalue(topPair.getPvalue());
            entryData.setZscore(topPair.getZscore());
            entryData.setLongticker(topPair.getLongticker());
            entryData.setShortticker(topPair.getShortticker());
            entryData.setSpread(topPair.getSpread());
            entryData.setMean(topPair.getMean());
            mapper.writeValue(new File(jsonFilePath), Collections.singletonList(entryData));
            return JsonUtils.readEntryDataJson(jsonFilePath).get(0);
        } catch (IOException e) {
            String message = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ entry_data.json: {}";
            log.error(message, e.getMessage(), e);
            throw new RuntimeException(message);
        }
    }

    private void saveAllClosesToJson(ConcurrentHashMap<String, List<Double>> topPairCloses) {
        String jsonFilePath = "all_closes.json";
        try {
            mapper.writeValue(new File(jsonFilePath), topPairCloses);
        } catch (IOException e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ all_closes.json: {}", e.getMessage(), e);
        }
    }
}
