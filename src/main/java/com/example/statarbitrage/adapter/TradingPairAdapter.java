package com.example.statarbitrage.adapter;

import com.example.statarbitrage.client.PythonRestClient;
import com.example.statarbitrage.dto.TradingPair;
import com.example.statarbitrage.model.Candle;
import com.example.statarbitrage.model.Settings;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.Map;

/**
 * –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ —Å ZScoreData –Ω–∞ TradingPair
 * –†–∞–±–æ—Ç–∞–µ—Ç —Å –û–ë–û–ò–ú–ò —Å–µ—Ä–≤–∏—Å–∞–º–∏ - —Å—Ç–∞—Ä—ã–º –∏ –Ω–æ–≤—ã–º Python API
 */
@Slf4j
@Component
@RequiredArgsConstructor
public class TradingPairAdapter {
    
    @Qualifier("modernPythonRestClient")
    private final PythonRestClient newPythonClient;

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–π Python API —Å TradingPair
     */
    public List<TradingPair> fetchTradingPairs(Settings settings, Map<String, List<Candle>> candlesMap) {
        log.info("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API...");
        
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç —Å TradingPair
            List<TradingPair> pairs = newPythonClient.discoverTradingPairs(settings, candlesMap);
            
            log.info("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API", pairs.size());
            return pairs;
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API: {}", e.getMessage());
            throw new RuntimeException("Failed to fetch trading pairs", e);
        }
    }

    /**
     * –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä—ã
     */
    public TradingPair analyzePairDetailed(String ticker1, String ticker2, 
                                          Map<String, List<Candle>> candlesMap, 
                                          Settings settings) {
        log.info("üî¨ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–∞—Ä—ã: {} / {}", ticker1, ticker2);
        
        return newPythonClient.analyzePairDetailed(ticker1, ticker2, candlesMap, settings);
    }

    /**
     * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º Settings
     */
    public List<TradingPair> filterValidPairs(List<TradingPair> pairs, Settings settings) {
        return pairs.stream()
                .filter(pair -> pair.isValidForTradingExtended(
                    settings.getMinCorrelation(),
                    settings.getMinPvalue(),
                    settings.getMinZ(),
                    settings.getMinAdfValue()
                ))
                .toList();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø N –ø–∞—Ä –ø–æ —Å–∏–ª–µ —Å–∏–≥–Ω–∞–ª–∞
     */
    public List<TradingPair> getTopPairs(List<TradingPair> pairs, int count) {
        return pairs.stream()
                .sorted((p1, p2) -> Double.compare(p2.getSignalStrength(), p1.getSignalStrength()))
                .limit(count)
                .toList();
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä–∞—Ö
     */
    public void logTradingPairs(List<TradingPair> pairs) {
        log.info("üìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã:");
        for (int i = 0; i < pairs.size(); i++) {
            TradingPair pair = pairs.get(i);
            log.info("{}. {} | {}", 
                i + 1, 
                pair.getDisplayName(), 
                pair.getStatisticsString());
        }
    }
}