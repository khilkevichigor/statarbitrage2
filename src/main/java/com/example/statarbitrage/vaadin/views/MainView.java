package com.example.statarbitrage.vaadin.views;

import com.example.statarbitrage.model.PairData;
import com.example.statarbitrage.model.Settings;
import com.example.statarbitrage.model.TradeStatisticsDto;
import com.example.statarbitrage.services.PairDataService;
import com.example.statarbitrage.services.SettingsService;
import com.example.statarbitrage.services.StatisticsService;
import com.example.statarbitrage.vaadin.processors.FetchPairsProcessor;
import com.example.statarbitrage.vaadin.processors.TestTradeProcessor;
import com.example.statarbitrage.vaadin.schedulers.PairMaintainerScheduler;
import com.example.statarbitrage.vaadin.schedulers.TradeAndSimulationScheduler;
import com.example.statarbitrage.vaadin.services.TradeStatus;
import com.vaadin.flow.component.AttachEvent;
import com.vaadin.flow.component.DetachEvent;
import com.vaadin.flow.component.UI;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.checkbox.Checkbox;
import com.vaadin.flow.component.formlayout.FormLayout;
import com.vaadin.flow.component.grid.Grid;
import com.vaadin.flow.component.html.H1;
import com.vaadin.flow.component.html.H2;
import com.vaadin.flow.component.icon.Icon;
import com.vaadin.flow.component.icon.VaadinIcon;
import com.vaadin.flow.component.notification.Notification;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.textfield.NumberField;
import com.vaadin.flow.component.textfield.TextField;
import com.vaadin.flow.data.binder.Binder;
import com.vaadin.flow.data.renderer.ComponentRenderer;
import com.vaadin.flow.router.Route;
import lombok.extern.slf4j.Slf4j;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import static com.example.statarbitrage.constant.Constants.EXIT_REASON_MANUALLY;

//todo bug –≤ —Ç—Ä–µ–π–¥–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü–µ zentry= 2.5 –∞ zcurrent=-2 –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Å—Ä–∞–∑—É!!!

@Slf4j
@Route("") // Maps to root URL
public class MainView extends VerticalLayout {
    private final Grid<PairData> selectedPairsGrid = new Grid<>(PairData.class, false);
    private final Grid<PairData> tradingPairsGrid = new Grid<>(PairData.class, false);
    private final Grid<PairData> closedPairsGrid = new Grid<>(PairData.class, false);
    private VerticalLayout statisticsLayout; // –î–æ–±–∞–≤—å –≤ –ø–æ–ª—è –∫–ª–∞—Å—Å–∞


    private final Binder<Settings> settingsBinder = new Binder<>(Settings.class);
    private final TestTradeProcessor testTradeProcessor;
    private Settings currentSettings;

    private FetchPairsProcessor fetchPairsProcessor;
    private SettingsService settingsService;
    private PairDataService pairDataService;
    private StatisticsService statisticsService; // –¥–æ–±–µ–π –≤ –ø–æ–ª–µ –∫–ª–∞—Å—Å–∞
    private PairMaintainerScheduler pairMaintainerScheduler; // –¥–æ–±–µ–π –≤ –ø–æ–ª–µ –∫–ª–∞—Å—Å–∞

    private Checkbox simulationCheckbox;
    private ScheduledExecutorService uiUpdateExecutor;
    private TradeAndSimulationScheduler tradeAndSimulationScheduler;

    public MainView(FetchPairsProcessor fetchPairsProcessor, SettingsService settingsService, PairDataService pairDataService, TestTradeProcessor testTradeProcessor, StatisticsService statisticsService, PairMaintainerScheduler pairMaintainerScheduler) {
        this.fetchPairsProcessor = fetchPairsProcessor;
        this.settingsService = settingsService;
        this.pairDataService = pairDataService;
        this.testTradeProcessor = testTradeProcessor;
        this.statisticsService = statisticsService;
        this.pairMaintainerScheduler = pairMaintainerScheduler;

        add(new H1("Welcome to StatArbitrage"));

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ–∫–±–æ–∫—Å —Å–∏–º—É–ª—è—Ü–∏–∏
        createSimulationCheckbox();

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        currentSettings = settingsService.getSettingsFromDb();
        createSettingsForm();

        Button getCointPairsButton = new Button("–ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä—ã", new Icon(VaadinIcon.REFRESH), e -> {
            selectedPairsGrid.setItems(Collections.emptyList());
            int deleteAllByStatus = pairDataService.deleteAllByStatus(TradeStatus.SELECTED);
            log.info("Deleted all {} pairs from database", deleteAllByStatus);
            findSelectedPairs();
        });
        Button saveSettingsButton = new Button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", e -> saveSettings());

        configureGrids();

        add(simulationCheckbox);

        statisticsLayout = createStatisticsBlock(); // —Å–æ–∑–¥–∞—ë–º layout

        add(
                new H2("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"),
                saveSettingsButton,
                createSettingsForm(),
                new H2("–û—Ç–æ–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã (SELECTED)"),
                getCointPairsButton,
                selectedPairsGrid,
                new H2("–¢–æ—Ä–≥—É–µ–º—ã–µ –ø–∞—Ä—ã (TRADING)"),
                tradingPairsGrid,
                new H2("–ó–∞–∫—Ä—ã—Ç—ã–µ –ø–∞—Ä—ã (CLOSED)"),
                closedPairsGrid,
                new H2("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–π–¥–æ–≤"),
                statisticsLayout

        );

        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        startUiUpdater();
    }

    private void updateStatisticsBlock() {
        statisticsLayout.removeAll(); // –æ—á–∏—â–∞–µ–º
        TradeStatisticsDto stats = statisticsService.collectStatistics();

        Grid<StatisticRow> grid = new Grid<>();
        grid.setAllRowsVisible(true);
        grid.addColumn(StatisticRow::name).setHeader("–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å");
        grid.addColumn(StatisticRow::today).setHeader("–°–µ–≥–æ–¥–Ω—è");
        grid.addColumn(StatisticRow::total).setHeader("–í—Å–µ–≥–æ");

        grid.setItems(List.of(
                new StatisticRow("–°–¥–µ–ª–∫–∏", stats.getTradesToday(), stats.getTradesTotal()),
                new StatisticRow("Avg –ü—Ä–æ—Ñ–∏—Ç (%)", format(stats.getAvgProfitToday()), format(stats.getAvgProfitTotal())),
                new StatisticRow("–°—É–º–º–∞ –ü—Ä–æ—Ñ–∏—Ç–∞ (%)", format(stats.getSumProfitToday()), format(stats.getSumProfitTotal())),
                new StatisticRow("–í—ã—Ö–æ–¥: STOP", stats.getExitByStopToday(), stats.getExitByStopTotal()),
                new StatisticRow("–í—ã—Ö–æ–¥: TAKE", stats.getExitByTakeToday(), stats.getExitByTakeTotal()),
                new StatisticRow("–í—ã—Ö–æ–¥: Z MIN", stats.getExitByZMinToday(), stats.getExitByZMinTotal()),
                new StatisticRow("–í—ã—Ö–æ–¥: Z MAX", stats.getExitByZMaxToday(), stats.getExitByZMaxTotal()),
                new StatisticRow("–í—ã—Ö–æ–¥: TIME", stats.getExitByTimeToday(), stats.getExitByTimeTotal())
        ));

        statisticsLayout.add(grid);
    }


    private VerticalLayout createStatisticsBlock() {
        TradeStatisticsDto stats = statisticsService.collectStatistics();

        VerticalLayout layout = new VerticalLayout();
        layout.setSpacing(false);
        layout.setPadding(false);

        layout.add(new H2("–°–µ–≥–æ–¥–Ω—è / –í—Å–µ–≥–æ"));

        Grid<StatisticRow> grid = new Grid<>();
        grid.setAllRowsVisible(true);
        grid.addColumn(StatisticRow::name).setHeader("–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å");
        grid.addColumn(StatisticRow::today).setHeader("–°–µ–≥–æ–¥–Ω—è");
        grid.addColumn(StatisticRow::total).setHeader("–í—Å–µ–≥–æ");

        grid.setItems(List.of(
                new StatisticRow("–°–¥–µ–ª–∫–∏", stats.getTradesToday(), stats.getTradesTotal()),
                new StatisticRow("Avg –ü—Ä–æ—Ñ–∏—Ç (%)", format(stats.getAvgProfitToday()), format(stats.getAvgProfitTotal())),
                new StatisticRow("–°—É–º–º–∞ –ü—Ä–æ—Ñ–∏—Ç–∞ (%)", format(stats.getSumProfitToday()), format(stats.getSumProfitTotal())),
                new StatisticRow("–í—ã—Ö–æ–¥: STOP", stats.getExitByStopToday(), stats.getExitByStopTotal()),
                new StatisticRow("–í—ã—Ö–æ–¥: TAKE", stats.getExitByTakeToday(), stats.getExitByTakeTotal()),
                new StatisticRow("–í—ã—Ö–æ–¥: Z MIN", stats.getExitByZMinToday(), stats.getExitByZMinTotal()),
                new StatisticRow("–í—ã—Ö–æ–¥: Z MAX", stats.getExitByZMaxToday(), stats.getExitByZMaxTotal()),
                new StatisticRow("–í—ã—Ö–æ–¥: TIME", stats.getExitByTimeToday(), stats.getExitByTimeTotal())
        ));

        layout.add(grid);
        return layout;
    }

    private String format(BigDecimal value) {
        return value == null ? "n/a" : value.setScale(2, RoundingMode.HALF_UP).toString();
    }

    //–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
    @Override
    protected void onAttach(AttachEvent attachEvent) {
        super.onAttach(attachEvent);
        UI.getCurrent().getSession().setAttribute(MainView.class, this);
    }

    //–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
    public void handleUiUpdateRequest() {
        getUI().ifPresent(ui -> ui.access(this::updateUI));
    }

    private void startUiUpdater() {
        uiUpdateExecutor = Executors.newSingleThreadScheduledExecutor();
        uiUpdateExecutor.scheduleAtFixedRate(this::updateUI, 0, 60, TimeUnit.SECONDS);
    }

    public void updateUI() {
        getUI().ifPresent(ui -> ui.access(() -> {
            try {
                getSelectedPairs();
                getTraidingPairs();
                getClosedPairs();
                updateStatisticsBlock(); // ‚¨ÖÔ∏è –≤–æ—Ç –∑–¥–µ—Å—å!
            } catch (Exception e) {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ UI", e);
            }
        }));
    }

    @Override
    protected void onDetach(DetachEvent detachEvent) {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤–∫–ª–∞–¥–∫–∏
        if (uiUpdateExecutor != null) {
            uiUpdateExecutor.shutdownNow();
        }
        super.onDetach(detachEvent);
    }

    private Checkbox createSimulationCheckbox() {
        simulationCheckbox = new Checkbox("–°–∏–º—É–ª—è—Ü–∏—è");
        simulationCheckbox.setValue(settingsService.getSettingsFromDb().isSimulationEnabled());

        simulationCheckbox.addValueChangeListener(event -> {
            Settings settings = settingsService.getSettingsFromDb();
            settings.setSimulationEnabled(event.getValue());
            settingsService.saveSettingsInDb(settings);
            if (event.getValue()) {
//                pairMaintainerScheduler.maintainActivePairs();
//                tradeAndSimulationScheduler.updateTradesAndMaintainPairs();
            }
            log.info(event.getValue() ? "–°–∏–º—É–ª—è—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞" : "–°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞");
        });

        return simulationCheckbox;
    }

    private FormLayout createSettingsForm() {
        FormLayout settingsForm = new FormLayout();
        settingsForm.setResponsiveSteps(
                new FormLayout.ResponsiveStep("0", 1),
                new FormLayout.ResponsiveStep("500px", 2),
                new FormLayout.ResponsiveStep("800px", 4),
                new FormLayout.ResponsiveStep("1100px", 6),
                new FormLayout.ResponsiveStep("1400px", 8),
                new FormLayout.ResponsiveStep("1700px", 10)
        );

        // –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        TextField timeframeField = new TextField("–¢–∞–π–º—Ñ—Ä–µ–π–º");
        NumberField candleLimitField = new NumberField("–°–≤–µ—á–µ–π (—à—Ç)");
        NumberField minZField = new NumberField("Min Z");
        NumberField minWindowSizeField = new NumberField("Min windowSize");
        NumberField minPValueField = new NumberField("Min pValue");
        NumberField minAdfValueField = new NumberField("Min adfValue");
        NumberField minCorrelationField = new NumberField("Min corr");
        NumberField minVolumeField = new NumberField("Min Vol (–º–ª–Ω $)");
        NumberField checkIntervalField = new NumberField("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–º–∏–Ω)");

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ø–∏—Ç–∞–ª–∞
        NumberField capitalLongField = new NumberField("Depo –ª–æ–Ω–≥ ($)");
        NumberField capitalShortField = new NumberField("Depo —à–æ—Ä—Ç ($)");
        NumberField leverageField = new NumberField("Depo Leverage");
        NumberField feePctPerTradeField = new NumberField("Depo –ö–æ–º–∏—Å—Å–∏—è (%)");

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã—Ö–æ–¥–∞
        NumberField exitTakeField = new NumberField("Exit –¢–µ–π–∫ (%)");
        NumberField exitStopField = new NumberField("Exit –°—Ç–æ–ø (%)");
        NumberField exitZMinField = new NumberField("Exit –ú–∏–Ω Z");
        NumberField exitZMaxPercentField = new NumberField("Exit –ú–∞–∫—Å Z (%)");
        NumberField exitTimeHoursField = new NumberField("Exit –¢–∞–π–º–∞—É—Ç (—á)");

        // –§–∏–ª—å—Ç—Ä—ã

        NumberField usePairs = new NumberField("–ö–æ–ª-–≤–æ –ø–∞—Ä");

        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–æ–ª—è –≤ —Ñ–æ—Ä–º—É
        settingsForm.add(
                timeframeField, candleLimitField,
                minZField, minWindowSizeField, minPValueField, minAdfValueField, checkIntervalField, minCorrelationField, minVolumeField, usePairs,
                capitalLongField, capitalShortField, leverageField, feePctPerTradeField,
                exitTakeField, exitStopField, exitZMinField, exitZMaxPercentField, exitTimeHoursField
        );

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–≤—è–∑–∫—É –¥–∞–Ω–Ω—ã—Ö
        settingsBinder.forField(timeframeField).bind(Settings::getTimeframe, Settings::setTimeframe);
        settingsBinder.forField(candleLimitField).bind(Settings::getCandleLimit, Settings::setCandleLimit);
        settingsBinder.forField(minZField).bind(Settings::getMinZ, Settings::setMinZ);
        settingsBinder.forField(minWindowSizeField).bind(Settings::getMinWindowSize, Settings::setMinWindowSize);
        settingsBinder.forField(minPValueField).bind(Settings::getMinPvalue, Settings::setMinPvalue);
        settingsBinder.forField(minAdfValueField).bind(Settings::getMinAdfValue, Settings::setMinAdfValue);
        settingsBinder.forField(checkIntervalField).bind(Settings::getCheckInterval, Settings::setCheckInterval);
        settingsBinder.forField(capitalLongField).bind(Settings::getCapitalLong, Settings::setCapitalLong);
        settingsBinder.forField(capitalShortField).bind(Settings::getCapitalShort, Settings::setCapitalShort);
        settingsBinder.forField(leverageField).bind(Settings::getLeverage, Settings::setLeverage);
        settingsBinder.forField(feePctPerTradeField).bind(Settings::getFeePctPerTrade, Settings::setFeePctPerTrade);
        settingsBinder.forField(exitTakeField).bind(Settings::getExitTake, Settings::setExitTake);
        settingsBinder.forField(exitStopField).bind(Settings::getExitStop, Settings::setExitStop);
        settingsBinder.forField(exitZMinField).bind(Settings::getExitZMin, Settings::setExitZMin);
        settingsBinder.forField(exitZMaxPercentField).bind(Settings::getExitZMaxPercent, Settings::setExitZMaxPercent);
        settingsBinder.forField(exitTimeHoursField).bind(Settings::getExitTimeHours, Settings::setExitTimeHours);
        settingsBinder.forField(minCorrelationField).bind(Settings::getMinCorrelation, Settings::setMinCorrelation);
        settingsBinder.forField(minVolumeField).bind(Settings::getMinVolume, Settings::setMinVolume);
        settingsBinder.forField(usePairs).bind(Settings::getUsePairs, Settings::setUsePairs);

        settingsBinder.readBean(currentSettings);

        return settingsForm;
    }

    private void saveSettings() {
        try {
            settingsBinder.writeBean(currentSettings);
            settingsService.saveSettingsInDb(currentSettings);
            Notification.show("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã");
        } catch (Exception e) {
            Notification.show("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: " + e.getMessage());
        }
    }

    private void findSelectedPairs() {
        List<PairData> pairs = fetchPairsProcessor.fetchPairs(null);
        selectedPairsGrid.setItems(pairs);
    }

    private void getSelectedPairs() {
        List<PairData> pairs = pairDataService.findAllByStatusOrderByEntryTimeDesc(TradeStatus.SELECTED);
        selectedPairsGrid.setItems(pairs);
    }

    private void clearSelectedPairs() {
        selectedPairsGrid.setItems(Collections.emptyList());
    }

    private void getTraidingPairs() {
        List<PairData> pairs = pairDataService.findAllByStatusOrderByEntryTimeDesc(TradeStatus.TRADING);
        tradingPairsGrid.setItems(pairs);
    }

    private void getClosedPairs() {
        List<PairData> pairs = pairDataService.findAllByStatusOrderByUpdatedTimeDesc(TradeStatus.CLOSED);
        closedPairsGrid.setItems(pairs);
    }

    private void configureGrids() {
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å –±–∞–∑–æ–≤—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
        configureColumnsSelected();
        getSelectedPairs();

        configureColumnsTrading();
        getTraidingPairs();

        configureColumnsClosed();
        getClosedPairs();

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
        addStartTradingButton();
        addStopTradingButtons();
    }

    private void configureColumnsSelected() {
        selectedPairsGrid.addColumn(PairData::getLongTicker).setHeader("–õ–æ–Ω–≥").setSortable(true);
        selectedPairsGrid.addColumn(PairData::getShortTicker).setHeader("–®–æ—Ä—Ç").setSortable(true);

        selectedPairsGrid.addColumn(p -> BigDecimal.valueOf(p.getZScoreCurrent()).setScale(2, BigDecimal.ROUND_HALF_UP)).setHeader("Z-—Å–∫–æ—Ä").setSortable(true);

        selectedPairsGrid.addColumn(p -> BigDecimal.valueOf(p.getPValueCurrent()).setScale(2, BigDecimal.ROUND_HALF_UP)).setHeader("PValue (curr)").setSortable(true);
        selectedPairsGrid.addColumn(p -> BigDecimal.valueOf(p.getAdfPvalueCurrent()).setScale(2, BigDecimal.ROUND_HALF_UP)).setHeader("AdfValue (curr)").setSortable(true);

        selectedPairsGrid.addColumn(p -> BigDecimal.valueOf(p.getCorrelationCurrent()).setScale(2, BigDecimal.ROUND_HALF_UP)).setHeader("–ö–æ—Ä—Ä.").setSortable(true);

        selectedPairsGrid.setHeight("300px");
        selectedPairsGrid.setWidthFull();
    }

    private void configureColumnsTrading() {
        tradingPairsGrid.addColumn(PairData::getLongTicker).setHeader("–õ–æ–Ω–≥").setSortable(true);
        tradingPairsGrid.addColumn(PairData::getShortTicker).setHeader("–®–æ—Ä—Ç").setSortable(true);

        tradingPairsGrid.addColumn(PairData::getProfitChanges).setHeader("–ü—Ä–æ—Ñ–∏—Ç (%)").setSortable(true);

        tradingPairsGrid.addColumn(p -> p.getLongChanges().setScale(2, BigDecimal.ROUND_HALF_UP)).setHeader("Long (%)").setSortable(true);
        tradingPairsGrid.addColumn(p -> p.getShortChanges().setScale(2, BigDecimal.ROUND_HALF_UP)).setHeader("Short (%)").setSortable(true);

        tradingPairsGrid.addColumn(p -> BigDecimal.valueOf(p.getTimeInMinutesSinceEntryToMin()).setScale(2, BigDecimal.ROUND_HALF_UP)).setHeader("Min Long Time (min)").setSortable(true);
        tradingPairsGrid.addColumn(p -> BigDecimal.valueOf(p.getTimeInMinutesSinceEntryToMax()).setScale(2, BigDecimal.ROUND_HALF_UP)).setHeader("Max Short Time (min)").setSortable(true);

        tradingPairsGrid.addColumn(p -> BigDecimal.valueOf(p.getZScoreEntry()).setScale(2, BigDecimal.ROUND_HALF_UP)).setHeader("Z-—Å–∫–æ—Ä (entry)").setSortable(true);
        tradingPairsGrid.addColumn(p -> BigDecimal.valueOf(p.getZScoreCurrent()).setScale(2, BigDecimal.ROUND_HALF_UP)).setHeader("Z-—Å–∫–æ—Ä (curr)").setSortable(true);

        tradingPairsGrid.addColumn(p -> BigDecimal.valueOf(p.getPValueEntry()).setScale(2, BigDecimal.ROUND_HALF_UP)).setHeader("Pvalue (entry)").setSortable(true);
        tradingPairsGrid.addColumn(p -> BigDecimal.valueOf(p.getPValueCurrent()).setScale(2, BigDecimal.ROUND_HALF_UP)).setHeader("Pvalue (curr)").setSortable(true);

        tradingPairsGrid.addColumn(p -> BigDecimal.valueOf(p.getAdfPvalueEntry()).setScale(2, BigDecimal.ROUND_HALF_UP)).setHeader("AdfValue (entry)").setSortable(true);
        tradingPairsGrid.addColumn(p -> BigDecimal.valueOf(p.getAdfPvalueCurrent()).setScale(2, BigDecimal.ROUND_HALF_UP)).setHeader("AdfValue (curr)").setSortable(true);

        tradingPairsGrid.addColumn(p -> BigDecimal.valueOf(p.getCorrelationEntry()).setScale(2, BigDecimal.ROUND_HALF_UP)).setHeader("Corr (entry)").setSortable(true);
        tradingPairsGrid.addColumn(p -> BigDecimal.valueOf(p.getCorrelationCurrent()).setScale(2, BigDecimal.ROUND_HALF_UP)).setHeader("Corr (curr)").setSortable(true);

        tradingPairsGrid.setHeight("300px");
        tradingPairsGrid.setWidthFull();
    }

    private void configureColumnsClosed() {
        closedPairsGrid.addColumn(PairData::getLongTicker).setHeader("–õ–æ–Ω–≥").setSortable(true);
        closedPairsGrid.addColumn(PairData::getShortTicker).setHeader("–®–æ—Ä—Ç").setSortable(true);

        closedPairsGrid.addColumn(PairData::getProfitChanges).setHeader("–ü—Ä–æ—Ñ–∏—Ç (%)").setSortable(true);

        closedPairsGrid.addColumn(p -> p.getLongChanges().setScale(2, BigDecimal.ROUND_HALF_UP)).setHeader("Long (%)").setSortable(true);
        closedPairsGrid.addColumn(p -> p.getShortChanges().setScale(2, BigDecimal.ROUND_HALF_UP)).setHeader("Short (%)").setSortable(true);

        closedPairsGrid.addColumn(p -> BigDecimal.valueOf(p.getTimeInMinutesSinceEntryToMin()).setScale(2, BigDecimal.ROUND_HALF_UP)).setHeader("Min Long Time (min)").setSortable(true);
        closedPairsGrid.addColumn(p -> BigDecimal.valueOf(p.getTimeInMinutesSinceEntryToMax()).setScale(2, BigDecimal.ROUND_HALF_UP)).setHeader("Max Short Time (min)").setSortable(true);

        closedPairsGrid.addColumn(p -> BigDecimal.valueOf(p.getZScoreEntry()).setScale(2, BigDecimal.ROUND_HALF_UP)).setHeader("Z-—Å–∫–æ—Ä (entry)").setSortable(true);
        closedPairsGrid.addColumn(p -> BigDecimal.valueOf(p.getZScoreCurrent()).setScale(2, BigDecimal.ROUND_HALF_UP)).setHeader("Z-—Å–∫–æ—Ä (curr)").setSortable(true);

        closedPairsGrid.addColumn(p -> BigDecimal.valueOf(p.getPValueEntry()).setScale(2, BigDecimal.ROUND_HALF_UP)).setHeader("Pvalue (entry)").setSortable(true);
        closedPairsGrid.addColumn(p -> BigDecimal.valueOf(p.getPValueCurrent()).setScale(2, BigDecimal.ROUND_HALF_UP)).setHeader("Pvalue (curr)").setSortable(true);

        closedPairsGrid.addColumn(p -> BigDecimal.valueOf(p.getAdfPvalueEntry()).setScale(2, BigDecimal.ROUND_HALF_UP)).setHeader("AdfValue (entry)").setSortable(true);
        closedPairsGrid.addColumn(p -> BigDecimal.valueOf(p.getAdfPvalueCurrent()).setScale(2, BigDecimal.ROUND_HALF_UP)).setHeader("AdfValue (curr)").setSortable(true);

        closedPairsGrid.addColumn(p -> BigDecimal.valueOf(p.getCorrelationEntry()).setScale(2, BigDecimal.ROUND_HALF_UP)).setHeader("Corr (entry)").setSortable(true);
        closedPairsGrid.addColumn(p -> BigDecimal.valueOf(p.getCorrelationCurrent()).setScale(2, BigDecimal.ROUND_HALF_UP)).setHeader("Corr (curr)").setSortable(true);

        closedPairsGrid.addColumn(PairData::getExitReason).setHeader("–ü—Ä–∏—á–∏–Ω–∞ –≤—ã—Ö–æ–¥–∞").setSortable(true);

        closedPairsGrid.setHeight("300px");
        closedPairsGrid.setWidthFull();
    }

    private void addStartTradingButton() {
        selectedPairsGrid.addColumn(new ComponentRenderer<>(pair -> {
            Button actionButton = new Button("–¢–æ—Ä–≥–æ–≤–∞—Ç—å", event -> {

                //TODO: –∑–¥–µ—Å—å –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å–¥–µ–ª–∫–∏ –ª–æ–Ω–≥/—à–æ—Ä—Ç

                testTradeProcessor.testTrade(pair);

                Notification.show(String.format(
                        "–°—Ç–∞—Ç—É—Å –ø–∞—Ä—ã %s/%s –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ %s",
                        pair.getLongTicker(), pair.getShortTicker(), TradeStatus.TRADING
                ));
                getSelectedPairs();
                getTraidingPairs();
                getClosedPairs();
            });

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            String color = switch (TradeStatus.TRADING) {
                case TRADING -> "green";
                case CLOSED -> "red";
                default -> "black";
            };
            actionButton.getStyle().set("color", color);

            return actionButton;
        })).setHeader("–î–µ–π—Å—Ç–≤–∏–µ");
    }

    private void addStopTradingButtons() {
        tradingPairsGrid.addColumn(new ComponentRenderer<>(pair -> {
            Button actionButton = new Button("–ó–∞–∫—Ä—ã—Ç—å", event -> {

                //TODO: –∑–¥–µ—Å—å –∑–∞–∫—Ä—ã—Ç–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å–¥–µ–ª–∫–∏ –ª–æ–Ω–≥/—à–æ—Ä—Ç

                testTradeProcessor.testTrade(pair); //—Å–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–∏–º –ø–∞—Ä—É –ø–æ–ª–Ω–æ—Å—Ç—å—é

                pair.setStatus(TradeStatus.CLOSED);
                pair.setExitReason(EXIT_REASON_MANUALLY);
                pairDataService.saveToDb(pair);

                Notification.show(String.format(
                        "–°—Ç–∞—Ç—É—Å –ø–∞—Ä—ã %s/%s –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ %s",
                        pair.getLongTicker(), pair.getShortTicker(), TradeStatus.CLOSED
                ));
                getSelectedPairs();
                getTraidingPairs();
                getClosedPairs();
            });

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            String color = switch (TradeStatus.CLOSED) {
                case TRADING -> "green";
                case CLOSED -> "red";
                default -> "black";
            };
            actionButton.getStyle().set("color", color);

            return actionButton;
        })).setHeader("–î–µ–π—Å—Ç–≤–∏–µ");
    }

    private record StatisticRow(String name, Object today, Object total) {
    }

}