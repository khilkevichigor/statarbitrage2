package com.example.statarbitrage.trading.model;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.extern.slf4j.Slf4j;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.LocalDateTime;

/**
 * –ú–æ–¥–µ–ª—å —Ç–æ—Ä–≥–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –¥–ª—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∏ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏)
 * –í–∫–ª—é—á–∞–µ—Ç —Ä–∞—Å—á–µ—Ç –∫–∞–∫ –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π (–¥–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π), —Ç–∞–∫ –∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π (–¥–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö) –ø—Ä–∏–±—ã–ª–∏.
 */
@Slf4j
@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
public class Position {

    /**
     * –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–∑–∏—Ü–∏–∏
     */
    private String positionId;

    /**
     * ID –ø–∞—Ä—ã –≤ —Å–∏—Å—Ç–µ–º–µ —Å—Ç–∞—Ç–∞—Ä–±–∏—Ç—Ä–∞–∂–∞
     */
    private Long pairDataId;

    /**
     * –°–∏–º–≤–æ–ª —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
     */
    private String symbol;

    /**
     * –¢–∏–ø –ø–æ–∑–∏—Ü–∏–∏
     */
    private PositionType type;

    /**
     * –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (–≤ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ)
     */
    private BigDecimal size;

    /**
     * –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞
     */
    private BigDecimal entryPrice;

    /**
     * –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
     */
    private BigDecimal closingPrice;

    /**
     * –¢–µ–∫—É—â–∞—è —Ä—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞
     */
    private BigDecimal currentPrice;

    /**
     * –ü–ª–µ—á–æ
     */
    private BigDecimal leverage;

    /**
     * –í—ã–¥–µ–ª–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –∏–∑ –¥–µ–ø–æ–∑–∏—Ç–∞ (–º–∞—Ä–∂–∞)
     */
    private BigDecimal allocatedAmount;

    /**
     * –ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫ (Net PnL)
     */
    private BigDecimal unrealizedPnLUSDT;

    /**
     * –ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫ (%)
     */
    private BigDecimal unrealizedPnLPercent;

    /**
     * –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è (–∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è) –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫ (Net PnL)
     */
    private BigDecimal realizedPnLUSDT;

    /**
     * –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫ (%)
     */
    private BigDecimal realizedPnLPercent;

    /**
     * –ö–æ–º–∏—Å—Å–∏–∏ –∑–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ
     */
    private BigDecimal openingFees;

    /**
     * –ö–æ–º–∏—Å—Å–∏–∏ –∑–∞ —Ñ–∞–Ω–¥–∏–Ω–≥
     */
    private BigDecimal fundingFees;

    /**
     * –ö–æ–º–∏—Å—Å–∏–∏ –∑–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ
     */
    private BigDecimal closingFees;

    /**
     * –°—Ç–∞—Ç—É—Å –ø–æ–∑–∏—Ü–∏–∏
     */
    private PositionStatus status;

    /**
     * –í—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è
     */
    private LocalDateTime openTime;

    /**
     * –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    private LocalDateTime lastUpdated;

    /**
     * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (JSON)
     */
    private String metadata;

    /**
     * –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–Ω–µ—à–Ω–µ–≥–æ –æ—Ä–¥–µ—Ä–∞ (–¥–ª—è —Å–≤—è–∑–∏ —Å –±–∏—Ä–∂–µ–π)
     */
    private String externalOrderId;

    /**
     * –†–∞—Å—á–µ—Ç –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞ (Net PnL).
     * –£—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∏—Å—Å–∏—é –∑–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —É–∂–µ —É–ø–ª–∞—á–µ–Ω–∞.
     * –ö–æ–º–∏—Å—Å–∏—è –∑–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –±—É–¥–µ—Ç —É—á—Ç–µ–Ω–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ PnL.
     */
    public void calculateUnrealizedPnL() {
        if (entryPrice == null || currentPrice == null || size == null || size.compareTo(BigDecimal.ZERO) == 0) {
            unrealizedPnLUSDT = BigDecimal.ZERO;
            unrealizedPnLPercent = BigDecimal.ZERO;
            return;
        }

        // 2. –í—ã—á–∏—Ç–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é –∑–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ (–æ–Ω–∞ —É–∂–µ —É–ø–ª–∞—á–µ–Ω–∞)
        BigDecimal safeOpeningFees = openingFees != null ? openingFees : BigDecimal.ZERO;
        BigDecimal safeFundingFees = fundingFees != null ? fundingFees : BigDecimal.ZERO;
        BigDecimal totalFees = safeOpeningFees.subtract(safeFundingFees);

        this.unrealizedPnLUSDT = unrealizedPnLUSDT.subtract(totalFees);

        log.info("üìä –†–∞—Å—á–µ—Ç PnL:");
        log.info("‚û°Ô∏è OpeningFees: {}", safeOpeningFees);
        log.info("‚û°Ô∏è FundingFees: {}", safeFundingFees);
        log.info("‚û°Ô∏è TotalFees: {}", totalFees);
        log.info("‚úÖ UnrealizedPnL (–ø–æ—Å–ª–µ –≤—ã—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–π): {} USDT", this.realizedPnLUSDT);

        // 3. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é –ø—Ä–∏–±—ã–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∏—Å—Ç–æ–≥–æ PnL
        if (allocatedAmount != null && allocatedAmount.compareTo(BigDecimal.ZERO) > 0) {
            this.unrealizedPnLPercent = this.unrealizedPnLUSDT.divide(allocatedAmount, 4, RoundingMode.HALF_UP)
                    .multiply(BigDecimal.valueOf(100));
            log.info("‚úÖ UnrealizedPnL: {} % (–Ω–∞ —Å—É–º–º—É –≤–ª–æ–∂–µ–Ω–∏–π {})", this.unrealizedPnLPercent, allocatedAmount);
        } else {
            this.unrealizedPnLPercent = BigDecimal.ZERO;
            log.warn("‚ö†Ô∏è allocatedAmount = null –∏–ª–∏ 0, –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π PnL –Ω–µ –≤—ã—á–∏—Å–ª–µ–Ω.");
        }
    }

    /**
     * –†–∞—Å—á–µ—Ç –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞ (Net PnL) –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏.
     *
     * @param closedPnl   pnl –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –±–µ–∑ —É—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–π
     * @param closingFees –ö–æ–º–∏—Å—Å–∏—è, —É–ø–ª–∞—á–µ–Ω–Ω–∞—è –∑–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏.
     */
    public void calculateAndSetRealizedPnL(BigDecimal closedPnl, BigDecimal closingFees) {
        if (entryPrice == null || closedPnl == null || size == null || size.compareTo(BigDecimal.ZERO) == 0) {
            log.warn("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ PnL: entryPrice={}, closedPnl={}, size={}", entryPrice, closedPnl, size);
            this.realizedPnLUSDT = BigDecimal.ZERO;
            this.realizedPnLPercent = BigDecimal.ZERO;
            return;
        }

        BigDecimal safeOpeningFees = openingFees != null ? openingFees : BigDecimal.ZERO;
        BigDecimal safeClosingFees = closingFees != null ? closingFees : BigDecimal.ZERO;
        BigDecimal safeFundingFees = fundingFees != null ? fundingFees : BigDecimal.ZERO;

        BigDecimal totalFees = safeOpeningFees.add(safeClosingFees).subtract(safeFundingFees);
        this.realizedPnLUSDT = closedPnl.subtract(totalFees);
        this.closingFees = safeClosingFees;

        log.info("üìä –†–∞—Å—á–µ—Ç PnL:");
        log.info("‚û°Ô∏è ClosedPnL (–±–µ–∑ –∫–æ–º–∏—Å—Å–∏–π): {}", closedPnl);
        log.info("‚û°Ô∏è OpeningFees: {}", safeOpeningFees);
        log.info("‚û°Ô∏è ClosingFees: {}", safeClosingFees);
        log.info("‚û°Ô∏è FundingFees: {}", safeFundingFees);
        log.info("‚û°Ô∏è TotalFees: {}", totalFees);
        log.info("‚úÖ RealizedPnL (–ø–æ—Å–ª–µ –≤—ã—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–π): {} USDT", this.realizedPnLUSDT);

        if (allocatedAmount != null && allocatedAmount.compareTo(BigDecimal.ZERO) > 0) {
            this.realizedPnLPercent = this.realizedPnLUSDT
                    .divide(allocatedAmount, 4, RoundingMode.HALF_UP)
                    .multiply(BigDecimal.valueOf(100));
            log.info("‚úÖ RealizedPnL: {} % (–Ω–∞ —Å—É–º–º—É –≤–ª–æ–∂–µ–Ω–∏–π {})", this.realizedPnLPercent, allocatedAmount);
        } else {
            this.realizedPnLPercent = BigDecimal.ZERO;
            log.warn("‚ö†Ô∏è allocatedAmount = null –∏–ª–∏ 0, –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π PnL –Ω–µ –≤—ã—á–∏—Å–ª–µ–Ω.");
        }

        this.unrealizedPnLUSDT = BigDecimal.ZERO;
        this.unrealizedPnLPercent = BigDecimal.ZERO;
        log.info("‚ôªÔ∏è UnrealizedPnL —Å–±—Ä–æ—à–µ–Ω –¥–æ –Ω—É–ª—è, –ø–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞.");
    }


    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–∫—Ä—ã—Ç–∞ –ª–∏ –ø–æ–∑–∏—Ü–∏—è
     */
    public boolean isOpen() {
        return status == PositionStatus.OPEN;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
     */
    public String getDirectionString() {
        return type == PositionType.LONG ? "LONG" : "SHORT";
    }
}