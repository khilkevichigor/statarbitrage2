package com.example.statarbitrage.trading.services;

import com.example.statarbitrage.common.model.PairData;
import com.example.statarbitrage.trading.interfaces.TradingProvider;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.math.RoundingMode;

@Slf4j
@Service
@RequiredArgsConstructor
public class AdaptiveAmountService {
    /**
     * –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—É–º–º –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ lot size –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
     */
    public BigDecimal[] calculate(TradingProvider provider, PairData pairData, BigDecimal totalAmount) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ lot size
            BigDecimal longPrice = provider.getCurrentPrice(pairData.getLongTicker());
            BigDecimal shortPrice = provider.getCurrentPrice(pairData.getShortTicker());

            if (longPrice == null || shortPrice == null ||
                    longPrice.compareTo(BigDecimal.ZERO) <= 0 || shortPrice.compareTo(BigDecimal.ZERO) <= 0) {
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º 50/50");
                BigDecimal half = totalAmount.divide(BigDecimal.valueOf(2), 2, RoundingMode.HALF_UP);
                return new BigDecimal[]{half, half};
            }

            // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            BigDecimal bestLongAmount = null;
            BigDecimal bestShortAmount = null;
            BigDecimal minDifference = BigDecimal.valueOf(Double.MAX_VALUE);

            // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ç 40% –¥–æ 60% –¥–ª—è long –ø–æ–∑–∏—Ü–∏–∏
            for (int longPercent = 40; longPercent <= 60; longPercent++) {
                BigDecimal longAmount = totalAmount.multiply(BigDecimal.valueOf(longPercent))
                        .divide(BigDecimal.valueOf(100), 2, RoundingMode.HALF_UP);
                BigDecimal shortAmount = totalAmount.subtract(longAmount);

                // –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É lot size
                BigDecimal longSizeBeforeAdjust = longAmount.divide(longPrice, 8, RoundingMode.HALF_UP);
                BigDecimal shortSizeBeforeAdjust = shortAmount.divide(shortPrice, 8, RoundingMode.HALF_UP);

                // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É (–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ —Ü–µ–ª—ã—Ö)
                BigDecimal adjustedLongSize = longSizeBeforeAdjust.setScale(0, RoundingMode.DOWN);
                BigDecimal adjustedShortSize = shortSizeBeforeAdjust.setScale(0, RoundingMode.DOWN);

                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Å—É–º–º—ã –ø–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
                BigDecimal adjustedLongAmount = adjustedLongSize.multiply(longPrice);
                BigDecimal adjustedShortAmount = adjustedShortSize.multiply(shortPrice);

                // –°—á–∏—Ç–∞–µ–º —Ä–∞–∑–Ω–æ—Å—Ç—å
                BigDecimal difference = adjustedLongAmount.subtract(adjustedShortAmount).abs();

                if (difference.compareTo(minDifference) < 0) {
                    minDifference = difference;
                    bestLongAmount = longAmount;
                    bestShortAmount = shortAmount;
                }
            }

            if (bestLongAmount != null && bestShortAmount != null) {
                log.info("üéØ –ù–∞–π–¥–µ–Ω–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: LONG ${}, SHORT ${} (–æ–∂–∏–¥–∞–µ–º–∞—è —Ä–∞–∑–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏: ${})",
                        bestLongAmount, bestShortAmount, minDifference);
                return new BigDecimal[]{bestLongAmount, bestShortAmount};
            }

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–º —Ä–∞—Å—á–µ—Ç–µ: {}, –∏—Å–ø–æ–ª—å–∑—É–µ–º 50/50", e.getMessage());
        }

        // Fallback –∫ —Ä–∞–≤–Ω–æ–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é
        BigDecimal half = totalAmount.divide(BigDecimal.valueOf(2), 2, RoundingMode.HALF_UP);
        return new BigDecimal[]{half, half};
    }
}
