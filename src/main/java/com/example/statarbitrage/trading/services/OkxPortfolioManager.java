package com.example.statarbitrage.trading.services;

import com.example.statarbitrage.trading.model.Portfolio;
import com.example.statarbitrage.trading.model.Position;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import lombok.extern.slf4j.Slf4j;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.nio.charset.StandardCharsets;
import java.time.Instant;
import java.time.LocalDateTime;
import java.util.Base64;
import java.util.concurrent.TimeUnit;

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –¥–ª—è OKX API
 * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂–∏ OKX
 */
@Slf4j
@Service
public class OkxPortfolioManager {

    // OKX API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    @Value("${okx.api.key:}")
    private String apiKey;

    @Value("${okx.api.secret:}")
    private String apiSecret;

    @Value("${okx.api.passphrase:}")
    private String passphrase;

    @Value("${okx.api.sandbox:true}")
    private boolean isSandbox;

    // HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è OKX API
    private static final OkHttpClient httpClient = new OkHttpClient.Builder()
            .connectTimeout(10, TimeUnit.SECONDS)
            .readTimeout(30, TimeUnit.SECONDS)
            .writeTimeout(10, TimeUnit.SECONDS)
            .build();

    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã OKX API
    private static final String PROD_BASE_URL = "https://www.okx.com";
    private static final String SANDBOX_BASE_URL = "https://www.okx.com";
    private static final String ACCOUNT_BALANCE_ENDPOINT = "/api/v5/account/balance";
    private static final String TRADE_POSITIONS_ENDPOINT = "/api/v5/account/positions";

    // –ö—ç—à –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
    private Portfolio cachedPortfolio;
    private long lastUpdateTime = 0;
    private static final long CACHE_DURATION_MS = 10000; // 10 —Å–µ–∫—É–Ω–¥

    private final Object portfolioLock = new Object();

    public void initializePortfolio(BigDecimal initialBalance) {
        // –î–ª—è OKX –Ω–µ –Ω—É–∂–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç —Å –±–∏—Ä–∂–∏
        log.info("üîÑ OKX PortfolioManager: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—é—Ç—Å—è —Å –±–∏—Ä–∂–∏");
    }

    public Portfolio getCurrentPortfolio() {
        synchronized (portfolioLock) {
            long currentTime = System.currentTimeMillis();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if (cachedPortfolio != null && (currentTime - lastUpdateTime) < CACHE_DURATION_MS) {
                return cachedPortfolio;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å OKX
            Portfolio portfolio = fetchPortfolioFromOkx();
            if (portfolio != null) {
                cachedPortfolio = portfolio;
                lastUpdateTime = currentTime;
                return portfolio;
            }

            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
            return createEmptyPortfolio();
        }
    }

    public boolean reserveBalance(BigDecimal amount) {
        // –î–ª—è OKX —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤
        return hasAvailableBalance(amount);
    }

    public void releaseReservedBalance(BigDecimal amount) {
        // –î–ª—è OKX –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤
        log.debug("üí∏ OKX: –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–∞ {} (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)", amount);
    }

    public void onPositionOpened(Position position) {
        // –î–ª—è OKX –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∑–∏—Ü–∏—è—Ö –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        log.info("üìà OKX: –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {}", position.getSymbol());
        invalidateCache();
    }

    public void onPositionClosed(Position position, BigDecimal pnl, BigDecimal fees) {
        // –î–ª—è OKX –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∑–∏—Ü–∏—è—Ö –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        log.info("üìâ OKX: –ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {} | PnL: {}", position.getSymbol(), pnl);
        invalidateCache();
    }

    public BigDecimal calculateMaxPositionSize() {
        Portfolio portfolio = getCurrentPortfolio();
        if (portfolio == null) {
            return BigDecimal.ZERO;
        }

        // 10% –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é
        BigDecimal maxPositionPercent = BigDecimal.valueOf(10);
        return portfolio.getAvailableBalance()
                .multiply(maxPositionPercent)
                .divide(BigDecimal.valueOf(100), 2, RoundingMode.HALF_UP);
    }

    public boolean hasAvailableBalance(BigDecimal amount) {
        Portfolio portfolio = getCurrentPortfolio();
        if (portfolio == null) {
            return false;
        }
        return portfolio.getAvailableBalance().compareTo(amount) >= 0;
    }

    public BigDecimal getPortfolioReturn() {
        Portfolio portfolio = getCurrentPortfolio();
        if (portfolio == null) {
            return BigDecimal.ZERO;
        }
        return portfolio.getTotalReturn();
    }

    public BigDecimal getMaxDrawdown() {
        Portfolio portfolio = getCurrentPortfolio();
        if (portfolio == null) {
            return BigDecimal.ZERO;
        }
        return portfolio.getMaxDrawdown();
    }

    public void updatePortfolioValue() {
        synchronized (portfolioLock) {
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å OKX
            invalidateCache();
            getCurrentPortfolio();
        }
    }

    public void savePortfolio() {
        // –î–ª—è OKX –Ω–µ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å - –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –Ω–∞ –±–∏—Ä–∂–µ
        log.debug("üíæ OKX: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è");
    }

    public void loadPortfolio() {
        // –î–ª—è OKX –Ω–µ –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å - –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—é—Ç—Å—è —Å –±–∏—Ä–∂–∏
        log.debug("üìä OKX: –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è");
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Å OKX API
     */
    private Portfolio fetchPortfolioFromOkx() {
        try {
            if (!isApiConfigured()) {
                log.warn("‚ö†Ô∏è OKX API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
                return null;
            }

            String baseUrl = isSandbox ? SANDBOX_BASE_URL : PROD_BASE_URL;
            String endpoint = ACCOUNT_BALANCE_ENDPOINT;

            String timestamp = Instant.now().truncatedTo(java.time.temporal.ChronoUnit.MILLIS).toString();
            String signature = generateSignature("GET", endpoint, "", timestamp);

            Request request = new Request.Builder()
                    .url(baseUrl + endpoint)
                    .addHeader("OK-ACCESS-KEY", apiKey)
                    .addHeader("OK-ACCESS-SIGN", signature)
                    .addHeader("OK-ACCESS-TIMESTAMP", timestamp)
                    .addHeader("OK-ACCESS-PASSPHRASE", passphrase)
                    .build();

            try (Response response = httpClient.newCall(request).execute()) {
                if (!response.isSuccessful()) {
                    log.error("‚ùå OKX API HTTP error: {}", response.code());
                    return null;
                }

                String responseBody = response.body().string();
                log.debug("üîç OKX API –æ—Ç–≤–µ—Ç: {}", responseBody);

                JsonObject jsonResponse = JsonParser.parseString(responseBody).getAsJsonObject();

                JsonElement codeElement = jsonResponse.get("code");
                if (codeElement == null) {
                    log.error("‚ùå OKX API –æ—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ 'code'");
                    return null;
                }

                String code = codeElement.getAsString();
                if (!"0".equals(code)) {
                    JsonElement msgElement = jsonResponse.get("msg");
                    String msg = msgElement != null ? msgElement.getAsString() : "Unknown error";
                    log.error("‚ùå OKX API error: –∫–æ–¥={}, —Å–æ–æ–±—â–µ–Ω–∏–µ={}", code, msg);
                    return null;
                }

                return parsePortfolioData(jsonResponse);
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Å OKX: {}", e.getMessage());
            return null;
        }
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∏–∑ –æ—Ç–≤–µ—Ç–∞ OKX
     */
    private Portfolio parsePortfolioData(JsonObject jsonResponse) {
        try {
            log.debug("üîç –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ OKX");

            JsonArray data = jsonResponse.getAsJsonArray("data");
            if (data == null || data.isEmpty()) {
                log.warn("‚ö†Ô∏è –ú–∞—Å—Å–∏–≤ 'data' –ø—É—Å—Ç –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
                return createEmptyPortfolio();
            }

            JsonObject account = data.get(0).getAsJsonObject();
            JsonArray details = account.getAsJsonArray("details");

            if (details == null || details.isEmpty()) {
                log.warn("‚ö†Ô∏è –ú–∞—Å—Å–∏–≤ 'details' –ø—É—Å—Ç –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
                return createEmptyPortfolio();
            }

            log.debug("üí∞ –ù–∞–π–¥–µ–Ω–æ {} –≤–∞–ª—é—Ç –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ", details.size());

            BigDecimal totalBalance = BigDecimal.ZERO;
            BigDecimal availableBalance = BigDecimal.ZERO;
            BigDecimal unrealizedPnL = BigDecimal.ZERO;

            // –ò—â–µ–º USDT –±–∞–ª–∞–Ω—Å
            for (JsonElement detail : details) {
                JsonObject currency = detail.getAsJsonObject();
                log.debug("üí∞ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞–ª—é—Ç—É: {}", currency.toString());

                JsonElement ccyElement = currency.get("ccy");
                if (ccyElement == null) {
                    log.warn("‚ö†Ô∏è –ü–æ–ª–µ 'ccy' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç—ã");
                    continue;
                }
                String ccy = ccyElement.getAsString();

                if ("USDT".equals(ccy)) {
                    log.debug("üí∞ –ù–∞–π–¥–µ–Ω USDT –±–∞–ª–∞–Ω—Å");

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ eq
                    JsonElement eqElement = currency.get("eq");
                    if (eqElement == null) {
                        log.error("‚ùå –ü–æ–ª–µ 'eq' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è USDT");
                        continue;
                    }
                    String eqStr = eqElement.getAsString();
                    log.debug("üí∞ eq (–æ–±—â–∏–π –±–∞–ª–∞–Ω—Å): {}", eqStr);

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ availEq
                    JsonElement availEqElement = currency.get("availEq");
                    if (availEqElement == null) {
                        log.error("‚ùå –ü–æ–ª–µ 'availEq' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è USDT");
                        continue;
                    }
                    String availEqStr = availEqElement.getAsString();
                    log.debug("üí∞ availEq (–¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å): {}", availEqStr);

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ uPnL (–º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∏–ª–∏ –±—ã—Ç—å null)
                    JsonElement uPnLElement = currency.get("uPnL");
                    String uPnLStr = "0";
                    if (uPnLElement != null && !uPnLElement.isJsonNull()) {
                        uPnLStr = uPnLElement.getAsString();
                        log.debug("üí∞ uPnL (–Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å): {}", uPnLStr);
                    } else {
                        log.debug("‚ö†Ô∏è –ü–æ–ª–µ 'uPnL' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ null –¥–ª—è USDT, –∏—Å–ø–æ–ª—å–∑—É–µ–º 0"); //todo –ø–æ–¥—É–º–∞—Ç—å —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º!
                    }

                    totalBalance = new BigDecimal(eqStr);
                    availableBalance = new BigDecimal(availEqStr);
                    unrealizedPnL = new BigDecimal(uPnLStr);
                    break;
                }
            }

            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            int activePositions = getActivePositionsCount();

            // –°–æ–∑–¥–∞–µ–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
            Portfolio portfolio = Portfolio.builder()
                    .totalBalance(totalBalance)
                    .availableBalance(availableBalance)
                    .reservedBalance(totalBalance.subtract(availableBalance))
                    .initialBalance(totalBalance) // –î–ª—è OKX –Ω–µ –∑–Ω–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
                    .unrealizedPnL(unrealizedPnL)
                    .realizedPnL(BigDecimal.ZERO) // –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
                    .totalFeesAccrued(BigDecimal.ZERO) // –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
                    .maxDrawdown(BigDecimal.ZERO) // –ù—É–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å
                    .highWaterMark(totalBalance)
                    .activePositionsCount(activePositions)
                    .createdAt(LocalDateTime.now())
                    .lastUpdated(LocalDateTime.now())
                    .build();

            log.debug("üìä OKX –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ: –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {}, –î–æ—Å—Ç—É–ø–Ω–æ: {}, –ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è PnL: {}, –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {}",
                    totalBalance, availableBalance, unrealizedPnL, activePositions);

            return portfolio;

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ OKX: {}", e.getMessage());
            return createEmptyPortfolio();
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
     */
    private int getActivePositionsCount() {
        try {
            String baseUrl = isSandbox ? SANDBOX_BASE_URL : PROD_BASE_URL;
            String endpoint = TRADE_POSITIONS_ENDPOINT;

            String timestamp = Instant.now().truncatedTo(java.time.temporal.ChronoUnit.MILLIS).toString();
            String signature = generateSignature("GET", endpoint, "", timestamp);

            Request request = new Request.Builder()
                    .url(baseUrl + endpoint)
                    .addHeader("OK-ACCESS-KEY", apiKey)
                    .addHeader("OK-ACCESS-SIGN", signature)
                    .addHeader("OK-ACCESS-TIMESTAMP", timestamp)
                    .addHeader("OK-ACCESS-PASSPHRASE", passphrase)
                    .build();

            try (Response response = httpClient.newCall(request).execute()) {
                if (!response.isSuccessful()) {
                    return 0;
                }

                String responseBody = response.body().string();
                JsonObject jsonResponse = JsonParser.parseString(responseBody).getAsJsonObject();

                if (!"0".equals(jsonResponse.get("code").getAsString())) {
                    return 0;
                }

                JsonArray data = jsonResponse.getAsJsonArray("data");
                return data.size();
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {}", e.getMessage());
            return 0;
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
     */
    private Portfolio createEmptyPortfolio() {
        return Portfolio.builder()
                .totalBalance(BigDecimal.ZERO)
                .availableBalance(BigDecimal.ZERO)
                .reservedBalance(BigDecimal.ZERO)
                .initialBalance(BigDecimal.ZERO)
                .unrealizedPnL(BigDecimal.ZERO)
                .realizedPnL(BigDecimal.ZERO)
                .totalFeesAccrued(BigDecimal.ZERO)
                .maxDrawdown(BigDecimal.ZERO)
                .highWaterMark(BigDecimal.ZERO)
                .activePositionsCount(0)
                .createdAt(LocalDateTime.now())
                .lastUpdated(LocalDateTime.now())
                .build();
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è OKX API
     */
    private String generateSignature(String method, String endpoint, String body, String timestamp) {
        try {
            String message = timestamp + method + endpoint + body;

            Mac mac = Mac.getInstance("HmacSHA256");
            SecretKeySpec keySpec = new SecretKeySpec(apiSecret.getBytes(StandardCharsets.UTF_8), "HmacSHA256");
            mac.init(keySpec);

            byte[] hash = mac.doFinal(message.getBytes(StandardCharsets.UTF_8));
            return Base64.getEncoder().encodeToString(hash);
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∏ OKX: {}", e.getMessage());
            return "";
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API
     */
    private boolean isApiConfigured() {
        return apiKey != null && !apiKey.isEmpty() &&
                apiSecret != null && !apiSecret.isEmpty() &&
                passphrase != null && !passphrase.isEmpty();
    }

    /**
     * –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞
     */
    private void invalidateCache() {
        synchronized (portfolioLock) {
            lastUpdateTime = 0;
            cachedPortfolio = null;
        }
    }
}