package com.example.statarbitrage.trading.services;

import com.example.statarbitrage.common.model.Settings;
import com.example.statarbitrage.core.services.SettingsService;
import com.example.statarbitrage.trading.interfaces.PortfolioManager;
import com.example.statarbitrage.trading.model.Portfolio;
import com.example.statarbitrage.trading.model.Position;
import com.example.statarbitrage.trading.repositories.PortfolioRepository;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.annotation.DependsOn;
import org.springframework.dao.DataAccessException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.LocalDateTime;
import java.util.Optional;

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
 */
@Slf4j
@Service
@DependsOn("dbInitializer")
public class VirtualPortfolioManager implements PortfolioManager {

    private final PortfolioRepository portfolioRepository;
    private final SettingsService settingsService;

    private Portfolio currentPortfolio;
    private final Object portfolioLock = new Object();

    public VirtualPortfolioManager(PortfolioRepository portfolioRepository, SettingsService settingsService) {
        this.portfolioRepository = portfolioRepository;
        this.settingsService = settingsService;
        loadPortfolio();
    }

    @Override
    @Transactional
    public void initializePortfolio(BigDecimal initialBalance) {
        synchronized (portfolioLock) {
            Optional<Portfolio> existingPortfolio = portfolioRepository.findFirstByOrderByIdDesc();

            if (existingPortfolio.isPresent()) {
                log.info("üìä –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å –±–∞–ª–∞–Ω—Å–æ–º: {}", existingPortfolio.get().getTotalBalance());
                this.currentPortfolio = existingPortfolio.get();
                return;
            }

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
            Portfolio portfolio = Portfolio.builder()
                    .totalBalance(initialBalance)
                    .availableBalance(initialBalance)
                    .reservedBalance(BigDecimal.ZERO)
                    .initialBalance(initialBalance)
                    .unrealizedPnL(BigDecimal.ZERO)
                    .realizedPnL(BigDecimal.ZERO)
                    .totalFeesAccrued(BigDecimal.ZERO)
                    .maxDrawdown(BigDecimal.ZERO)
                    .highWaterMark(initialBalance)
                    .activePositionsCount(0)
                    .createdAt(LocalDateTime.now())
                    .lastUpdated(LocalDateTime.now())
                    .build();

            this.currentPortfolio = saveWithRetry(portfolio);
            log.info("‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º: {}", initialBalance);
        }
    }

    @Override
    public Portfolio getCurrentPortfolio() {
        synchronized (portfolioLock) {
            if (currentPortfolio == null) {
                loadPortfolio();
            }
            return currentPortfolio;
        }
    }

    @Override
    @Transactional
    public boolean reserveBalance(BigDecimal amount) {
        synchronized (portfolioLock) {
            if (currentPortfolio.getAvailableBalance().compareTo(amount) < 0) {
                log.warn("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è: —Ç—Ä–µ–±—É–µ—Ç—Å—è {}, –¥–æ—Å—Ç—É–ø–Ω–æ {}",
                        amount, currentPortfolio.getAvailableBalance());
                return false;
            }

            currentPortfolio.setAvailableBalance(currentPortfolio.getAvailableBalance().subtract(amount));
            currentPortfolio.setReservedBalance(currentPortfolio.getReservedBalance().add(amount));
            currentPortfolio.setLastUpdated(LocalDateTime.now());

            currentPortfolio = saveWithRetry(currentPortfolio);
            log.debug("üí∞ –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ: {} | –î–æ—Å—Ç—É–ø–Ω–æ: {} | –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ: {}",
                    amount, currentPortfolio.getAvailableBalance(), currentPortfolio.getReservedBalance());
            return true;
        }
    }

    @Override
    @Transactional
    public void releaseReservedBalance(BigDecimal amount) {
        synchronized (portfolioLock) {
            currentPortfolio.setReservedBalance(currentPortfolio.getReservedBalance().subtract(amount));
            currentPortfolio.setAvailableBalance(currentPortfolio.getAvailableBalance().add(amount));
            currentPortfolio.setLastUpdated(LocalDateTime.now());

            currentPortfolio = saveWithRetry(currentPortfolio);
            log.debug("üí∏ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ: {} | –î–æ—Å—Ç—É–ø–Ω–æ: {} | –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ: {}",
                    amount, currentPortfolio.getAvailableBalance(), currentPortfolio.getReservedBalance());
        }
    }

    @Override
    @Transactional
    public void onPositionOpened(Position position) {
        synchronized (portfolioLock) {
            currentPortfolio.setActivePositionsCount(currentPortfolio.getActivePositionsCount() + 1);
            currentPortfolio.setLastUpdated(LocalDateTime.now());

            currentPortfolio = saveWithRetry(currentPortfolio);
            log.info("üìà –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è: {} | –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {}",
                    position.getSymbol(), currentPortfolio.getActivePositionsCount());
        }
    }

    @Override
    @Transactional
    public void onPositionClosed(Position position, BigDecimal pnl, BigDecimal fees) {
        synchronized (portfolioLock) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            currentPortfolio.setTotalBalance(currentPortfolio.getTotalBalance().add(pnl));
            currentPortfolio.setRealizedPnL(currentPortfolio.getRealizedPnL().add(pnl));
            currentPortfolio.setTotalFeesAccrued(currentPortfolio.getTotalFeesAccrued().add(fees));
            currentPortfolio.setActivePositionsCount(currentPortfolio.getActivePositionsCount() - 1);

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å
            currentPortfolio.setAvailableBalance(currentPortfolio.getAvailableBalance().add(position.getAllocatedAmount()).add(pnl));

            // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ—Å–∞–¥–∫—É
            currentPortfolio.updateMaxDrawdown();

            currentPortfolio.setLastUpdated(LocalDateTime.now());
            currentPortfolio = saveWithRetry(currentPortfolio);

            log.info("üìâ –ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è: {} | PnL: {} | –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {} | –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {}",
                    position.getSymbol(), pnl, currentPortfolio.getTotalBalance(),
                    currentPortfolio.getActivePositionsCount());
        }
    }

    @Override
    public BigDecimal calculateMaxPositionSize() {
        synchronized (portfolioLock) {
            Settings settings = settingsService.getSettings();

            // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –Ω–∞ –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10%)
            BigDecimal maxPositionPercent = BigDecimal.valueOf(10); // –ú–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

            BigDecimal maxByPercent = currentPortfolio.getTotalBalance()
                    .multiply(maxPositionPercent)
                    .divide(BigDecimal.valueOf(100), 2, RoundingMode.HALF_UP);

            // –ù–µ –±–æ–ª—å—à–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
            return maxByPercent.min(currentPortfolio.getAvailableBalance());
        }
    }

    @Override
    public boolean hasAvailableBalance(BigDecimal amount) {
        synchronized (portfolioLock) {
            return currentPortfolio.getAvailableBalance().compareTo(amount) >= 0;
        }
    }

    @Override
    public BigDecimal getPortfolioReturn() {
        synchronized (portfolioLock) {
            return currentPortfolio.getTotalReturn();
        }
    }

    @Override
    public BigDecimal getMaxDrawdown() {
        synchronized (portfolioLock) {
            return currentPortfolio.getMaxDrawdown();
        }
    }

    @Override
    @Transactional
    public void updatePortfolioValue() {
        synchronized (portfolioLock) {
            // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω –ø–æ–∑–∏—Ü–∏–π
            // –ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—Ä–æ—Å–µ
            currentPortfolio.updateMaxDrawdown();
            currentPortfolio.setLastUpdated(LocalDateTime.now());
            currentPortfolio = saveWithRetry(currentPortfolio);
        }
    }

    @Override
    @Transactional
    public void savePortfolio() {
        synchronized (portfolioLock) {
            if (currentPortfolio != null) {
                currentPortfolio.setLastUpdated(LocalDateTime.now());
                currentPortfolio = saveWithRetry(currentPortfolio);
            }
        }
    }

    @Override
    public void loadPortfolio() {
        synchronized (portfolioLock) {
            Optional<Portfolio> portfolio = portfolioRepository.findFirstByOrderByIdDesc();

            if (portfolio.isPresent()) {
                this.currentPortfolio = portfolio.get();
                log.info("üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: –±–∞–ª–∞–Ω—Å {}, –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å {}%",
                        currentPortfolio.getTotalBalance(), currentPortfolio.getTotalReturn());
            } else {
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                Settings settings = settingsService.getSettings();
                BigDecimal initialVirtualBalance = BigDecimal.valueOf(settings.getInitialVirtualBalance());
                initializePortfolio(initialVirtualBalance);
            }
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ SQLite
     */
    private Portfolio saveWithRetry(Portfolio portfolio) {
        int maxRetries = 3;
        int attempts = 0;

        while (attempts < maxRetries) {
            try {
                return portfolioRepository.save(portfolio);
            } catch (DataAccessException e) {
                attempts++;
                if (e.getMessage() != null && e.getMessage().contains("SQLITE_BUSY")) {
                    log.warn("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, –ø–æ–ø—ã—Ç–∫–∞ {}/{}: {}", attempts, maxRetries, e.getMessage());
                    if (attempts >= maxRetries) {
                        log.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø–æ—Å–ª–µ {} –ø–æ–ø—ã—Ç–æ–∫", maxRetries);
                        throw new RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∏–∑-–∑–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", e);
                    }
                    try {
                        Thread.sleep(50 + (attempts * 25L)); // Exponential backoff
                    } catch (InterruptedException ie) {
                        Thread.currentThread().interrupt();
                        throw new RuntimeException("–ü—Ä–µ—Ä–≤–∞–Ω –ø–æ—Ç–æ–∫ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", ie);
                    }
                } else {
                    throw e; // –î—Ä—É–≥–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Å—Ä–∞–∑—É –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º
                }
            }
        }

        throw new RuntimeException("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ saveWithRetry");
    }
}