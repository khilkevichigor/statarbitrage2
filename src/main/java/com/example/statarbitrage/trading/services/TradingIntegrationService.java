package com.example.statarbitrage.trading.services;

import com.example.statarbitrage.common.model.PairData;
import com.example.statarbitrage.common.model.Settings;
import com.example.statarbitrage.trading.interfaces.TradingProvider;
import com.example.statarbitrage.trading.interfaces.TradingProviderType;
import com.example.statarbitrage.trading.model.*;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.util.List;
import java.util.concurrent.ConcurrentHashMap;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π —Å—Ç–∞—Ç–∞—Ä–±–∏—Ç—Ä–∞–∂–∞
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class TradingIntegrationService {

    private final TradingProviderFactory tradingProviderFactory;

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ SQLite
    private final Object openPositionLock = new Object();

    // –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É PairData –∏ —Ç–æ—Ä–≥–æ–≤—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
    private final ConcurrentHashMap<Long, String> pairToLongPositionMap = new ConcurrentHashMap<>();
    private final ConcurrentHashMap<Long, String> pairToShortPositionMap = new ConcurrentHashMap<>();
    private final PositionSizeService positionSizeService;
    private final AdaptiveAmountService adaptiveAmountService;
    private final ValidateMinimumLotRequirementsService validateMinimumLotRequirementsService;

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞—Ä—ã –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —Å—Ç–∞—Ç–∞—Ä–±–∏—Ç—Ä–∞–∂–∞ - –°–ò–ù–•–†–û–ù–ù–û
     */
    public ArbitragePairTradeInfo openArbitragePair(PairData pairData, Settings settings) {
        log.info("==> openArbitragePair: –ù–ê–ß–ê–õ–û –¥–ª—è –ø–∞—Ä—ã {}", pairData.getPairName());

        synchronized (openPositionLock) {
            try {
                TradingProvider provider = tradingProviderFactory.getCurrentProvider();
                log.info("–¢–µ–∫—É—â–∏–π —Ç–æ—Ä–≥–æ–≤—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {}", provider.getClass().getSimpleName());

                BigDecimal positionSize = positionSizeService.calculatePositionSize(provider, settings);
                log.info("–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–π: {}", positionSize);

                if (isInvalidPositionSize(positionSize, pairData)) {
                    return buildFailure();
                }

                BigDecimal[] adaptiveAmounts = adaptiveAmountService.calculate(provider, pairData, positionSize);
                BigDecimal longAmount = adaptiveAmounts[0];
                BigDecimal shortAmount = adaptiveAmounts[1];
                log.info("–ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤: LONG {} = {}, SHORT {} = {}", pairData.getLongTicker(), longAmount, pairData.getShortTicker(), shortAmount);

                if (!validateMinimumLotRequirementsService.validate(provider, pairData, longAmount, shortAmount)) {
                    log.warn("‚ö†Ô∏è –ü–†–û–ü–£–°–ö –ü–ê–†–´: {} –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –∏–∑-–∑–∞ –±–æ–ª—å—à–∏—Ö –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –ª–æ—Ç–æ–≤", pairData.getPairName());
                    return buildFailure();
                }

                BigDecimal leverage = BigDecimal.valueOf(settings.getLeverage());
                log.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ –ø–ª–µ—á–æ: {}", leverage);

                TradeResult longResult = openLong(provider, pairData, longAmount, leverage);
                if (!longResult.isSuccess()) {
                    return buildFailure();
                }

                TradeResult shortResult = openShort(provider, pairData, shortAmount, leverage);

                if (shortResult.isSuccess()) {
                    savePositionIds(pairData, longResult, shortResult);
                    return buildSuccess(longResult, shortResult, pairData);
                } else {
                    rollbackIfNecessary(provider, longResult, shortResult);
                    return buildFailure();
                }

            } catch (Exception e) {
                log.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –ø–∞—Ä—ã {}: {}", pairData.getPairName(), e.getMessage(), e);
                return buildFailure();
            } finally {
                log.info("<== openArbitragePair: –ö–û–ù–ï–¶ –¥–ª—è –ø–∞—Ä—ã {}", pairData.getPairName());
            }
        }
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–∞—Ä—ã –ø–æ–∑–∏—Ü–∏–π - –°–ò–ù–•–†–û–ù–ù–û
     */
    public ArbitragePairTradeInfo closeArbitragePair(PairData pairData) {
        log.info("==> closeArbitragePair: –ù–ê–ß–ê–õ–û –¥–ª—è –ø–∞—Ä—ã {}", pairData.getPairName());

        synchronized (openPositionLock) {
            try {
                String longPositionId = pairToLongPositionMap.get(pairData.getId());
                String shortPositionId = pairToShortPositionMap.get(pairData.getId());

                if (!positionsExistInMap(longPositionId, shortPositionId, pairData)) {
                    return buildFailure();
                }

                TradingProvider provider = tradingProviderFactory.getCurrentProvider();
                log.info("–¢–µ–∫—É—â–∏–π —Ç–æ—Ä–≥–æ–≤—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {}", provider.getClass().getSimpleName());

                log.info("üîÑ –ó–∞–∫—Ä—ã—Ç–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –ø–∞—Ä—ã: {}", pairData.getPairName());

                TradeResult longResult = closePosition(provider, longPositionId, "LONG");
                TradeResult shortResult = closePosition(provider, shortPositionId, "SHORT");

                if (longResult.isSuccess() && shortResult.isSuccess()) {
                    logSuccess(pairData, longResult, shortResult);
                } else {
                    logFailure(pairData, longResult, shortResult);
                }

                return ArbitragePairTradeInfo.builder()
                        .success(longResult.isSuccess() && shortResult.isSuccess())
                        .longTradeResult(longResult)
                        .shortTradeResult(shortResult)
                        .build();

            } catch (Exception e) {
                log.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –ø–∞—Ä—ã {}: {}", pairData.getPairName(), e.getMessage(), e);
                return buildFailure();
            } finally {
                log.info("<== closeArbitragePair: –ö–û–ù–ï–¶ –¥–ª—è –ø–∞—Ä—ã {}", pairData.getPairName());
            }
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–æ–∑–∏—Ü–∏–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã –Ω–∞ –±–∏—Ä–∂–µ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º PnL
     */
    public Positioninfo verifyPositionsClosed(PairData pairData) {
        String longPositionId = pairToLongPositionMap.get(pairData.getId());
        String shortPositionId = pairToShortPositionMap.get(pairData.getId());

        if (!positionsExistInMap(longPositionId, shortPositionId, pairData)) {
            return buildClosedPositionInfo(BigDecimal.ZERO);
        }

        TradingProvider provider = tradingProviderFactory.getCurrentProvider();
        provider.updatePositionPrices();

        Position longPosition = provider.getPosition(longPositionId);
        Position shortPosition = provider.getPosition(shortPositionId);

        boolean longClosed = isClosed(longPosition);
        boolean shortClosed = isClosed(shortPosition);

        if (longClosed && shortClosed) {
            BigDecimal finalPnlPercent = calculateTotalPnlPercent(longPosition, shortPosition);
            removePairFromLocalStorage(pairData);
            log.info("üóëÔ∏è –£–¥–∞–ª–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ –¥–ª—è –ø–∞—Ä—ã {}, —Ñ–∏–Ω–∞–ª—å–Ω—ã–π PnL: {}%", pairData.getPairName(), finalPnlPercent);

            return buildClosedPositionInfo(finalPnlPercent);
        }

        log.warn("‚ö†Ô∏è –ù–µ –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã –Ω–∞ –±–∏—Ä–∂–µ: LONG –∑–∞–∫—Ä—ã—Ç–∞={}, SHORT –∑–∞–∫—Ä—ã—Ç–∞={}", longClosed, shortClosed);
        return buildOpenPositionInfo();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –æ—Ç–∫—Ä—ã—Ç—ã–º –ø–æ–∑–∏—Ü–∏—è–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è changes
     */
    public Positioninfo getOpenPositionsInfo(PairData pairData) {
        String longPositionId = pairToLongPositionMap.get(pairData.getId());
        String shortPositionId = pairToShortPositionMap.get(pairData.getId());

        if (!positionsExistInMap(longPositionId, shortPositionId, pairData)) {
            return buildClosedPositionInfo();
        }

        TradingProvider provider = tradingProviderFactory.getCurrentProvider();
        provider.updatePositionPrices();

        Position longPosition = provider.getPosition(longPositionId);
        Position shortPosition = provider.getPosition(shortPositionId);

        if (areBothOpen(longPosition, shortPosition)) {
            calculateUnrealizedPnL(longPosition, shortPosition);
            BigDecimal totalPnL = longPosition.getUnrealizedPnLUSDT().add(shortPosition.getUnrealizedPnLUSDT());

            log.debug("üìä –ê–∫—Ç—É–∞–ª—å–Ω—ã–π PnL –¥–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π {}: {}", pairData.getPairName(), totalPnL);

            return buildOpenPositionInfo(longPosition, shortPosition, totalPnL);
        }

        log.warn("‚ö†Ô∏è –ù–µ –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –æ—Ç–∫—Ä—ã—Ç—ã –Ω–∞ –±–∏—Ä–∂–µ: LONG –æ—Ç–∫—Ä—ã—Ç–∞={}, SHORT –æ—Ç–∫—Ä—ã—Ç–∞={}",
                isOpen(longPosition), isOpen(shortPosition));

        return buildPartiallyClosedInfo(longPosition, shortPosition);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º –¥–ª—è –ø–∞—Ä—ã
     */
    public Positioninfo getPositionInfo(PairData pairData) {
        log.info("‚ÑπÔ∏è –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏—è—Ö –¥–ª—è –ø–∞—Ä—ã {}", pairData.getPairName());

        String longPositionId = pairToLongPositionMap.get(pairData.getId());
        String shortPositionId = pairToShortPositionMap.get(pairData.getId());

        if (!positionsExistInMap(longPositionId, shortPositionId, pairData)) {
            return Positioninfo.builder().build();
        }

        TradingProvider provider = tradingProviderFactory.getCurrentProvider();
        log.debug("–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {}", provider.getClass().getSimpleName());

        Position longPosition = provider.getPosition(longPositionId);
        Position shortPosition = provider.getPosition(shortPositionId);

        if (positionsAreNull(longPosition, shortPosition, pairData)) {
            return Positioninfo.builder().build();
        }

        boolean bothClosed = isClosed(longPosition) && isClosed(shortPosition);
        log.debug("–°—Ç–∞—Ç—É—Å –ø–æ–∑–∏—Ü–∏–π: LONG –∑–∞–∫—Ä—ã—Ç–∞={}, SHORT –∑–∞–∫—Ä—ã—Ç–∞={}", isClosed(longPosition), isClosed(shortPosition));

        if (bothClosed) {
            log.info("‚úÖ –û–±–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–∞—Ä—ã {} —É–∂–µ –∑–∞–∫—Ä—ã—Ç—ã.", pairData.getPairName());
            return buildPositionInfo(true, longPosition, shortPosition);
        }

        log.debug("–ü–æ–∑–∏—Ü–∏–∏ –µ—â–µ –æ—Ç–∫—Ä—ã—Ç—ã, –æ–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã...");
        provider.updatePositionPrices(List.of(pairData.getLongTicker(), pairData.getShortTicker()));
        log.debug("–¶–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã.");

        return buildPositionInfo(false, longPosition, shortPosition);
    }

    public void removePairFromLocalStorage(PairData pairData) {
        log.info("–£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ –¥–ª—è –ø–∞—Ä—ã {}", pairData.getPairName());
        pairToLongPositionMap.remove(pairData.getId());
        pairToShortPositionMap.remove(pairData.getId());
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –∏ PnL –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä - –°–ò–ù–•–†–û–ù–ù–û
     */
    public void updateAllPositions() {
        TradingProvider provider = tradingProviderFactory.getCurrentProvider();
        try {
            provider.updatePositionPrices(); // –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω –ø–æ–∑–∏—Ü–∏–π: {}", e.getMessage());
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
     */
    public Portfolio getPortfolioInfo() {
        TradingProvider provider = tradingProviderFactory.getCurrentProvider();
        return provider.getPortfolio();
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –Ω–æ–≤–æ–π –ø–∞—Ä—ã
     */
    public boolean canOpenNewPair(Settings settings) {
        TradingProvider provider = tradingProviderFactory.getCurrentProvider();
        BigDecimal requiredAmount = positionSizeService.calculatePositionSize(provider, settings);
        return provider.hasAvailableBalance(requiredAmount);
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
     */
    public TradingProviderSwitchResult switchTradingModeWithDetails(TradingProviderType providerType) {
        log.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞: {}", providerType.getDisplayName());
        return tradingProviderFactory.switchToProviderWithDetails(providerType);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
     */
    public TradingProviderType getCurrentTradingMode() {
        return tradingProviderFactory.getCurrentProviderType();
    }

    private boolean isInvalidPositionSize(BigDecimal size, PairData pairData) {
        if (size.compareTo(BigDecimal.ZERO) <= 0) {
            log.warn("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π –ø–æ –ø–∞—Ä–µ {}. –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {}", pairData.getPairName(), size);
            return true;
        }
        return false;
    }

    private TradeResult openLong(TradingProvider provider, PairData pairData, BigDecimal amount, BigDecimal leverage) {
        log.info("üü¢ –û—Ç–∫—Ä—ã—Ç–∏–µ LONG –ø–æ–∑–∏—Ü–∏–∏: {} —Å —Ä–∞–∑–º–µ—Ä–æ–º {}", pairData.getLongTicker(), amount);
        TradeResult result = provider.openLongPosition(pairData.getLongTicker(), amount, leverage);
        log.info("–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è LONG –ø–æ–∑–∏—Ü–∏–∏: {}", result);
        return result;
    }

    private TradeResult openShort(TradingProvider provider, PairData pairData, BigDecimal amount, BigDecimal leverage) {
        log.info("üî¥ –û—Ç–∫—Ä—ã—Ç–∏–µ SHORT –ø–æ–∑–∏—Ü–∏–∏: {} —Å —Ä–∞–∑–º–µ—Ä–æ–º {}", pairData.getShortTicker(), amount);
        TradeResult result = provider.openShortPosition(pairData.getShortTicker(), amount, leverage);
        log.info("–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è SHORT –ø–æ–∑–∏—Ü–∏–∏: {}", result);
        return result;
    }

    private void rollbackIfNecessary(TradingProvider provider, TradeResult longResult, TradeResult shortResult) {
        log.warn("–û–¥–Ω–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–π –Ω–µ –æ—Ç–∫—Ä—ã–ª–∞—Å—å. –ü—Ä–æ–∏–∑–≤–æ–¥–∏–º –æ—Ç–∫–∞—Ç...");
        if (longResult.isSuccess()) {
            log.info("–ó–∞–∫—Ä—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç—É—é LONG –ø–æ–∑–∏—Ü–∏—é: {}", longResult.getPositionId());
            provider.closePosition(longResult.getPositionId());
        }
        if (shortResult.isSuccess()) {
            log.info("–ó–∞–∫—Ä—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç—É—é SHORT –ø–æ–∑–∏—Ü–∏—é: {}", shortResult.getPositionId());
            provider.closePosition(shortResult.getPositionId());
        }
    }

    private void savePositionIds(PairData pairData, TradeResult longResult, TradeResult shortResult) {
        pairToLongPositionMap.put(pairData.getId(), longResult.getPositionId());
        pairToShortPositionMap.put(pairData.getId(), shortResult.getPositionId());
        log.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã ID –ø–æ–∑–∏—Ü–∏–π –≤ –º–∞–ø—É: LONG ID = {}, SHORT ID = {}", longResult.getPositionId(), shortResult.getPositionId());
    }

    private ArbitragePairTradeInfo buildSuccess(TradeResult longResult, TradeResult shortResult, PairData pairData) {
        log.info("‚úÖ –û—Ç–∫—Ä—ã—Ç–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –ø–∞—Ä–∞: {} LONG / {} SHORT", pairData.getLongTicker(), pairData.getShortTicker());
        return ArbitragePairTradeInfo.builder()
                .success(true)
                .longTradeResult(longResult)
                .shortTradeResult(shortResult)
                .build();
    }

    private ArbitragePairTradeInfo buildFailure() {
        return ArbitragePairTradeInfo.builder()
                .success(false)
                .build();
    }

    private boolean positionsExistInMap(String longId, String shortId, PairData pairData) {
        if (longId == null || shortId == null) {
            log.warn("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã ID –ø–æ–∑–∏—Ü–∏–π –≤ –º–∞–ø–µ –¥–ª—è –ø–∞—Ä—ã {}.", pairData.getPairName());
            return false;
        }
        log.info("ID –ø–æ–∑–∏—Ü–∏–π –∏–∑ –º–∞–ø—ã: LONG ID = {}, SHORT ID = {}", longId, shortId);
        return true;
    }

    private TradeResult closePosition(TradingProvider provider, String positionId, String type) {
        log.info("{} –ó–∞–∫—Ä—ã—Ç–∏–µ {} –ø–æ–∑–∏—Ü–∏–∏: ID = {}", type.equals("LONG") ? "üî¥" : "üü¢", type, positionId);
        TradeResult result = provider.closePosition(positionId);
        log.info("–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–∫—Ä—ã—Ç–∏—è {} –ø–æ–∑–∏—Ü–∏–∏: {}", type, result);
        return result;
    }

    private void logSuccess(PairData pairData, TradeResult longResult, TradeResult shortResult) {
        BigDecimal totalPnL = longResult.getPnl().add(shortResult.getPnl());
        BigDecimal totalFees = longResult.getFees().add(shortResult.getFees());
        log.info("‚úÖ –£–°–ü–ï–®–ù–û –∑–∞–∫—Ä—ã—Ç–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –ø–∞—Ä–∞: {} | –û–±—â–∏–π PnL: {} | –û–±—â–∏–µ –∫–æ–º–∏—Å—Å–∏–∏: {}",
                pairData.getPairName(), totalPnL, totalFees);
    }

    private void logFailure(PairData pairData, TradeResult longResult, TradeResult shortResult) {
        log.error("‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –ø–∞—Ä—ã {}: Long={}, Short={}",
                pairData.getPairName(),
                longResult.getErrorMessage(), shortResult.getErrorMessage());
    }

    private BigDecimal calculateTotalPnlPercent(Position longPosition, Position shortPosition) {
        BigDecimal pnl = BigDecimal.ZERO;
        if (longPosition != null) {
            pnl = pnl.add(longPosition.getRealizedPnLPercent());
        }
        if (shortPosition != null) {
            pnl = pnl.add(shortPosition.getRealizedPnLPercent());
        }
        return pnl;
    }

    private Positioninfo buildClosedPositionInfo(BigDecimal pnl) {
        return Positioninfo.builder()
                .positionsClosed(true)
                .totalPnL(pnl)
                .build();
    }

    private Positioninfo buildOpenPositionInfo() {
        return Positioninfo.builder()
                .positionsClosed(false)
                .totalPnL(BigDecimal.ZERO)
                .build();
    }

    private boolean isOpen(Position position) {
        return position != null && position.getStatus() == PositionStatus.OPEN;
    }

    private boolean areBothOpen(Position longPos, Position shortPos) {
        return isOpen(longPos) && isOpen(shortPos);
    }

    private void calculateUnrealizedPnL(Position longPos, Position shortPos) {
        // todo –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å OKX
        longPos.calculateUnrealizedPnL();
        shortPos.calculateUnrealizedPnL();
    }

    private Positioninfo buildOpenPositionInfo(Position longPos, Position shortPos, BigDecimal totalPnL) {
        return Positioninfo.builder()
                .positionsClosed(false)
                .longPosition(longPos)
                .shortPosition(shortPos)
                .totalPnL(totalPnL)
                .build();
    }

    private Positioninfo buildPartiallyClosedInfo(Position longPos, Position shortPos) {
        return Positioninfo.builder()
                .positionsClosed(true)
                .longPosition(longPos)
                .shortPosition(shortPos)
                .totalPnL(BigDecimal.ZERO)
                .build();
    }

    private Positioninfo buildClosedPositionInfo() {
        return Positioninfo.builder()
                .positionsClosed(true)
                .totalPnL(BigDecimal.ZERO)
                .build();
    }

    private boolean positionsAreNull(Position longPosition, Position shortPosition, PairData pairData) {
        if (longPosition == null || shortPosition == null) {
            log.error("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ changes - –ø–æ–∑–∏—Ü–∏–∏ —Ä–∞–≤–Ω—ã null –¥–ª—è –ø–∞—Ä—ã {}", pairData.getPairName());
            return true;
        }
        log.debug("–ü–æ–ª—É—á–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏: LONG={}, SHORT={}", longPosition, shortPosition);
        return false;
    }

    private boolean isClosed(Position position) {
        return position != null && position.getStatus() == PositionStatus.CLOSED;
    }

    private Positioninfo buildPositionInfo(boolean closed, Position longPos, Position shortPos) {
        return Positioninfo.builder()
                .positionsClosed(closed)
                .longPosition(longPos)
                .shortPosition(shortPos)
                .build();
    }
}