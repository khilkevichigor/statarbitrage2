package com.example.statarbitrage.trading.services;

import com.example.statarbitrage.common.model.PairData;
import com.example.statarbitrage.common.model.TradeStatus;
import com.example.statarbitrage.trading.interfaces.TradingProvider;
import com.example.statarbitrage.trading.interfaces.TradingProviderType;
import com.example.statarbitrage.trading.model.Portfolio;
import com.example.statarbitrage.trading.model.Position;
import com.example.statarbitrage.trading.model.TradeResult;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.concurrent.ConcurrentHashMap;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π —Å—Ç–∞—Ç–∞—Ä–±–∏—Ç—Ä–∞–∂–∞
 */
@Slf4j
@Service
public class TradingIntegrationService {

    private final TradingProviderFactory tradingProviderFactory;

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ SQLite
    private final Object openPositionLock = new Object();

    // –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É PairData –∏ —Ç–æ—Ä–≥–æ–≤—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
    private final ConcurrentHashMap<Long, String> pairToLongPositionMap = new ConcurrentHashMap<>();
    private final ConcurrentHashMap<Long, String> pairToShortPositionMap = new ConcurrentHashMap<>();

    public TradingIntegrationService(TradingProviderFactory tradingProviderFactory) {
        this.tradingProviderFactory = tradingProviderFactory;
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞—Ä—ã –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —Å—Ç–∞—Ç–∞—Ä–±–∏—Ç—Ä–∞–∂–∞ - –°–ò–ù–•–†–û–ù–ù–û
     */
    public boolean openArbitragePair(PairData pairData) {
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤—Å—é –æ–ø–µ—Ä–∞—Ü–∏—é –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞—Ä—ã
        synchronized (openPositionLock) {
            try {
                TradingProvider provider = tradingProviderFactory.getCurrentProvider();

                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
                BigDecimal positionSize = calculatePositionSize(provider);
                if (positionSize.compareTo(BigDecimal.ZERO) <= 0) {
                    log.warn("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π –ø–æ –ø–∞—Ä–µ {}/{}",
                            pairData.getLongTicker(), pairData.getShortTicker());
                    return false;
                }

                BigDecimal longAmount = positionSize.divide(BigDecimal.valueOf(2), 2, RoundingMode.HALF_UP);
                BigDecimal shortAmount = positionSize.divide(BigDecimal.valueOf(2), 2, RoundingMode.HALF_UP);
                BigDecimal leverage = BigDecimal.valueOf(1); // –ú–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

                log.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –ø–∞—Ä—ã: {}/{}",
                        pairData.getLongTicker(), pairData.getShortTicker());

                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û –∏ –°–ò–ù–•–†–û–ù–ù–û
                log.info("üîµ –û—Ç–∫—Ä—ã—Ç–∏–µ LONG –ø–æ–∑–∏—Ü–∏–∏: {} —Å —Ä–∞–∑–º–µ—Ä–æ–º {}", pairData.getLongTicker(), longAmount);
                TradeResult longResult = provider.openLongPosition(
                        pairData.getLongTicker(), longAmount, leverage);

                if (!longResult.isSuccess()) {
                    log.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å LONG –ø–æ–∑–∏—Ü–∏—é: {}", longResult.getErrorMessage());
                    return false;
                }

                log.info("üî¥ –û—Ç–∫—Ä—ã—Ç–∏–µ SHORT –ø–æ–∑–∏—Ü–∏–∏: {} —Å —Ä–∞–∑–º–µ—Ä–æ–º {}", pairData.getShortTicker(), shortAmount);
                TradeResult shortResult = provider.openShortPosition(
                        pairData.getShortTicker(), shortAmount, leverage);

                if (longResult.isSuccess() && shortResult.isSuccess()) {
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑–∏
                    pairToLongPositionMap.put(pairData.getId(), longResult.getPositionId());
                    pairToShortPositionMap.put(pairData.getId(), shortResult.getPositionId());

                    // –û–±–Ω–æ–≤–ª—è–µ–º PairData
                    updatePairDataFromPositions(pairData, longResult, shortResult);

                    log.info("‚úÖ –û—Ç–∫—Ä—ã—Ç–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –ø–∞—Ä–∞: {} LONG / {} SHORT",
                            pairData.getLongTicker(), pairData.getShortTicker());
                    return true;
                } else {
                    // –ï—Å–ª–∏ –æ–¥–Ω–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–π –Ω–µ –æ—Ç–∫—Ä—ã–ª–∞—Å—å, –∑–∞–∫—Ä—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç—É—é
                    if (longResult.isSuccess()) {
                        provider.closePosition(longResult.getPositionId());
                    }
                    if (shortResult.isSuccess()) {
                        provider.closePosition(shortResult.getPositionId());
                    }

                    log.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—É—é –ø–∞—Ä—É {}/{}: Long={}, Short={}",
                            pairData.getLongTicker(), pairData.getShortTicker(),
                            longResult.getErrorMessage(), shortResult.getErrorMessage());
                    return false;
                }

            } catch (Exception e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –ø–∞—Ä—ã {}/{}: {}",
                        pairData.getLongTicker(), pairData.getShortTicker(), e.getMessage());
                return false;
            }
        }
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–∞—Ä—ã –ø–æ–∑–∏—Ü–∏–π - –°–ò–ù–•–†–û–ù–ù–û
     */
    public boolean closeArbitragePair(PairData pairData) {
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤—Å—é –æ–ø–µ—Ä–∞—Ü–∏—é –∑–∞–∫—Ä—ã—Ç–∏—è –ø–∞—Ä—ã
        synchronized (openPositionLock) {
            try {
                String longPositionId = pairToLongPositionMap.get(pairData.getId());
                String shortPositionId = pairToShortPositionMap.get(pairData.getId());

                if (longPositionId == null || shortPositionId == null) {
                    log.warn("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–∞—Ä—ã {}/{}",
                            pairData.getLongTicker(), pairData.getShortTicker());
                    return false;
                }

                TradingProvider provider = tradingProviderFactory.getCurrentProvider();

                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û –∏ –°–ò–ù–•–†–û–ù–ù–û
                log.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –ø–∞—Ä—ã: {}/{}",
                        pairData.getLongTicker(), pairData.getShortTicker());

                TradeResult longCloseResult = provider.closePosition(longPositionId);
                TradeResult shortCloseResult = provider.closePosition(shortPositionId);

                boolean success = longCloseResult.isSuccess() && shortCloseResult.isSuccess();

                if (success) {
                    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    BigDecimal totalPnL = longCloseResult.getPnl().add(shortCloseResult.getPnl());
                    BigDecimal totalFees = longCloseResult.getFees().add(shortCloseResult.getFees());

                    // –û–±–Ω–æ–≤–ª—è–µ–º PairData
                    updatePairDataOnClose(pairData, totalPnL, totalFees);

                    // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏
                    pairToLongPositionMap.remove(pairData.getId());
                    pairToShortPositionMap.remove(pairData.getId());

                    log.info("‚úÖ –ó–∞–∫—Ä—ã—Ç–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –ø–∞—Ä–∞: {} / {} | PnL: {} | –ö–æ–º–∏—Å—Å–∏–∏: {}",
                            pairData.getLongTicker(), pairData.getShortTicker(), totalPnL, totalFees);
                } else {
                    log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –ø–∞—Ä—ã {}/{}: Long={}, Short={}",
                            pairData.getLongTicker(), pairData.getShortTicker(),
                            longCloseResult.getErrorMessage(), shortCloseResult.getErrorMessage());
                }

                return success;

            } catch (Exception e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –ø–∞—Ä—ã {}/{}: {}",
                        pairData.getLongTicker(), pairData.getShortTicker(), e.getMessage());
                return false;
            }
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –∏ PnL –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä - –°–ò–ù–•–†–û–ù–ù–û
     */
    public void updateAllPositions() {
        TradingProvider provider = tradingProviderFactory.getCurrentProvider();
        try {
            provider.updatePositionPrices(); // –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω –ø–æ–∑–∏—Ü–∏–π: {}", e.getMessage());
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
     */
    public Portfolio getPortfolioInfo() {
        TradingProvider provider = tradingProviderFactory.getCurrentProvider();
        return provider.getPortfolio();
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –Ω–æ–≤–æ–π –ø–∞—Ä—ã
     */
    public boolean canOpenNewPair() {
        TradingProvider provider = tradingProviderFactory.getCurrentProvider();
        BigDecimal requiredAmount = calculatePositionSize(provider);
        return provider.hasAvailableBalance(requiredAmount);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏ –ø–æ–∑–∏—Ü–∏–∏
     */
    public BigDecimal getPositionPnL(PairData pairData) {
        String longPositionId = pairToLongPositionMap.get(pairData.getId());
        String shortPositionId = pairToShortPositionMap.get(pairData.getId());

        if (longPositionId == null || shortPositionId == null) {
            return BigDecimal.ZERO;
        }

        TradingProvider provider = tradingProviderFactory.getCurrentProvider();
        Position longPosition = provider.getPosition(longPositionId);
        Position shortPosition = provider.getPosition(shortPositionId);

        if (longPosition == null || shortPosition == null) {
            return BigDecimal.ZERO;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å—á–µ—Ç—ã PnL
        longPosition.calculateUnrealizedPnL();
        shortPosition.calculateUnrealizedPnL();

        return longPosition.getUnrealizedPnL().add(shortPosition.getUnrealizedPnL());
    }

    private BigDecimal calculatePositionSize(TradingProvider provider) {
        Portfolio portfolio = provider.getPortfolio();
        if (portfolio == null) {
            return BigDecimal.ZERO;
        }

        // 10% –æ—Ç –æ–±—â–µ–≥–æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –Ω–∞ –æ–¥–Ω—É –ø–∞—Ä—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        BigDecimal maxPositionPercent = BigDecimal.valueOf(10);
        BigDecimal maxPositionSize = portfolio.getTotalBalance()
                .multiply(maxPositionPercent)
                .divide(BigDecimal.valueOf(100), 2, RoundingMode.HALF_UP);

        // –ù–µ –±–æ–ª—å—à–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        return maxPositionSize.min(portfolio.getAvailableBalance());
    }

    private void updatePairDataFromPositions(PairData pairData, TradeResult longResult, TradeResult shortResult) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ (–æ–Ω–∏ –º–æ–≥–ª–∏ –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç —Ç–µ–∫—É—â–∏—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö)
        pairData.setLongTickerEntryPrice(longResult.getExecutionPrice().doubleValue());
        pairData.setShortTickerEntryPrice(shortResult.getExecutionPrice().doubleValue());

        // –°—Ç–∞—Ç—É—Å –æ—Å—Ç–∞–µ—Ç—Å—è TRADING
        pairData.setStatus(TradeStatus.TRADING);

        // –í—Ä–µ–º—è –≤—Ö–æ–¥–∞
        pairData.setEntryTime(longResult.getExecutionTime().atZone(java.time.ZoneId.systemDefault()).toEpochSecond() * 1000);
    }

    private void updatePairDataOnClose(PairData pairData, BigDecimal totalPnL, BigDecimal totalFees) {
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é –ø—Ä–∏–±—ã–ª—å
        BigDecimal positionSize = calculatePositionSize(tradingProviderFactory.getCurrentProvider());
        if (positionSize.compareTo(BigDecimal.ZERO) > 0) {
            BigDecimal profitPercent = totalPnL.divide(positionSize, 4, RoundingMode.HALF_UP)
                    .multiply(BigDecimal.valueOf(100));
            pairData.setProfitChanges(profitPercent);
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫—Ä—ã—Ç–æ–π
        pairData.setStatus(TradeStatus.CLOSED);

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        pairData.setUpdatedTime(System.currentTimeMillis());
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
     */
    public boolean switchTradingMode(TradingProviderType providerType) {
        log.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞: {}", providerType.getDisplayName());
        return tradingProviderFactory.switchToProvider(providerType);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
     */
    public TradingProviderType getCurrentTradingMode() {
        return tradingProviderFactory.getCurrentProviderType();
    }
}