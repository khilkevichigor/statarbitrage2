package com.example.statarbitrage.trading.services;

import com.example.statarbitrage.common.model.PairData;
import com.example.statarbitrage.common.model.Settings;
import com.example.statarbitrage.core.services.SettingsService;
import com.example.statarbitrage.trading.interfaces.TradingProvider;
import com.example.statarbitrage.trading.interfaces.TradingProviderType;
import com.example.statarbitrage.trading.model.*;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.List;
import java.util.concurrent.ConcurrentHashMap;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π —Å—Ç–∞—Ç–∞—Ä–±–∏—Ç—Ä–∞–∂–∞
 */
@Slf4j
@Service
public class TradingIntegrationService {

    private final TradingProviderFactory tradingProviderFactory;

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ SQLite
    private final Object openPositionLock = new Object();

    // –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É PairData –∏ —Ç–æ—Ä–≥–æ–≤—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
    private final ConcurrentHashMap<Long, String> pairToLongPositionMap = new ConcurrentHashMap<>();
    private final ConcurrentHashMap<Long, String> pairToShortPositionMap = new ConcurrentHashMap<>();
    private final SettingsService settingsService;

    public TradingIntegrationService(TradingProviderFactory tradingProviderFactory, SettingsService settingsService) {
        this.tradingProviderFactory = tradingProviderFactory;
        this.settingsService = settingsService;
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞—Ä—ã –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —Å—Ç–∞—Ç–∞—Ä–±–∏—Ç—Ä–∞–∂–∞ - –°–ò–ù–•–†–û–ù–ù–û
     */
    public ArbitragePairTradeInfo openArbitragePair(PairData pairData, Settings settings) {
        log.info("==> openArbitragePair: –ù–ê–ß–ê–õ–û –¥–ª—è –ø–∞—Ä—ã {}/{}", pairData.getLongTicker(), pairData.getShortTicker());
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤—Å—é –æ–ø–µ—Ä–∞—Ü–∏—é –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞—Ä—ã
        synchronized (openPositionLock) {
            try {
                TradingProvider provider = tradingProviderFactory.getCurrentProvider();
                log.info("–¢–µ–∫—É—â–∏–π —Ç–æ—Ä–≥–æ–≤—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {}", provider.getClass().getSimpleName());

                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
                BigDecimal positionSize = calculatePositionSize(provider);
                log.info("–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–π: {}", positionSize);
                if (positionSize.compareTo(BigDecimal.ZERO) <= 0) {
                    log.warn("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π –ø–æ –ø–∞—Ä–µ {}/{}. –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {}",
                            pairData.getLongTicker(), pairData.getShortTicker(), positionSize);
                    return ArbitragePairTradeInfo.builder()
                            .success(false)
                            .build();
                }

                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ lot size –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
                BigDecimal[] adaptiveAmounts = calculateAdaptiveAmounts(provider, pairData, positionSize);
                BigDecimal longAmount = adaptiveAmounts[0];
                BigDecimal shortAmount = adaptiveAmounts[1];
                log.info("–ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤: LONG {} = {}, SHORT {} = {}", pairData.getLongTicker(), longAmount, pairData.getShortTicker(), shortAmount);

                // –ù–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø—Ä–∏–≤–µ–¥–µ—Ç –ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–æ—Ç –∫ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—é –≤ 3+ —Ä–∞–∑–∞
                if (!validatePairForMinimumLotRequirements(provider, pairData, longAmount, shortAmount)) {
                    log.warn("‚ö†Ô∏è –ü–†–û–ü–£–°–ö –ü–ê–†–´: {} / {} –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –∏–∑-–∑–∞ –±–æ–ª—å—à–∏—Ö –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –ª–æ—Ç–æ–≤",
                            pairData.getLongTicker(), pairData.getShortTicker());
                    return ArbitragePairTradeInfo.builder()
                            .success(false)
                            .build();
                }

                BigDecimal leverage = BigDecimal.valueOf(settings.getLeverage());
                log.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ –ø–ª–µ—á–æ: {}", leverage);

                log.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –ø–∞—Ä—ã: {}/{}",
                        pairData.getLongTicker(), pairData.getShortTicker());
                log.info("üí° –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: LONG ${}, SHORT ${}", longAmount, shortAmount);

                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û –∏ –°–ò–ù–•–†–û–ù–ù–û
                log.info("üü¢ –û—Ç–∫—Ä—ã—Ç–∏–µ LONG –ø–æ–∑–∏—Ü–∏–∏: {} —Å —Ä–∞–∑–º–µ—Ä–æ–º {}", pairData.getLongTicker(), longAmount);
                TradeResult longResult = provider.openLongPosition(pairData.getLongTicker(), longAmount, leverage);
                log.info("–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è LONG –ø–æ–∑–∏—Ü–∏–∏: {}", longResult);

                if (!longResult.isSuccess()) {
                    log.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å LONG –ø–æ–∑–∏—Ü–∏—é: {}", longResult.getErrorMessage());
                    return ArbitragePairTradeInfo.builder()
                            .success(false)
                            .build();
                }

                log.info("üî¥ –û—Ç–∫—Ä—ã—Ç–∏–µ SHORT –ø–æ–∑–∏—Ü–∏–∏: {} —Å —Ä–∞–∑–º–µ—Ä–æ–º {}", pairData.getShortTicker(), shortAmount);
                TradeResult shortResult = provider.openShortPosition(
                        pairData.getShortTicker(), shortAmount, leverage);
                log.info("–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è SHORT –ø–æ–∑–∏—Ü–∏–∏: {}", shortResult);

                if (longResult.isSuccess() && shortResult.isSuccess()) {
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑–∏
                    pairToLongPositionMap.put(pairData.getId(), longResult.getPositionId());
                    pairToShortPositionMap.put(pairData.getId(), shortResult.getPositionId());
                    log.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã ID –ø–æ–∑–∏—Ü–∏–π –≤ –º–∞–ø—É: LONG ID = {}, SHORT ID = {}", longResult.getPositionId(), shortResult.getPositionId());

                    log.info("‚úÖ –û—Ç–∫—Ä—ã—Ç–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –ø–∞—Ä–∞: {} LONG / {} SHORT",
                            pairData.getLongTicker(), pairData.getShortTicker());

                    return ArbitragePairTradeInfo.builder()
                            .success(true)
                            .longTradeResult(longResult)
                            .shortTradeResult(shortResult)
                            .build();
                } else {
                    // –ï—Å–ª–∏ –æ–¥–Ω–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–π –Ω–µ –æ—Ç–∫—Ä—ã–ª–∞—Å—å, –∑–∞–∫—Ä—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç—É—é
                    log.warn("–û–¥–Ω–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–π –Ω–µ –æ—Ç–∫—Ä—ã–ª–∞—Å—å. –ü—Ä–æ–∏–∑–≤–æ–¥–∏–º –æ—Ç–∫–∞—Ç...");
                    if (longResult.isSuccess()) {
                        log.info("–ó–∞–∫—Ä—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç—É—é LONG –ø–æ–∑–∏—Ü–∏—é: {}", longResult.getPositionId());
                        provider.closePosition(longResult.getPositionId());
                    }
                    if (shortResult.isSuccess()) {
                        log.info("–ó–∞–∫—Ä—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç—É—é SHORT –ø–æ–∑–∏—Ü–∏—é: {}", shortResult.getPositionId());
                        provider.closePosition(shortResult.getPositionId());
                    }

                    log.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—É—é –ø–∞—Ä—É {} / {}: Long={}, Short={}",
                            pairData.getLongTicker(), pairData.getShortTicker(),
                            longResult.getErrorMessage(), shortResult.getErrorMessage());
                    return ArbitragePairTradeInfo.builder()
                            .success(false)
                            .build();
                }

            } catch (Exception e) {
                log.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –ø–∞—Ä—ã {} / {}: {}",
                        pairData.getLongTicker(), pairData.getShortTicker(), e.getMessage(), e);
                return ArbitragePairTradeInfo.builder()
                        .success(false)
                        .build();
            } finally {
                log.info("<== openArbitragePair: –ö–û–ù–ï–¶ –¥–ª—è –ø–∞—Ä—ã {}/{}", pairData.getLongTicker(), pairData.getShortTicker());
            }
        }
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–∞—Ä—ã –ø–æ–∑–∏—Ü–∏–π - –°–ò–ù–•–†–û–ù–ù–û
     */
    public ArbitragePairTradeInfo closeArbitragePair(PairData pairData) {
        log.info("==> closeArbitragePair: –ù–ê–ß–ê–õ–û –¥–ª—è –ø–∞—Ä—ã {}/{}", pairData.getLongTicker(), pairData.getShortTicker());
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤—Å—é –æ–ø–µ—Ä–∞—Ü–∏—é –∑–∞–∫—Ä—ã—Ç–∏—è –ø–∞—Ä—ã
        synchronized (openPositionLock) {
            try {
                String longPositionId = pairToLongPositionMap.get(pairData.getId());
                String shortPositionId = pairToShortPositionMap.get(pairData.getId());
                log.info("ID –ø–æ–∑–∏—Ü–∏–π –∏–∑ –º–∞–ø—ã: LONG ID = {}, SHORT ID = {}", longPositionId, shortPositionId);

                if (longPositionId == null || shortPositionId == null) {
                    log.warn("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã ID –ø–æ–∑–∏—Ü–∏–π –≤ –º–∞–ø–µ –¥–ª—è –ø–∞—Ä—ã {}/{}. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å.",
                            pairData.getLongTicker(), pairData.getShortTicker());
                    return ArbitragePairTradeInfo.builder()
                            .success(false)
                            .build();
                }

                TradingProvider provider = tradingProviderFactory.getCurrentProvider();
                log.info("–¢–µ–∫—É—â–∏–π —Ç–æ—Ä–≥–æ–≤—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {}", provider.getClass().getSimpleName());

                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û –∏ –°–ò–ù–•–†–û–ù–ù–û
                log.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –ø–∞—Ä—ã: {}/{}",
                        pairData.getLongTicker(), pairData.getShortTicker());

                log.info("üî¥ –ó–∞–∫—Ä—ã—Ç–∏–µ LONG –ø–æ–∑–∏—Ü–∏–∏: ID = {}", longPositionId);
                TradeResult longCloseResult = provider.closePosition(longPositionId);
                log.info("–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–∫—Ä—ã—Ç–∏—è LONG –ø–æ–∑–∏—Ü–∏–∏: {}", longCloseResult);

                log.info("üü¢ –ó–∞–∫—Ä—ã—Ç–∏–µ SHORT –ø–æ–∑–∏—Ü–∏–∏: ID = {}", shortPositionId);
                TradeResult shortCloseResult = provider.closePosition(shortPositionId);
                log.info("–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–∫—Ä—ã—Ç–∏—è SHORT –ø–æ–∑–∏—Ü–∏–∏: {}", shortCloseResult);

                boolean success = longCloseResult.isSuccess() && shortCloseResult.isSuccess();

                if (success) {
                    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    BigDecimal totalPnL = longCloseResult.getPnl().add(shortCloseResult.getPnl());
                    BigDecimal totalFees = longCloseResult.getFees().add(shortCloseResult.getFees());

                    log.info("‚úÖ –£–°–ü–ï–®–ù–û –∑–∞–∫—Ä—ã—Ç–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –ø–∞—Ä–∞: {} / {} | –û–±—â–∏–π PnL: {} | –û–±—â–∏–µ –∫–æ–º–∏—Å—Å–∏–∏: {}",
                            pairData.getLongTicker(), pairData.getShortTicker(), totalPnL, totalFees);

                    return ArbitragePairTradeInfo.builder()
                            .success(true)
                            .longTradeResult(longCloseResult)
                            .shortTradeResult(shortCloseResult)
                            .build();
                } else {
                    log.error("‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –ø–∞—Ä—ã {} / {}: Long={}, Short={}",
                            pairData.getLongTicker(), pairData.getShortTicker(),
                            longCloseResult.getErrorMessage(), shortCloseResult.getErrorMessage());

                    return ArbitragePairTradeInfo.builder()
                            .success(false)
                            .longTradeResult(longCloseResult)
                            .shortTradeResult(shortCloseResult)
                            .build();
                }

            } catch (Exception e) {
                log.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –ø–∞—Ä—ã {} / {}: {}",
                        pairData.getLongTicker(), pairData.getShortTicker(), e.getMessage(), e);
                return ArbitragePairTradeInfo.builder()
                        .success(false)
                        .build();
            } finally {
                log.info("<== closeArbitragePair: –ö–û–ù–ï–¶ –¥–ª—è –ø–∞—Ä—ã {}/{}", pairData.getLongTicker(), pairData.getShortTicker());
            }
        }
    }

    public void removePairFromLocalStorage(PairData pairData) {
        log.info("–£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ –¥–ª—è –ø–∞—Ä—ã {} / {}", pairData.getLongTicker(), pairData.getShortTicker());
        pairToLongPositionMap.remove(pairData.getId());
        pairToShortPositionMap.remove(pairData.getId());
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –∏ PnL –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä - –°–ò–ù–•–†–û–ù–ù–û
     */
    public void updateAllPositions() {
        TradingProvider provider = tradingProviderFactory.getCurrentProvider();
        try {
            provider.updatePositionPrices(); // –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω –ø–æ–∑–∏—Ü–∏–π: {}", e.getMessage());
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
     */
    public Portfolio getPortfolioInfo() {
        TradingProvider provider = tradingProviderFactory.getCurrentProvider();
        return provider.getPortfolio();
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –Ω–æ–≤–æ–π –ø–∞—Ä—ã
     */
    public boolean canOpenNewPair() {
        TradingProvider provider = tradingProviderFactory.getCurrentProvider();
        BigDecimal requiredAmount = calculatePositionSize(provider);
        return provider.hasAvailableBalance(requiredAmount);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –ø–∞—Ä—ã
     */
    public boolean hasOpenPositions(PairData pairData) {
        String longPositionId = pairToLongPositionMap.get(pairData.getId());
        String shortPositionId = pairToShortPositionMap.get(pairData.getId());

        if (longPositionId == null || shortPositionId == null) {
            return false;
        }

        TradingProvider provider = tradingProviderFactory.getCurrentProvider();
        Position longPosition = provider.getPosition(longPositionId);
        Position shortPosition = provider.getPosition(shortPositionId);

        // –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –ø–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –ø–∞—Ä–∞ –Ω–µ –∏–º–µ–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        return longPosition != null && shortPosition != null;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–æ–∑–∏—Ü–∏–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã –Ω–∞ –±–∏—Ä–∂–µ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º PnL
     */
    public Positioninfo verifyPositionsClosed(PairData pairData) {
        String longPositionId = pairToLongPositionMap.get(pairData.getId());
        String shortPositionId = pairToShortPositionMap.get(pairData.getId());

        if (longPositionId == null || shortPositionId == null) {
            log.debug("üìã –ü–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–∞—Ä—ã {}/{} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–µ—Å—Ç—Ä–µ",
                    pairData.getLongTicker(), pairData.getShortTicker());
            return Positioninfo.builder()
                    .positionsClosed(true)
                    .totalPnL(BigDecimal.ZERO)
                    .build();
        }

        TradingProvider provider = tradingProviderFactory.getCurrentProvider();

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –±–∏—Ä–∂–∏
        provider.updatePositionPrices();

        Position longPosition = provider.getPosition(longPositionId);
        Position shortPosition = provider.getPosition(shortPositionId);

        boolean longClosed = (longPosition == null || longPosition.getStatus() == PositionStatus.CLOSED);
        boolean shortClosed = (shortPosition == null || shortPosition.getStatus() == PositionStatus.CLOSED);

        if (longClosed && shortClosed) {
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π PnL –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã
            BigDecimal totalPnL = BigDecimal.ZERO;
            if (longPosition != null) {
                longPosition.calculateUnrealizedPnL();
                totalPnL = totalPnL.add(longPosition.getUnrealizedPnLUSDT());
            }
            if (shortPosition != null) {
                shortPosition.calculateUnrealizedPnL();
                totalPnL = totalPnL.add(shortPosition.getUnrealizedPnLUSDT());
            }

            // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞ –µ—Å–ª–∏ –æ–±–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã
            removePairFromLocalStorage(pairData);
            log.info("üóëÔ∏è –£–¥–∞–ª–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ –¥–ª—è –ø–∞—Ä—ã {}/{}, —Ñ–∏–Ω–∞–ª—å–Ω—ã–π PnL: {}",
                    pairData.getLongTicker(), pairData.getShortTicker(), totalPnL);

            return Positioninfo.builder()
                    .positionsClosed(true)
                    .totalPnL(totalPnL)
                    .build();
        }

        log.warn("‚ö†Ô∏è –ù–µ –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã –Ω–∞ –±–∏—Ä–∂–µ: LONG –∑–∞–∫—Ä—ã—Ç–∞={}, SHORT –∑–∞–∫—Ä—ã—Ç–∞={}",
                longClosed, shortClosed);
        return Positioninfo.builder()
                .positionsClosed(false)
                .totalPnL(BigDecimal.ZERO)
                .build();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –æ—Ç–∫—Ä—ã—Ç—ã–º –ø–æ–∑–∏—Ü–∏—è–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è changes
     */
    public Positioninfo getOpenPositionsInfo(PairData pairData) {
        String longPositionId = pairToLongPositionMap.get(pairData.getId());
        String shortPositionId = pairToShortPositionMap.get(pairData.getId());

        if (longPositionId == null || shortPositionId == null) {
            log.debug("üìã –ü–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–∞—Ä—ã {}/{} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–µ—Å—Ç—Ä–µ",
                    pairData.getLongTicker(), pairData.getShortTicker());
            return Positioninfo.builder()
                    .positionsClosed(true)
                    .totalPnL(BigDecimal.ZERO)
                    .build();
        }

        TradingProvider provider = tradingProviderFactory.getCurrentProvider();

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –±–∏—Ä–∂–∏
        provider.updatePositionPrices();

        Position longPosition = provider.getPosition(longPositionId);
        Position shortPosition = provider.getPosition(shortPositionId);

        boolean longOpen = (longPosition != null && longPosition.getStatus() == PositionStatus.OPEN);
        boolean shortOpen = (shortPosition != null && shortPosition.getStatus() == PositionStatus.OPEN);

        if (longOpen && shortOpen) {
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π PnL –¥–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            BigDecimal totalPnL = BigDecimal.ZERO;
            longPosition.calculateUnrealizedPnL();
            shortPosition.calculateUnrealizedPnL();
            totalPnL = longPosition.getUnrealizedPnLUSDT().add(shortPosition.getUnrealizedPnLUSDT());

            log.debug("üìä –ê–∫—Ç—É–∞–ª—å–Ω—ã–π PnL –¥–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π {}/{}: {}",
                    pairData.getLongTicker(), pairData.getShortTicker(), totalPnL);

            return Positioninfo.builder()
                    .positionsClosed(false)
                    .longPosition(longPosition)
                    .shortPosition(shortPosition)
                    .totalPnL(totalPnL)
                    .build();
        }

        // –ï—Å–ª–∏ –æ–¥–Ω–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–π –∑–∞–∫—Ä—ã—Ç–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞
        log.warn("‚ö†Ô∏è –ù–µ –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –æ—Ç–∫—Ä—ã—Ç—ã –Ω–∞ –±–∏—Ä–∂–µ: LONG –æ—Ç–∫—Ä—ã—Ç–∞={}, SHORT –æ—Ç–∫—Ä—ã—Ç–∞={}",
                longOpen, shortOpen);
        return Positioninfo.builder()
                .positionsClosed(true)
                .longPosition(longPosition)
                .shortPosition(shortPosition)
                .totalPnL(BigDecimal.ZERO)
                .build();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º –¥–ª—è –ø–∞—Ä—ã
     */
    public Positioninfo getPositionInfo(PairData pairData) {
        log.info("‚ÑπÔ∏è –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏—è—Ö –¥–ª—è –ø–∞—Ä—ã {} / {}", pairData.getLongTicker(), pairData.getShortTicker());
        String longPositionId = pairToLongPositionMap.get(pairData.getId());
        String shortPositionId = pairToShortPositionMap.get(pairData.getId());

        if (longPositionId == null || shortPositionId == null) {
            log.debug("üìã –ü–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–∞—Ä—ã {} / {} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–µ—Å—Ç—Ä–µ",
                    pairData.getLongTicker(), pairData.getShortTicker());
            return Positioninfo.builder().build();
        }
        log.debug("–ù–∞–π–¥–µ–Ω—ã ID –ø–æ–∑–∏—Ü–∏–π: LONG={}, SHORT={}", longPositionId, shortPositionId);

        TradingProvider provider = tradingProviderFactory.getCurrentProvider();
        log.debug("–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {}", provider.getClass().getSimpleName());

        Position longPosition = provider.getPosition(longPositionId);
        Position shortPosition = provider.getPosition(shortPositionId);
        log.debug("–ü–æ–ª—É—á–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏: LONG={}, SHORT={}", longPosition, shortPosition);

        if (longPosition == null || shortPosition == null) {
            log.error("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ changes - –ø–æ–∑–∏—Ü–∏–∏ —Ä–∞–≤–Ω—ã null –¥–ª—è –ø–∞—Ä—ã {} / {}", pairData.getLongTicker(), pairData.getShortTicker());
            return Positioninfo.builder().build();
        }

        boolean longClosed = (longPosition.getStatus() == PositionStatus.CLOSED);
        boolean shortClosed = (shortPosition.getStatus() == PositionStatus.CLOSED);
        log.debug("–°—Ç–∞—Ç—É—Å –ø–æ–∑–∏—Ü–∏–π: LONG –∑–∞–∫—Ä—ã—Ç–∞={}, SHORT –∑–∞–∫—Ä—ã—Ç–∞={}", longClosed, shortClosed);

        if (longClosed && shortClosed) {
            log.info("‚úÖ –û–±–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–∞—Ä—ã {} / {} —É–∂–µ –∑–∞–∫—Ä—ã—Ç—ã.", pairData.getLongTicker(), pairData.getShortTicker());
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π PnL –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã
            BigDecimal totalPnL = BigDecimal.ZERO;
            if (longPosition != null) {
                longPosition.calculateUnrealizedPnL();
                totalPnL = totalPnL.add(longPosition.getUnrealizedPnLUSDT());
                log.debug("–§–∏–Ω–∞–ª—å–Ω—ã–π PnL –¥–ª—è LONG –ø–æ–∑–∏—Ü–∏–∏ {}: {}", longPositionId, longPosition.getUnrealizedPnLUSDT());
            }
            if (shortPosition != null) {
                shortPosition.calculateUnrealizedPnL();
                totalPnL = totalPnL.add(shortPosition.getUnrealizedPnLUSDT());
                log.debug("–§–∏–Ω–∞–ª—å–Ω—ã–π PnL –¥–ª—è SHORT –ø–æ–∑–∏—Ü–∏–∏ {}: {}", shortPositionId, shortPosition.getUnrealizedPnLUSDT());
            }

            log.info("üóëÔ∏è –ü–æ–∑–∏—Ü–∏–∏ —É–∂–µ –∑–∞–∫—Ä—ã—Ç—ã –¥–ª—è –ø–∞—Ä—ã {} / {}, —Ñ–∏–Ω–∞–ª—å–Ω—ã–π PnL: {}",
                    pairData.getLongTicker(), pairData.getShortTicker(), totalPnL);

            return Positioninfo.builder()
                    .positionsClosed(true)
                    .longPosition(longPosition)
                    .shortPosition(shortPosition)
                    .totalPnL(totalPnL)
                    .build();
        }

        log.debug("–ü–æ–∑–∏—Ü–∏–∏ –µ—â–µ –æ—Ç–∫—Ä—ã—Ç—ã, –æ–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã...");
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –±–∏—Ä–∂–∏
        provider.updatePositionPrices(List.of(pairData.getLongTicker(), pairData.getShortTicker()));
        log.debug("–¶–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã.");

        return Positioninfo.builder()
                .positionsClosed(false)
                .longPosition(longPosition)
                .shortPosition(shortPosition)
                .build();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏ –ø–æ–∑–∏—Ü–∏–∏
     */
    public BigDecimal getPositionPnL(PairData pairData) {
        String longPositionId = pairToLongPositionMap.get(pairData.getId());
        String shortPositionId = pairToShortPositionMap.get(pairData.getId());

        if (longPositionId == null || shortPositionId == null) {
            return BigDecimal.ZERO;
        }

        TradingProvider provider = tradingProviderFactory.getCurrentProvider();
        Position longPosition = provider.getPosition(longPositionId);
        Position shortPosition = provider.getPosition(shortPositionId);

        if (longPosition == null || shortPosition == null) {
            return BigDecimal.ZERO;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å—á–µ—Ç—ã PnL
        longPosition.calculateUnrealizedPnL();
        shortPosition.calculateUnrealizedPnL();

        return longPosition.getUnrealizedPnLUSDT().add(shortPosition.getUnrealizedPnLUSDT());
    }

    private BigDecimal calculatePositionSize(TradingProvider provider) {
        Portfolio portfolio = provider.getPortfolio();
        if (portfolio == null) {
            return BigDecimal.ZERO;
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        Settings settings = settingsService.getSettings();
        BigDecimal totalAllocation = BigDecimal.valueOf(settings.getMaxShortMarginSize()).add(BigDecimal.valueOf(settings.getMaxLongMarginSize()));

        log.info("üí∞ –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π: –æ–±—â–∞—è –∞–ª–ª–æ–∫–∞—Ü–∏—è {}$ (–±–µ–∑ —É—á–µ—Ç–∞ –ø–ª–µ—á–∞)",
                totalAllocation);

        // –ù–µ –±–æ–ª—å—à–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        BigDecimal resultSize = totalAllocation.min(portfolio.getAvailableBalance());

        log.info("üí∞ –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–π: {}$ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω –±–∞–ª–∞–Ω—Å–æ–º: {}$)", resultSize, portfolio.getAvailableBalance());
        return resultSize;
    }

    /**
     * –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—É–º–º –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ lot size –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
     */
    private BigDecimal[] calculateAdaptiveAmounts(TradingProvider provider, PairData pairData, BigDecimal totalAmount) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ lot size
            BigDecimal longPrice = provider.getCurrentPrice(pairData.getLongTicker());
            BigDecimal shortPrice = provider.getCurrentPrice(pairData.getShortTicker());

            if (longPrice == null || shortPrice == null ||
                    longPrice.compareTo(BigDecimal.ZERO) <= 0 || shortPrice.compareTo(BigDecimal.ZERO) <= 0) {
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º 50/50");
                BigDecimal half = totalAmount.divide(BigDecimal.valueOf(2), 2, RoundingMode.HALF_UP);
                return new BigDecimal[]{half, half};
            }

            // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            BigDecimal bestLongAmount = null;
            BigDecimal bestShortAmount = null;
            BigDecimal minDifference = BigDecimal.valueOf(Double.MAX_VALUE);

            // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ç 40% –¥–æ 60% –¥–ª—è long –ø–æ–∑–∏—Ü–∏–∏
            for (int longPercent = 40; longPercent <= 60; longPercent++) {
                BigDecimal longAmount = totalAmount.multiply(BigDecimal.valueOf(longPercent))
                        .divide(BigDecimal.valueOf(100), 2, RoundingMode.HALF_UP);
                BigDecimal shortAmount = totalAmount.subtract(longAmount);

                // –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É lot size
                BigDecimal longSizeBeforeAdjust = longAmount.divide(longPrice, 8, RoundingMode.HALF_UP);
                BigDecimal shortSizeBeforeAdjust = shortAmount.divide(shortPrice, 8, RoundingMode.HALF_UP);

                // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É (–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ —Ü–µ–ª—ã—Ö)
                BigDecimal adjustedLongSize = longSizeBeforeAdjust.setScale(0, RoundingMode.DOWN);
                BigDecimal adjustedShortSize = shortSizeBeforeAdjust.setScale(0, RoundingMode.DOWN);

                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Å—É–º–º—ã –ø–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
                BigDecimal adjustedLongAmount = adjustedLongSize.multiply(longPrice);
                BigDecimal adjustedShortAmount = adjustedShortSize.multiply(shortPrice);

                // –°—á–∏—Ç–∞–µ–º —Ä–∞–∑–Ω–æ—Å—Ç—å
                BigDecimal difference = adjustedLongAmount.subtract(adjustedShortAmount).abs();

                if (difference.compareTo(minDifference) < 0) {
                    minDifference = difference;
                    bestLongAmount = longAmount;
                    bestShortAmount = shortAmount;
                }
            }

            if (bestLongAmount != null && bestShortAmount != null) {
                log.info("üéØ –ù–∞–π–¥–µ–Ω–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: LONG ${}, SHORT ${} (–æ–∂–∏–¥–∞–µ–º–∞—è —Ä–∞–∑–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏: ${})",
                        bestLongAmount, bestShortAmount, minDifference);
                return new BigDecimal[]{bestLongAmount, bestShortAmount};
            }

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–º —Ä–∞—Å—á–µ—Ç–µ: {}, –∏—Å–ø–æ–ª—å–∑—É–µ–º 50/50", e.getMessage());
        }

        // Fallback –∫ —Ä–∞–≤–Ω–æ–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é
        BigDecimal half = totalAmount.divide(BigDecimal.valueOf(2), 2, RoundingMode.HALF_UP);
        return new BigDecimal[]{half, half};
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
     */
    public boolean switchTradingMode(TradingProviderType providerType) {
        log.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞: {}", providerType.getDisplayName());
        return tradingProviderFactory.switchToProvider(providerType);
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
     */
    public TradingProviderSwitchResult switchTradingModeWithDetails(TradingProviderType providerType) {
        log.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞: {}", providerType.getDisplayName());
        return tradingProviderFactory.switchToProviderWithDetails(providerType);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
     */
    public TradingProviderType getCurrentTradingMode() {
        return tradingProviderFactory.getCurrentProviderType();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π –ø–∞—Ä—ã
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏—Ç–∞
     */
    public BigDecimal getPositionSize(PairData pairData) {
        try {
            TradingProvider provider = tradingProviderFactory.getCurrentProvider();

            // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–π –ø–∞—Ä—ã –∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∫–∞—Ä—Ç
            String longPositionId = pairToLongPositionMap.get(pairData.getId());
            String shortPositionId = pairToShortPositionMap.get(pairData.getId());

            if (longPositionId == null || shortPositionId == null) {
                return null; // –ü–æ–∑–∏—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            }

            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
            Position longPosition = provider.getPosition(longPositionId);
            Position shortPosition = provider.getPosition(shortPositionId);

            if (longPosition != null && shortPosition != null &&
                    longPosition.getAllocatedAmount() != null && shortPosition.getAllocatedAmount() != null) {

                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É–º–º—É –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å—É–º–º –¥–ª—è –æ–±–µ–∏—Ö –ø–æ–∑–∏—Ü–∏–π
                BigDecimal totalAllocated = longPosition.getAllocatedAmount().add(shortPosition.getAllocatedAmount());

                log.debug("üìè –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {}/{}: {} USDT (LONG: {}, SHORT: {})",
                        pairData.getLongTicker(), pairData.getShortTicker(), totalAllocated,
                        longPosition.getAllocatedAmount(), shortPosition.getAllocatedAmount());

                return totalAllocated;
            }

        } catch (Exception e) {
            log.debug("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {}/{}: {}",
                    pairData.getLongTicker(), pairData.getShortTicker(), e.getMessage());
        }

        return null; // Fallback –≤ PairDataService –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—ã –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ª–æ—Ç–∞
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç false –µ—Å–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–æ—Ç –¥–ª—è –ª—é–±–æ–π –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É –≤ 3+ —Ä–∞–∑–∞
     */
    private boolean validatePairForMinimumLotRequirements(TradingProvider provider, PairData pairData, BigDecimal longAmount, BigDecimal shortAmount) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
            BigDecimal longPrice = provider.getCurrentPrice(pairData.getLongTicker());
            BigDecimal shortPrice = provider.getCurrentPrice(pairData.getShortTicker());

            if (longPrice == null || shortPrice == null ||
                    longPrice.compareTo(BigDecimal.ZERO) <= 0 || shortPrice.compareTo(BigDecimal.ZERO) <= 0) {
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –ª–æ—Ç–æ–≤ {}/{}",
                        pairData.getLongTicker(), pairData.getShortTicker());
                return true; // –ü–æ–∑–≤–æ–ª—è–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º LONG –ø–æ–∑–∏—Ü–∏—é
            if (!validatePositionForMinimumLot(pairData.getLongTicker(), longAmount, longPrice)) {
                return false;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º SHORT –ø–æ–∑–∏—Ü–∏—é
            if (!validatePositionForMinimumLot(pairData.getShortTicker(), shortAmount, shortPrice)) {
                return false;
            }

            log.info("‚úÖ –ü–∞—Ä–∞ {}/{} –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –ª–æ—Ç–æ–≤",
                    pairData.getLongTicker(), pairData.getShortTicker());
            return true;

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –ª–æ—Ç–æ–≤ –¥–ª—è {}/{}: {}",
                    pairData.getLongTicker(), pairData.getShortTicker(), e.getMessage());
            return true; // –ü–æ–∑–≤–æ–ª—è–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ª–æ—Ç–∞
     */
    private boolean validatePositionForMinimumLot(String symbol, BigDecimal desiredAmount, BigDecimal currentPrice) {
        try {
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∂–µ–ª–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            BigDecimal desiredSize = desiredAmount.divide(currentPrice, 8, RoundingMode.HALF_UP);

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ª–æ—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
            BigDecimal adjustedSize = desiredSize.setScale(0, RoundingMode.DOWN);
            if (adjustedSize.compareTo(BigDecimal.ONE) < 0) {
                adjustedSize = BigDecimal.ONE; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–æ—Ç = 1 –µ–¥–∏–Ω–∏—Ü–∞
            }

            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
            BigDecimal adjustedAmount = adjustedSize.multiply(currentPrice);
            BigDecimal excessRatio = adjustedAmount.divide(desiredAmount, 4, RoundingMode.HALF_UP);

            // –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –±–æ–ª—å—à–µ 3x - –±–ª–æ–∫–∏—Ä—É–µ–º –ø–∞—Ä—É
            if (excessRatio.compareTo(BigDecimal.valueOf(3.0)) > 0) {
                log.warn("‚ùå –ë–õ–û–ö–ò–†–û–í–ö–ê: {} –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–æ—Ç –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –ø–æ–∑–∏—Ü–∏–∏ ${{}} –≤–º–µ—Å—Ç–æ –∂–µ–ª–∞–µ–º—ã—Ö ${{}} (–ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –≤ {} —Ä–∞–∑)",
                        symbol, adjustedAmount, desiredAmount, excessRatio);
                return false;
            }

            log.debug("‚úÖ {} –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É: –∂–µ–ª–∞–µ–º–∞—è —Å—É–º–º–∞=${{}}, –∏—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞=${{}}, —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ={}",
                    symbol, desiredAmount, adjustedAmount, excessRatio);
            return true;

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ª–æ—Ç–∞ –¥–ª—è {}: {}", symbol, e.getMessage());
            return true; // –ü–æ–∑–≤–æ–ª—è–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
        }
    }
}