package com.example.statarbitrage.trading.services;

import com.example.statarbitrage.common.model.Settings;
import com.example.statarbitrage.trading.interfaces.TradingProvider;
import com.example.statarbitrage.trading.model.Portfolio;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;

@Slf4j
@Service
@RequiredArgsConstructor
public class PositionSizeService {

    public BigDecimal calculatePositionSize(TradingProvider provider, Settings settings) {
        Portfolio portfolio = provider.getPortfolio();
        if (portfolio == null) {
            return BigDecimal.ZERO;
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        BigDecimal totalAllocation = BigDecimal.valueOf(settings.getMaxShortMarginSize()).add(BigDecimal.valueOf(settings.getMaxLongMarginSize()));

        log.info("üí∞ –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π: –æ–±—â–∞—è –∞–ª–ª–æ–∫–∞—Ü–∏—è {}$ (–±–µ–∑ —É—á–µ—Ç–∞ –ø–ª–µ—á–∞)", totalAllocation);

        // –ù–µ –±–æ–ª—å—à–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        BigDecimal resultSize = totalAllocation.min(portfolio.getAvailableBalance());

        log.info("üí∞ –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–π: {}$ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω –±–∞–ª–∞–Ω—Å–æ–º: {}$)", resultSize, portfolio.getAvailableBalance());
        return resultSize;
    }

}
