package com.example.statarbitrage.trading.services;

import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import lombok.extern.slf4j.Slf4j;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import org.springframework.stereotype.Service;

import java.util.concurrent.TimeUnit;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ IP-–∞–¥—Ä–µ—Å–∞
 * –ó–∞—â–∏—â–∞–µ—Ç –æ—Ç —Å–ª—É—á–∞–π–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ API –∏–∑ –°–®–ê –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–º VPN
 */
@Slf4j
@Service
public class GeolocationService {

    // HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ (–±—ã—Å—Ç—Ä—ã–π)
    private static final OkHttpClient geoCheckClient = new OkHttpClient.Builder()
            .connectTimeout(5, TimeUnit.SECONDS)
            .readTimeout(10, TimeUnit.SECONDS)
            .writeTimeout(5, TimeUnit.SECONDS)
            .build();

    // –ö—ç—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ (—á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–π —Ä–∞–∑)
    private volatile String lastKnownCountry = null;
    private volatile long lastGeoCheckTime = 0;
    private static final long GEO_CHECK_CACHE_DURATION = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     * @return true –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ, false –µ—Å–ª–∏ IP –∏–∑ –°–®–ê
     */
    public boolean isGeolocationAllowed() {
        try {
            long currentTime = System.currentTimeMillis();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à (5 –º–∏–Ω—É—Ç)
            if (lastKnownCountry != null && (currentTime - lastGeoCheckTime) < GEO_CHECK_CACHE_DURATION) {
                boolean isUSA = "US".equals(lastKnownCountry);
                if (isUSA) {
                    log.error("üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ –°–®–ê (–∫—ç—à). IP –∏–∑ —Å—Ç—Ä–∞–Ω—ã: {}", lastKnownCountry);
                    return false;
                }
                log.debug("‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ (–∫—ç—à): {} - —Ä–∞–∑—Ä–µ—à–µ–Ω–æ", lastKnownCountry);
                return true;
            }
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            log.info("üåç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏...");
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏
            String country = checkCountryViaIpApi();
            if (country == null) {
                country = checkCountryViaIpify();
            }
            
            if (country == null) {
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω—É, —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—ã–∑–æ–≤ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é)");
                return true;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            lastKnownCountry = country;
            lastGeoCheckTime = currentTime;
            
            boolean isUSA = "US".equals(country);
            if (isUSA) {
                log.error("üö´ –ë–õ–û–ö–ò–†–û–í–ö–ê: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ –°–®–ê! IP –∏–∑ —Å—Ç—Ä–∞–Ω—ã: {}", country);
                log.error("üö´ –í–ù–ò–ú–ê–ù–ò–ï: VPN –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ!");
                return false;
            } else {
                log.info("‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞: {} - —Ä–∞–∑—Ä–µ—à–µ–Ω–æ", country);
                return true;
            }
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: {}", e.getMessage());
            log.warn("‚ö†Ô∏è –†–∞–∑—Ä–µ—à–∞–µ–º –≤—ã–∑–æ–≤ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏");
            return true; // –†–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω—ã (–º–æ–∂–µ—Ç –±—ã—Ç—å null)
     */
    public String getCurrentCountry() {
        return lastKnownCountry;
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –∫—ç—à)
     */
    public String forceCheckGeolocation() {
        try {
            log.info("üß™ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏...");
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à
            lastKnownCountry = null;
            lastGeoCheckTime = 0;
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            String country = checkCountryViaIpApi();
            if (country == null) {
                country = checkCountryViaIpify();
            }
            
            if (country != null) {
                lastKnownCountry = country;
                lastGeoCheckTime = System.currentTimeMillis();
                
                boolean isUSA = "US".equals(country);
                String result = String.format(
                    "–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:\n" +
                    "- –°—Ç—Ä–∞–Ω–∞: %s\n" +
                    "- –†–∞–∑—Ä–µ—à–µ–Ω–æ: %s\n" +
                    "- –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: %s",
                    country,
                    isUSA ? "üö´ –ù–µ—Ç" : "‚úÖ –î–∞",
                    new java.util.Date().toString()
                );
                
                log.info("üß™ {}", result);
                return result;
            } else {
                String result = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω—É –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ";
                log.warn("üß™ {}", result);
                return result;
            }
            
        } catch (Exception e) {
            String errorResult = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: " + e.getMessage();
            log.error("üß™ {}", errorResult);
            return errorResult;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    public void checkGeolocationOnStartup() {
        log.info("üåç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ...");
        
        try {
            String country = checkCountryViaIpApi();
            if (country == null) {
                country = checkCountryViaIpify();
            }
            
            if (country == null) {
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ");
                log.warn("‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É");
                return;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            lastKnownCountry = country;
            lastGeoCheckTime = System.currentTimeMillis();
            
            boolean isUSA = "US".equals(country);
            if (isUSA) {
                log.error("üö´ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ –°–®–ê!");
                log.error("üö´ –°—Ç—Ä–∞–Ω–∞: {}", country);
                log.error("üö´ –í–°–ï –í–´–ó–û–í–´ OKX API –ë–£–î–£–¢ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–´!");
                log.error("üö´ –í–ö–õ–Æ–ß–ò–¢–ï VPN –ü–ï–†–ï–î –¢–û–†–ì–û–í–õ–ï–ô –ù–ê OKX!");
                log.error("üö´ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
            } else {
                log.info("‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {} - –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è OKX", country);
            }
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: {}", e.getMessage());
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞–Ω—ã —á–µ—Ä–µ–∑ ip-api.com
     */
    private String checkCountryViaIpApi() {
        try {
            Request request = new Request.Builder()
                    .url("http://ip-api.com/json/?fields=countryCode")
                    .get()
                    .build();
            
            try (Response response = geoCheckClient.newCall(request).execute()) {
                if (!response.isSuccessful()) {
                    log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ ip-api: {}", response.code());
                    return null;
                }
                
                String responseBody = response.body().string();
                log.debug("üîç –û—Ç–≤–µ—Ç ip-api: {}", responseBody);
                
                JsonObject jsonResponse = JsonParser.parseString(responseBody).getAsJsonObject();
                if (jsonResponse.has("countryCode")) {
                    return jsonResponse.get("countryCode").getAsString();
                }
                
                return null;
            }
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ ip-api: {}", e.getMessage());
            return null;
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞–Ω—ã —á–µ—Ä–µ–∑ ipify (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å)
     */
    private String checkCountryViaIpify() {
        try {
            Request request = new Request.Builder()
                    .url("https://api.ipify.org?format=json")
                    .get()
                    .build();
            
            try (Response response = geoCheckClient.newCall(request).execute()) {
                if (!response.isSuccessful()) {
                    log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ IP —á–µ—Ä–µ–∑ ipify: {}", response.code());
                    return null;
                }
                
                String responseBody = response.body().string();
                log.debug("üîç –û—Ç–≤–µ—Ç ipify: {}", responseBody);
                
                JsonObject jsonResponse = JsonParser.parseString(responseBody).getAsJsonObject();
                if (jsonResponse.has("ip")) {
                    String ip = jsonResponse.get("ip").getAsString();
                    log.debug("üîç –ü–æ–ª—É—á–µ–Ω IP: {}", ip);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º IP —á–µ—Ä–µ–∑ ipgeolocation.io
                    return checkCountryByIp(ip);
                }
                
                return null;
            }
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ IP —á–µ—Ä–µ–∑ ipify: {}", e.getMessage());
            return null;
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞–Ω—ã –ø–æ IP —á–µ—Ä–µ–∑ ipgeolocation.io
     */
    private String checkCountryByIp(String ip) {
        try {
            Request request = new Request.Builder()
                    .url("https://ipgeolocation.io/ip-location/" + ip)
                    .get()
                    .build();
            
            try (Response response = geoCheckClient.newCall(request).execute()) {
                if (!response.isSuccessful()) {
                    log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ IP: {}", response.code());
                    return null;
                }
                
                String responseBody = response.body().string();
                log.debug("üîç –û—Ç–≤–µ—Ç ipgeolocation: {}", responseBody);
                
                // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ HTML –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã
                if (responseBody.contains("United States")) {
                    return "US";
                }
                
                // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
                if (responseBody.contains("country_code2")) {
                    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –∏–∑ HTML
                    String[] parts = responseBody.split("country_code2");
                    if (parts.length > 1) {
                        String afterCode = parts[1];
                        if (afterCode.contains("US")) {
                            return "US";
                        }
                    }
                }
                
                return "OTHER"; // –ù–µ –°–®–ê
            }
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ IP: {}", e.getMessage());
            return null;
        }
    }
}