package com.example.statarbitrage.trading.providers;

import com.example.statarbitrage.client_okx.OkxClient;
import com.example.statarbitrage.trading.interfaces.PortfolioManager;
import com.example.statarbitrage.trading.interfaces.TradingProvider;
import com.example.statarbitrage.trading.interfaces.TradingProviderType;
import com.example.statarbitrage.trading.model.*;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ConcurrentHashMap;

/**
 * –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏
 * –°–∏–º—É–ª–∏—Ä—É–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
 */
@Slf4j
@Service
public class VirtualTradingProvider implements TradingProvider {

    private final PortfolioManager portfolioManager;
    private final OkxClient okxClient; // –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω

    // –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
    private final ConcurrentHashMap<String, Position> positions = new ConcurrentHashMap<>();
    private final List<TradeResult> tradeHistory = new ArrayList<>();

    public VirtualTradingProvider(PortfolioManager portfolioManager, OkxClient okxClient) {
        this.portfolioManager = portfolioManager;
        this.okxClient = okxClient;
    }

    @Override
    public Portfolio getPortfolio() {
        return portfolioManager.getCurrentPortfolio();
    }

    @Override
    public boolean hasAvailableBalance(BigDecimal amount) {
        return portfolioManager.hasAvailableBalance(amount);
    }

    @Override
    public CompletableFuture<TradeResult> openLongPosition(String symbol, BigDecimal amount, BigDecimal leverage) {
        return CompletableFuture.supplyAsync(() -> {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
                if (!portfolioManager.hasAvailableBalance(amount)) {
                    return TradeResult.failure(TradeOperationType.OPEN_LONG, symbol,
                            "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: —Ç—Ä–µ–±—É–µ—Ç—Å—è " + amount + ", –¥–æ—Å—Ç—É–ø–Ω–æ " +
                                    portfolioManager.getCurrentPortfolio().getAvailableBalance());
                }

                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                BigDecimal currentPrice = getCurrentPrice(symbol);
                if (currentPrice == null) {
                    return TradeResult.failure(TradeOperationType.OPEN_LONG, symbol,
                            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è " + symbol);
                }

                // –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
                if (!portfolioManager.reserveBalance(amount)) {
                    return TradeResult.failure(TradeOperationType.OPEN_LONG, symbol,
                            "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞");
                }

                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
                BigDecimal positionSize = amount.multiply(leverage).divide(currentPrice, 8, RoundingMode.HALF_UP);

                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏
                BigDecimal fees = calculateFees(amount, leverage);

                // –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                String positionId = UUID.randomUUID().toString();
                Position position = Position.builder()
                        .positionId(positionId)
                        .symbol(symbol)
                        .type(PositionType.LONG)
                        .size(positionSize)
                        .entryPrice(currentPrice)
                        .currentPrice(currentPrice)
                        .leverage(leverage)
                        .allocatedAmount(amount)
                        .unrealizedPnL(BigDecimal.ZERO)
                        .unrealizedPnLPercent(BigDecimal.ZERO)
                        .openingFees(fees)
                        .status(PositionStatus.OPEN)
                        .openTime(LocalDateTime.now())
                        .lastUpdated(LocalDateTime.now())
                        .build();

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é
                positions.put(positionId, position);

                // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
                portfolioManager.onPositionOpened(position);

                // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                TradeResult result = TradeResult.success(positionId, TradeOperationType.OPEN_LONG,
                        symbol, positionSize, currentPrice, fees);
                result.setPnl(BigDecimal.ZERO);

                tradeHistory.add(result);

                log.info("üü¢ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞ LONG –ø–æ–∑–∏—Ü–∏—è: {} | –†–∞–∑–º–µ—Ä: {} | –¶–µ–Ω–∞: {} | –ö–æ–º–∏—Å—Å–∏—è: {}",
                        symbol, positionSize, currentPrice, fees);

                return result;

            } catch (Exception e) {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ LONG –ø–æ–∑–∏—Ü–∏–∏ {}: {}", symbol, e.getMessage());
                return TradeResult.failure(TradeOperationType.OPEN_LONG, symbol, e.getMessage());
            }
        });
    }

    @Override
    public CompletableFuture<TradeResult> openShortPosition(String symbol, BigDecimal amount, BigDecimal leverage) {
        return CompletableFuture.supplyAsync(() -> {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
                if (!portfolioManager.hasAvailableBalance(amount)) {
                    return TradeResult.failure(TradeOperationType.OPEN_SHORT, symbol,
                            "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: —Ç—Ä–µ–±—É–µ—Ç—Å—è " + amount + ", –¥–æ—Å—Ç—É–ø–Ω–æ " +
                                    portfolioManager.getCurrentPortfolio().getAvailableBalance());
                }

                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                BigDecimal currentPrice = getCurrentPrice(symbol);
                if (currentPrice == null) {
                    return TradeResult.failure(TradeOperationType.OPEN_SHORT, symbol,
                            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è " + symbol);
                }

                // –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
                if (!portfolioManager.reserveBalance(amount)) {
                    return TradeResult.failure(TradeOperationType.OPEN_SHORT, symbol,
                            "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞");
                }

                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
                BigDecimal positionSize = amount.multiply(leverage).divide(currentPrice, 8, RoundingMode.HALF_UP);

                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏
                BigDecimal fees = calculateFees(amount, leverage);

                // –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                String positionId = UUID.randomUUID().toString();
                Position position = Position.builder()
                        .positionId(positionId)
                        .symbol(symbol)
                        .type(PositionType.SHORT)
                        .size(positionSize)
                        .entryPrice(currentPrice)
                        .currentPrice(currentPrice)
                        .leverage(leverage)
                        .allocatedAmount(amount)
                        .unrealizedPnL(BigDecimal.ZERO)
                        .unrealizedPnLPercent(BigDecimal.ZERO)
                        .openingFees(fees)
                        .status(PositionStatus.OPEN)
                        .openTime(LocalDateTime.now())
                        .lastUpdated(LocalDateTime.now())
                        .build();

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é
                positions.put(positionId, position);

                // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
                portfolioManager.onPositionOpened(position);

                // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                TradeResult result = TradeResult.success(positionId, TradeOperationType.OPEN_SHORT,
                        symbol, positionSize, currentPrice, fees);
                result.setPnl(BigDecimal.ZERO);

                tradeHistory.add(result);

                log.info("üî¥ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞ SHORT –ø–æ–∑–∏—Ü–∏—è: {} | –†–∞–∑–º–µ—Ä: {} | –¶–µ–Ω–∞: {} | –ö–æ–º–∏—Å—Å–∏—è: {}",
                        symbol, positionSize, currentPrice, fees);

                return result;

            } catch (Exception e) {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ SHORT –ø–æ–∑–∏—Ü–∏–∏ {}: {}", symbol, e.getMessage());
                return TradeResult.failure(TradeOperationType.OPEN_SHORT, symbol, e.getMessage());
            }
        });
    }

    @Override
    public CompletableFuture<TradeResult> closePosition(String positionId) {
        return CompletableFuture.supplyAsync(() -> {
            try {
                Position position = positions.get(positionId);
                if (position == null) {
                    return TradeResult.failure(TradeOperationType.CLOSE_POSITION, "UNKNOWN",
                            "–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: " + positionId);
                }

                if (position.getStatus() != PositionStatus.OPEN) {
                    return TradeResult.failure(TradeOperationType.CLOSE_POSITION, position.getSymbol(),
                            "–ü–æ–∑–∏—Ü–∏—è –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞: " + position.getStatus());
                }

                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                BigDecimal currentPrice = getCurrentPrice(position.getSymbol());
                if (currentPrice == null) {
                    return TradeResult.failure(TradeOperationType.CLOSE_POSITION, position.getSymbol(),
                            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è " + position.getSymbol());
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º PnL
                position.setCurrentPrice(currentPrice);
                position.calculateUnrealizedPnL();

                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏ –∑–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ
                BigDecimal closingFees = calculateFees(position.getAllocatedAmount(), position.getLeverage());
                BigDecimal totalFees = position.getOpeningFees().add(closingFees);

                // –§–∏–Ω–∞–ª—å–Ω—ã–π PnL —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π
                BigDecimal finalPnL = position.getUnrealizedPnL().subtract(closingFees);

                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                position.setStatus(PositionStatus.CLOSED);
                position.setLastUpdated(LocalDateTime.now());

                // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
                portfolioManager.releaseReservedBalance(position.getAllocatedAmount());
                portfolioManager.onPositionClosed(position, finalPnL, totalFees);

                // –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                positions.remove(positionId);

                // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                TradeResult result = TradeResult.success(positionId, TradeOperationType.CLOSE_POSITION,
                        position.getSymbol(), position.getSize(), currentPrice, closingFees);
                result.setPnl(finalPnL);

                tradeHistory.add(result);

                log.info("‚ö´ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è: {} {} | –¶–µ–Ω–∞: {} | PnL: {} | –ö–æ–º–∏—Å—Å–∏–∏: {}",
                        position.getSymbol(), position.getDirectionString(), currentPrice, finalPnL, totalFees);

                return result;

            } catch (Exception e) {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ {}: {}", positionId, e.getMessage());
                return TradeResult.failure(TradeOperationType.CLOSE_POSITION, "UNKNOWN", e.getMessage());
            }
        });
    }

    @Override
    public List<Position> getActivePositions() {
        return new ArrayList<>(positions.values());
    }

    @Override
    public Position getPosition(String positionId) {
        return positions.get(positionId);
    }

    @Override
    public CompletableFuture<Void> updatePositionPrices() {
        return CompletableFuture.runAsync(() -> {
            for (Position position : positions.values()) {
                try {
                    BigDecimal currentPrice = getCurrentPrice(position.getSymbol());
                    if (currentPrice != null) {
                        position.setCurrentPrice(currentPrice);
                        position.calculateUnrealizedPnL();
                        position.setLastUpdated(LocalDateTime.now());
                    }
                } catch (Exception e) {
                    log.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {}: {}",
                            position.getPositionId(), e.getMessage());
                }
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
            portfolioManager.updatePortfolioValue();
        });
    }

    @Override
    public BigDecimal getCurrentPrice(String symbol) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ü–µ–Ω—É —á–µ—Ä–µ–∑ OKX –∫–ª–∏–µ–Ω—Ç
            // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É - –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å OkxClient
            // TODO: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏ –∏–∑ OKX
            return BigDecimal.valueOf(1.0 + (Math.random() * 0.1 - 0.05)); // –°–∏–º—É–ª—è—Ü–∏—è –Ω–µ–±–æ–ª—å—à–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω—ã
        } catch (Exception e) {
            log.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {}: {}", symbol, e.getMessage());
            return BigDecimal.valueOf(1.0);
        }
    }

    @Override
    public BigDecimal calculateFees(BigDecimal amount, BigDecimal leverage) {
        // –ö–æ–º–∏—Å—Å–∏—è = 0.1% –æ—Ç –æ–±—ä–µ–º–∞ —Å–¥–µ–ª–∫–∏ (amount * leverage)
        BigDecimal feeRate = BigDecimal.valueOf(0.001); // 0.1%
        return amount.multiply(leverage).multiply(feeRate);
    }

    @Override
    public TradingProviderType getProviderType() {
        return TradingProviderType.VIRTUAL;
    }

    @Override
    public boolean isConnected() {
        return true; // –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –≤—Å–µ–≥–¥–∞ "–ø–æ–¥–∫–ª—é—á–µ–Ω–∞"
    }

    @Override
    public List<TradeResult> getTradeHistory(int limit) {
        return tradeHistory.stream()
                .sorted((a, b) -> b.getExecutionTime().compareTo(a.getExecutionTime()))
                .limit(limit)
                .toList();
    }
}