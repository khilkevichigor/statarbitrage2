package com.example.statarbitrage.trading.providers;

import com.example.statarbitrage.client_okx.OkxClient;
import com.example.statarbitrage.common.dto.OkxPositionHistoryData;
import com.example.statarbitrage.trading.interfaces.TradingProvider;
import com.example.statarbitrage.trading.interfaces.TradingProviderType;
import com.example.statarbitrage.trading.model.*;
import com.example.statarbitrage.trading.services.GeolocationService;
import com.example.statarbitrage.trading.services.OkxPortfolioManager;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import lombok.RequiredArgsConstructor;
import lombok.ToString;
import lombok.extern.slf4j.Slf4j;
import okhttp3.*;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.nio.charset.StandardCharsets;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;

import static com.example.statarbitrage.common.utils.BigDecimalUtil.safeScale;

/**
 * –†–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è —á–µ—Ä–µ–∑ OKX API
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ OKX –±–∏—Ä–∂—É
 * –í–°–ï –ú–ï–¢–û–î–´ –ü–û–õ–ù–û–°–¢–¨–Æ –°–ò–ù–•–†–û–ù–ù–´–ï!
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class RealOkxTradingProvider implements TradingProvider {
    private final OkxPortfolioManager okxPortfolioManager;
    private final OkxClient okxClient;
    private final GeolocationService geolocationService;

    // OKX API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    @Value("${okx.api.key:}")
    private String apiKey;

    @Value("${okx.api.secret:}")
    private String apiSecret;

    @Value("${okx.api.passphrase:}")
    private String passphrase;

    @Value("${okx.api.sandbox:true}")
    private boolean isSandbox;

    // HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è OKX API
    private static final OkHttpClient httpClient = new OkHttpClient.Builder()
            .connectTimeout(10, TimeUnit.SECONDS)
            .readTimeout(30, TimeUnit.SECONDS)
            .writeTimeout(10, TimeUnit.SECONDS)
            .build();

    // –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å OKX
    private final ConcurrentHashMap<String, Position> positions = new ConcurrentHashMap<>();
    private final List<TradeResult> tradeHistory = new ArrayList<>();

    // –ö—ç—à –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
    private final ConcurrentHashMap<String, InstrumentInfo> instrumentInfoCache = new ConcurrentHashMap<>();

    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã OKX API
    private static final String PROD_BASE_URL = "https://www.okx.com";
    private static final String SANDBOX_BASE_URL = "https://www.okx.com";
    private static final String TRADE_ORDER_ENDPOINT = "/api/v5/trade/order";
    private static final String TRADE_POSITIONS_ENDPOINT = "/api/v5/account/positions";
    private static final String ACCOUNT_BALANCE_ENDPOINT = "/api/v5/account/balance";
    private static final String MARKET_TICKER_ENDPOINT = "/api/v5/market/ticker";
    private static final String PUBLIC_INSTRUMENTS_ENDPOINT = "/api/v5/public/instruments";
    private static final String ACCOUNT_CONFIG_ENDPOINT = "/api/v5/account/config";
    private static final String SET_LEVERAGE_ENDPOINT = "/api/v5/account/set-leverage";
    private static final String POSITIONS_HISTORY_ENDPOINT = "/api/v5/account/positions-history";

    @Override
    public Portfolio getPortfolio() {
        try {
            return okxPortfolioManager.getCurrentPortfolio();
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ", e);
            return new Portfolio(); // –∏–ª–∏ null, –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ª–æ–≥–∏–∫–∏
        }
    }

    @Override
    public boolean hasAvailableBalance(BigDecimal amount) {
        try {
            return okxPortfolioManager.hasAvailableBalance(amount);
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Å—É–º–º—ã {}", amount, e);
            return false;
        }
    }

    @Override
    public TradeResult openLongPosition(String symbol, BigDecimal amount, BigDecimal leverage) {
        return openPosition(symbol, amount, leverage,
                TradeOperationType.OPEN_LONG,
                PositionType.LONG,
                "buy",
                "long");
    }

    private TradeResult logAndFail(String logMessage, TradeOperationType type, String symbol, String errorMessage) {
        log.error(logMessage);
        return TradeResult.failure(type, symbol, errorMessage);
    }

    private TradeResult logAndReturnError(String logMessage, TradeResult result) {
        log.error(logMessage);
        return result;
    }

    @Override
    public TradeResult openShortPosition(String symbol, BigDecimal amount, BigDecimal leverage) {
        return openPosition(symbol, amount, leverage,
                TradeOperationType.OPEN_SHORT,
                PositionType.SHORT,
                "sell",
                "short");
    }

    private TradeResult openPosition(
            String symbol,
            BigDecimal amount,
            BigDecimal leverage,
            TradeOperationType operationType,
            PositionType positionType,
            String orderSide,
            String positionSide
    ) {
        log.debug("==> {}: –ù–ê–ß–ê–õ–û –¥–ª—è {} | –°—É–º–º–∞: ${} | –ü–ª–µ—á–æ: {}", operationType.name(), symbol, amount, leverage);

        try {
            // üîç –ü—Ä–µ–¥—Ç–æ—Ä–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            if (!preTradeChecks(amount)) {
                return logAndFail("–ü—Ä–µ–¥—Ç–æ—Ä–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞.", operationType, symbol, "–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Ç–æ—Ä–≥–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏");
            }

            // üìê –†–∞—Å—á—ë—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
            BigDecimal positionSize = calculateAndAdjustPositionSize(symbol, amount, leverage);
            if (positionSize.compareTo(BigDecimal.ZERO) <= 0) {
                return logAndFail("–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Ä–∞–≤–µ–Ω –Ω—É–ª—é –∏–ª–∏ –º–µ–Ω—å—à–µ.",
                        operationType, symbol, "–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª");
            }
            log.debug("–†–∞—Å—Å—á–∏—Ç–∞–Ω –∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {}", positionSize);

            // üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
            BigDecimal currentPrice = getCurrentPrice(symbol);
            if (currentPrice == null) {
                return logAndFail("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É", operationType, symbol, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É");
            }

            // üíπ –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞ = —Ä–∞–∑–º–µ—Ä * —Ü–µ–Ω–∞
            BigDecimal adjustedAmount = positionSize.multiply(currentPrice);
            log.debug("üìä {} {}: –ò—Å—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞: ${}, –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è: ${}, –†–∞–∑–º–µ—Ä: {} –µ–¥–∏–Ω–∏—Ü, –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {}",
                    symbol, positionSide.toUpperCase(), amount, adjustedAmount, positionSize, currentPrice);

            // ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ—Ä–¥–µ—Ä–∞
            String validationError = validateOrderSize(symbol, adjustedAmount, positionSize, currentPrice);
            if (validationError != null) {
                return logAndFail("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ—Ä–¥–µ—Ä–∞: " + validationError, operationType, symbol, validationError);
            }

            // ‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–µ—á–∞
            if (!setLeverage(symbol, leverage)) {
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–µ—á–æ {}, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º –ø–ª–µ—á–æ–º", leverage);
            }

            // üì¶ –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
            TradeResult orderResult = placeOrder(symbol, orderSide, positionSide, adjustedAmount, leverage);
            if (!orderResult.isSuccess()) {
                return logAndReturnError("–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: " + orderResult.getErrorMessage(), orderResult);
            }

            // üß© –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            Position position = createPositionFromTradeResult(orderResult, positionType, amount, leverage);
            positions.put(position.getPositionId(), position);
            okxPortfolioManager.onPositionOpened(position);
            log.debug("–ü–æ–∑–∏—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. ID: {}", position.getPositionId());

            // üìú –ò—Å—Ç–æ—Ä–∏—è
            tradeHistory.add(orderResult);
            log.debug("‚úÖ –û—Ç–∫—Ä—ã—Ç–∞ {} –ø–æ–∑–∏—Ü–∏—è –Ω–∞ OKX: {} | –†–∞–∑–º–µ—Ä: {} | –¶–µ–Ω–∞: {} | OrderID: {}",
                    positionType.name(), symbol, position.getSize(), position.getEntryPrice(), position.getExternalOrderId());

            // üßæ –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–∏
            logRealPositionData(symbol, operationType.name());

            // üÜî –ü–æ–¥–º–µ–Ω–∞ ID –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            orderResult.setPositionId(position.getPositionId());
            orderResult.setPosition(position);

            log.debug("<== {}: –ö–û–ù–ï–¶ (–£—Å–ø–µ—Ö) –¥–ª—è {}", operationType.name(), symbol);
            return orderResult;

        } catch (Exception e) {
            log.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ {}: {}", symbol, e.getMessage(), e);
            return TradeResult.failure(operationType, symbol, e.getMessage());
        }
    }

    @Override
    public TradeResult closePosition(String positionId) {
        try {
            Position position = positions.get(positionId);
            if (position == null) {
                return failWithLog("–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: " + positionId, TradeOperationType.CLOSE_POSITION, "UNKNOWN");
            }

            if (position.getStatus() != PositionStatus.OPEN) {
                return failWithLog("–ü–æ–∑–∏—Ü–∏—è –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞: " + position.getStatus(), TradeOperationType.CLOSE_POSITION, position.getSymbol());
            }

            // 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            TradeResult closeOrderResult = placeCloseOrder(position); //todo –≥—Ä—É–±–æ —Ç—É—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞ null –∏ –≤—Å–µ - —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ! –Ω–µ –±–µ—Ä–µ–º –¥–µ—Ç–∞–ª–∏ –æ—Ä–¥–µ—Ä–∞ –∏–∑ closeOrderResult —Ç–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–µ–µ –¥–µ–ª–∞—Ç—å —ç—Ç–æ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤
            if (!closeOrderResult.isSuccess()) {
                return closeOrderResult;
            }

            // 2. –ñ–¥–µ–º, —á—Ç–æ–±—ã –ø–æ–∑–∏—Ü–∏—è –ø–æ—è–≤–∏–ª–∞—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ OKX, –∑–∞—Ç–µ–º –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π P&L
            log.info("üí§ –û–∂–∏–¥–∞–µ–º 3 —Å–µ–∫—É–Ω–¥—ã, —á—Ç–æ–±—ã –ø–æ–∑–∏—Ü–∏—è {} –ø–æ—è–≤–∏–ª–∞—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ OKX", position.getSymbol());
            try {
                Thread.sleep(3000); // –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                log.warn("‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ OKX");
            }

            OkxPositionHistoryData realPnLData = getRealizedPnLFromOkx(position.getSymbol(), position.getPositionId());
            if (realPnLData != null) {
                log.info("üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π P&L –æ—Ç OKX: realizedPnl={}, fee={}, fundingFee={}",
                        realPnLData.getRealizedPnl(), realPnLData.getFee(), realPnLData.getFundingFee());

                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç OKX
                position.setRealizedPnLUSDT(realPnLData.getRealizedPnl());
                position.setClosingFees(realPnLData.getFee().abs()); // –ö–æ–º–∏—Å—Å–∏–∏ –≤—Å–µ–≥–¥–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ
                position.setFundingFees(realPnLData.getFundingFee());
                position.setAllocatedAmount(realPnLData.getMargin());
                position.setClosingPrice(realPnLData.getAverageClosePrice());

                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π P&L
                if (position.getAllocatedAmount() != null && position.getAllocatedAmount().compareTo(BigDecimal.ZERO) > 0) {
                    BigDecimal pnlPercent = realPnLData.getRealizedPnl()
                            .divide(position.getAllocatedAmount(), 4, RoundingMode.HALF_UP)
                            .multiply(BigDecimal.valueOf(100));
                    position.setRealizedPnLPercent(pnlPercent);
                }

                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π P&L
                position.setUnrealizedPnLUSDT(BigDecimal.ZERO);
                position.setUnrealizedPnLPercent(BigDecimal.ZERO);

                log.info("‚úÖ P&L –æ–±–Ω–æ–≤–ª–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ OKX: realizedPnL={} USDT ({}%)",
                        position.getRealizedPnLUSDT(), position.getRealizedPnLPercent());
            } else {
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ P&L –æ—Ç OKX");
            }

            // 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            position.setStatus(PositionStatus.CLOSED);
            position.setLastUpdated(LocalDateTime.now());

            // 4. –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
            okxPortfolioManager.releaseReservedBalance(position.getAllocatedAmount());

            okxPortfolioManager.onPositionClosed(position, position.getRealizedPnLUSDT());

            // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–ª–æ–∂–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ null
            BigDecimal openingFees = safe(position.getOpeningFees());
            BigDecimal closingFees = safe(position.getClosingFees());
            BigDecimal fundingFee = safe(position.getFundingFees());

            log.info("–ö–æ–º–∏—Å—Å–∏–∏ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è: openingFees={}, closingFees={}, fundingFee={}",
                    openingFees, closingFees, fundingFee);

            BigDecimal totalFees = openingFees.add(closingFees).add(fundingFee);

            // 5. –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            TradeResult finalResult = TradeResult.success(
                    positionId,
                    TradeOperationType.CLOSE_POSITION,
                    position.getSymbol(),
                    position.getRealizedPnLUSDT(),
                    position.getRealizedPnLPercent(),
                    position.getAllocatedAmount(),
                    position.getClosingPrice(),
                    totalFees,
                    closeOrderResult.getExternalOrderId(),
                    position
            );

            tradeHistory.add(finalResult);

            log.info("‚ö´ –ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –Ω–∞ OKX: {} {} | –¶–µ–Ω–∞: {} | PnL: {} USDT ({} %) | OrderID: {}",
                    position.getSymbol(),
                    position.getDirectionString(),
                    finalResult.getExecutionPrice(),
                    finalResult.getPnlUSDT(),
                    finalResult.getPnlPercent(),
                    finalResult.getExternalOrderId()
            );

            // –£–¥–∞–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–∑ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
            positions.remove(positionId);
            log.info("üóëÔ∏è –ü–æ–∑–∏—Ü–∏—è {} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è", positionId);

            return finalResult;

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ {}: ", positionId, e);
            return TradeResult.failure(TradeOperationType.CLOSE_POSITION, "UNKNOWN", e.getMessage());
        }
    }

    private BigDecimal safe(BigDecimal value) {
        return value != null ? value : BigDecimal.ZERO;
    }

    private TradeResult failWithLog(String message, TradeOperationType type, String symbol) {
        log.error(message);
        return TradeResult.failure(type, symbol, message);
    }

    @Override
    public Position getPosition(String positionId) {
        return positions.get(positionId);
    }

    @Override
    public void updatePositionPrices(List<String> tickers) {
        updatePositionsInternal(tickers);
    }

    private void updatePositionsInternal(List<String> tickers) {
        try {
            if (tickers == null) {
                log.debug("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π: —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å OKX");
                syncPositionsWithOkx();
            } else {
                log.debug("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —Ç–∏–∫–µ—Ä–æ–≤: {} (—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π OKX)", tickers);
                syncPositionsWithOkxForTickers(tickers);
            }

            okxPortfolioManager.updatePortfolioValue();
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω –ø–æ–∑–∏—Ü–∏–π: {}", e.getMessage(), e);
        }
    }

    @Override
    public BigDecimal getCurrentPrice(String symbol) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ä —á–µ—Ä–µ–∑ OkxClient
            JsonArray ticker = okxClient.getTicker(symbol);
            if (ticker != null && !ticker.isEmpty()) {
                JsonObject tickerData = ticker.get(0).getAsJsonObject();
                String lastPrice = tickerData.get("last").getAsString();
                return new BigDecimal(lastPrice);
            } else {
                log.warn("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Ç–∏–∫–µ—Ä –¥–ª—è —Å–∏–º–≤–æ–ª–∞ {}", symbol);
                return null;
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã –¥–ª—è {}: ", symbol, e);
            return null;
        }
    }

    @Override
    public BigDecimal calculateFees(BigDecimal amount, BigDecimal leverage) {
        // OKX –∫–æ–º–∏—Å—Å–∏—è –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤:
        // maker: 0.02% (0.0002), taker: 0.05% (0.0005)
        // –î–ª—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º taker –∫–æ–º–∏—Å—Å–∏—é
        final BigDecimal takerFeeRate = new BigDecimal("0.0005"); // 0.05%

        // –ö–æ–º–∏—Å—Å–∏—è —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ—Ç –ø–æ–∑–∏—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –ø–ª–µ—á–∞
        return amount.multiply(leverage).multiply(takerFeeRate);
    }


    @Override
    public TradingProviderType getProviderType() {
        return TradingProviderType.REAL_OKX;
    }

    @Override
    public boolean isConnected() {
        try {
            if (isAnyApiKeyMissing()) {
                log.warn("‚ö†Ô∏è OKX API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã");
                return false;
            }
            return checkApiConnection();
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OKX: ", e);
            return false;
        }
    }

    private boolean isAnyApiKeyMissing() {
        return isNullOrEmpty(apiKey) || isNullOrEmpty(apiSecret) || isNullOrEmpty(passphrase);
    }

    private boolean isNullOrEmpty(String s) {
        return s == null || s.isEmpty();
    }

    @Override
    public List<TradeResult> getTradeHistory(int limit) {
        return tradeHistory.stream()
                .sorted((a, b) -> b.getExecutionTime().compareTo(a.getExecutionTime()))
                .limit(limit)
                .toList();
    }

    @Override
    public void loadPositions(List<Position> positionsToLoad) {
        positions.clear();
        for (Position position : positionsToLoad) {
            positions.put(position.getPositionId(), position);
        }
        log.info("–ó–∞–≥—Ä—É–∂–µ–Ω–æ {} –ø–æ–∑–∏—Ü–∏–π –≤ RealOkxTradingProvider", positions.size());
    }

    @Override
    public void updatePositionInMemory(String positionId, Position updatedPosition) {
        positions.put(positionId, updatedPosition);
        log.debug("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è –≤ –ø–∞–º—è—Ç–∏: ID = {}, —Å–∏–º–≤–æ–ª = {}", positionId, updatedPosition.getSymbol());
    }

    // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OKX API

    private TradeResult placeOrder(String symbol, String side, String posSide, BigDecimal size, BigDecimal leverage) {
        log.debug("==> placeOrder: –ù–ê–ß–ê–õ–û –¥–ª—è {} | side: {} | posSide: {} | size: {} | leverage: {}", symbol, side, posSide, size, leverage);
        TradeOperationType tradeOperationType = posSide.equalsIgnoreCase("long") ? TradeOperationType.OPEN_LONG : TradeOperationType.OPEN_SHORT;

        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
            if (!geolocationService.isGeolocationAllowed()) {
                log.debug("‚ùå –ë–õ–û–ö–ò–†–û–í–ö–ê: –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∏–∑-–∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏!");
                return TradeResult.failure(tradeOperationType, symbol, "–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞");
            }
            log.debug("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω–∞.");

            // –ë–∞–∑–æ–≤—ã–π URL –∏ endpoint
            String baseUrl = isSandbox ? SANDBOX_BASE_URL : PROD_BASE_URL;
            String endpoint = TRADE_ORDER_ENDPOINT;

            // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º posSide
            String correctPosSide = determinePosSide(posSide);
            log.debug("–û–ø—Ä–µ–¥–µ–ª–µ–Ω correctPosSide: {}", correctPosSide);

            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
            InstrumentInfo instrumentInfo = getInstrumentInfo(symbol);
            if (instrumentInfo == null) {
                log.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ {}", symbol);
                return TradeResult.failure(tradeOperationType, symbol, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ");
            }
            log.debug("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ {}: {}", symbol, instrumentInfo);

            // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã lot size –∏ min size
            BigDecimal lotSize = instrumentInfo.getLotSize();
            BigDecimal minSize = instrumentInfo.getMinSize();
            log.debug("üìã Lot Size: {}, Min Size: {}", lotSize, minSize);

            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            BigDecimal currentPrice = getCurrentPrice(symbol);
            if (currentPrice == null) {
                log.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {}", symbol);
                return TradeResult.failure(tradeOperationType, symbol, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É");
            }

            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑ USDT –≤ –±–∞–∑–æ–≤—ã–µ –µ–¥–∏–Ω–∏—Ü—ã
            BigDecimal sizeInBaseUnits = size.divide(currentPrice, 8, RoundingMode.DOWN);
            log.debug("üí∞ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞: {}$ / {} = {} –±–∞–∑–æ–≤—ã—Ö –µ–¥–∏–Ω–∏—Ü", size, currentPrice, sizeInBaseUnits);

            // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ lot size
            BigDecimal adjustedSize = sizeInBaseUnits.divide(lotSize, 0, RoundingMode.DOWN).multiply(lotSize);
            if (adjustedSize.compareTo(minSize) < 0) {
                adjustedSize = minSize;
            }
            log.debug("üìè –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {} -> {} –±–∞–∑–æ–≤—ã—Ö –µ–¥–∏–Ω–∏—Ü", sizeInBaseUnits, adjustedSize);

            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Å–ª–æ–≤–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ —Ç—Ä–µ–±—É–µ–º—É—é –º–∞—Ä–∂—É
            BigDecimal notionalValue = adjustedSize.multiply(currentPrice);
            BigDecimal requiredMargin = notionalValue.divide(leverage, 2, RoundingMode.HALF_UP);
            log.debug("üîç –£—Å–ª–æ–≤–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {} USD, —Ç—Ä–µ–±—É–µ–º–∞—è –º–∞—Ä–∂–∞: {} USDT (—Å –ø–ª–µ—á–æ–º {}x)", notionalValue, requiredMargin, leverage);

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
            JsonObject orderData = new JsonObject();
            orderData.addProperty("instId", symbol);
            orderData.addProperty("tdMode", "isolated");
            orderData.addProperty("side", side);
            orderData.addProperty("posSide", correctPosSide);
            orderData.addProperty("ordType", "market");
            orderData.addProperty("sz", adjustedSize.toPlainString());
            orderData.addProperty("lever", leverage.toPlainString());

            log.debug("üìã –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ OKX: {}", orderData.toString());

            // –§–æ—Ä–º–∏—Ä—É–µ–º HTTP –∑–∞–ø—Ä–æ—Å
            RequestBody body = RequestBody.create(orderData.toString(), MediaType.get("application/json"));
            String timestamp = Instant.now().truncatedTo(ChronoUnit.MILLIS).toString();
            String signature = generateSignature("POST", endpoint, orderData.toString(), timestamp);

            Request request = new Request.Builder()
                    .url(baseUrl + endpoint)
                    .post(body)
                    .addHeader("OK-ACCESS-KEY", apiKey)
                    .addHeader("OK-ACCESS-SIGN", signature)
                    .addHeader("OK-ACCESS-TIMESTAMP", timestamp)
                    .addHeader("OK-ACCESS-PASSPHRASE", passphrase)
                    .addHeader("Content-Type", "application/json")
                    .build();

            log.debug("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞...");
            try (Response response = httpClient.newCall(request).execute()) {
                String responseBody = response.body().string();
                log.debug("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OKX API: HTTP {} | {}", response.code(), responseBody);
                JsonObject jsonResponse = JsonParser.parseString(responseBody).getAsJsonObject();

                if (!"0".equals(jsonResponse.get("code").getAsString())) {
                    log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {}", responseBody);
                    return TradeResult.failure(tradeOperationType, symbol, jsonResponse.get("msg").getAsString());
                }

                JsonArray data = jsonResponse.getAsJsonArray("data");
                if (data.size() > 0) {
                    String orderId = data.get(0).getAsJsonObject().get("ordId").getAsString();
                    log.debug("–û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω. OrderID: {}. –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—Ä–¥–µ—Ä–∞...", orderId);
                    return getOrderDetails(orderId, symbol, tradeOperationType);
                }
                log.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –æ—Ä–¥–µ—Ä–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞ API.");
                return TradeResult.failure(tradeOperationType, symbol, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –æ—Ä–¥–µ—Ä–∞");
            }
        } catch (Exception e) {
            log.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: ", e);
            return TradeResult.failure(tradeOperationType, symbol, e.getMessage());
        }
    }


    private boolean preTradeChecks(BigDecimal amount) {
        if (!isConnected()) {
            log.error("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OKX API");
            return false;
        }
        if (!hasAvailableBalance(amount)) {
            log.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏");
            return false;
        }
        return true;
    }

    private BigDecimal calculateAndAdjustPositionSize(String symbol, BigDecimal amount, BigDecimal leverage) {
        BigDecimal currentPrice = getCurrentPrice(symbol);
        if (currentPrice == null) {
            log.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è {}", symbol);
            return BigDecimal.ZERO;
        }

        InstrumentInfo instrumentInfo = getInstrumentInfo(symbol);
        if (instrumentInfo == null) {
            log.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ {}", symbol);
            return BigDecimal.ZERO;
        }

        BigDecimal ctVal = instrumentInfo.getCtVal();
        BigDecimal minSize = instrumentInfo.getMinSize();
        log.debug("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ {}: ctVal={}, —Ü–µ–Ω–∞={}, minSize={}", symbol, ctVal, currentPrice, minSize);

        // –°—Ç–æ–∏–º–æ—Å—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ª–æ—Ç–∞ —Å —É—á–µ—Ç–æ–º –ø–ª–µ—á–∞
        BigDecimal minLotCost = minSize.multiply(ctVal).multiply(currentPrice)
                .divide(leverage, 2, RoundingMode.HALF_UP);
        log.debug("üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ª–æ—Ç–∞: {} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ √ó {} ctVal √ó {} —Ü–µ–Ω–∞ √∑ {} –ø–ª–µ—á–æ = {} USDT",
                minSize, ctVal, currentPrice, leverage, minLotCost);

        if (minLotCost.compareTo(amount) > 0) {
            log.error("‚ùå –ë–õ–û–ö–ò–†–û–í–ö–ê: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–æ—Ç —Å—Ç–æ–∏—Ç {} USDT, –∞ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ {} USDT",
                    minLotCost, amount);
            return BigDecimal.ZERO; // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ª–æ—Ç–∞
        }

        // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º –±—é–¥–∂–µ—Ç–∞ –∏ –ø–ª–µ—á–∞
        BigDecimal maxContracts = amount.multiply(leverage)
                .divide(ctVal.multiply(currentPrice), 8, RoundingMode.DOWN);
        log.debug("üî¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –≤ —Ä–∞–º–∫–∞—Ö –±—é–¥–∂–µ—Ç–∞ {} USDT: {}", amount, maxContracts);

        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–¥ –ª–æ—Ç –∏ –±—é–¥–∂–µ—Ç
        return adjustPositionSizeToLotSizeWithBudgetLimit(symbol, maxContracts, amount, leverage);
    }


    private Position createPositionFromTradeResult(TradeResult tradeResult, PositionType type, BigDecimal amount, BigDecimal leverage) {
        String positionId = UUID.randomUUID().toString();

        return Position.builder()
                .positionId(positionId)
                .symbol(tradeResult.getSymbol())
                .type(type)
                .size(tradeResult.getExecutedSize())      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                .entryPrice(tradeResult.getExecutionPrice())
                .currentPrice(tradeResult.getExecutionPrice()) // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ currentPrice = entryPrice
                .leverage(leverage)
                .allocatedAmount(amount)
                .openingFees(tradeResult.getFees())
                .status(PositionStatus.OPEN)
                .openTime(LocalDateTime.now())
                .lastUpdated(LocalDateTime.now())
                .externalOrderId(tradeResult.getExternalOrderId())
                .build();
    }


    private TradeResult placeCloseOrder(Position position) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
            if (!geolocationService.isGeolocationAllowed()) {
                log.error("‚ùå –ë–õ–û–ö–ò–†–û–í–ö–ê: –ó–∞–∫—Ä—ã—Ç–∏–µ –æ—Ä–¥–µ—Ä–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∏–∑-–∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏!");
                return TradeResult.failure(TradeOperationType.CLOSE_POSITION, position.getSymbol(), "–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞");
            }

            String baseUrl = isSandbox ? SANDBOX_BASE_URL : PROD_BASE_URL;
            String endpoint = TRADE_ORDER_ENDPOINT;

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ—Ä–æ–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è –æ—Ä–¥–µ—Ä–∞
            String side = position.getType() == PositionType.LONG ? "sell" : "buy";

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ posSide –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è
            String correctPosSide = isHedgeMode()
                    ? (side.equals("buy") ? "short" : "long")
                    : "net";

            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ (—Ä–∞–∑–º–µ—Ä * —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞)
            BigDecimal totalOrderValue = position.getSize().multiply(position.getCurrentPrice());

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
            JsonObject orderData = new JsonObject();
            orderData.addProperty("instId", position.getSymbol());
            orderData.addProperty("tdMode", "isolated");
            orderData.addProperty("side", side);
            orderData.addProperty("posSide", correctPosSide);
            orderData.addProperty("ordType", "market");
            orderData.addProperty("sz", position.getSize().toPlainString());   // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–∑–æ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞
            orderData.addProperty("szCcy", getBaseCurrency(position.getSymbol())); // –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ sz –≤ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ

            RequestBody body = RequestBody.create(orderData.toString(), MediaType.get("application/json"));
            String timestamp = Instant.now().truncatedTo(ChronoUnit.MILLIS).toString();
            String signature = generateSignature("POST", endpoint, orderData.toString(), timestamp);

            Request request = new Request.Builder()
                    .url(baseUrl + endpoint)
                    .post(body)
                    .addHeader("OK-ACCESS-KEY", apiKey)
                    .addHeader("OK-ACCESS-SIGN", signature)
                    .addHeader("OK-ACCESS-TIMESTAMP", timestamp)
                    .addHeader("OK-ACCESS-PASSPHRASE", passphrase)
                    .addHeader("Content-Type", "application/json")
                    .build();

            try (Response response = httpClient.newCall(request).execute()) {
                String responseBody = response.body().string();
                log.info("–û—Ç–≤–µ—Ç OKX –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –æ—Ä–¥–µ—Ä–∞: HTTP {} | {}", response.code(), responseBody);
                JsonObject jsonResponse = JsonParser.parseString(responseBody).getAsJsonObject();

                if (!"0".equals(jsonResponse.get("code").getAsString())) {
                    log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ: {}", responseBody);
                    return TradeResult.failure(TradeOperationType.CLOSE_POSITION, position.getSymbol(), jsonResponse.get("msg").getAsString());
                }

                JsonArray data = jsonResponse.getAsJsonArray("data");
                if (data.size() > 0) {
                    String orderId = data.get(0).getAsJsonObject().get("ordId").getAsString();
                    log.info("–û—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω. OrderID: {}. –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—Ä–¥–µ—Ä–∞...", orderId);
                    TradeResult orderDetails = getOrderDetails(orderId, position.getSymbol(), TradeOperationType.CLOSE_POSITION);
                    log.info("–ü–æ–ª—É—á–µ–Ω—ã –¥–µ—Ç–∞–ª–∏ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ: symbol={} | orderId={} | pnlUSDT={} | size={} | avgPx={} | fee={}",
                            orderDetails.getSymbol(),
                            orderDetails.getExternalOrderId(),
                            orderDetails.getPnlUSDT(),
                            orderDetails.getSize(),
                            orderDetails.getExecutionPrice(),
                            orderDetails.getFees());

                    return orderDetails;
                }

                log.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –æ—Ä–¥–µ—Ä–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞ API –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏.");
                return TradeResult.failure(TradeOperationType.CLOSE_POSITION, position.getSymbol(), "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –æ—Ä–¥–µ—Ä–∞");
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ—Ä–¥–µ—Ä–∞: ", e);
            return TradeResult.failure(TradeOperationType.CLOSE_POSITION, position.getSymbol(), e.getMessage());
        }
    }

    private TradeResult getOrderDetails(String orderId, String symbol, TradeOperationType tradeOperationType) {
        log.debug("==> getOrderDetails: –ù–ê–ß–ê–õ–û –¥–ª—è orderId={} | symbol={} | operation={}", orderId, symbol, tradeOperationType);

        try {
            if (!geolocationService.isGeolocationAllowed()) {
                log.error("‚ùå –ë–õ–û–ö–ò–†–û–í–ö–ê: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –æ—Ä–¥–µ—Ä–∞ {} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∏–∑-–∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏!", orderId);
                return TradeResult.failure(tradeOperationType, symbol, "–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞");
            }
            log.debug("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω–∞.");

            final int sleepMillis = 2000;
            log.debug("–û–∂–∏–¥–∞–µ–º {} –º—Å, —á—Ç–æ–±—ã –æ—Ä–¥–µ—Ä {} —É—Å–ø–µ–ª –∏—Å–ø–æ–ª–Ω–∏—Ç—å—Å—è...", sleepMillis, orderId);
            Thread.sleep(sleepMillis);

            String baseUrl = isSandbox ? SANDBOX_BASE_URL : PROD_BASE_URL;
            String endpoint = "/api/v5/trade/order?instId=" + symbol + "&ordId=" + orderId;
            log.debug("–§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ OKX API: GET {}", baseUrl + endpoint);

            String timestamp = Instant.now().truncatedTo(ChronoUnit.MILLIS).toString();
            String signature = generateSignature("GET", endpoint, "", timestamp);

            Request request = new Request.Builder()
                    .url(baseUrl + endpoint)
                    .addHeader("OK-ACCESS-KEY", apiKey)
                    .addHeader("OK-ACCESS-SIGN", signature)
                    .addHeader("OK-ACCESS-TIMESTAMP", timestamp)
                    .addHeader("OK-ACCESS-PASSPHRASE", passphrase)
                    .build();

            log.debug("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –æ—Ä–¥–µ—Ä–∞ {}...", orderId);
            try (Response response = httpClient.newCall(request).execute()) {
                String responseBody = response.body().string();
                log.debug("–û—Ç–≤–µ—Ç –æ—Ç OKX API –¥–ª—è –æ—Ä–¥–µ—Ä–∞ {}: HTTP {} | {}", orderId, response.code(), responseBody);
                JsonObject jsonResponse = JsonParser.parseString(responseBody).getAsJsonObject();

                if (!"0".equals(jsonResponse.get("code").getAsString())) {
                    String errorMsg = jsonResponse.get("msg").getAsString();
                    log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –æ—Ä–¥–µ—Ä–∞ {}: {} (–ö–æ–¥: {})", orderId, errorMsg, jsonResponse.get("code").getAsString());
                    return TradeResult.failure(tradeOperationType, symbol, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –æ—Ä–¥–µ—Ä–∞: " + errorMsg);
                }

                JsonArray data = jsonResponse.getAsJsonArray("data");
                if (data.size() > 0) {
                    JsonObject orderInfo = data.get(0).getAsJsonObject();
                    log.debug("–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ—Ä–¥–µ—Ä—É {}: {}", orderId, orderInfo);

                    /*
                    avgPx
                    –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è. –ï—Å–ª–∏ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è "".
                     */
                    BigDecimal avgPx = new BigDecimal(orderInfo.get("avgPx").getAsString());

                    /*
                    fee
                    –ö–æ–º–∏—Å—Å–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç
                    –î–ª—è —Å–ø–æ—Ç –∏ –º–∞—Ä–∂–∏ - —ç—Ç–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è, –≤–∑–∏–º–∞–µ–º–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π. –û–Ω–∞ –≤—Å–µ–≥–¥–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, -0,01.
                    –î–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤ —Å —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–µ–π, –±–µ—Å—Å—Ä–æ—á–Ω—ã—Ö —Ñ—å—é—á–µ—Ä—Å–æ–≤ –∏ –æ–ø—Ü–∏–æ–Ω–æ–≤ —ç—Ç–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è –∏ —Ä–∏–±–µ–π—Ç
                     */
                    BigDecimal fee = new BigDecimal(orderInfo.get("fee").getAsString()).abs();

                    /*
                    accFillSz
                    –ù–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
                    –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è - base_ccy –¥–ª—è SPOT –∏ MARGIN, –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è BTC-USDT –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è - BTC; –¥–ª—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è - base_ccy, –µ—Å–ª–∏ tgtCcy - base_ccy –∏–ª–∏ quote_ccy;
                    –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è - –∫–æ–Ω—Ç—Ä–∞–∫—Ç –¥–ª—è FUTURES/SWAP/OPTION.
                     */
                    BigDecimal size = new BigDecimal(orderInfo.get("accFillSz").getAsString());

                    /*
                    pnl
                    –ü—Ä–∏–±—ã–ª—å –∏ —É–±—ã—Ç–æ–∫, –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ –æ—Ä–¥–µ—Ä–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç —Å–¥–µ–ª–∫—É –∏ –Ω–∞—Ü–µ–ª–µ–Ω—ã –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏.
                    –í –¥—Ä—É–≥–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö –≤—Å–µ–≥–¥–∞ —Ä–∞–≤–µ–Ω 0.
                     */
                    BigDecimal pnlUSDT = new BigDecimal(orderInfo.get("pnl").getAsString());

                    log.debug("‚úÖ –î–µ—Ç–∞–ª–∏ –æ—Ä–¥–µ—Ä–∞ {} —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã: symbol={} | pnlUSDT={} | size={} | avgPx={} | fee={}",
                            orderId, symbol, pnlUSDT, size, avgPx, fee);

                    // TODO: —Å–≤–µ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –æ–±—ä–µ–º, –ø—Ä–∏ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ –≤–µ—Ä–Ω—É—Ç—å failure

                    //todo –ø–æ –º–æ–µ–º—É –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–∞–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –ø–∏—Ö–∞—Ç—å –≤ TradeResult!!! –Ω—É–∂–Ω–æ –±—Ä–∞—Ç—å —Ñ–∞–∫—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏
                    TradeResult result = TradeResult.success(null, tradeOperationType, symbol, pnlUSDT, null, size, avgPx, fee, orderId, null);
                    log.debug("<== getOrderDetails: –ö–û–ù–ï–¶ (–£—Å–ø–µ—Ö) –¥–ª—è orderId={}. –†–µ–∑—É–ª—å—Ç–∞—Ç: {}", orderId, result);
                    return result;
                }

                log.error("‚ùå –î–µ—Ç–∞–ª–∏ –æ—Ä–¥–µ—Ä–∞ {} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ API (–ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ 'data').", orderId);
                return TradeResult.failure(tradeOperationType, symbol, "–î–µ—Ç–∞–ª–∏ –æ—Ä–¥–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
            }
        } catch (Exception e) {
            log.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –æ—Ä–¥–µ—Ä–∞ {}: {}", orderId, e.getMessage(), e);
            return TradeResult.failure(tradeOperationType, symbol, e.getMessage());
        }
    }

    private boolean checkApiConnection() {
        try {
            if (!geolocationService.isGeolocationAllowed()) {
                log.error("‚ùå –ë–õ–û–ö–ò–†–û–í–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏!");
                return false;
            }

            String baseUrl = isSandbox ? SANDBOX_BASE_URL : PROD_BASE_URL;
            String endpoint = ACCOUNT_BALANCE_ENDPOINT;

            String timestamp = Instant.now().truncatedTo(ChronoUnit.MILLIS).toString();
            String signature = generateSignature("GET", endpoint, "", timestamp);

            Request request = new Request.Builder()
                    .url(baseUrl + endpoint)
                    .addHeader("OK-ACCESS-KEY", apiKey)
                    .addHeader("OK-ACCESS-SIGN", signature)
                    .addHeader("OK-ACCESS-TIMESTAMP", timestamp)
                    .addHeader("OK-ACCESS-PASSPHRASE", passphrase)
                    .build();

            try (Response response = httpClient.newCall(request).execute()) {
                String responseBody = response.body().string();
                log.debug("OKX API –∑–∞–ø—Ä–æ—Å: {} {}", baseUrl + endpoint, timestamp);
                log.debug("OKX API –æ—Ç–≤–µ—Ç: {}", responseBody);

                JsonObject jsonResponse = JsonParser.parseString(responseBody).getAsJsonObject();
                return "0".equals(jsonResponse.get("code").getAsString());
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OKX API: {}", e.getMessage(), e);
            return false;
        }
    }

    private void syncPositionsWithOkx() {
        syncPositionsWithOkxInternal(null);
    }

    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π —Å OKX, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ ‚Äî —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–∏–º,
     * –∏–Ω–∞—á–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏.
     */
    private void syncPositionsWithOkxForTickers(List<String> tickers) {
        syncPositionsWithOkxInternal(tickers);
    }

    private void syncPositionsWithOkxInternal(List<String> tickers) {
        try {
            if (!geolocationService.isGeolocationAllowed()) {
                log.error("‚ùå –ë–õ–û–ö–ò–†–û–í–ö–ê: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏!");
                return;
            }

            String baseUrl = isSandbox ? SANDBOX_BASE_URL : PROD_BASE_URL;
            String endpoint = TRADE_POSITIONS_ENDPOINT;

            String timestamp = Instant.now().truncatedTo(ChronoUnit.MILLIS).toString();
            String signature = generateSignature("GET", endpoint, "", timestamp);

            Request request = new Request.Builder()
                    .url(baseUrl + endpoint)
                    .addHeader("OK-ACCESS-KEY", apiKey)
                    .addHeader("OK-ACCESS-SIGN", signature)
                    .addHeader("OK-ACCESS-TIMESTAMP", timestamp)
                    .addHeader("OK-ACCESS-PASSPHRASE", passphrase)
                    .build();

            try (Response response = httpClient.newCall(request).execute()) {
                String responseBody = response.body().string();
                if (tickers == null) {
                    log.debug("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π —Å OKX: {}", responseBody);
                } else {
                    log.debug("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π —Å OKX –¥–ª—è —Ç–∏–∫–µ—Ä–æ–≤ {}: {}", tickers, responseBody);
                }

                JsonObject jsonResponse = JsonParser.parseString(responseBody).getAsJsonObject();
                if (!"0".equals(jsonResponse.get("code").getAsString())) {
                    String msg = jsonResponse.get("msg").getAsString();
                    if (tickers == null) {
                        log.error("‚ùå –û—à–∏–±–∫–∞ OKX API –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–π: {}", msg);
                    } else {
                        log.error("‚ùå –û—à–∏–±–∫–∞ OKX API –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —Ç–∏–∫–µ—Ä–æ–≤ {}: {}", tickers, msg);
                    }
                    return;
                }

                JsonArray data = jsonResponse.getAsJsonArray("data");
                if (tickers == null) {
                    log.info("üìä –ü–æ–ª—É—á–µ–Ω–æ {} –ø–æ–∑–∏—Ü–∏–π —Å OKX –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏", data.size());
                    for (JsonElement positionElement : data) {
                        updatePositionFromOkxData(positionElement.getAsJsonObject());
                    }
                } else {
                    log.debug("üìä –ü–æ–ª—É—á–µ–Ω–æ {} –ø–æ–∑–∏—Ü–∏–π —Å OKX, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–∏–∫–µ—Ä–∞–º {}", data.size(), tickers);
                    for (JsonElement positionElement : data) {
                        JsonObject okxPosition = positionElement.getAsJsonObject();
                        String instId = getJsonStringValue(okxPosition, "instId");
                        if (tickers.contains(instId)) {
                            log.debug("üéØ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}", instId);
                            updatePositionFromOkxData(okxPosition);
                        } else {
                            log.debug("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {} (–Ω–µ –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)", instId);
                        }
                    }
                }
            }
        } catch (Exception e) {
            if (tickers == null) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–π —Å OKX: {}", e.getMessage(), e);
            } else {
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–π —Å OKX –¥–ª—è —Ç–∏–∫–µ—Ä–æ–≤ {}: {}", tickers, e.getMessage(), e);
            }
        }
    }

    private void updatePositionFromOkxData(JsonObject okxPosition) {
        try {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
            String instId = getJsonStringValue(okxPosition, "instId");
            String instType = getJsonStringValue(okxPosition, "instType");
            String mgnMode = getJsonStringValue(okxPosition, "mgnMode");
            String posId = getJsonStringValue(okxPosition, "posId");
            String posSide = getJsonStringValue(okxPosition, "posSide");
            String pos = getJsonStringValue(okxPosition, "pos");
            String posCcy = getJsonStringValue(okxPosition, "posCcy");
            String avgPx = getJsonStringValue(okxPosition, "avgPx");
            String markPx = getJsonStringValue(okxPosition, "markPx");
            String upl = getJsonStringValue(okxPosition, "upl");
            String uplRatio = getJsonStringValue(okxPosition, "uplRatio");
            String realizedPnlUSDT = getJsonStringValue(okxPosition, "realizedPnl");
            String lever = getJsonStringValue(okxPosition, "lever");
            String margin = getJsonStringValue(okxPosition, "margin");
            String imr = getJsonStringValue(okxPosition, "imr");
            String mmr = getJsonStringValue(okxPosition, "mmr");
            String notionalUsd = getJsonStringValue(okxPosition, "notionalUsd");
            String interest = getJsonStringValue(okxPosition, "interest");
            String tradeId = getJsonStringValue(okxPosition, "tradeId");
            String cTime = getJsonStringValue(okxPosition, "cTime");
            String uTime = getJsonStringValue(okxPosition, "uTime");
            String ccy = getJsonStringValue(okxPosition, "ccy");
            String bePx = getJsonStringValue(okxPosition, "bePx");
            String fee = getJsonStringValue(okxPosition, "fee");
            String fundingFee = getJsonStringValue(okxPosition, "fundingFee");

            if ("N/A".equals(instId)) {
                log.debug("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Å –ø—É—Å—Ç—ã–º instId");
                return;
            }

            // –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –ü–û–õ–ï–ô –° –†–£–°–°–ö–ò–ú–ò –ü–û–î–ü–ò–°–Ø–ú–ò –ò –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ú–ò –ó–ù–ê–ß–ï–ù–ò–Ø–ú–ò
            log.debug("üìä === –ü–û–õ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–ó–ò–¶–ò–ò OKX ===");
            log.debug("üîπ instId         : {} (ID –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞)", instId);
            log.debug("üîπ instType       : {} (—Ç–∏–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞)", instType);
            log.debug("üîπ mgnMode        : {} (—Ä–µ–∂–∏–º –º–∞—Ä–∂–∏)", mgnMode);
            log.debug("üîπ posId          : {} (ID –ø–æ–∑–∏—Ü–∏–∏)", posId);
            log.debug("üîπ posSide        : {} (–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏: long/short)", posSide);
            log.debug("üîπ pos            : {} {} (—Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏)", pos, posCcy);
            log.debug("üîπ posCcy         : {} (–≤–∞–ª—é—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏)", posCcy);
            log.debug("üîπ ccy            : {} (–±–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞)", ccy);
            log.debug("üîπ avgPx          : {} USDT (—Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞)", avgPx);
            log.debug("üîπ markPx         : {} USDT (–º–∞—Ä–∫–∏—Ä–æ–≤–æ—á–Ω–∞—è —Ü–µ–Ω–∞)", markPx);
            log.debug("üîπ upl            : {} USDT (–Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL)", upl);
            log.debug("üîπ uplRatio       : {} % (PnL –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)", uplRatio);
            log.debug("üîπ realizedPnl    : {} USDT (—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL)", realizedPnlUSDT);
            log.debug("üîπ bePx           : {} USDT (—Ü–µ–Ω–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏)", bePx);
            log.debug("üîπ lever          : {}x (–ø–ª–µ—á–æ)", lever);
            log.debug("üîπ margin         : {} USDT (–∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –º–∞—Ä–∂–∞)", margin);
            log.debug("üîπ imr            : {} USDT (–Ω–∞—á–∞–ª—å–Ω–∞—è –º–∞—Ä–∂–∞)", imr);
            log.debug("üîπ mmr            : {} USDT (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è –º–∞—Ä–∂–∞)", mmr);
            log.debug("üîπ notionalUsd    : {} USD (—É—Å–ª–æ–≤–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å)", notionalUsd);
            log.debug("üîπ interest       : {} (–ø—Ä–æ—Ü–µ–Ω—Ç—ã)", interest);
            log.debug("üîπ tradeId        : {} (ID —Å–¥–µ–ª–∫–∏)", tradeId);
            log.debug("üîπ cTime          : {} (–≤—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏)", cTime);
            log.debug("üîπ uTime          : {} (–≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)", uTime);
            log.debug("üîπ fee            : {} USDT (–≤—Å–µ –∫–æ–º–∏—Å—Å–∏–∏ –ø–æ –ø–æ–∑–∏—Ü–∏–∏)", fee);
            log.debug("üîπ fundingFee     : {} USDT (—Ñ–∞–Ω–¥–∏–Ω–≥ –∫–æ–º–∏—Å—Å–∏—è)", fundingFee);
            log.debug("üìä === –ö–û–ù–ï–¶ –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ü–û–ó–ò–¶–ò–ò ===");

            BigDecimal scaledAvgPx = safeScale(avgPx, 8);
            BigDecimal scaledMarkPx = safeScale(markPx, 8);
            BigDecimal scaledUpl = safeScale(upl, 8);
            BigDecimal scaledUplRatio = safeScale(uplRatio, 8);
            BigDecimal scaledMargin = safeScale(margin, 8);

            BigDecimal scaledRealizedPnl = safeScale(realizedPnlUSDT, 8);
            BigDecimal scaledFee = safeScale(fee, 8);
            BigDecimal scaledFundingFee = safeScale(fundingFee, 8);
            // –ò—â–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –ø–æ–∑–∏—Ü–∏—é
            Position internalPosition = findPositionBySymbol(instId);
            if (internalPosition != null) {
                if (scaledMarkPx != null) {
                    internalPosition.setCurrentPrice(scaledMarkPx);
                }
                if (scaledUpl != null) {
                    internalPosition.setUnrealizedPnLUSDT(scaledUpl);
                }
                if (scaledUplRatio != null) {
                    internalPosition.setUnrealizedPnLPercent(scaledUplRatio.multiply(BigDecimal.valueOf(100))); // 0.02 -> 2
                }
                if (scaledRealizedPnl != null) {
                    internalPosition.setRealizedPnLUSDT(scaledRealizedPnl);
                }
                if (scaledAvgPx != null) {
                    internalPosition.setEntryPrice(scaledAvgPx);
                }
                if (!"N/A".equals(pos)) {
                    internalPosition.setSize(new BigDecimal(pos).abs());
                }
                if (scaledFee != null) {
                    internalPosition.setOpeningFees(scaledFee);
                }
                if (scaledFundingFee != null) {
                    internalPosition.setFundingFees(scaledFundingFee);
                }
                if (scaledMargin != null) {
                    internalPosition.setAllocatedAmount(scaledMargin);
                }

                internalPosition.setLastUpdated(LocalDateTime.now());

                log.debug("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è {}: –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL={} USDT ({} %), —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL={} USDT, —Ü–µ–Ω–∞={}, —Ä–∞–∑–º–µ—Ä={}, –º–∞—Ä–∂–∞={}, –∫–æ–º–∏—Å—Å–∏—è={}, –∫–æ–º–∏—Å—Å–∏—è –∑–∞ —Ñ–∞–Ω–¥–∏–Ω–≥={}",
                        instId,
                        internalPosition.getUnrealizedPnLUSDT(),
                        internalPosition.getUnrealizedPnLPercent(),
                        internalPosition.getRealizedPnLUSDT(),
                        internalPosition.getCurrentPrice(),
                        internalPosition.getSize(),
                        internalPosition.getAllocatedAmount(),
                        internalPosition.getOpeningFees(),
                        internalPosition.getFundingFees()
                );
            } else {
                log.debug("‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è {} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º", instId);
            }

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö OKX: {}", e.getMessage(), e);
        }
    }

    /**
     * –ù–∞—Ö–æ–¥–∏—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –ø–æ–∑–∏—Ü–∏—é –ø–æ —Å–∏–º–≤–æ–ª—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
     */
    private Position findPositionBySymbol(String symbol) {
        log.debug("üîç findPositionBySymbol: –ü–æ–∏—Å–∫ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ '{}'", symbol);
        log.debug("üîç findPositionBySymbol: –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π –≤ –ø–∞–º—è—Ç–∏: {}", positions.size());

        positions.values().forEach(pos -> {
            log.debug("üîç findPositionBySymbol: –ü–æ–∑–∏—Ü–∏—è {} - —Å–∏–º–≤–æ–ª='{}', —Å—Ç–∞—Ç—É—Å={}",
                    pos.getPositionId(), pos.getSymbol(), pos.getStatus());
        });

        Position found = positions.values().stream()
                .filter(pos -> symbol.equals(pos.getSymbol()))
                .filter(pos -> pos.getStatus() == PositionStatus.OPEN)
                .findFirst()
                .orElse(null);

        log.debug("üîç findPositionBySymbol: –ù–∞–π–¥–µ–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è '{}': {}", symbol, found != null ? found.getPositionId() : "–ù–ï –ù–ê–ô–î–ï–ù–ê");

        return found;
    }

    /**
     * –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ lot size —Å —É—á–µ—Ç–æ–º –±—é–¥–∂–µ—Ç–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.
     */
    private BigDecimal adjustPositionSizeToLotSizeWithBudgetLimit(String symbol, BigDecimal maxContracts, BigDecimal userBudget, BigDecimal leverage) {
        try {
            InstrumentInfo instrumentInfo = getInstrumentInfo(symbol);
            if (instrumentInfo == null) {
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—Ä–≥–æ–≤–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ {}", symbol);
                return BigDecimal.ZERO;
            }

            BigDecimal lotSize = instrumentInfo.getLotSize();
            BigDecimal minSize = instrumentInfo.getMinSize();
            BigDecimal ctVal = instrumentInfo.getCtVal();
            BigDecimal currentPrice = getCurrentPrice(symbol);

            log.debug("üìã –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {}: maxContracts={}, lotSize={}, minSize={}, ctVal={}",
                    symbol, maxContracts, lotSize, minSize, ctVal);

            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏, –∫—Ä–∞—Ç–Ω—ã–π lotSize
            BigDecimal adjustedSize = maxContracts.divide(lotSize, 0, RoundingMode.DOWN).multiply(lotSize);

            // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Ä–∞–∑–º–µ—Ä –Ω–µ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ
            if (adjustedSize.compareTo(minSize) < 0) {
                adjustedSize = minSize;

                BigDecimal minLotCost = calculateCost(adjustedSize, ctVal, currentPrice, leverage);
                if (minLotCost.compareTo(userBudget) > 0) {
                    log.error("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–æ—Ç {} —Å—Ç–æ–∏—Ç {} USDT, –ø—Ä–µ–≤—ã—à–∞–µ—Ç –±—é–¥–∂–µ—Ç {} USDT",
                            adjustedSize, minLotCost, userBudget);
                    return BigDecimal.ZERO;
                }
            }

            BigDecimal finalCost = calculateCost(adjustedSize, ctVal, currentPrice, leverage);
            if (finalCost.compareTo(userBudget) > 0) {
                log.error("‚ùå –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å {} USDT –ø—Ä–µ–≤—ã—à–∞–µ—Ç –±—é–¥–∂–µ—Ç {} USDT", finalCost, userBudget);
                return BigDecimal.ZERO;
            }

            log.debug("‚úÖ –û–¥–æ–±—Ä–µ–Ω —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ {} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ (—Å—Ç–æ–∏–º–æ—Å—Ç—å: {} USDT ‚â§ –±—é–¥–∂–µ—Ç: {} USDT)",
                    adjustedSize, finalCost, userBudget);
            return adjustedSize;

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {}: {}", symbol, e.getMessage(), e);
            return BigDecimal.ZERO;
        }
    }

    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º ctVal, —Ü–µ–Ω—ã –∏ –ø–ª–µ—á–∞.
     */
    private BigDecimal calculateCost(BigDecimal size, BigDecimal ctVal, BigDecimal price, BigDecimal leverage) {
        return size.multiply(ctVal).multiply(price).divide(leverage, 2, RoundingMode.HALF_UP);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—Ä–≥–æ–≤–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
     */
    private InstrumentInfo getInstrumentInfo(String symbol) {
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
            InstrumentInfo cachedInfo = instrumentInfoCache.get(symbol);
            if (cachedInfo != null) {
                log.debug("üîç –ò—Å–ø–æ–ª—å–∑—É—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—Ä–≥–æ–≤–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ {}", symbol);
                return cachedInfo;
            }

            String baseUrl = isSandbox ? SANDBOX_BASE_URL : PROD_BASE_URL;
            String endpoint = PUBLIC_INSTRUMENTS_ENDPOINT + "?instType=SWAP&instId=" + symbol;
            String url = baseUrl + endpoint;

            Request request = new Request.Builder().url(url).get().build();

            try (Response response = httpClient.newCall(request).execute()) {
                if (!response.isSuccessful()) {
                    log.error("‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {}: –∫–æ–¥ {}", symbol, response.code());
                    return null;
                }

                String responseBody = response.body().string();
                log.debug("üîç –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {}: {}", symbol, responseBody);

                JsonObject jsonResponse = JsonParser.parseString(responseBody).getAsJsonObject();
                if (!"0".equals(jsonResponse.get("code").getAsString())) {
                    log.error("‚ùå –û—à–∏–±–∫–∞ OKX API –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {}: {}", symbol, jsonResponse.get("msg").getAsString());
                    return null;
                }

                JsonArray data = jsonResponse.getAsJsonArray("data");
                if (data.isEmpty()) {
                    log.warn("‚ö†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö OKX", symbol);
                    return null;
                }

                JsonObject instrument = data.get(0).getAsJsonObject();
                InstrumentInfo info = new InstrumentInfo(
                        symbol,
                        parseBigDecimalSafe(instrument, "lotSz", "1"),
                        parseBigDecimalSafe(instrument, "minSz", "0"),
                        parseBigDecimalSafe(instrument, "minCcyAmt", "0"),
                        parseBigDecimalSafe(instrument, "minNotional", "0"),
                        parseBigDecimalSafe(instrument, "ctVal", "1")
                );

                instrumentInfoCache.put(symbol, info);
                log.debug("üîç –ö—ç—à–∏—Ä–æ–≤–∞–Ω {}: lotSize={}, minSize={}, minCcyAmt={}, minNotional={}, ctVal={}",
                        symbol, info.getLotSize(), info.getMinSize(), info.getMinCcyAmt(), info.getMinNotional(), info.getCtVal());

                return info;
            }

        } catch (Exception e) {
            log.error("‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ {}: {}", symbol, e.getMessage(), e);
            return null;
        }
    }

    private BigDecimal parseBigDecimalSafe(JsonObject json, String key, String defaultValue) {
        try {
            return json.has(key) ? new BigDecimal(json.get(key).getAsString()) : new BigDecimal(defaultValue);
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –ø–æ–ª—è {}: {}", key, e.getMessage());
            return new BigDecimal(defaultValue);
        }
    }


    /**
     * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—Ä–≥–æ–≤–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
     */
    @ToString
    private static class InstrumentInfo {
        private final String symbol;
        private final BigDecimal lotSize;
        private final BigDecimal minSize;
        private final BigDecimal minCcyAmt; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤ –≤–∞–ª—é—Ç–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏
        private final BigDecimal minNotional; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É—Å–ª–æ–≤–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
        private final BigDecimal ctVal; // –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞

        public InstrumentInfo(String symbol, BigDecimal lotSize, BigDecimal minSize, BigDecimal minCcyAmt, BigDecimal minNotional, BigDecimal ctVal) {
            this.symbol = symbol;
            this.lotSize = lotSize;
            this.minSize = minSize;
            this.minCcyAmt = minCcyAmt;
            this.minNotional = minNotional;
            this.ctVal = ctVal;
        }

        public String getSymbol() {
            return symbol;
        }

        public BigDecimal getLotSize() {
            return lotSize;
        }

        public BigDecimal getMinSize() {
            return minSize;
        }

        public BigDecimal getMinCcyAmt() {
            return minCcyAmt;
        }

        public BigDecimal getMinNotional() {
            return minNotional;
        }

        public BigDecimal getCtVal() {
            return ctVal;
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–µ—á–∞ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –Ω–∞ OKX
     */
    private boolean setLeverage(String symbol, BigDecimal leverage) {
        if (!geolocationService.isGeolocationAllowed()) {
            log.error("‚ùå –ë–õ–û–ö–ò–†–û–í–ö–ê: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–µ—á–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏!");
            return false;
        }

        String baseUrl = isSandbox ? SANDBOX_BASE_URL : PROD_BASE_URL;
        String endpoint = SET_LEVERAGE_ENDPOINT;
        String fullUrl = baseUrl + endpoint;

        JsonObject payload = new JsonObject();
        payload.addProperty("instId", symbol);
        payload.addProperty("lever", leverage.toString());
        payload.addProperty("mgnMode", "isolated");

        String timestamp = Instant.now().truncatedTo(ChronoUnit.MILLIS).toString();
        String signature = generateSignature("POST", endpoint, payload.toString(), timestamp);

        RequestBody body = RequestBody.create(payload.toString(), MediaType.get("application/json"));

        Request request = new Request.Builder()
                .url(fullUrl)
                .post(body)
                .addHeader("OK-ACCESS-KEY", apiKey)
                .addHeader("OK-ACCESS-SIGN", signature)
                .addHeader("OK-ACCESS-TIMESTAMP", timestamp)
                .addHeader("OK-ACCESS-PASSPHRASE", passphrase)
                .addHeader("Content-Type", "application/json")
                .build();

        log.debug("üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–µ—á–∞: symbol={}, leverage={}, URL={}", symbol, leverage, fullUrl);

        try (Response response = httpClient.newCall(request).execute()) {
            String responseBody = response.body().string();
            log.debug("üîß –û—Ç–≤–µ—Ç –æ—Ç OKX ({}): {}", response.code(), responseBody);

            if (!response.isSuccessful()) {
                log.error("‚ùå HTTP –æ—à–∏–±–∫–∞: {}", response.code());
                return false;
            }

            JsonObject jsonResponse = JsonParser.parseString(responseBody).getAsJsonObject();
            if ("0".equals(jsonResponse.get("code").getAsString())) {
                log.debug("‚úÖ –ü–ª–µ—á–æ {} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {}", leverage, symbol);
                return true;
            } else {
                log.error("‚ùå –û—à–∏–±–∫–∞ OKX –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–ª–µ—á–∞: {}", jsonResponse.get("msg").getAsString());
                return false;
            }

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–ª–µ—á–∞ –¥–ª—è {}: {}", symbol, e.getMessage(), e);
            return false;
        }
    }


    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ posSide –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ (Net –∏–ª–∏ Hedge).
     *
     * @param intendedPosSide –ñ–µ–ª–∞–µ–º–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ ("long" –∏–ª–∏ "short") ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ Hedge.
     * @return "net" –¥–ª—è Net-—Ä–µ–∂–∏–º–∞, –∏–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π posSide.
     */
    private String determinePosSide(String intendedPosSide) {
        return isHedgeMode() ? intendedPosSide : "net";
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ Hedge-—Ä–µ–∂–∏–º (long_short_mode) –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ OKX.
     *
     * @return true, –µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω Hedge-—Ä–µ–∂–∏–º; false ‚Äî –µ—Å–ª–∏ Net-—Ä–µ–∂–∏–º –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.
     */
    private boolean isHedgeMode() {
        if (!geolocationService.isGeolocationAllowed()) {
            log.error("‚ùå –ë–õ–û–ö–ò–†–û–í–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ –ø–æ–∑–∏—Ü–∏–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏!");
            return false;
        }

        try {
            JsonObject jsonResponse = executeSignedGet(ACCOUNT_CONFIG_ENDPOINT);
            if (jsonResponse == null || !"0".equals(jsonResponse.get("code").getAsString())) {
                log.error("‚ùå –û—à–∏–±–∫–∞ OKX API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {}",
                        jsonResponse != null ? jsonResponse.get("msg").getAsString() : "–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç");
                return false;
            }

            JsonArray data = jsonResponse.getAsJsonArray("data");
            if (data.isEmpty()) {
                log.warn("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø—É—Å—Ç—ã");
                return false;
            }

            String posMode = data.get(0).getAsJsonObject().get("posMode").getAsString();
            boolean isHedge = "long_short_mode".equals(posMode);
            log.debug("üîç –†–µ–∂–∏–º –ø–æ–∑–∏—Ü–∏–π OKX: {} ({})", posMode, isHedge ? "Hedge" : "Net");
            return isHedge;

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ –ø–æ–∑–∏—Ü–∏–π: {}", e.getMessage(), e);
            return false;
        }
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç GET-–∑–∞–ø—Ä–æ—Å —Å –ø–æ–¥–ø–∏—Å—è–º–∏ OKX –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É API.
     */
    private JsonObject executeSignedGet(String endpoint) throws IOException {
        String baseUrl = isSandbox ? SANDBOX_BASE_URL : PROD_BASE_URL;
        String timestamp = Instant.now().truncatedTo(ChronoUnit.MILLIS).toString();
        String signature = generateSignature("GET", endpoint, "", timestamp);

        Request request = new Request.Builder()
                .url(baseUrl + endpoint)
                .addHeader("OK-ACCESS-KEY", apiKey)
                .addHeader("OK-ACCESS-SIGN", signature)
                .addHeader("OK-ACCESS-TIMESTAMP", timestamp)
                .addHeader("OK-ACCESS-PASSPHRASE", passphrase)
                .build();

        try (Response response = httpClient.newCall(request).execute()) {
            String responseBody = response.body().string();
            log.debug("üì° –û—Ç–≤–µ—Ç –æ—Ç OKX API [{}]: {}", endpoint, responseBody);
            return JsonParser.parseString(responseBody).getAsJsonObject();
        }
    }


    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏–∏ —Å OKX API –ø–æ —Å–∏–º–≤–æ–ª—É
     */
    private JsonObject getRealPositionFromOkx(String symbol) {
        log.debug("==> getRealPositionFromOkx: –ó–∞–ø—Ä–æ—Å —Ä–µ–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {}", symbol);

        if (!geolocationService.isGeolocationAllowed()) {
            log.error("‚ùå –ë–õ–û–ö–ò–†–û–í–ö–ê: –ó–∞–ø—Ä–æ—Å –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏!");
            return null;
        }

        try {
            String endpoint = TRADE_POSITIONS_ENDPOINT + "?instId=" + symbol;
            JsonObject jsonResponse = executeSignedGet(endpoint);

            if (jsonResponse == null || !"0".equals(jsonResponse.get("code").getAsString())) {
                log.error("‚ùå –û—à–∏–±–∫–∞ OKX API –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–∑–∏—Ü–∏–∏ {}: {}",
                        symbol, jsonResponse != null ? jsonResponse.get("msg").getAsString() : "–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç");
                return null;
            }

            JsonArray data = jsonResponse.getAsJsonArray("data");
            if (data.isEmpty()) {
                log.info("üìã –ü–æ–∑–∏—Ü–∏—è –¥–ª—è {} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–º–∞—Å—Å–∏–≤ data –ø—É—Å—Ç)", symbol);
                return null;
            }

            JsonObject positionData = data.get(0).getAsJsonObject();
            log.debug("‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —Ä–µ–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è {}: {}", symbol, positionData);
            return positionData;

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–µ–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {}: {}", symbol, e.getMessage(), e);
            return null;
        }
    }


    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–∑–∏—Ü–∏–∏ —Å OKX
     */
    private void logRealPositionData(String symbol, String operationType) {
        log.debug("==> logRealPositionData: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ {} –ø–æ—Å–ª–µ {}", symbol, operationType);
        try {
            Thread.sleep(1000); // –ü–∞—É–∑–∞ –¥–ª—è –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –≤ OKX

            JsonObject data = getRealPositionFromOkx(symbol);
            if (data == null) {
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {}", symbol);
                return;
            }

            Map<String, String> fields = new LinkedHashMap<>();
            fields.put("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", getJsonStringValue(data, "instId"));
            fields.put("–°—Ç–æ—Ä–æ–Ω–∞ –ø–æ–∑–∏—Ü–∏–∏", getJsonStringValue(data, "posSide"));
            fields.put("–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (–±–∞–∑–æ–≤—ã–µ –µ–¥–∏–Ω–∏—Ü—ã)", getJsonStringValue(data, "pos") + " " + getBaseCurrency(symbol));
            fields.put("–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (–∞–±—Å–æ–ª—é—Ç–Ω—ã–π)", getJsonStringValue(data, "posSize") + " " + getBaseCurrency(symbol));
            fields.put("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞", getJsonStringValue(data, "avgPx") + " USDT");
            fields.put("–¢–µ–∫—É—â–∞—è –º–∞—Ä–∫-—Ü–µ–Ω–∞", getJsonStringValue(data, "markPx") + " USDT");
            fields.put("–£—Å–ª–æ–≤–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", getJsonStringValue(data, "notionalUsd") + " USD");
            fields.put("–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –º–∞—Ä–∂–∞", getJsonStringValue(data, "margin") + " USDT");
            fields.put("–ù–∞—á–∞–ª—å–Ω–∞—è –º–∞—Ä–∂–∞", getJsonStringValue(data, "imr") + " USDT");
            fields.put("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è –º–∞—Ä–∂–∞", getJsonStringValue(data, "mmr") + " USDT");
            fields.put("–ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL", getJsonStringValue(data, "upl") + " USDT");
            fields.put("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç PnL", getJsonStringValue(data, "uplRatio") + " %");
            fields.put("–ü–ª–µ—á–æ", getJsonStringValue(data, "lever") + "x");

            log.debug("üîç === –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –ü–û–ó–ò–¶–ò–ò OKX ===");
            fields.forEach((label, value) -> log.debug("üîç {}: {}", label, value));
            log.debug("üîç === –ö–û–ù–ï–¶ –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–• ===");

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {}: {}", symbol, e.getMessage(), e);
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HMAC SHA256 –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è OKX API
     */
    private String generateSignature(String method, String endpoint, String body, String timestamp) {
        String message = timestamp + method + endpoint + body;
        try {
            Mac mac = Mac.getInstance("HmacSHA256");
            SecretKeySpec keySpec = new SecretKeySpec(apiSecret.getBytes(StandardCharsets.UTF_8), "HmacSHA256");
            mac.init(keySpec);
            byte[] hash = mac.doFinal(message.getBytes(StandardCharsets.UTF_8));
            String signature = Base64.getEncoder().encodeToString(hash);

            log.debug("üîè –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏: method={}, endpoint={}, timestamp={}, bodyLength={}, signaturePrefix={}",
                    method, endpoint, timestamp, body.length(), signature.substring(0, Math.min(8, signature.length())) + "...");

            return signature;
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è '{}': {}", message, e.getMessage(), e);
            return "";
        }
    }


    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É –∏–∑ —Å–∏–º–≤–æ–ª–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "BTC" –∏–∑ "BTC-USDT-SWAP").
     *
     * @param symbol –°–∏–º–≤–æ–ª —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "BTC-USDT-SWAP").
     * @return –ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, –µ—Å–ª–∏ —Å–∏–º–≤–æ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.
     */
    private String getBaseCurrency(String symbol) {
        if (symbol == null || symbol.isBlank() || !symbol.contains("-")) {
            log.warn("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç—ã: '{}'", symbol);
            return "";
        }

        String[] parts = symbol.split("-");
        if (parts.length < 2 || parts[0].isBlank()) {
            log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É –∏–∑ —Å–∏–º–≤–æ–ª–∞: '{}'", symbol);
            return "";
        }

        return parts[0];
    }


    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º OKX (minCcyAmt, minNotional).
     *
     * @param symbol         –°–∏–º–≤–æ–ª —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.
     * @param adjustedAmount –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞ –≤ USDT (–º–∞—Ä–∂–∞).
     * @param positionSize   –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ –µ–¥–∏–Ω–∏—Ü–∞—Ö –∞–∫—Ç–∏–≤–∞.
     * @param currentPrice   –¢–µ–∫—É—â–∞—è —Ä—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞.
     * @return null, –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞ –≤–∞–ª–∏–¥–µ–Ω, –∏–Ω–∞—á–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
     */
    private String validateOrderSize(String symbol, BigDecimal adjustedAmount, BigDecimal positionSize, BigDecimal currentPrice) {
        log.debug("==> validateOrderSize: –ù–ê–ß–ê–õ–û | symbol: {}, adjustedAmount: {}, positionSize: {}, currentPrice: {}", symbol, adjustedAmount, positionSize, currentPrice);
        try {
            InstrumentInfo info = getInstrumentInfo(symbol);
            if (info == null) {
                String msg = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—Ä–≥–æ–≤–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ—Ä–¥–µ—Ä–∞.";
                log.error("‚ùå {}", msg);
                return msg;
            }

            BigDecimal minCcyAmt = Optional.ofNullable(info.getMinCcyAmt()).orElse(BigDecimal.ZERO);
            BigDecimal minNotional = Optional.ofNullable(info.getMinNotional()).orElse(BigDecimal.ZERO);

            log.debug("‚ÑπÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: minCcyAmt = {}, minNotional = {}", minCcyAmt, minNotional);

            if (adjustedAmount.compareTo(minCcyAmt) < 0) {
                String error = String.format("–°—É–º–º–∞ –º–∞—Ä–∂–∏ %.2f USDT –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π %.2f USDT.", adjustedAmount, minCcyAmt);
                log.warn("‚ö†Ô∏è {}", error);
                return error;
            }

            BigDecimal notionalValue = positionSize.multiply(currentPrice);
            log.debug("‚ÑπÔ∏è –£—Å–ª–æ–≤–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–¥–µ–ª–∫–∏: {}", notionalValue);

            if (notionalValue.compareTo(minNotional) < 0) {
                String error = String.format("–£—Å–ª–æ–≤–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–¥–µ–ª–∫–∏ %.2f USDT –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π %.2f USDT.", notionalValue, minNotional);
                log.warn("‚ö†Ô∏è {}", error);
                return error;
            }

            log.debug("<== validateOrderSize: –ö–û–ù–ï–¶ (—É—Å–ø–µ—à–Ω–æ) –¥–ª—è {}", symbol);
            return null;

        } catch (Exception e) {
            String errorMsg = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ—Ä–¥–µ—Ä–∞: " + e.getMessage();
            log.error("‚ùå {} –¥–ª—è {}", errorMsg, symbol, e);
            return errorMsg;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –æ—Ç OKX API
     */
    public List<OkxPositionHistoryData> getPositionsHistory(String symbol) {
        log.info("==> getPositionsHistory: –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è {}", symbol);

        if (!geolocationService.isGeolocationAllowed()) {
            log.error("‚ùå –ë–õ–û–ö–ò–†–û–í–ö–ê: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∑–∏—Ü–∏–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∏–∑-–∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏!");
            return Collections.emptyList();
        }

        try {
            String baseUrl = isSandbox ? SANDBOX_BASE_URL : PROD_BASE_URL;
            String endpoint = POSITIONS_HISTORY_ENDPOINT + "?instType=SWAP&instId=" + symbol;

            String timestamp = Instant.now().truncatedTo(ChronoUnit.MILLIS).toString();
            String signature = generateSignature("GET", endpoint, "", timestamp);

            Request request = new Request.Builder()
                    .url(baseUrl + endpoint)
                    .addHeader("OK-ACCESS-KEY", apiKey)
                    .addHeader("OK-ACCESS-SIGN", signature)
                    .addHeader("OK-ACCESS-TIMESTAMP", timestamp)
                    .addHeader("OK-ACCESS-PASSPHRASE", passphrase)
                    .build();

            try (Response response = httpClient.newCall(request).execute()) {
                String responseBody = response.body().string();
                log.info("–û—Ç–≤–µ—Ç OKX –Ω–∞ –∑–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∑–∏—Ü–∏–π {}: HTTP {} | {}", symbol, response.code(), responseBody);

                JsonObject jsonResponse = JsonParser.parseString(responseBody).getAsJsonObject();
                if (!"0".equals(jsonResponse.get("code").getAsString())) {
                    log.error("‚ùå –û—à–∏–±–∫–∞ OKX API –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∑–∏—Ü–∏–π {}: {}", symbol, jsonResponse.get("msg").getAsString());
                    return Collections.emptyList();
                }

                JsonArray data = jsonResponse.getAsJsonArray("data");
                List<OkxPositionHistoryData> historyList = new ArrayList<>();

                for (JsonElement element : data) {
                    JsonObject positionJson = element.getAsJsonObject();
                    OkxPositionHistoryData historyData = parsePositionHistory(positionJson);
                    if (historyData != null) {
                        historyList.add(historyData);
                    }
                }

                log.info("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {} –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è {}", historyList.size(), symbol);
                return historyList;

            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è {}: {}", symbol, e.getMessage(), e);
            return Collections.emptyList();
        }
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ JSON OKX
     */
    private OkxPositionHistoryData parsePositionHistory(JsonObject positionJson) {
        try {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
            String instType = getJsonStringValue(positionJson, "instType");
            String instId = getJsonStringValue(positionJson, "instId");
            String posId = getJsonStringValue(positionJson, "posId");
            String posType = getJsonStringValue(positionJson, "posType");
            String openSize = getJsonStringValue(positionJson, "openSize");
            String closeSize = getJsonStringValue(positionJson, "closeSize");
            String avgOpenPrice = getJsonStringValue(positionJson, "avgOpenPrice");
            String avgClosePrice = getJsonStringValue(positionJson, "avgClosePrice");
            String realizedPnl = getJsonStringValue(positionJson, "realizedPnl");
            String pnl = getJsonStringValue(positionJson, "pnl");
            String pnlRatio = getJsonStringValue(positionJson, "pnlRatio");
            String openTime = getJsonStringValue(positionJson, "openTime");
            String closeTime = getJsonStringValue(positionJson, "closeTime");
            String ccy = getJsonStringValue(positionJson, "ccy");
            String lever = getJsonStringValue(positionJson, "lever");
            String margin = getJsonStringValue(positionJson, "margin");
            String fee = getJsonStringValue(positionJson, "fee");
            String fundingFee = getJsonStringValue(positionJson, "fundingFee");

            // –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –ü–û–õ–ï–ô –° –†–£–°–°–ö–ò–ú–ò –ü–û–î–ü–ò–°–Ø–ú–ò
            log.debug("üìä === –ü–û–õ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –ò–°–¢–û–†–ò–ò –ü–û–ó–ò–¶–ò–ò OKX ===");
            log.debug("üîπ instType       : {} (—Ç–∏–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞)", instType);
            log.debug("üîπ instId         : {} (ID –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞)", instId);
            log.debug("üîπ posId          : {} (ID –ø–æ–∑–∏—Ü–∏–∏)", posId);
            log.debug("üîπ posType        : {} (—Ç–∏–ø –ø–æ–∑–∏—Ü–∏–∏: long/short)", posType);
            log.debug("üîπ openSize       : {} (—Ä–∞–∑–º–µ—Ä –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏)", openSize);
            log.debug("üîπ closeSize      : {} (—Ä–∞–∑–º–µ—Ä –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏)", closeSize);
            log.debug("üîπ avgOpenPrice   : {} (—Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è)", avgOpenPrice);
            log.debug("üîπ avgClosePrice  : {} (—Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è)", avgClosePrice);
            log.debug("üîπ realizedPnl    : {} (—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL)", realizedPnl);
            log.debug("üîπ pnl            : {} (–æ–±—â–∏–π PnL)", pnl);
            log.debug("üîπ pnlRatio       : {} (PnL –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)", pnlRatio);
            log.debug("üîπ openTime       : {} (–≤—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è)", openTime);
            log.debug("üîπ closeTime      : {} (–≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è)", closeTime);
            log.debug("üîπ ccy            : {} (–≤–∞–ª—é—Ç–∞)", ccy);
            log.debug("üîπ lever          : {} (–ø–ª–µ—á–æ)", lever);
            log.debug("üîπ margin         : {} (–º–∞—Ä–∂–∞)", margin);
            log.debug("üîπ fee            : {} (–∫–æ–º–∏—Å—Å–∏—è)", fee);
            log.debug("üîπ fundingFee     : {} (—Ñ–∞–Ω–¥–∏–Ω–≥ –∫–æ–º–∏—Å—Å–∏—è)", fundingFee);
            log.debug("üìä === –ö–û–ù–ï–¶ –ò–ù–§–û–†–ú–ê–¶–ò–ò –û–ë –ò–°–¢–û–†–ò–ò –ü–û–ó–ò–¶–ò–ò ===");

            OkxPositionHistoryData historyData = new OkxPositionHistoryData();
            historyData.setInstrumentType(instType);
            historyData.setInstrumentId(instId);
            historyData.setPositionId(posId);
            historyData.setPositionType(posType);

            historyData.setOpenSize(safeParseDecimal(openSize));
            historyData.setCloseSize(safeParseDecimal(closeSize));
            historyData.setAverageOpenPrice(safeParseDecimal(avgOpenPrice));
            historyData.setAverageClosePrice(safeParseDecimal(avgClosePrice));
            historyData.setRealizedPnl(safeParseDecimal(realizedPnl));
            historyData.setPnl(safeParseDecimal(pnl));
            historyData.setPnlRatio(safeParseDecimal(pnlRatio));

            historyData.setOpenTime(openTime);
            historyData.setCloseTime(closeTime);
            historyData.setCurrency(ccy);
            historyData.setLeverage(safeParseDecimal(lever));
            historyData.setMargin(safeParseDecimal(margin));
            historyData.setFee(safeParseDecimal(fee));
            historyData.setFundingFee(safeParseDecimal(fundingFee));

            return historyData;
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {}", e.getMessage(), e);
            return null;
        }
    }

    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ BigDecimal –∏–∑ —Å—Ç—Ä–æ–∫–∏
     */
    private BigDecimal safeParseDecimal(String value) {
        if (value == null || value.isEmpty() || "N/A".equals(value)) {
            return BigDecimal.ZERO;
        }
        try {
            return new BigDecimal(value);
        } catch (Exception e) {
            log.debug("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —á–∏—Å–ª–∞ '{}': {}", value, e.getMessage());
            return BigDecimal.ZERO;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ P&L –æ—Ç OKX API –¥–ª—è –∑–∞–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
     */
    public OkxPositionHistoryData getRealizedPnLFromOkx(String symbol, String positionId) {
        log.debug("==> getRealizedPnLFromOkx: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ P&L –¥–ª—è {} (–ø–æ–∑–∏—Ü–∏—è: {})", symbol, positionId);

        // –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞–π—Ç–∏ –ø–æ–∑–∏—Ü–∏—é –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
        int maxAttempts = 3;
        int attemptDelayMs = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏

        for (int attempt = 1; attempt <= maxAttempts; attempt++) {
            log.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ {}/{} –ø–æ–∏—Å–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ {} –≤ –∏—Å—Ç–æ—Ä–∏–∏ OKX", attempt, maxAttempts, symbol);

            List<OkxPositionHistoryData> history = getPositionsHistory(symbol);

            // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–∫—Ä—ã—Ç—É—é –ø–æ–∑–∏—Ü–∏—é –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
            Optional<OkxPositionHistoryData> latestClosedPosition = history.stream()
                    .filter(h -> h.getCloseTime() != null && !h.getCloseTime().equals("N/A"))
                    .max(Comparator.comparing(OkxPositionHistoryData::getCloseTime));

            if (latestClosedPosition.isPresent()) {
                OkxPositionHistoryData positionData = latestClosedPosition.get();

                // –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –ü–û–õ–ï–ô –ù–ê–ô–î–ï–ù–ù–û–ô –ü–û–ó–ò–¶–ò–ò
                log.info("‚úÖ === –ù–ê–ô–î–ï–ù–ê –ü–û–°–õ–ï–î–ù–Ø–Ø –ó–ê–ö–†–´–¢–ê–Ø –ü–û–ó–ò–¶–ò–Ø {} –ù–ê –ü–û–ü–´–¢–ö–ï {} ===", symbol, attempt);
                log.info("üîπ instrumentType     : {} (—Ç–∏–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞)", positionData.getInstrumentType());
                log.info("üîπ instrumentId       : {} (ID –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞)", positionData.getInstrumentId());
                log.info("üîπ positionId         : {} (ID –ø–æ–∑–∏—Ü–∏–∏)", positionData.getPositionId());
                log.info("üîπ positionType       : {} (—Ç–∏–ø –ø–æ–∑–∏—Ü–∏–∏)", positionData.getPositionType());
                log.info("üîπ openSize           : {} (—Ä–∞–∑–º–µ—Ä –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏)", positionData.getOpenSize());
                log.info("üîπ closeSize          : {} (—Ä–∞–∑–º–µ—Ä –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏)", positionData.getCloseSize());
                log.info("üîπ averageOpenPrice   : {} (—Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è)", positionData.getAverageOpenPrice());
                log.info("üîπ averageClosePrice  : {} (—Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è)", positionData.getAverageClosePrice());
                log.info("üîπ realizedPnl        : {} (—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL)", positionData.getRealizedPnl());
                log.info("üîπ pnl                : {} (–æ–±—â–∏–π PnL)", positionData.getPnl());
                log.info("üîπ pnlRatio           : {} (PnL –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)", positionData.getPnlRatio());
                log.info("üîπ openTime           : {} (–≤—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è)", positionData.getOpenTime());
                log.info("üîπ closeTime          : {} (–≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è)", positionData.getCloseTime());
                log.info("üîπ currency           : {} (–≤–∞–ª—é—Ç–∞)", positionData.getCurrency());
                log.info("üîπ leverage           : {} (–ø–ª–µ—á–æ)", positionData.getLeverage());
                log.info("üîπ margin             : {} (–º–∞—Ä–∂–∞)", positionData.getMargin());
                log.info("üîπ fee                : {} (–∫–æ–º–∏—Å—Å–∏—è)", positionData.getFee());
                log.info("üîπ fundingFee         : {} (—Ñ–∞–Ω–¥–∏–Ω–≥ –∫–æ–º–∏—Å—Å–∏—è)", positionData.getFundingFee());
                log.info("‚úÖ === –ö–û–ù–ï–¶ –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ù–ê–ô–î–ï–ù–ù–û–ô –ü–û–ó–ò–¶–ò–ò ===");

                return positionData;
            }

            // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –∂–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π
            if (attempt < maxAttempts) {
                log.info("‚è≥ –ü–æ–∑–∏—Ü–∏—è {} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∂–¥–µ–º {} –º—Å –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π {}", symbol, attemptDelayMs, attempt + 1);
                try {
                    Thread.sleep(attemptDelayMs);
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    log.warn("‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω –æ–∂–∏–¥–∞–Ω–∏–µ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø–æ–∏—Å–∫–∞ –ø–æ–∑–∏—Ü–∏–∏");
                    break;
                }
            }
        }

        log.warn("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ –∏—Å—Ç–æ—Ä–∏–∏ OKX –¥–ª—è {} –ø–æ—Å–ª–µ {} –ø–æ–ø—ã—Ç–æ–∫ (–ø–æ–∑–∏—Ü–∏—è: {})", symbol, maxAttempts, positionId);
        return null;
    }

    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ JsonObject —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç null
     */
    private String getJsonStringValue(JsonObject jsonObject, String fieldName) {
        if (jsonObject == null || fieldName == null) {
            return "N/A";
        }
        try {
            JsonElement element = jsonObject.get(fieldName);
            if (element != null && !element.isJsonNull()) {
                return element.getAsString();
            }
        } catch (Exception e) {
            log.debug("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –ø–æ–ª—è '{}': {}", fieldName, e.getMessage());
        }
        return "N/A";
    }

}