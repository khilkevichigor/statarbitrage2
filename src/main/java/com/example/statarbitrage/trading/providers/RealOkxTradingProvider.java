package com.example.statarbitrage.trading.providers;

import com.example.statarbitrage.client_okx.OkxClient;
import com.example.statarbitrage.trading.interfaces.TradingProvider;
import com.example.statarbitrage.trading.interfaces.TradingProviderType;
import com.example.statarbitrage.trading.model.*;
import com.example.statarbitrage.trading.services.GeolocationService;
import com.example.statarbitrage.trading.services.OkxPortfolioManager;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import lombok.extern.slf4j.Slf4j;
import okhttp3.*;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.nio.charset.StandardCharsets;
import java.time.Instant;
import java.time.LocalDateTime;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;

/**
 * –†–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è —á–µ—Ä–µ–∑ OKX API
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ OKX –±–∏—Ä–∂—É
 * –í–°–ï –ú–ï–¢–û–î–´ –ü–û–õ–ù–û–°–¢–¨–Æ –°–ò–ù–•–†–û–ù–ù–´–ï!
 */
@Slf4j
@Service
public class RealOkxTradingProvider implements TradingProvider {

    private final OkxPortfolioManager okxPortfolioManager;
    private final OkxClient okxClient;
    private final GeolocationService geolocationService;

    // OKX API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    @Value("${okx.api.key:}")
    private String apiKey;

    @Value("${okx.api.secret:}")
    private String apiSecret;

    @Value("${okx.api.passphrase:}")
    private String passphrase;

    @Value("${okx.api.sandbox:true}")
    private boolean isSandbox;

    // HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è OKX API
    private static final OkHttpClient httpClient = new OkHttpClient.Builder()
            .connectTimeout(10, TimeUnit.SECONDS)
            .readTimeout(30, TimeUnit.SECONDS)
            .writeTimeout(10, TimeUnit.SECONDS)
            .build();

    // –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å OKX
    private final ConcurrentHashMap<String, Position> positions = new ConcurrentHashMap<>();
    private final List<TradeResult> tradeHistory = new ArrayList<>();

    // –ö—ç—à –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
    private final ConcurrentHashMap<String, InstrumentInfo> instrumentInfoCache = new ConcurrentHashMap<>();

    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã OKX API
    private static final String PROD_BASE_URL = "https://www.okx.com";
    private static final String SANDBOX_BASE_URL = "https://www.okx.com";
    private static final String TRADE_ORDER_ENDPOINT = "/api/v5/trade/order";
    private static final String TRADE_POSITIONS_ENDPOINT = "/api/v5/account/positions";
    private static final String ACCOUNT_BALANCE_ENDPOINT = "/api/v5/account/balance";
    private static final String MARKET_TICKER_ENDPOINT = "/api/v5/market/ticker";
    private static final String PUBLIC_INSTRUMENTS_ENDPOINT = "/api/v5/public/instruments";
    private static final String ACCOUNT_CONFIG_ENDPOINT = "/api/v5/account/config";
    private static final String SET_LEVERAGE_ENDPOINT = "/api/v5/account/set-leverage";

    public RealOkxTradingProvider(OkxPortfolioManager okxPortfolioManager, OkxClient okxClient, GeolocationService geolocationService) {
        this.okxPortfolioManager = okxPortfolioManager;
        this.okxClient = okxClient;
        this.geolocationService = geolocationService;
    }

    @Override
    public Portfolio getPortfolio() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Å OKX —á–µ—Ä–µ–∑ OkxPortfolioManager
            return okxPortfolioManager.getCurrentPortfolio();
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: {}", e.getMessage());
            return okxPortfolioManager.getCurrentPortfolio();
        }
    }

    @Override
    public boolean hasAvailableBalance(BigDecimal amount) {
        try {
            return okxPortfolioManager.hasAvailableBalance(amount);
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞: {}", e.getMessage());
            return false;
        }
    }

    @Override
    public TradeResult openLongPosition(String symbol, BigDecimal amount, BigDecimal leverage) {
        try {
            if (!preTradeChecks(symbol, amount)) {
                return TradeResult.failure(TradeOperationType.OPEN_LONG, symbol, "–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ—Ç–ª–µ—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏");
            }

            BigDecimal positionSize = calculateAndAdjustPositionSize(symbol, amount, leverage);
            if (positionSize.compareTo(BigDecimal.ZERO) <= 0) {
                return TradeResult.failure(TradeOperationType.OPEN_LONG, symbol, "–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª");
            }

            // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –¥–æ–ª–ª–∞—Ä–æ–≤—É—é —Å—É–º–º—É –ø–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ lot size
            BigDecimal currentPrice = getCurrentPrice(symbol);
            BigDecimal adjustedAmount = positionSize.multiply(currentPrice).divide(leverage, 2, RoundingMode.HALF_UP);
            log.info("üìä {} LONG: –ò—Å—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞: ${}, –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è: ${}, –†–∞–∑–º–µ—Ä: {} –µ–¥–∏–Ω–∏—Ü",
                    symbol, amount, adjustedAmount, positionSize);

            // –ù–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –æ—Ä–¥–µ—Ä–∞
            String validationError = validateOrderSize(symbol, adjustedAmount, positionSize, currentPrice);
            if (validationError != null) {
                return TradeResult.failure(TradeOperationType.OPEN_LONG, symbol, validationError);
            }

            if (!setLeverage(symbol, leverage)) {
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–µ—á–æ {}, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º –ø–ª–µ—á–æ–º", leverage);
            }

            TradeResult orderResult = placeOrder(symbol, "buy", "long", positionSize, leverage);
            if (!orderResult.isSuccess()) {
                return orderResult;
            }

            Position position = createPositionFromTradeResult(orderResult, PositionType.LONG, amount, leverage);
            positions.put(position.getPositionId(), position);
            okxPortfolioManager.onPositionOpened(position);

            tradeHistory.add(orderResult);
            log.info("‚úÖ –û—Ç–∫—Ä—ã—Ç–∞ LONG –ø–æ–∑–∏—Ü–∏—è –Ω–∞ OKX: {} | –†–∞–∑–º–µ—Ä: {} | –¶–µ–Ω–∞: {} | OrderID: {}",
                    symbol, position.getSize(), position.getEntryPrice(), position.getExternalOrderId());

            return orderResult;

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ LONG –ø–æ–∑–∏—Ü–∏–∏ {}: {}", symbol, e.getMessage());
            return TradeResult.failure(TradeOperationType.OPEN_LONG, symbol, e.getMessage());
        }
    }

    @Override
    public TradeResult openShortPosition(String symbol, BigDecimal amount, BigDecimal leverage) {
        try {
            if (!preTradeChecks(symbol, amount)) {
                return TradeResult.failure(TradeOperationType.OPEN_SHORT, symbol, "–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ—Ç–ª–µ—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏");
            }

            BigDecimal positionSize = calculateAndAdjustPositionSize(symbol, amount, leverage);
            if (positionSize.compareTo(BigDecimal.ZERO) <= 0) {
                return TradeResult.failure(TradeOperationType.OPEN_SHORT, symbol, "–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª");
            }

            // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –¥–æ–ª–ª–∞—Ä–æ–≤—É—é —Å—É–º–º—É –ø–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ lot size
            BigDecimal currentPrice = getCurrentPrice(symbol);
            BigDecimal adjustedAmount = positionSize.multiply(currentPrice).divide(leverage, 2, RoundingMode.HALF_UP);
            log.info("üìä {} SHORT: –ò—Å—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞: ${}, –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è: ${}, –†–∞–∑–º–µ—Ä: {} –µ–¥–∏–Ω–∏—Ü",
                    symbol, amount, adjustedAmount, positionSize);

            // –ù–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –æ—Ä–¥–µ—Ä–∞
            String validationError = validateOrderSize(symbol, adjustedAmount, positionSize, currentPrice);
            if (validationError != null) {
                return TradeResult.failure(TradeOperationType.OPEN_SHORT, symbol, validationError);
            }

            if (!setLeverage(symbol, leverage)) {
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–µ—á–æ {}, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º –ø–ª–µ—á–æ–º", leverage);
            }

            TradeResult orderResult = placeOrder(symbol, "sell", "short", positionSize, leverage);
            if (!orderResult.isSuccess()) {
                return orderResult;
            }

            Position position = createPositionFromTradeResult(orderResult, PositionType.SHORT, amount, leverage);
            positions.put(position.getPositionId(), position);
            okxPortfolioManager.onPositionOpened(position);

            tradeHistory.add(orderResult);
            log.info("‚úÖ –û—Ç–∫—Ä—ã—Ç–∞ SHORT –ø–æ–∑–∏—Ü–∏—è –Ω–∞ OKX: {} | –†–∞–∑–º–µ—Ä: {} | –¶–µ–Ω–∞: {} | OrderID: {}",
                    symbol, position.getSize(), position.getEntryPrice(), position.getExternalOrderId());

            return orderResult;

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ SHORT –ø–æ–∑–∏—Ü–∏–∏ {}: {}", symbol, e.getMessage());
            return TradeResult.failure(TradeOperationType.OPEN_SHORT, symbol, e.getMessage());
        }
    }

    @Override
    public TradeResult closePosition(String positionId) {
        try {
            Position position = positions.get(positionId);
            if (position == null) {
                return TradeResult.failure(TradeOperationType.CLOSE_POSITION, "UNKNOWN",
                        "–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: " + positionId);
            }

            if (position.getStatus() != PositionStatus.OPEN) {
                return TradeResult.failure(TradeOperationType.CLOSE_POSITION, position.getSymbol(),
                        "–ü–æ–∑–∏—Ü–∏—è –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞: " + position.getStatus());
            }

            // 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ä–µ–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π –∏ –∫–æ–º–∏—Å—Å–∏–µ–π
            TradeResult closeOrderResult = placeCloseOrder(position);
            if (!closeOrderResult.isSuccess()) {
                return closeOrderResult; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –æ—Ä–¥–µ—Ä
            }

            // 2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL, –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ä–¥–µ—Ä–∞
            position.calculateAndSetRealizedPnL(closeOrderResult.getExecutionPrice(), closeOrderResult.getFees());

            // 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–∑–∏—Ü–∏–∏
            position.setStatus(PositionStatus.CLOSED);
            position.setLastUpdated(LocalDateTime.now());

            // 4. –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏
            okxPortfolioManager.releaseReservedBalance(position.getAllocatedAmount());
            BigDecimal totalFees = position.getOpeningFees().add(position.getClosingFees());
            okxPortfolioManager.onPositionClosed(position, position.getRealizedPnL(), totalFees);

            // 5. –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
            TradeResult finalResult = TradeResult.success(positionId, TradeOperationType.CLOSE_POSITION,
                    position.getSymbol(), closeOrderResult.getExecutedSize(), closeOrderResult.getExecutionPrice(), closeOrderResult.getFees(), closeOrderResult.getExternalOrderId());
            finalResult.setPnl(position.getRealizedPnL());
            finalResult.setExternalOrderId(closeOrderResult.getExternalOrderId());

            tradeHistory.add(finalResult);

            log.info("‚ö´ –ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –Ω–∞ OKX: {} {} | –¶–µ–Ω–∞: {} | PnL: {} | OrderID: {}",
                    position.getSymbol(), position.getDirectionString(),
                    finalResult.getExecutionPrice(), finalResult.getPnl(), finalResult.getExternalOrderId());

            return finalResult;

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ {}: {}", positionId, e.getMessage());
            return TradeResult.failure(TradeOperationType.CLOSE_POSITION, "UNKNOWN", e.getMessage());
        }
    }

    @Override
    public List<Position> getActivePositions() {
        try {
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å OKX
            syncPositionsWithOkx();
            return new ArrayList<>(positions.values());
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {}", e.getMessage());
            return new ArrayList<>(positions.values());
        }
    }

    @Override
    public Position getPosition(String positionId) {
        return positions.get(positionId);
    }

//    @Override
//    public boolean isPositionOpen(PairData pairData) {
//        return false;
//    }

    @Override
    public void updatePositionPrices() {
        try {
            for (Position position : positions.values()) {
                try {
                    BigDecimal currentPrice = getCurrentPrice(position.getSymbol());
                    if (currentPrice != null) {
                        position.setCurrentPrice(currentPrice);
                        position.calculateUnrealizedPnL();
                        position.setLastUpdated(LocalDateTime.now());
                    }
                } catch (Exception e) {
                    log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {}: {}",
                            position.getPositionId(), e.getMessage());
                }
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
            okxPortfolioManager.updatePortfolioValue();

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω –ø–æ–∑–∏—Ü–∏–π: {}", e.getMessage());
        }
    }

    @Override
    public void updatePositionPrices(List<String> tickers) {
        try {
            for (Position position : positions.values()) {
                try {
                    if (tickers.contains(position.getSymbol())) {
                        BigDecimal currentPrice = getCurrentPrice(position.getSymbol());
                        if (currentPrice != null) {
                            position.setCurrentPrice(currentPrice);
                            position.calculateUnrealizedPnL();
                            position.setLastUpdated(LocalDateTime.now());
                        }
                    }
                } catch (Exception e) {
                    log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {}: {}",
                            position.getPositionId(), e.getMessage());
                }
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
            okxPortfolioManager.updatePortfolioValue();

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω –ø–æ–∑–∏—Ü–∏–π: {}", e.getMessage());
        }
    }

    @Override
    public BigDecimal getCurrentPrice(String symbol) {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π OkxClient –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã
            JsonArray ticker = okxClient.getTicker(symbol);
            if (ticker != null && ticker.size() > 0) {
                JsonObject tickerData = ticker.get(0).getAsJsonObject();
                String lastPrice = tickerData.get("last").getAsString();
                return new BigDecimal(lastPrice);
            }
            return null;
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã –¥–ª—è {}: {}", symbol, e.getMessage());
            return null;
        }
    }

    @Override
    public BigDecimal calculateFees(BigDecimal amount, BigDecimal leverage) {
        // OKX –∫–æ–º–∏—Å—Å–∏—è –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤: 0.02% maker, 0.05% taker
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º taker –∫–æ–º–∏—Å—Å–∏—é –¥–ª—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
        BigDecimal feeRate = BigDecimal.valueOf(0.0005); // 0.05%
        return amount.multiply(leverage).multiply(feeRate);
    }

    @Override
    public TradingProviderType getProviderType() {
        return TradingProviderType.REAL_OKX;
    }

    @Override
    public boolean isConnected() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π
            if (apiKey == null || apiKey.isEmpty() ||
                    apiSecret == null || apiSecret.isEmpty() ||
                    passphrase == null || passphrase.isEmpty()) {
                log.warn("‚ö†Ô∏è OKX API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã");
                return false;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–º –∫ API
            return checkApiConnection();
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OKX: {}", e.getMessage());
            return false;
        }
    }

    @Override
    public List<TradeResult> getTradeHistory(int limit) {
        return tradeHistory.stream()
                .sorted((a, b) -> b.getExecutionTime().compareTo(a.getExecutionTime()))
                .limit(limit)
                .toList();
    }

    // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OKX API

    private TradeResult placeOrder(String symbol, String side, String posSide, BigDecimal size, BigDecimal leverage) {
        try {
            if (!geolocationService.isGeolocationAllowed()) {
                log.error("‚ùå –ë–õ–û–ö–ò–†–û–í–ö–ê: –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∏–∑-–∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏!");
                return TradeResult.failure(TradeOperationType.OPEN_LONG, symbol, "–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞");
            }

            String baseUrl = isSandbox ? SANDBOX_BASE_URL : PROD_BASE_URL;
            String endpoint = TRADE_ORDER_ENDPOINT;
            String correctPosSide = determinePosSide(posSide);

            JsonObject orderData = new JsonObject();
            orderData.addProperty("instId", symbol);
            orderData.addProperty("tdMode", "isolated");
            orderData.addProperty("side", side);
            orderData.addProperty("posSide", correctPosSide);
            orderData.addProperty("ordType", "market");
            orderData.addProperty("sz", size.toPlainString()); // –¢–µ–ø–µ—Ä—å —ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–∑–æ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞
            orderData.addProperty("szCcy", getBaseCurrency(symbol)); // –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ sz –≤ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ
            orderData.addProperty("lever", leverage.toPlainString());

            log.info("üìã –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ OKX: symbol={}, side={}, posSide={}, szCcy={}, sz={}, leverage={}",
                    symbol, side, correctPosSide, getBaseCurrency(symbol), size, leverage);

            RequestBody body = RequestBody.create(orderData.toString(), MediaType.get("application/json"));
            String timestamp = Instant.now().truncatedTo(java.time.temporal.ChronoUnit.MILLIS).toString();
            String signature = generateSignature("POST", endpoint, orderData.toString(), timestamp);

            Request request = new Request.Builder()
                    .url(baseUrl + endpoint)
                    .post(body)
                    .addHeader("OK-ACCESS-KEY", apiKey)
                    .addHeader("OK-ACCESS-SIGN", signature)
                    .addHeader("OK-ACCESS-TIMESTAMP", timestamp)
                    .addHeader("OK-ACCESS-PASSPHRASE", passphrase)
                    .addHeader("Content-Type", "application/json")
                    .build();

            try (Response response = httpClient.newCall(request).execute()) {
                String responseBody = response.body().string();
                JsonObject jsonResponse = JsonParser.parseString(responseBody).getAsJsonObject();

                if (!"0".equals(jsonResponse.get("code").getAsString())) {
                    log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {}", responseBody);
                    return TradeResult.failure(TradeOperationType.OPEN_LONG, symbol, jsonResponse.get("msg").getAsString());
                }

                JsonArray data = jsonResponse.getAsJsonArray("data");
                if (data.size() > 0) {
                    String orderId = data.get(0).getAsJsonObject().get("ordId").getAsString();
                    return getOrderDetails(orderId, symbol, Objects.equals(posSide, "long") ? TradeOperationType.OPEN_LONG : TradeOperationType.OPEN_SHORT);
                }
                return TradeResult.failure(TradeOperationType.OPEN_LONG, symbol, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –æ—Ä–¥–µ—Ä–∞");
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {}", e.getMessage());
            return TradeResult.failure(TradeOperationType.OPEN_LONG, symbol, e.getMessage());
        }
    }

    private boolean preTradeChecks(String symbol, BigDecimal amount) {
        if (!isConnected()) {
            log.error("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OKX API");
            return false;
        }
        if (!hasAvailableBalance(amount)) {
            log.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏");
            return false;
        }
        return true;
    }

    private BigDecimal calculateAndAdjustPositionSize(String symbol, BigDecimal amount, BigDecimal leverage) {
        BigDecimal currentPrice = getCurrentPrice(symbol);
        if (currentPrice == null) {
            return BigDecimal.ZERO;
        }
        BigDecimal positionSize = amount.multiply(leverage).divide(currentPrice, 8, RoundingMode.HALF_UP);
        return adjustPositionSizeToLotSize(symbol, positionSize);
    }

    private Position createPositionFromTradeResult(TradeResult tradeResult, PositionType type, BigDecimal amount, BigDecimal leverage) {
        String positionId = UUID.randomUUID().toString();
        return Position.builder()
                .positionId(positionId)
                .symbol(tradeResult.getSymbol())
                .type(type)
                .size(tradeResult.getExecutedSize()) // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                .entryPrice(tradeResult.getExecutionPrice())
                .currentPrice(tradeResult.getExecutionPrice())
                .leverage(leverage)
                .allocatedAmount(amount)
                .openingFees(tradeResult.getFees())
                .status(PositionStatus.OPEN)
                .openTime(LocalDateTime.now())
                .lastUpdated(LocalDateTime.now())
                .externalOrderId(tradeResult.getExternalOrderId())
                .build();
    }

    private TradeResult placeCloseOrder(Position position) {
        try {
            // –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º OKX API
            if (!geolocationService.isGeolocationAllowed()) {
                log.error("‚ùå –ë–õ–û–ö–ò–†–û–í–ö–ê: –ó–∞–∫—Ä—ã—Ç–∏–µ –æ—Ä–¥–µ—Ä–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∏–∑-–∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏!");
                return TradeResult.failure(TradeOperationType.CLOSE_POSITION, position.getSymbol(), "–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞");
            }

            String baseUrl = isSandbox ? SANDBOX_BASE_URL : PROD_BASE_URL;
            String endpoint = TRADE_ORDER_ENDPOINT;

            String side = position.getType() == PositionType.LONG ? "sell" : "buy";
            String correctPosSide = isHedgeMode() ? (side.equals("buy") ? "short" : "long") : "net";

            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
            BigDecimal totalOrderValue = position.getSize().multiply(position.getCurrentPrice());

            JsonObject orderData = new JsonObject();
            orderData.addProperty("instId", position.getSymbol());
            orderData.addProperty("tdMode", "isolated");
            orderData.addProperty("side", side);
            orderData.addProperty("posSide", correctPosSide);
            orderData.addProperty("ordType", "market");
            orderData.addProperty("sz", position.getSize().toPlainString()); // –¢–µ–ø–µ—Ä—å —ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–∑–æ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞
            orderData.addProperty("szCcy", getBaseCurrency(position.getSymbol())); // –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ sz –≤ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ

            RequestBody body = RequestBody.create(orderData.toString(), MediaType.get("application/json"));
            String timestamp = Instant.now().truncatedTo(java.time.temporal.ChronoUnit.MILLIS).toString();
            String signature = generateSignature("POST", endpoint, orderData.toString(), timestamp);

            Request request = new Request.Builder()
                    .url(baseUrl + endpoint)
                    .post(body)
                    .addHeader("OK-ACCESS-KEY", apiKey)
                    .addHeader("OK-ACCESS-SIGN", signature)
                    .addHeader("OK-ACCESS-TIMESTAMP", timestamp)
                    .addHeader("OK-ACCESS-PASSPHRASE", passphrase)
                    .addHeader("Content-Type", "application/json")
                    .build();

            try (Response response = httpClient.newCall(request).execute()) {
                String responseBody = response.body().string();
                JsonObject jsonResponse = JsonParser.parseString(responseBody).getAsJsonObject();

                if (!"0".equals(jsonResponse.get("code").getAsString())) {
                    log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ: {}", responseBody);
                    return TradeResult.failure(TradeOperationType.CLOSE_POSITION, position.getSymbol(), jsonResponse.get("msg").getAsString());
                }

                JsonArray data = jsonResponse.getAsJsonArray("data");
                if (data.size() > 0) {
                    String orderId = data.get(0).getAsJsonObject().get("ordId").getAsString();
                    // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ –¥–µ—Ç–∞–ª–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –∏ –∫–æ–º–∏—Å—Å–∏–∏
                    return getOrderDetails(orderId, position.getSymbol(), TradeOperationType.CLOSE_POSITION);
                }
                return TradeResult.failure(TradeOperationType.CLOSE_POSITION, position.getSymbol(), "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –æ—Ä–¥–µ—Ä–∞");
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ—Ä–¥–µ—Ä–∞: {}", e.getMessage());
            return TradeResult.failure(TradeOperationType.CLOSE_POSITION, position.getSymbol(), e.getMessage());
        }
    }

    private TradeResult getOrderDetails(String orderId, String symbol, TradeOperationType tradeOperationType) {
        if (tradeOperationType == TradeOperationType.OPEN_LONG) {
            log.info("–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ—Ç–∫—Ä—ã—Ç–æ–π LONG –ø–æ–∑–∏—Ü–∏–∏ symbol={} orderId={}", symbol, orderId);
        } else if (tradeOperationType == TradeOperationType.OPEN_SHORT) {
            log.info("–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ—Ç–∫—Ä—ã—Ç–æ–π SHORT –ø–æ–∑–∏—Ü–∏–∏ symbol={} orderId={}", symbol, orderId);
        } else if (tradeOperationType == TradeOperationType.CLOSE_POSITION) {
            log.info("–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ symbol={} orderId={}", symbol, orderId);
        } else {
            log.error("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Å –æ–∫—Ö –¥–ª—è symbol={} orderId={}", symbol, orderId);
        }

        try {
            // –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º OKX API
            if (!geolocationService.isGeolocationAllowed()) {
                log.error("‚ùå –ë–õ–û–ö–ò–†–û–í–ö–ê: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –æ—Ä–¥–µ—Ä–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∏–∑-–∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏!");
                return TradeResult.failure(tradeOperationType, symbol, "–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞");
            }

            // –ü–∞—É–∑–∞, —á—Ç–æ–±—ã –æ—Ä–¥–µ—Ä —É—Å–ø–µ–ª –∏—Å–ø–æ–ª–Ω–∏—Ç—å—Å—è
            Thread.sleep(2000); // 2 —Å–µ–∫—É–Ω–¥—ã

            String baseUrl = isSandbox ? SANDBOX_BASE_URL : PROD_BASE_URL;
            String endpoint = "/api/v5/trade/order?instId=" + symbol + "&ordId=" + orderId;

            String timestamp = Instant.now().truncatedTo(java.time.temporal.ChronoUnit.MILLIS).toString();
            String signature = generateSignature("GET", endpoint, "", timestamp);

            Request request = new Request.Builder()
                    .url(baseUrl + endpoint)
                    .addHeader("OK-ACCESS-KEY", apiKey)
                    .addHeader("OK-ACCESS-SIGN", signature)
                    .addHeader("OK-ACCESS-TIMESTAMP", timestamp)
                    .addHeader("OK-ACCESS-PASSPHRASE", passphrase)
                    .build();

            try (Response response = httpClient.newCall(request).execute()) {
                String responseBody = response.body().string();
                JsonObject jsonResponse = JsonParser.parseString(responseBody).getAsJsonObject();

                if (!"0".equals(jsonResponse.get("code").getAsString())) {
                    log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –æ—Ä–¥–µ—Ä–∞ {}: {}", orderId, responseBody);
                    return TradeResult.failure(TradeOperationType.CLOSE_POSITION, symbol, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –æ—Ä–¥–µ—Ä–∞");
                }

                JsonArray data = jsonResponse.getAsJsonArray("data");
                if (data.size() > 0) {
                    JsonObject orderInfo = data.get(0).getAsJsonObject();
                    BigDecimal avgPx = new BigDecimal(orderInfo.get("avgPx").getAsString());
                    BigDecimal fee = new BigDecimal(orderInfo.get("fee").getAsString()).abs();
                    BigDecimal size = new BigDecimal(orderInfo.get("accFillSz").getAsString());

                    log.info("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ symbol={}: size={} | avgPx={} | fee={} | orderId={}", symbol, size, avgPx, fee, orderId);

                    return TradeResult.success(orderId, TradeOperationType.CLOSE_POSITION, symbol, size, avgPx, fee, orderId);
                }
                return TradeResult.failure(TradeOperationType.CLOSE_POSITION, symbol, "–î–µ—Ç–∞–ª–∏ –æ—Ä–¥–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –æ—Ä–¥–µ—Ä–∞ {}: {}", orderId, e.getMessage());
            return TradeResult.failure(TradeOperationType.CLOSE_POSITION, symbol, e.getMessage());
        }
    }

    private void cancelOrder(String orderId, String symbol) {
        try {
            // –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º OKX API
            if (!geolocationService.isGeolocationAllowed()) {
                log.error("‚ùå –ë–õ–û–ö–ò–†–û–í–ö–ê: –û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏!");
                return;
            }

            String baseUrl = isSandbox ? SANDBOX_BASE_URL : PROD_BASE_URL;
            String endpoint = "/api/v5/trade/cancel-order";

            JsonObject cancelData = new JsonObject();
            cancelData.addProperty("instId", symbol);
            cancelData.addProperty("ordId", orderId);

            RequestBody body = RequestBody.create(
                    cancelData.toString(),
                    MediaType.get("application/json")
            );

            String timestamp = Instant.now().truncatedTo(java.time.temporal.ChronoUnit.MILLIS).toString();
            String signature = generateSignature("POST", endpoint, cancelData.toString(), timestamp);

            Request request = new Request.Builder()
                    .url(baseUrl + endpoint)
                    .post(body)
                    .addHeader("OK-ACCESS-KEY", apiKey)
                    .addHeader("OK-ACCESS-SIGN", signature)
                    .addHeader("OK-ACCESS-TIMESTAMP", timestamp)
                    .addHeader("OK-ACCESS-PASSPHRASE", passphrase)
                    .addHeader("Content-Type", "application/json")
                    .build();

            try (Response response = httpClient.newCall(request).execute()) {
                String responseBody = response.body().string();
                log.info("–û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞ {}: {}", orderId, responseBody);
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ—Ä–¥–µ—Ä–∞ {}: {}", orderId, e.getMessage());
        }
    }

    private boolean checkApiConnection() {
        try {
            // –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º OKX API
            if (!geolocationService.isGeolocationAllowed()) {
                log.error("‚ùå –ë–õ–û–ö–ò–†–û–í–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏!");
                return false;
            }

            String baseUrl = isSandbox ? SANDBOX_BASE_URL : PROD_BASE_URL;
            String endpoint = ACCOUNT_BALANCE_ENDPOINT;

            String timestamp = Instant.now().truncatedTo(java.time.temporal.ChronoUnit.MILLIS).toString();
            String signature = generateSignature("GET", endpoint, "", timestamp);

            Request request = new Request.Builder()
                    .url(baseUrl + endpoint)
                    .addHeader("OK-ACCESS-KEY", apiKey)
                    .addHeader("OK-ACCESS-SIGN", signature)
                    .addHeader("OK-ACCESS-TIMESTAMP", timestamp)
                    .addHeader("OK-ACCESS-PASSPHRASE", passphrase)
                    .build();

            try (Response response = httpClient.newCall(request).execute()) {
                String responseBody = response.body().string();
                log.info("OKX API –∑–∞–ø—Ä–æ—Å: {} {}", baseUrl + endpoint, timestamp);
                log.info("OKX API –æ—Ç–≤–µ—Ç: {}", responseBody);
                JsonObject jsonResponse = JsonParser.parseString(responseBody).getAsJsonObject();
                return "0".equals(jsonResponse.get("code").getAsString());
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OKX API: {}", e.getMessage());
            return false;
        }
    }

    private void updatePortfolioFromOkx() {
        try {
            String baseUrl = isSandbox ? SANDBOX_BASE_URL : PROD_BASE_URL;
            String endpoint = ACCOUNT_BALANCE_ENDPOINT;

            String timestamp = Instant.now().truncatedTo(java.time.temporal.ChronoUnit.MILLIS).toString();
            String signature = generateSignature("GET", endpoint, "", timestamp);

            Request request = new Request.Builder()
                    .url(baseUrl + endpoint)
                    .addHeader("OK-ACCESS-KEY", apiKey)
                    .addHeader("OK-ACCESS-SIGN", signature)
                    .addHeader("OK-ACCESS-TIMESTAMP", timestamp)
                    .addHeader("OK-ACCESS-PASSPHRASE", passphrase)
                    .build();

            try (Response response = httpClient.newCall(request).execute()) {
                String responseBody = response.body().string();
                JsonObject jsonResponse = JsonParser.parseString(responseBody).getAsJsonObject();

                if ("0".equals(jsonResponse.get("code").getAsString())) {
                    JsonArray data = jsonResponse.getAsJsonArray("data");
                    if (data.size() > 0) {
                        JsonObject account = data.get(0).getAsJsonObject();
                        JsonArray details = account.getAsJsonArray("details");

                        for (JsonElement detail : details) {
                            JsonObject currency = detail.getAsJsonObject();
                            String ccy = currency.get("ccy").getAsString();

                            if ("USDT".equals(ccy)) {
                                String availEqStr = currency.get("availEq").getAsString();
                                String eqStr = currency.get("eq").getAsString();

                                BigDecimal availableBalance = new BigDecimal(availEqStr);
                                BigDecimal totalBalance = new BigDecimal(eqStr);

                                // –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥
                                // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
                                okxPortfolioManager.updatePortfolioValue();
                                break;
                            }
                        }
                    }
                }
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Å OKX: {}", e.getMessage());
        }
    }

    private void syncPositionsWithOkx() {
        try {
            String baseUrl = isSandbox ? SANDBOX_BASE_URL : PROD_BASE_URL;
            String endpoint = TRADE_POSITIONS_ENDPOINT;

            String timestamp = Instant.now().truncatedTo(java.time.temporal.ChronoUnit.MILLIS).toString();
            String signature = generateSignature("GET", endpoint, "", timestamp);

            Request request = new Request.Builder()
                    .url(baseUrl + endpoint)
                    .addHeader("OK-ACCESS-KEY", apiKey)
                    .addHeader("OK-ACCESS-SIGN", signature)
                    .addHeader("OK-ACCESS-TIMESTAMP", timestamp)
                    .addHeader("OK-ACCESS-PASSPHRASE", passphrase)
                    .build();

            try (Response response = httpClient.newCall(request).execute()) {
                String responseBody = response.body().string();
                JsonObject jsonResponse = JsonParser.parseString(responseBody).getAsJsonObject();

                if ("0".equals(jsonResponse.get("code").getAsString())) {
                    JsonArray data = jsonResponse.getAsJsonArray("data");

                    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏—è—Ö
                    for (JsonElement positionElement : data) {
                        JsonObject positionData = positionElement.getAsJsonObject();
                        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–π
                        // —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç OKX
                    }
                }
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–π —Å OKX: {}", e.getMessage());
        }
    }

    /**
     * –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ lot size OKX
     */
    private BigDecimal adjustPositionSizeToLotSize(String symbol, BigDecimal positionSize) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—Ä–≥–æ–≤–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
            InstrumentInfo instrumentInfo = getInstrumentInfo(symbol);
            if (instrumentInfo == null) {
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—Ä–≥–æ–≤–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ {}", symbol);
                return positionSize;
            }

            BigDecimal lotSize = instrumentInfo.getLotSize();
            BigDecimal minSize = instrumentInfo.getMinSize();

            log.debug("üîç –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {}: lot size = {}, min size = {}, –∏—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä = {}",
                    symbol, lotSize, minSize, positionSize);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            if (positionSize.compareTo(minSize) < 0) {
                log.warn("‚ö†Ô∏è –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ {} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ {}, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π",
                        positionSize, minSize);
                positionSize = minSize;
            }

            // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –¥–æ –∫—Ä–∞—Ç–Ω–æ–≥–æ lot size
            BigDecimal adjustedSize = positionSize.divide(lotSize, 0, RoundingMode.DOWN)
                    .multiply(lotSize);

            // –ï—Å–ª–∏ –ø–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–ª –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ –æ–¥–∏–Ω lot
            if (adjustedSize.compareTo(minSize) < 0) {
                adjustedSize = minSize;
            }

            log.info("üìè –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {}: {} -> {}",
                    symbol, positionSize, adjustedSize);

            return adjustedSize;

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {}: {}", symbol, e.getMessage());
            return positionSize; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø—Ä–∏ –æ—à–∏–±–∫–µ
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—Ä–≥–æ–≤–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
     */
    private InstrumentInfo getInstrumentInfo(String symbol) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            InstrumentInfo cachedInfo = instrumentInfoCache.get(symbol);
            if (cachedInfo != null) {
                log.debug("üîç –ò—Å–ø–æ–ª—å–∑—É—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—Ä–≥–æ–≤–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ {}", symbol);
                return cachedInfo;
            }

            String baseUrl = isSandbox ? SANDBOX_BASE_URL : PROD_BASE_URL;
            String endpoint = PUBLIC_INSTRUMENTS_ENDPOINT + "?instType=SWAP&instId=" + symbol; //https://www.okx.com/api/v5/public/instruments?instType=SWAP&instId=XRP-USDT-SWAP

            Request request = new Request.Builder()
                    .url(baseUrl + endpoint)
                    .get()
                    .build();

            try (Response response = httpClient.newCall(request).execute()) {
                if (!response.isSuccessful()) {
                    log.error("‚ùå –û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—Ä–≥–æ–≤–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ: {}", response.code());
                    return null;
                }

                String responseBody = response.body().string();
                log.debug("üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—Ä–≥–æ–≤–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ {}: {}", symbol, responseBody);

                JsonObject jsonResponse = JsonParser.parseString(responseBody).getAsJsonObject();

                if (!"0".equals(jsonResponse.get("code").getAsString())) {
                    log.error("‚ùå –û—à–∏–±–∫–∞ OKX API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—Ä–≥–æ–≤–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ: {}",
                            jsonResponse.get("msg").getAsString());
                    return null;
                }

                JsonArray data = jsonResponse.getAsJsonArray("data");
                if (data.isEmpty()) {
                    log.warn("‚ö†Ô∏è –¢–æ—Ä–≥–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {} –Ω–µ –Ω–∞–π–¥–µ–Ω", symbol);
                    return null;
                }

                JsonObject instrument = data.get(0).getAsJsonObject();

                String lotSizeStr = instrument.get("lotSz").getAsString();
                String minSizeStr = instrument.get("minSz").getAsString();
                String minCcyAmtStr = instrument.has("minCcyAmt") ? instrument.get("minCcyAmt").getAsString() : "0";
                String minNotionalStr = instrument.has("minNotional") ? instrument.get("minNotional").getAsString() : "0";

                InstrumentInfo instrumentInfo = new InstrumentInfo(
                        symbol,
                        new BigDecimal(lotSizeStr),
                        new BigDecimal(minSizeStr),
                        new BigDecimal(minCcyAmtStr),
                        new BigDecimal(minNotionalStr)
                );

                // –ö—ç—à–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                instrumentInfoCache.put(symbol, instrumentInfo);
                log.debug("üîç –ö—ç—à–∏—Ä–æ–≤–∞–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—Ä–≥–æ–≤–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ {}: lot size = {}, min size = {}, minCcyAmt = {}, minNotional = {}",
                        symbol, instrumentInfo.getLotSize(), instrumentInfo.getMinSize(), instrumentInfo.getMinCcyAmt(), instrumentInfo.getMinNotional());

                return instrumentInfo;

            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—Ä–≥–æ–≤–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ {}: {}", symbol, e.getMessage());
            return null;
        }
    }

    /**
     * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—Ä–≥–æ–≤–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
     */
    private static class InstrumentInfo {
        private final String symbol;
        private final BigDecimal lotSize;
        private final BigDecimal minSize;
        private final BigDecimal minCcyAmt; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤ –≤–∞–ª—é—Ç–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏
        private final BigDecimal minNotional; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É—Å–ª–æ–≤–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å

        public InstrumentInfo(String symbol, BigDecimal lotSize, BigDecimal minSize, BigDecimal minCcyAmt, BigDecimal minNotional) {
            this.symbol = symbol;
            this.lotSize = lotSize;
            this.minSize = minSize;
            this.minCcyAmt = minCcyAmt;
            this.minNotional = minNotional;
        }

        public String getSymbol() {
            return symbol;
        }

        public BigDecimal getLotSize() {
            return lotSize;
        }

        public BigDecimal getMinSize() {
            return minSize;
        }

        public BigDecimal getMinCcyAmt() {
            return minCcyAmt;
        }

        public BigDecimal getMinNotional() {
            return minNotional;
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–µ—á–∞ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –Ω–∞ OKX
     */
    private boolean setLeverage(String symbol, BigDecimal leverage) {
        try {
            // –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º OKX API
            if (!geolocationService.isGeolocationAllowed()) {
                log.error("‚ùå –ë–õ–û–ö–ò–†–û–í–ö–ê: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–µ—á–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏!");
                return false;
            }

            String baseUrl = isSandbox ? SANDBOX_BASE_URL : PROD_BASE_URL;
            String endpoint = SET_LEVERAGE_ENDPOINT;
            String fullUrl = baseUrl + endpoint;

            JsonObject leverageData = new JsonObject();
            leverageData.addProperty("instId", symbol);
            leverageData.addProperty("lever", leverage.toString());
            leverageData.addProperty("mgnMode", "isolated"); // –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–∞—Ä–∂–∞

            log.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–µ—á–∞ OKX: symbol={}, leverage={}", symbol, leverage);
            log.info("üîß URL: {}", fullUrl);
            log.info("üîß Payload: {}", leverageData.toString());
            log.info("üîß API Key: {}", apiKey != null ? apiKey.substring(0, Math.min(8, apiKey.length())) + "..." : "null");

            RequestBody body = RequestBody.create(
                    leverageData.toString(),
                    MediaType.get("application/json")
            );

            String timestamp = Instant.now().truncatedTo(java.time.temporal.ChronoUnit.MILLIS).toString();
            log.info("üîß Timestamp: {}", timestamp);

            String signature = generateSignature("POST", endpoint, leverageData.toString(), timestamp);
            log.info("üîß Signature: {}", signature != null ? signature.substring(0, Math.min(8, signature.length())) + "..." : "null");

            Request request = new Request.Builder()
                    .url(fullUrl)
                    .post(body)
                    .addHeader("OK-ACCESS-KEY", apiKey)
                    .addHeader("OK-ACCESS-SIGN", signature)
                    .addHeader("OK-ACCESS-TIMESTAMP", timestamp)
                    .addHeader("OK-ACCESS-PASSPHRASE", passphrase)
                    .addHeader("Content-Type", "application/json")
                    .build();

            log.info("üîß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É –ø–ª–µ—á–∞...");
            try (Response response = httpClient.newCall(request).execute()) {
                log.info("üîß –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: HTTP {}", response.code());

                if (!response.isSuccessful()) {
                    log.error("‚ùå HTTP –æ—à–∏–±–∫–∞: {}", response.code());
                    return false;
                }

                String responseBody = response.body().string();
                log.info("üîß OKX —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–µ—á–∞ –æ—Ç–≤–µ—Ç: {}", responseBody);

                JsonObject jsonResponse = JsonParser.parseString(responseBody).getAsJsonObject();

                if ("0".equals(jsonResponse.get("code").getAsString())) {
                    log.info("‚úÖ –ü–ª–µ—á–æ {} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {}", leverage, symbol);
                    return true;
                } else {
                    log.error("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–µ—á–∞: {}", responseBody);
                    return false;
                }
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–ª–µ—á–∞ –¥–ª—è {}: {}", symbol, e.getMessage());
            log.error("‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {}", e.getClass().getSimpleName());
            log.error("‚ùå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏: ", e);
            return false;
        }
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π posSide –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
     */
    private String determinePosSide(String intendedPosSide) {
        if (isHedgeMode()) {
            // –í Hedge —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π posSide (long/short)
            return intendedPosSide;
        } else {
            // –í Net —Ä–µ–∂–∏–º–µ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º "net"
            return "net";
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ –ø–æ–∑–∏—Ü–∏–∏ (Net –∏–ª–∏ Hedge)
     */
    private boolean isHedgeMode() {
        try {
            // –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º OKX API
            if (!geolocationService.isGeolocationAllowed()) {
                log.error("‚ùå –ë–õ–û–ö–ò–†–û–í–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ –ø–æ–∑–∏—Ü–∏–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏!");
                return false;
            }

            String baseUrl = isSandbox ? SANDBOX_BASE_URL : PROD_BASE_URL;
            String endpoint = ACCOUNT_CONFIG_ENDPOINT;

            String timestamp = Instant.now().truncatedTo(java.time.temporal.ChronoUnit.MILLIS).toString();
            String signature = generateSignature("GET", endpoint, "", timestamp);

            Request request = new Request.Builder()
                    .url(baseUrl + endpoint)
                    .addHeader("OK-ACCESS-KEY", apiKey)
                    .addHeader("OK-ACCESS-SIGN", signature)
                    .addHeader("OK-ACCESS-TIMESTAMP", timestamp)
                    .addHeader("OK-ACCESS-PASSPHRASE", passphrase)
                    .build();

            try (Response response = httpClient.newCall(request).execute()) {
                if (!response.isSuccessful()) {
                    log.error("‚ùå –û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {}", response.code());
                    return false; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º Net —Ä–µ–∂–∏–º
                }

                String responseBody = response.body().string();
                log.debug("üîç –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ OKX: {}", responseBody);

                JsonObject jsonResponse = JsonParser.parseString(responseBody).getAsJsonObject();

                if (!"0".equals(jsonResponse.get("code").getAsString())) {
                    log.error("‚ùå –û—à–∏–±–∫–∞ OKX API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {}", jsonResponse.get("msg").getAsString());
                    return false;
                }

                JsonArray data = jsonResponse.getAsJsonArray("data");
                if (data.isEmpty()) {
                    log.warn("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø—É—Å—Ç—ã");
                    return false;
                }

                JsonObject accountConfig = data.get(0).getAsJsonObject();
                String posMode = accountConfig.get("posMode").getAsString();

                // posMode: "net_mode" = Net —Ä–µ–∂–∏–º, "long_short_mode" = Hedge —Ä–µ–∂–∏–º
                boolean isHedge = "long_short_mode".equals(posMode);
                log.info("üîç –†–µ–∂–∏–º –ø–æ–∑–∏—Ü–∏–π OKX: {} ({})", posMode, isHedge ? "Hedge" : "Net");

                return isHedge;
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ –ø–æ–∑–∏—Ü–∏–π: {}", e.getMessage());
            return false; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º Net —Ä–µ–∂–∏–º
        }
    }

    /**
     * –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
     * –î–µ–ª–µ–≥–∏—Ä—É–µ—Ç –≤—ã–∑–æ–≤ GeolocationService
     */
    public String testGeolocation() {
        return geolocationService.forceCheckGeolocation();
    }

    private String generateSignature(String method, String endpoint, String body, String timestamp) {
        try {
            String message = timestamp + method + endpoint + body;

            Mac mac = Mac.getInstance("HmacSHA256");
            SecretKeySpec keySpec = new SecretKeySpec(apiSecret.getBytes(StandardCharsets.UTF_8), "HmacSHA256");
            mac.init(keySpec);

            byte[] hash = mac.doFinal(message.getBytes(StandardCharsets.UTF_8));
            return Base64.getEncoder().encodeToString(hash);
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∏: {}", e.getMessage());
            return "";
        }
    }

    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É –∏–∑ —Å–∏–º–≤–æ–ª–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "BTC" –∏–∑ "BTC-USDT-SWAP").
     *
     * @param symbol –°–∏–º–≤–æ–ª —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.
     * @return –ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞.
     */
    private String getBaseCurrency(String symbol) {
        if (symbol == null || !symbol.contains("-")) {
            log.warn("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç—ã: {}", symbol);
            return "";
        }
        return symbol.split("-")[0];
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º OKX (minCcyAmt, minNotional).
     *
     * @param symbol         –°–∏–º–≤–æ–ª —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.
     * @param adjustedAmount –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞ –≤ USDT (–º–∞—Ä–∂–∞).
     * @param positionSize   –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ –µ–¥–∏–Ω–∏—Ü–∞—Ö –∞–∫—Ç–∏–≤–∞.
     * @param currentPrice   –¢–µ–∫—É—â–∞—è —Ä—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞.
     * @return null, –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞ –≤–∞–ª–∏–¥–µ–Ω, –∏–Ω–∞—á–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
     */
    private String validateOrderSize(String symbol, BigDecimal adjustedAmount, BigDecimal positionSize, BigDecimal currentPrice) {
        try {
            InstrumentInfo instrumentInfo = getInstrumentInfo(symbol);
            if (instrumentInfo == null) {
                return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—Ä–≥–æ–≤–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ—Ä–¥–µ—Ä–∞.";
            }

            BigDecimal minCcyAmt = instrumentInfo.getMinCcyAmt();
            BigDecimal minNotional = instrumentInfo.getMinNotional();

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ minCcyAmt (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤ –≤–∞–ª—é—Ç–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏, —Ç.–µ. USDT)
            if (adjustedAmount.compareTo(minCcyAmt) < 0) {
                log.warn("‚ö†Ô∏è –°—É–º–º–∞ –º–∞—Ä–∂–∏ {} USDT –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π {} USDT –¥–ª—è {}", adjustedAmount, minCcyAmt, symbol);
                return String.format("–°—É–º–º–∞ –º–∞—Ä–∂–∏ %.2f USDT –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π %.2f USDT.", adjustedAmount, minCcyAmt);
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ minNotional (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É—Å–ª–æ–≤–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–¥–µ–ª–∫–∏)
            BigDecimal notionalValue = positionSize.multiply(currentPrice);
            if (notionalValue.compareTo(minNotional) < 0) {
                log.warn("‚ö†Ô∏è –£—Å–ª–æ–≤–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–¥–µ–ª–∫–∏ {} USDT –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π {} USDT –¥–ª—è {}", notionalValue, minNotional, symbol);
                return String.format("–£—Å–ª–æ–≤–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–¥–µ–ª–∫–∏ %.2f USDT –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π %.2f USDT.", notionalValue, minNotional);
            }

            return null; // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è {}: {}", symbol, e.getMessage());
            return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ—Ä–¥–µ—Ä–∞: " + e.getMessage();
        }
    }
}