package com.example.shared.services;

import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.time.Duration;
import java.util.*;
import java.util.stream.Collectors;

/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º–∏ –∏ –ø–µ—Ä–∏–æ–¥–∞–º–∏
 * –°–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –ª–æ–≥–∏–∫—É –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏, –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ —Ä–∞—Å—á–µ—Ç–æ–≤
 */
@Slf4j
@Service
public class TimeframeAndPeriodService {

    // –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –≤ —Å–∏—Å—Ç–µ–º–µ
    private static final List<String> ALL_TIMEFRAMES = List.of(
            "1m", "5m", "15m", "1H", "4H", "1D", "1W", "1M"
    );

    // –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –≤ —Å–∏—Å—Ç–µ–º–µ
    private static final List<String> ALL_PERIODS = List.of(
            "1 –º–µ—Å—è—Ü", "2 –º–µ—Å—è—Ü–∞", "3 –º–µ—Å—è—Ü–∞", "4 –º–µ—Å—è—Ü–∞", "5 –º–µ—Å—è—Ü–µ–≤",
            "6 –º–µ—Å—è—Ü–µ–≤", "7 –º–µ—Å—è—Ü–µ–≤", "8 –º–µ—Å—è—Ü–µ–≤", "9 –º–µ—Å—è—Ü–µ–≤",
            "10 –º–µ—Å—è—Ü–µ–≤", "11 –º–µ—Å—è—Ü–µ–≤", "1 –≥–æ–¥"
    );

    // –ö–∞—Ä—Ç–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø–µ—Ä–∏–æ–¥–æ–≤ –≤ –¥–Ω–∏
    private static final Map<String, Integer> PERIOD_TO_DAYS;

    static {
        Map<String, Integer> periodMap = new LinkedHashMap<>();
        periodMap.put("1 –º–µ—Å—è—Ü", 30);
        periodMap.put("2 –º–µ—Å—è—Ü–∞", 60);
        periodMap.put("3 –º–µ—Å—è—Ü–∞", 90);
        periodMap.put("4 –º–µ—Å—è—Ü–∞", 120);
        periodMap.put("5 –º–µ—Å—è—Ü–µ–≤", 150);
        periodMap.put("6 –º–µ—Å—è—Ü–µ–≤", 180);
        periodMap.put("7 –º–µ—Å—è—Ü–µ–≤", 210);
        periodMap.put("8 –º–µ—Å—è—Ü–µ–≤", 240);
        periodMap.put("9 –º–µ—Å—è—Ü–µ–≤", 270);
        periodMap.put("10 –º–µ—Å—è—Ü–µ–≤", 300);
        periodMap.put("11 –º–µ—Å—è—Ü–µ–≤", 330);
        periodMap.put("1 –≥–æ–¥", 365);
        PERIOD_TO_DAYS = Collections.unmodifiableMap(periodMap);
    }

    // –ö–∞—Ä—Ç–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–Ω–µ–π –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø–µ—Ä–∏–æ–¥—ã
    private static final Map<Integer, String> DAYS_TO_PERIOD = PERIOD_TO_DAYS.entrySet()
            .stream()
            .collect(Collectors.toMap(Map.Entry::getValue, Map.Entry::getKey));

    // –ö–∞—Ä—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Duration –∏–∑ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
    private static final Map<String, Duration> TIMEFRAME_TO_DURATION = Map.of(
            "1m", Duration.ofMinutes(1),
            "5m", Duration.ofMinutes(5),
            "15m", Duration.ofMinutes(15),
            "1H", Duration.ofHours(1),
            "4H", Duration.ofHours(4),
            "1D", Duration.ofDays(1),
            "1W", Duration.ofDays(7),
            "1M", Duration.ofDays(30)
    );

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ (API –∫–æ–¥—ã)
     */
    public List<String> getAllTimeframesList() {
        return new ArrayList<>(ALL_TIMEFRAMES);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
     */
    public List<String> getAllPeriodsList() {
        return new ArrayList<>(ALL_PERIODS);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    public List<String> getActiveTimeframes(String activeTimeframesString) {
        if (activeTimeframesString == null || activeTimeframesString.trim().isEmpty()) {
            log.warn("‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –Ω–µ –∑–∞–¥–∞–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 15m –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
            return List.of("15m");
        }

        List<String> activeTimeframes = Arrays.stream(activeTimeframesString.split(","))
                .map(String::trim)
                .filter(tf -> !tf.isEmpty() && ALL_TIMEFRAMES.contains(tf))
                .collect(Collectors.toList());

        if (activeTimeframes.isEmpty()) {
            log.warn("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –≤ '{}', –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 15m –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
                    activeTimeframesString);
            return List.of("15m");
        }

        log.debug("üìä –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã: {}", activeTimeframes);
        return activeTimeframes;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    public List<String> getActivePeriods(String activePeriodsString) {
        if (activePeriodsString == null || activePeriodsString.trim().isEmpty()) {
            log.warn("‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –Ω–µ –∑–∞–¥–∞–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º '1 –≥–æ–¥' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
            return List.of("1 –≥–æ–¥");
        }

        List<String> activePeriods = Arrays.stream(activePeriodsString.split(","))
                .map(String::trim)
                .filter(period -> !period.isEmpty() && ALL_PERIODS.contains(period))
                .collect(Collectors.toList());

        if (activePeriods.isEmpty()) {
            log.warn("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –≤ '{}', –≤–æ–∑–≤—Ä–∞—â–∞–µ–º '1 –≥–æ–¥' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
                    activePeriodsString);
            return List.of("1 –≥–æ–¥");
        }

        log.debug("üìÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã: {}", activePeriods);
        return activePeriods;
    }

    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–∏–æ–¥ –≤ –¥–Ω–∏
     */
    public Integer periodToDays(String period) {
        Integer days = PERIOD_TO_DAYS.get(period);
        if (days == null) {
            log.warn("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ '{}', –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 365 –¥–Ω–µ–π (1 –≥–æ–¥)", period);
            return 365;
        }
        return days;
    }

    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–Ω–∏ –≤ –ø–µ—Ä–∏–æ–¥
     */
    public String daysToPeriod(Integer days) {
        String period = DAYS_TO_PERIOD.get(days);
        if (period == null) {
            log.warn("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π {}, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º '1 –≥–æ–¥'", days);
            return "1 –≥–æ–¥";
        }
        return period;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å Duration –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
     */
    public Duration getTimeframeDuration(String timeframe) {
        Duration duration = TIMEFRAME_TO_DURATION.get(timeframe);
        if (duration == null) {
            log.warn("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º '{}', –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 15 –º–∏–Ω—É—Ç", timeframe);
            return Duration.ofMinutes(15);
        }
        return duration;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
     */
    public boolean isValidTimeframe(String timeframe) {
        return timeframe != null && ALL_TIMEFRAMES.contains(timeframe);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–µ—Ä–∏–æ–¥–∞
     */
    public boolean isValidPeriod(String period) {
        return period != null && ALL_PERIODS.contains(period);
    }

    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –≤ —Å—Ç—Ä–æ–∫—É
     */
    public String timeframesToString(List<String> timeframes) {
        if (timeframes == null || timeframes.isEmpty()) {
            return "15m";
        }
        return String.join(",", timeframes);
    }

    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –≤ —Å—Ç—Ä–æ–∫—É
     */
    public String periodsToString(List<String> periods) {
        if (periods == null || periods.isEmpty()) {
            return "1 –≥–æ–¥";
        }
        return String.join(",", periods);
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
     */
    public int calculateOptimalCandleCount(String timeframe, String period) {
        Duration timeframeDuration = getTimeframeDuration(timeframe);
        int periodDays = periodToDays(period);

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π = –¥–Ω–∏ * 24 —á–∞—Å–∞ * 60 –º–∏–Ω—É—Ç / –º–∏–Ω—É—Ç—ã –≤ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ
        long timeframeMinutes = timeframeDuration.toMinutes();
        int totalMinutes = periodDays * 24 * 60;
        int candleCount = (int) (totalMinutes / timeframeMinutes);

        log.debug("üßÆ –†–∞—Å—á–µ—Ç —Å–≤–µ—á–µ–π –¥–ª—è –¢–§ {} –∏ –ø–µ—Ä–∏–æ–¥–∞ {}: {} –¥–Ω–µ–π = {} —Å–≤–µ—á–µ–π",
                timeframe, period, periodDays, candleCount);

        return Math.max(candleCount, 100); // –ú–∏–Ω–∏–º—É–º 100 —Å–≤–µ—á–µ–π
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–µ—Ä–∏–æ–¥ EMA –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
     */
    public int getRecommendedEmaPeriod(String timeframe) {
        return switch (timeframe.toLowerCase()) {
            case "1m", "5m" -> 20;
            case "15m", "1h" -> 14;
            case "4h" -> 12;
            case "1d", "1w" -> 10;
            default -> 14;
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –¥–ª—è UI —Å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
     */
    public Map<String, String> getAllTimeframes() {
        Map<String, String> timeframes = new LinkedHashMap<>();
        timeframes.put("1 –º–∏–Ω—É—Ç–∞", "1m");
        timeframes.put("5 –º–∏–Ω—É—Ç", "5m");
        timeframes.put("15 –º–∏–Ω—É—Ç", "15m");
        timeframes.put("1 —á–∞—Å", "1H");
        timeframes.put("4 —á–∞—Å–∞", "4H");
        timeframes.put("1 –¥–µ–Ω—å", "1D");
        timeframes.put("1 –Ω–µ–¥–µ–ª—è", "1W");
        timeframes.put("1 –º–µ—Å—è—Ü", "1M");
        return timeframes;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –¥–ª—è UI
     */
    public Map<String, String> getAllPeriods() {
        Map<String, String> periods = new LinkedHashMap<>();
        for (String period : ALL_PERIODS) {
            periods.put(period, period);
        }
        return periods;
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    public void logActiveSettings(String activeTimeframes, String activePeriods) {
        log.info("üîß –¢–µ–∫—É—â–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–≤–µ—á–µ–π:");
        log.info("üìä –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã: {}", getActiveTimeframes(activeTimeframes));
        log.info("üìÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã: {}", getActivePeriods(activePeriods));
    }
}