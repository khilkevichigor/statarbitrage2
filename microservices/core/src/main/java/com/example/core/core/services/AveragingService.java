package com.example.core.core.services;

import com.example.core.common.model.PairData;
import com.example.core.common.model.Settings;
import com.example.core.common.model.TradeStatus;
import com.example.core.core.repositories.PairDataRepository;
import com.example.core.trading.model.ArbitragePairTradeInfo;
import com.example.core.trading.services.TradingIntegrationService;
import com.example.core.trading.services.TradingProviderFactory;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –≤ –ø–∞—Ä–Ω–æ–º —Ç—Ä–µ–π–¥–∏–Ω–≥–µ
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class AveragingService {

    private final TradingIntegrationService tradingIntegrationService;
    private final TradingProviderFactory tradingProviderFactory;
    private final PairDataRepository pairDataRepository;

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä—É—á–Ω–æ–µ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞—Ä—ã
     *
     * @param pairData —Ç–æ—Ä–≥—É–µ–º–∞—è –ø–∞—Ä–∞
     * @param settings –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
     * @return —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
     */
    @Transactional
    public AveragingResult performManualAveraging(PairData pairData, Settings settings) {
        log.info("");
        log.info("üîÑ –ù–∞—á–∞–ª–æ —Ä—É—á–Ω–æ–≥–æ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä—ã: {}", pairData.getPairName());

        return executeAveraging(pairData, settings, "MANUAL");
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞ –ø—Ä–æ—Å–∞–¥–∫–∏
     *
     * @param pairData —Ç–æ—Ä–≥—É–µ–º–∞—è –ø–∞—Ä–∞
     * @param settings –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
     * @return —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
     */
    @Transactional
    public AveragingResult performAutoAveraging(PairData pairData, Settings settings) {
        log.info("ü§ñ –ù–∞—á–∞–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä—ã: {}", pairData.getPairName());

        return executeAveraging(pairData, settings, "AUTO");
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä—ã
     *
     * @param pairData —Ç–æ—Ä–≥—É–µ–º–∞—è –ø–∞—Ä–∞
     * @param settings –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
     * @return true, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —É—Å—Ä–µ–¥–Ω–∏—Ç—å
     */
    public boolean shouldPerformAutoAveraging(PairData pairData, Settings settings) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–æ –ª–∏ –∞–≤—Ç–æ—É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ
        if (!settings.isAutoAveragingEnabled()) {
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–∞ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Ç—Ä–µ–π–¥–µ
        if (!isActiveTrade(pairData)) {
            return false;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏—Ç –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        BigDecimal currentProfitPercent = pairData.getProfitPercentChanges();
        if (currentProfitPercent == null) {
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Å–∞–¥–∫–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        double currentProfitDouble = currentProfitPercent.doubleValue();
        double threshold = -Math.abs(settings.getAveragingDrawdownThreshold()); // –î–µ–ª–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º

        boolean shouldAverage = currentProfitDouble <= threshold;

        if (shouldAverage) {
            log.info("üìâ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ—Å–∞–¥–∫–∞ –¥–ª—è –ø–∞—Ä—ã {}: {}% <= {}%. –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ.",
                    pairData.getPairName(), currentProfitDouble, threshold);
        }

        return shouldAverage;
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
     */
    private AveragingResult executeAveraging(PairData pairData, Settings settings, String trigger) {
        try {
            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º –æ–±—ä–µ–º–æ–º
            Settings averagingSettings = createAveragingSettings(settings);

            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
            ArbitragePairTradeInfo tradeResult = tradingIntegrationService.openArbitragePair(pairData, averagingSettings);

            if (tradeResult == null || !tradeResult.isSuccess()) {
                log.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä—ã: {}", pairData.getPairName());
                return AveragingResult.failure("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è");
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–π
            pairData.setAveragingCount(pairData.getAveragingCount() + 1);
            pairData.setLastAveragingTimestamp(System.currentTimeMillis());

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            pairDataRepository.save(pairData);

            log.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ #{} –¥–ª—è –ø–∞—Ä—ã: {} (—Ç—Ä–∏–≥–≥–µ—Ä: {})",
                    pairData.getAveragingCount(), pairData.getPairName(), trigger);

            return AveragingResult.success(
                    String.format("–í—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ #%d –¥–ª—è –ø–∞—Ä—ã %s",
                            pairData.getAveragingCount(), pairData.getPairName())
            );

        } catch (Exception e) {
            log.error("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä—ã {}: {}",
                    pairData.getPairName(), e.getMessage(), e);
            return AveragingResult.failure("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–∏: " + e.getMessage());
        }
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º –æ–±—ä–µ–º–æ–º
     */
    private Settings createAveragingSettings(Settings originalSettings) {
        return Settings.builder()
                .maxLongMarginSize(originalSettings.getMaxLongMarginSize() * originalSettings.getAveragingVolumeMultiplier())
                .maxShortMarginSize(originalSettings.getMaxShortMarginSize() * originalSettings.getAveragingVolumeMultiplier())
                .leverage(originalSettings.getLeverage())
                .autoTradingEnabled(originalSettings.isAutoTradingEnabled())
                // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                .timeframe(originalSettings.getTimeframe())
                .candleLimit(originalSettings.getCandleLimit())
                .minZ(originalSettings.getMinZ())
                .minWindowSize(originalSettings.getMinWindowSize())
                .maxPValue(originalSettings.getMaxPValue())
                .maxAdfValue(originalSettings.getMaxAdfValue())
                .minRSquared(originalSettings.getMinRSquared())
                .minCorrelation(originalSettings.getMinCorrelation())
                .minVolume(originalSettings.getMinVolume())
                .checkInterval(originalSettings.getCheckInterval())
                .build();
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–∞—Ä–∞ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Ç—Ä–µ–π–¥–µ
     */
    private boolean isActiveTrade(PairData pairData) {
        return pairData.getStatus() == TradeStatus.TRADING;
    }

    /**
     * –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
     */
    public static class AveragingResult {
        private final boolean success;
        private final String message;

        private AveragingResult(boolean success, String message) {
            this.success = success;
            this.message = message;
        }

        public static AveragingResult success(String message) {
            return new AveragingResult(true, message);
        }

        public static AveragingResult failure(String message) {
            return new AveragingResult(false, message);
        }

        public boolean isSuccess() {
            return success;
        }

        public String getMessage() {
            return message;
        }
    }
}