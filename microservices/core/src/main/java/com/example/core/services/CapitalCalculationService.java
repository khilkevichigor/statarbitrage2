package com.example.core.services;

import com.example.shared.models.Settings;
import lombok.Builder;
import lombok.Data;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞ –ø—Ä–∏ –∑–∞–¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ç–æ—Ä–≥–æ–≤–ª–∏
 */
@Slf4j
@Service
public class CapitalCalculationService {

    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–∏–π —Ç—Ä–µ–±—É–µ–º—ã–π –∫–∞–ø–∏—Ç–∞–ª –¥–ª—è –∑–∞–¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
     *
     * @param settings –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
     * @return –æ–±—ä–µ–∫—Ç —Å —Ä–∞—Å—á–µ—Ç–∞–º–∏ –∫–∞–ø–∏—Ç–∞–ª–∞
     */
    public CapitalRequirement calculateRequiredCapital(Settings settings) {
        double pairsCount = settings.getUsePairs();
        double longMarginSize = settings.getMaxLongMarginSize();
        double shortMarginSize = settings.getMaxShortMarginSize();
        
        // –ë–∞–∑–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª –Ω–∞ –æ–¥–Ω—É –ø–∞—Ä—É (–±–µ–∑ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è)
        double baseCapitalPerPair = longMarginSize + shortMarginSize;
        double totalBaseCapital = pairsCount * baseCapitalPerPair;
        
        double totalAveragingCapital = 0;
        
        // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –∞–≤—Ç–æ—É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª
        if (settings.isAutoAveragingEnabled()) {
            double volumeMultiplier = settings.getAveragingVolumeMultiplier();
            int maxAveragingCount = settings.getMaxAveragingCount();
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–ø–∏—Ç–∞–ª –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
            for (int i = 1; i <= maxAveragingCount; i++) {
                double currentMultiplier = Math.pow(volumeMultiplier, i);
                double averagingCapitalPerPair = (longMarginSize * currentMultiplier) + (shortMarginSize * currentMultiplier);
                totalAveragingCapital += pairsCount * averagingCapitalPerPair;
            }
        }
        
        double totalRequiredCapital = totalBaseCapital + totalAveragingCapital;
        
        log.debug("üí∞ –†–∞—Å—á–µ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞: –±–∞–∑–æ–≤—ã–π={}, —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ={}, –∏—Ç–æ–≥–æ={}", 
                totalBaseCapital, totalAveragingCapital, totalRequiredCapital);
        
        return CapitalRequirement.builder()
                .pairsCount((int) pairsCount)
                .baseCapitalPerPair(baseCapitalPerPair)
                .totalBaseCapital(totalBaseCapital)
                .totalAveragingCapital(totalAveragingCapital)
                .totalRequiredCapital(totalRequiredCapital)
                .averagingEnabled(settings.isAutoAveragingEnabled())
                .maxAveragingCount(settings.getMaxAveragingCount())
                .volumeMultiplier(settings.getAveragingVolumeMultiplier())
                .build();
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ —Ç—Ä–µ–±—É–µ–º—ã–π –∫–∞–ø–∏—Ç–∞–ª –¥–æ—Å—Ç—É–ø–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç
     *
     * @param requiredCapital —Ç—Ä–µ–±—É–µ–º—ã–π –∫–∞–ø–∏—Ç–∞–ª
     * @param availableBalance –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å —Å OKX
     * @return —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–∞
     */
    public DepositCheckResult checkDeposit(CapitalRequirement requiredCapital, double availableBalance) {
        boolean isExceeded = requiredCapital.getTotalRequiredCapital() > availableBalance;
        double difference = requiredCapital.getTotalRequiredCapital() - availableBalance;
        double utilizationPercent = availableBalance > 0 ? (requiredCapital.getTotalRequiredCapital() / availableBalance) * 100 : 0;
        
        return DepositCheckResult.builder()
                .requiredCapital(requiredCapital.getTotalRequiredCapital())
                .availableDeposit(availableBalance)
                .isExceeded(isExceeded)
                .difference(difference)
                .utilizationPercent(utilizationPercent)
                .build();
    }

    /**
     * –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞
     */
    @Builder
    @Data
    public static class CapitalRequirement {
        private int pairsCount;
        private double baseCapitalPerPair;
        private double totalBaseCapital;
        private double totalAveragingCapital;
        private double totalRequiredCapital;
        private boolean averagingEnabled;
        private int maxAveragingCount;
        private double volumeMultiplier;
    }

    /**
     * –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–∞
     */
    @Builder
    @Data
    public static class DepositCheckResult {
        private double requiredCapital;
        private double availableDeposit;
        private boolean isExceeded;
        private double difference;
        private double utilizationPercent;
    }
}