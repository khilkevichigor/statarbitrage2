package com.example.core.services;

import com.example.core.client.CandlesFeignClient;
import com.example.shared.models.Settings;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.*;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.stream.Collectors;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–º —Å–≤–µ—á–µ–π —á–µ—Ä–µ–∑ –≤—ã–∑–æ–≤—ã –∫ candles –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—É
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class CandleCacheManagementService {

    private final SettingsService settingsService;
    private final CandlesFeignClient candlesFeignClient;

    private final ExecutorService executorService = Executors.newFixedThreadPool(3);

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞ —Å–≤–µ—á–µ–π
     */
    public Map<String, Object> getCacheStatistics(String exchange) {
        try {
            log.info("üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞ –¥–ª—è –±–∏—Ä–∂–∏: {}", exchange);

            Map<String, Object> statistics = candlesFeignClient.getCacheStatistics(exchange);

            if (statistics != null && !statistics.isEmpty()) {
                log.info("‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞: {} –∑–∞–ø–∏—Å–µ–π", statistics.size());
                return statistics;
            } else {
                log.warn("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞");
                return generateEmptyStatistics();
            }

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞: {}", e.getMessage());
            return generateErrorStatistics(e.getMessage());
        }
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–≤–µ—á–µ–π
     */
    public void forceLoadCandles(String exchange, Set<String> timeframes,
                                 List<String> tickers, Integer threadCount, Integer periodDays) {
        CompletableFuture.runAsync(() -> {
            try {
                log.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏: –±–∏—Ä–∂–∞={}, —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã={}, —Ç–∏–∫–µ—Ä–æ–≤={}, –ø–æ—Ç–æ–∫–æ–≤={}, –ø–µ—Ä–∏–æ–¥={} –¥–Ω–µ–π",
                        exchange, timeframes, tickers.size(), threadCount, periodDays);

                // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
                if (threadCount != null && threadCount > 0) {
                    updateThreadCountSetting(threadCount);
                }

                if (periodDays != null && periodDays > 0) {
                    updateForceLoadPeriodSetting(periodDays);
                }

                // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
                Map<String, Object> requestData = new HashMap<>();
                requestData.put("exchange", exchange);
                requestData.put("timeframes", timeframes);
                requestData.put("threadCount", threadCount != null ? threadCount : 5);
                requestData.put("periodDays", periodDays != null ? periodDays : 365);

                if (tickers != null && !tickers.isEmpty()) {
                    requestData.put("tickers", tickers);
                }

                Map<String, String> response = candlesFeignClient.forceLoadCandles(requestData);

                if ("started".equals(response.get("status"))) {
                    log.info("‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
                } else {
                    log.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏: {}", response.get("message"));
                }

            } catch (Exception e) {
                log.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ —Å–≤–µ—á–µ–π: {}", e.getMessage(), e);
            }
        }, executorService);
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π —à–µ–¥—É–ª–ª–µ—Ä–æ–≤
     */
    public void saveSchedulerSettings(String preloadSchedule, String dailyUpdateSchedule) {
        try {
            log.info("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π: –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞='{}', –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ='{}'",
                    preloadSchedule, dailyUpdateSchedule);

            Settings settings = settingsService.getSettings();
            settings.setCandleCachePreloadSchedule(preloadSchedule);
            settings.setCandleCacheDailyUpdateSchedule(dailyUpdateSchedule);
            settingsService.save(settings);

            // –£–≤–µ–¥–æ–º–ª—è–µ–º candles —Å–µ—Ä–≤–∏—Å –æ –Ω–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
            notifyCandlesServiceAboutScheduleUpdate(preloadSchedule, dailyUpdateSchedule);

            log.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã");

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π: {}", e.getMessage(), e);
            throw new RuntimeException("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: " + e.getMessage());
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∞ —Å–≤–µ—á–µ–π
     */
    public void saveCacheSettings(String exchange, Set<String> activeTimeframes, Integer threadCount) {
        try {
            log.info("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫—ç—à–∞: –±–∏—Ä–∂–∞={}, —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã={}, –ø–æ—Ç–æ–∫–∏={}",
                    exchange, activeTimeframes, threadCount);

            Settings settings = settingsService.getSettings();

            if (exchange != null && !exchange.isEmpty()) {
                settings.setCandleCacheDefaultExchange(exchange);
            }

            if (activeTimeframes != null && !activeTimeframes.isEmpty()) {
                String timeframesString = String.join(",", activeTimeframes);
                settings.setCandleCacheActiveTimeframes(timeframesString);
            }

            if (threadCount != null && threadCount > 0) {
                settings.setCandleCacheThreadCount(threadCount);
            }

            settingsService.save(settings);

            log.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã");

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫—ç—à–∞: {}", e.getMessage(), e);
            throw new RuntimeException("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫—ç—à–∞: " + e.getMessage());
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∞ —Å–≤–µ—á–µ–π –∏–∑ –±–∞–∑—ã
     */
    public Map<String, Object> getCacheSettings() {
        try {
            Settings settings = settingsService.getSettings();

            Map<String, Object> cacheSettings = new HashMap<>();
            cacheSettings.put("enabled", settings.isCandleCacheEnabled());
            cacheSettings.put("defaultExchange", settings.getCandleCacheDefaultExchange());
            cacheSettings.put("threadCount", settings.getCandleCacheThreadCount());
            cacheSettings.put("preloadSchedule", settings.getCandleCachePreloadSchedule());
            cacheSettings.put("dailyUpdateSchedule", settings.getCandleCacheDailyUpdateSchedule());

            // –ü–∞—Ä—Å–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
            String timeframesStr = settings.getCandleCacheActiveTimeframes();
            Set<String> activeTimeframes = new HashSet<>();
            if (timeframesStr != null && !timeframesStr.trim().isEmpty()) {
                activeTimeframes = Arrays.stream(timeframesStr.split(","))
                        .map(String::trim)
                        .filter(tf -> !tf.isEmpty())
                        .collect(Collectors.toSet());
            }
            cacheSettings.put("activeTimeframes", activeTimeframes);
            cacheSettings.put("forceLoadPeriodDays", settings.getCandleCacheForceLoadPeriodDays());

            return cacheSettings;

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫—ç—à–∞: {}", e.getMessage(), e);
            return new HashMap<>();
        }
    }

    /**
     * –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—É—é –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É —Å–≤–µ—á–µ–π
     */
    public void startFullPreload(String exchange) {
        CompletableFuture.runAsync(() -> {
            try {
                log.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –±–∏—Ä–∂–∏: {}", exchange);

                Map<String, Object> requestData = new HashMap<>();
                requestData.put("exchange", exchange);

                Map<String, String> response = candlesFeignClient.startFullPreload(requestData);

                if ("started".equals(response.get("status"))) {
                    log.info("‚úÖ –ü–æ–ª–Ω–∞—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è –±–∏—Ä–∂–∏: {}", exchange);
                } else {
                    log.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–π –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏: {}", response.get("message"));
                }

            } catch (Exception e) {
                log.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–ª–Ω–æ–π –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏: {}", e.getMessage(), e);
            }
        }, executorService);
    }

    /**
     * –ó–∞–ø—É—Å—Ç–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–µ—á–µ–π
     */
    public void startDailyUpdate(String exchange) {
        CompletableFuture.runAsync(() -> {
            try {
                log.info("üîÑ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –±–∏—Ä–∂–∏: {}", exchange);

                Map<String, Object> requestData = new HashMap<>();
                requestData.put("exchange", exchange);

                Map<String, String> response = candlesFeignClient.startDailyUpdate(requestData);

                if ("started".equals(response.get("status"))) {
                    log.info("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –¥–ª—è –±–∏—Ä–∂–∏: {}", exchange);
                } else {
                    log.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {}", response.get("message"));
                }

            } catch (Exception e) {
                log.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {}", e.getMessage(), e);
            }
        }, executorService);
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –∏–∑ –∫—ç—à–∞
     */
    public void cleanupInactiveTimeframes(String exchange, Set<String> activeTimeframes) {
        CompletableFuture.runAsync(() -> {
            try {
                log.info("üßπ –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤: –±–∏—Ä–∂–∞={}, –∞–∫—Ç–∏–≤–Ω—ã–µ –¢–§={}",
                        exchange, activeTimeframes);

                Map<String, Object> requestData = new HashMap<>();
                requestData.put("exchange", exchange);
                requestData.put("activeTimeframes", activeTimeframes);

                Map<String, String> response = candlesFeignClient.cleanupInactiveTimeframes(requestData);

                if ("success".equals(response.get("status"))) {
                    log.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {}", response.get("message"));
                } else {
                    log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤: {}", response.get("message"));
                }

            } catch (Exception e) {
                log.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤: {}", e.getMessage(), e);
            }
        }, executorService);
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Ç–æ–∫–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ candles —Å–µ—Ä–≤–∏—Å–µ
     */
    private void updateThreadCountSetting(int threadCount) {
        try {
            Map<String, Object> requestData = new HashMap<>();
            requestData.put("threadCount", threadCount);

            candlesFeignClient.updateThreadCount(requestData);

            log.info("‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {}", threadCount);

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –≤ candles —Å–µ—Ä–≤–∏—Å–µ: {}", e.getMessage());
        }
    }

    /**
     * –£–≤–µ–¥–æ–º–∏—Ç—å candles —Å–µ—Ä–≤–∏—Å –æ –Ω–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
     */
    private void notifyCandlesServiceAboutScheduleUpdate(String preloadSchedule, String dailyUpdateSchedule) {
        try {
            Map<String, Object> requestData = new HashMap<>();
            requestData.put("preloadSchedule", preloadSchedule);
            requestData.put("dailyUpdateSchedule", dailyUpdateSchedule);

            candlesFeignClient.updateSchedules(requestData);

            log.info("‚úÖ Candles —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –Ω–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è");

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å candles —Å–µ—Ä–≤–∏—Å –æ –Ω–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö: {}", e.getMessage());
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–µ—Ä–∏–æ–¥–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤ candles —Å–µ—Ä–≤–∏—Å–µ
     */
    private void updateForceLoadPeriodSetting(int periodDays) {
        try {
            Settings settings = settingsService.getSettings();
            settings.setCandleCacheForceLoadPeriodDays(periodDays);
            settingsService.save(settings);

            Map<String, Object> requestData = new HashMap<>();
            requestData.put("forceLoadPeriodDays", periodDays);

            candlesFeignClient.updateForceLoadPeriod(requestData);

            log.info("‚úÖ –ü–µ—Ä–∏–æ–¥ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω: {} –¥–Ω–µ–π", periodDays);

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏: {}", e.getMessage());
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—É—Å—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
     */
    private Map<String, Object> generateEmptyStatistics() {
        Map<String, Object> emptyStats = new HashMap<>();
        emptyStats.put("totalTickers", 0);
        emptyStats.put("byExchange", new HashMap<>());
        emptyStats.put("timeframeStats", new HashMap<>());
        emptyStats.put("message", "–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã");
        return emptyStats;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –æ—à–∏–±–∫–æ–π
     */
    private Map<String, Object> generateErrorStatistics(String errorMessage) {
        Map<String, Object> errorStats = new HashMap<>();
        errorStats.put("error", errorMessage);
        errorStats.put("totalTickers", 0);
        errorStats.put("byExchange", new HashMap<>());
        errorStats.put("timeframeStats", new HashMap<>());
        return errorStats;
    }
}