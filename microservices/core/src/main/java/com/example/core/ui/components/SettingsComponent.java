package com.example.core.ui.components;

import com.example.core.schedulers.TradeAndSimulationScheduler;
import com.example.core.services.SettingsService;
import com.example.core.services.CapitalCalculationService;
import com.example.core.services.PortfolioService;
import com.example.shared.models.Settings;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.button.ButtonVariant;
import com.vaadin.flow.component.checkbox.Checkbox;
import com.vaadin.flow.component.details.Details;
import com.vaadin.flow.component.formlayout.FormLayout;
import com.vaadin.flow.component.html.Div;
import com.vaadin.flow.component.html.H2;
import com.vaadin.flow.component.html.H3;
import com.vaadin.flow.component.html.H4;
import com.vaadin.flow.component.html.Span;
import com.vaadin.flow.component.icon.Icon;
import com.vaadin.flow.component.icon.VaadinIcon;
import com.vaadin.flow.component.notification.Notification;
import com.vaadin.flow.component.orderedlayout.HorizontalLayout;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.textfield.NumberField;
import com.vaadin.flow.component.textfield.TextArea;
import com.vaadin.flow.component.textfield.TextField;
import com.vaadin.flow.data.binder.Binder;
import com.vaadin.flow.data.binder.ValidationException;
import com.vaadin.flow.data.binder.ValidationResult;
import com.vaadin.flow.data.validator.DoubleRangeValidator;
import com.vaadin.flow.data.validator.StringLengthValidator;
import com.vaadin.flow.spring.annotation.SpringComponent;
import com.vaadin.flow.spring.annotation.UIScope;
import com.vaadin.flow.theme.lumo.LumoUtility;
import jakarta.annotation.PostConstruct;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@SpringComponent
@UIScope
public class SettingsComponent extends VerticalLayout {

    private final SettingsService settingsService;
    private final TradeAndSimulationScheduler tradeAndSimulationScheduler;
    private final CapitalCalculationService capitalCalculationService;
    private final PortfolioService portfolioService;
    private final Binder<Settings> settingsBinder;

    private Settings currentSettings;
    private Checkbox autoTradingCheckbox;
    private Runnable autoTradingChangeCallback;
    
    // –ü–æ–ª—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–µ–ø–æ–∑–∏—Ç–∞
    private Span capitalInfoSpan;

    public SettingsComponent(SettingsService settingsService,
                             TradeAndSimulationScheduler tradeAndSimulationScheduler,
                             CapitalCalculationService capitalCalculationService,
                             PortfolioService portfolioService) {
        this.settingsService = settingsService;
        this.tradeAndSimulationScheduler = tradeAndSimulationScheduler;
        this.capitalCalculationService = capitalCalculationService;
        this.portfolioService = portfolioService;
        this.settingsBinder = new Binder<>(Settings.class);

        initializeComponent();
        loadCurrentSettings();
        createSettingsForm();
        setupValidation();
    }

    @PostConstruct
    public void initSettings() {
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        refreshSettings();
        log.debug("üîÑ SettingsComponent: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ –ë–î - autoTrading={}",
                currentSettings.isAutoTradingEnabled());
    }

    private void initializeComponent() {
        setSpacing(true);
        setPadding(true);
        setMaxWidth("1200px");
        getStyle().set("margin", "0 auto");

        H2 title = new H2("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏");
        title.addClassNames(LumoUtility.TextColor.PRIMARY, LumoUtility.FontSize.XLARGE);
        title.getStyle().set("margin-bottom", "2rem");
        title.getStyle().set("text-align", "center");

        add(title);
    }

    private void loadCurrentSettings() {
        try {
            currentSettings = settingsService.getSettings();
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", e);
            currentSettings = new Settings(); // fallback to default
        }
    }

    private void createSettingsForm() {
        createAutoTradingToggle();
        createSettingsFormSections();
        createSaveButton();
    }

    private void createAutoTradingToggle() {
        Div autoTradingCard = new Div();
        autoTradingCard.addClassNames(LumoUtility.Background.CONTRAST_5, LumoUtility.BorderRadius.LARGE);
        autoTradingCard.getStyle().set("padding", "1.5rem").set("margin-bottom", "2rem");

        HorizontalLayout toggleHeader = new HorizontalLayout();
        toggleHeader.setAlignItems(HorizontalLayout.Alignment.CENTER);
        toggleHeader.setWidthFull();

        Icon icon = new Icon(VaadinIcon.AUTOMATION);
        icon.addClassNames(LumoUtility.TextColor.SUCCESS);

        Div titleSection = new Div();
        H3 title = new H3("–ê–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥");
        title.getStyle().set("margin", "0").set("color", "var(--lumo-primary-text-color)");

        Div description = new Div();
        description.setText("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π");
        description.addClassNames(LumoUtility.TextColor.SECONDARY, LumoUtility.FontSize.SMALL);

        titleSection.add(title, description);

        autoTradingCheckbox = new Checkbox();
        autoTradingCheckbox.setValue(currentSettings.isAutoTradingEnabled());
        autoTradingCheckbox.getStyle().set("transform", "scale(1.3)");

        toggleHeader.add(icon, titleSection, autoTradingCheckbox);
        toggleHeader.setFlexGrow(1, titleSection);

        autoTradingCard.add(toggleHeader);
        add(autoTradingCard);

        autoTradingCheckbox.addValueChangeListener(event -> {
            try {
                Settings settings = settingsService.getSettings();
                settings.setAutoTradingEnabled(event.getValue());
                settingsService.save(settings);

                log.info(event.getValue() ? "–ê–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω" : "–ê–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω");
                Notification.show(event.getValue() ? "–ê–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω" : "–ê–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω");

//                if (event.getValue()) { //todo –±—É–¥–µ–º –∂–¥–∞—Ç—å —à–µ–¥—É–ª–ª–µ—Ä–∞
//                    log.debug("üöÄ UI: –ó–∞–ø—É—Å–∫–∞–µ–º maintainPairs() –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ");
//                    // –ó–∞–ø—É—Å–∫–∞–µ–º maintainPairs() –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å UI
//                    CompletableFuture.runAsync(() -> {
//                        try {
//                            tradeAndSimulationScheduler.maintainPairs();
//                        } catch (Exception e) {
//                            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∑–∞–ø—É—Å–∫–µ maintainPairs()", e);
//                        }
//                    });
//                }

                // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–∞
                if (autoTradingChangeCallback != null) {
                    log.debug("üîÑ SettingsComponent: –í—ã–∑—ã–≤–∞–µ–º autoTradingChangeCallback –¥–ª—è autoTrading={}", event.getValue());
                    autoTradingChangeCallback.run();
                } else {
                    log.debug("‚ö†Ô∏è SettingsComponent: autoTradingChangeCallback –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!");
                }
            } catch (Exception e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–∞", e);
                Notification.show("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–∞: " + e.getMessage());
            }
        });
    }

    private void createSettingsFormSections() {
        // Create form fields
        TextField timeframeField = new TextField("–¢–∞–π–º—Ñ—Ä–µ–π–º");
        NumberField candleLimitField = new NumberField("–°–≤–µ—á–µ–π (—à—Ç)");
        NumberField minZField = new NumberField("Min Z");
        NumberField minRSquaredField = new NumberField("Min R-Squared");
        NumberField minWindowSizeField = new NumberField("Min windowSize");
        NumberField minPValueField = new NumberField("Min pValue");
        NumberField maxAdfValueField = new NumberField("Max adfValue");
        NumberField minCorrelationField = new NumberField("Min corr");
        NumberField minVolumeField = new NumberField("Min Vol (–º–ª–Ω $)");
        NumberField checkIntervalField = new NumberField("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–º–∏–Ω)");

        // Create filter checkboxes
        Checkbox useMinZFilterCheckbox = new Checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Min Z —Ñ–∏–ª—å—Ç—Ä");
        Checkbox useMinRSquaredFilterCheckbox = new Checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Min R-Squared —Ñ–∏–ª—å—Ç—Ä");
        Checkbox useMinPValueFilterCheckbox = new Checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Min pValue —Ñ–∏–ª—å—Ç—Ä");
        Checkbox useMaxAdfValueFilterCheckbox = new Checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Max adfValue —Ñ–∏–ª—å—Ç—Ä");
        Checkbox useMinCorrelationFilterCheckbox = new Checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Min Correlation —Ñ–∏–ª—å—Ç—Ä");
        Checkbox useMinVolumeFilterCheckbox = new Checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Min Volume —Ñ–∏–ª—å—Ç—Ä");

        // Minimum lot blacklist field
        TextArea minimumLotBlacklistField = new TextArea("–ë–ª—ç–∫–ª–∏—Å—Ç –º–∏–Ω. –ª–æ—Ç–∞");
        minimumLotBlacklistField.setPlaceholder("–¢–∏–∫–µ—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (ETH-USDT-SWAP,BTC-USDT-SWAP)");
        minimumLotBlacklistField.setHelperText("–¢–∏–∫–µ—Ä—ã —Å –≤—ã—Å–æ–∫–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –ª–æ—Ç—É");

        NumberField maxShortMarginSize = new NumberField("–†–∞–∑–º–µ—Ä —Ä–∏—Å–∫–∞ —à–æ—Ä—Ç ($)");
        NumberField maxLongMarginSize = new NumberField("–†–∞–∑–º–µ—Ä —Ä–∏—Å–∫–∞ –ª–æ–Ω–≥ ($)");
        NumberField capitalShortField = new NumberField("–ü–æ–∑–∏—Ü–∏—è —à–æ—Ä—Ç ($)");
        NumberField leverageField = new NumberField("–ü–ª–µ—á–æ");

        NumberField exitTakeField = new NumberField("Exit –¢–µ–π–∫ (%)");
        NumberField exitStopField = new NumberField("Exit –°—Ç–æ–ø (%)");
        NumberField exitZMinField = new NumberField("Exit –ú–∏–Ω Z");
        NumberField exitZMaxField = new NumberField("Exit –ú–∞–∫—Å Z");
        NumberField exitZMaxPercentField = new NumberField("Exit –ú–∞–∫—Å Z (%)");
        NumberField exitTimeMinutesField = new NumberField("Exit –¢–∞–π–º–∞—É—Ç (–º–∏–Ω)");
        NumberField exitBreakEvenPercentField = new NumberField("–ü—Ä–æ—Ñ–∏—Ç –¥–ª—è –ë–£ (%)");
        NumberField exitNegativeZMinProfitPercentField = new NumberField("–ú–∏–Ω. –ø—Ä–æ—Ñ–∏—Ç –ø—Ä–∏ Z<0 (%)");

        // Create exit strategy checkboxes
        Checkbox useExitTakeCheckbox = new Checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Exit –¢–µ–π–∫");
        Checkbox useExitStopCheckbox = new Checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Exit –°—Ç–æ–ø");
        Checkbox useExitZMinCheckbox = new Checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Exit –ú–∏–Ω Z");
        Checkbox useExitZMaxCheckbox = new Checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Exit –ú–∞–∫—Å Z");
        Checkbox useExitZMaxPercentCheckbox = new Checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Exit –ú–∞–∫—Å Z (%)");
        Checkbox useExitTimeMinutesCheckbox = new Checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Exit –¢–∞–π–º–∞—É—Ç");
        Checkbox useExitBreakEvenPercentCheckbox = new Checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ—Ñ–∏—Ç–∞ –¥–ª—è –ë–£");
        Checkbox useExitNegativeZMinProfitPercentCheckbox = new Checkbox("–í—ã—Ö–æ–¥ –ø—Ä–∏ Z<0 —Å –º–∏–Ω. –ø—Ä–æ—Ñ–∏—Ç–æ–º");

        NumberField usePairsField = new NumberField("–ö–æ–ª-–≤–æ –ø–∞—Ä");

        // Set step and min values for number fields
        setNumberFieldProperties(candleLimitField, 1, 1);
        setNumberFieldProperties(minZField, 0.1, 0.0);
        setNumberFieldProperties(minRSquaredField, 0.1, 0.5);
        setNumberFieldProperties(minWindowSizeField, 1, 1);
        setNumberFieldProperties(minPValueField, 0.001, 0.0);
        setNumberFieldProperties(maxAdfValueField, 0.001, 0.0);
        setNumberFieldProperties(minCorrelationField, 0.01, -1.0);
        setNumberFieldProperties(minVolumeField, 1, 0.0);
        setNumberFieldProperties(checkIntervalField, 1, 1);
        setNumberFieldProperties(maxShortMarginSize, 1.0, 0.0);
        setNumberFieldProperties(maxLongMarginSize, 1.0, 0.0);
        setNumberFieldProperties(capitalShortField, 1.0, 0.0);
        setNumberFieldProperties(leverageField, 1, 1);
        setNumberFieldProperties(exitTakeField, 0.1, 0.0);
        setNumberFieldProperties(exitStopField, 0.1, -10.0);
        setNumberFieldProperties(exitZMinField, 0.01, -10.0);
        setNumberFieldProperties(exitZMaxField, 0.1, 0.0);
        setNumberFieldProperties(exitZMaxPercentField, 0.1, 0.0);
        setNumberFieldProperties(exitTimeMinutesField, 1, 1);
        setNumberFieldProperties(exitNegativeZMinProfitPercentField, 0.1, 0.0);
        setNumberFieldProperties(usePairsField, 1, 1);

        // Create sections
        add(createAnalysisSection(timeframeField, candleLimitField, minZField, minRSquaredField, minWindowSizeField,
                minPValueField, maxAdfValueField, minCorrelationField, minVolumeField,
                checkIntervalField, minimumLotBlacklistField, useMinZFilterCheckbox, useMinRSquaredFilterCheckbox,
                useMinPValueFilterCheckbox, useMaxAdfValueFilterCheckbox, useMinCorrelationFilterCheckbox,
                useMinVolumeFilterCheckbox));

        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—è –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è (–¥–µ–ø–æ–∑–∏—Ç –±–µ—Ä–µ—Ç—Å—è –∏–∑ OKX —á–µ—Ä–µ–∑ PortfolioService)
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—è –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
        Checkbox autoAveragingCheckbox = new Checkbox("–ê–≤—Ç–æ—É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ");
        NumberField averagingDrawdownThresholdField = new NumberField("–ü—Ä–æ—Å–∞–¥–∫–∞ –¥–ª—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è (%)");
        NumberField averagingVolumeMultiplierField = new NumberField("–ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ–±—ä–µ–º–∞");
        NumberField averagingDrawdownMultiplierField = new NumberField("–ú–Ω–æ–∂–∏—Ç–µ–ª—å –ø—Ä–æ—Å–∞–¥–∫–∏ –¥–ª—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è");
        NumberField maxAveragingCountField = new NumberField("Max –∫–æ–ª-–≤–æ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–π");
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –ø–æ–ª–µ–π —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
        setNumberFieldProperties(averagingDrawdownThresholdField, 0.1, 0.1);
        setNumberFieldProperties(averagingVolumeMultiplierField, 0.1, 1.0);
        setNumberFieldProperties(averagingDrawdownMultiplierField, 0.1, 1.0);
        setNumberFieldProperties(maxAveragingCountField, 1, 1);

        add(createCapitalManagementSection(usePairsField, maxShortMarginSize, maxLongMarginSize, 
                leverageField, autoAveragingCheckbox, averagingDrawdownThresholdField,
                averagingVolumeMultiplierField, averagingDrawdownMultiplierField, maxAveragingCountField));

        add(createExitStrategySection(
                exitTakeField,
                exitStopField,
                exitZMinField,
                exitZMaxField,
                exitZMaxPercentField,
                exitTimeMinutesField,
                exitBreakEvenPercentField,
                exitNegativeZMinProfitPercentField,
                useExitTakeCheckbox,
                useExitStopCheckbox,
                useExitZMinCheckbox,
                useExitZMaxCheckbox,
                useExitZMaxPercentCheckbox,
                useExitTimeMinutesCheckbox,
                useExitBreakEvenPercentCheckbox,
                useExitNegativeZMinProfitPercentCheckbox
        ));

        add(createScoringWeightsSection());

        // Bind fields to settings object
        bindFields(
                timeframeField,
                candleLimitField,
                minZField,
                minRSquaredField,
                minWindowSizeField,
                minPValueField,
                maxAdfValueField,
                checkIntervalField,
                minCorrelationField,
                minVolumeField,
                usePairsField,
                minimumLotBlacklistField,
                maxShortMarginSize,
                maxLongMarginSize,
                leverageField,
                exitTakeField,
                exitStopField,
                exitZMinField,
                exitZMaxField,
                exitZMaxPercentField,
                exitTimeMinutesField,
                exitBreakEvenPercentField,
                exitNegativeZMinProfitPercentField,
                useMinZFilterCheckbox,
                useMinRSquaredFilterCheckbox,
                useMinPValueFilterCheckbox,
                useMaxAdfValueFilterCheckbox,
                useMinCorrelationFilterCheckbox,
                useMinVolumeFilterCheckbox,
                useExitTakeCheckbox,
                useExitStopCheckbox,
                useExitZMinCheckbox,
                useExitZMaxCheckbox,
                useExitZMaxPercentCheckbox,
                useExitTimeMinutesCheckbox,
                useExitBreakEvenPercentCheckbox,
                useExitNegativeZMinProfitPercentCheckbox);
        
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø–æ–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ
        bindAveragingFields(autoAveragingCheckbox, averagingDrawdownThresholdField,
                averagingVolumeMultiplierField, averagingDrawdownMultiplierField, maxAveragingCountField);

        settingsBinder.readBean(currentSettings);
    }

    private Details createAnalysisSection(TextField timeframeField, NumberField candleLimitField,
                                          NumberField minZField, NumberField minRSquaredField,
                                          NumberField minWindowSizeField, NumberField minPValueField,
                                          NumberField maxAdfValueField, NumberField minCorrelationField,
                                          NumberField minVolumeField, NumberField checkIntervalField,
                                          TextArea minimumLotBlacklistField,
                                          Checkbox useMinZFilterCheckbox,
                                          Checkbox useMinRSquaredFilterCheckbox, Checkbox useMinPValueFilterCheckbox,
                                          Checkbox useMaxAdfValueFilterCheckbox, Checkbox useMinCorrelationFilterCheckbox,
                                          Checkbox useMinVolumeFilterCheckbox) {

        FormLayout analysisForm = createFormLayout();

        // –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏
        HorizontalLayout minZLayout = createFilterLayout(useMinZFilterCheckbox, minZField);
        HorizontalLayout minRSquaredLayout = createFilterLayout(useMinRSquaredFilterCheckbox, minRSquaredField);
        HorizontalLayout minPValueLayout = createFilterLayout(useMinPValueFilterCheckbox, minPValueField);
        HorizontalLayout maxAdfValueLayout = createFilterLayout(useMaxAdfValueFilterCheckbox, maxAdfValueField);
        HorizontalLayout minCorrelationLayout = createFilterLayout(useMinCorrelationFilterCheckbox, minCorrelationField);
        HorizontalLayout minVolumeLayout = createFilterLayout(useMinVolumeFilterCheckbox, minVolumeField);

        analysisForm.add(
                timeframeField, candleLimitField, checkIntervalField,
                minZLayout, minRSquaredLayout, minWindowSizeField, minPValueLayout,
                maxAdfValueLayout, minCorrelationLayout, minVolumeLayout,
                minimumLotBlacklistField
        );

        Details analysisSection = createDetailsCard("üîç –ê–Ω–∞–ª–∏–∑ –∏ —Ñ–∏–ª—å—Ç—Ä—ã",
                "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä", analysisForm);
        analysisSection.setOpened(true);
        return analysisSection;
    }

    private Details createCapitalSection(NumberField maxShortMarginSize, NumberField maxLongMarginSize, NumberField leverageField
    ) {
        FormLayout capitalForm = createFormLayout();
        capitalForm.add(
                maxShortMarginSize,
                maxLongMarginSize,
                leverageField);

        return createDetailsCard("üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–æ–º",
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏", capitalForm);
    }

    private Details createExitStrategySection(
            NumberField exitTakeField,
            NumberField exitStopField,
            NumberField exitZMinField,
            NumberField exitZMaxField,
            NumberField exitZMaxPercentField,
            NumberField exitTimeMinutesField,
            NumberField exitBreakEvenPercentField,
            NumberField exitNegativeZMinProfitPercentField,
            Checkbox useExitTakeCheckbox,
            Checkbox useExitStopCheckbox,
            Checkbox useExitZMinCheckbox,
            Checkbox useExitZMaxCheckbox,
            Checkbox useExitZMaxPercentCheckbox,
            Checkbox useExitTimeMinutesCheckbox,
            Checkbox useExitBreakEvenPercentCheckbox,
            Checkbox useExitNegativeZMinProfitPercentCheckbox
    ) {

        FormLayout exitForm = createFormLayout();

        // –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –≤—ã—Ö–æ–¥–∞ —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏
        HorizontalLayout exitTakeLayout = createFilterLayout(useExitTakeCheckbox, exitTakeField);
        HorizontalLayout exitStopLayout = createFilterLayout(useExitStopCheckbox, exitStopField);
        HorizontalLayout exitZMinLayout = createFilterLayout(useExitZMinCheckbox, exitZMinField);
        HorizontalLayout exitZMaxLayout = createFilterLayout(useExitZMaxCheckbox, exitZMaxField);
        HorizontalLayout exitZMaxPercentLayout = createFilterLayout(useExitZMaxPercentCheckbox, exitZMaxPercentField);
        HorizontalLayout exitTimeMinutesLayout = createFilterLayout(useExitTimeMinutesCheckbox, exitTimeMinutesField);
        HorizontalLayout exitBreakEvenPercentLayout = createFilterLayout(useExitBreakEvenPercentCheckbox, exitBreakEvenPercentField);
        HorizontalLayout exitNegativeZMinProfitPercentLayout = createFilterLayout(useExitNegativeZMinProfitPercentCheckbox, exitNegativeZMinProfitPercentField);

        exitForm.add(
                exitTakeLayout,
                exitStopLayout,
                exitZMinLayout,
                exitZMaxLayout,
                exitZMaxPercentLayout,
                exitTimeMinutesLayout,
                exitBreakEvenPercentLayout,
                exitNegativeZMinProfitPercentLayout
        );

        return createDetailsCard("üö™ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤—ã—Ö–æ–¥–∞",
                "–£—Å–ª–æ–≤–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏", exitForm);
    }

    private Details createScoringWeightsSection() {
        FormLayout scoringForm = createFormLayout();

        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—è –¥–ª—è –≤–µ—Å–æ–≤ —Å–∫–æ—Ä–∏–Ω–≥–∞
        NumberField zScoreWeightField = new NumberField("Z-Score —Å–∏–ª–∞ (–æ—á–∫–∏)");
        NumberField pixelSpreadWeightField = new NumberField("–ü–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ (–æ—á–∫–∏)");
        NumberField cointegrationWeightField = new NumberField("–ö–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (–æ—á–∫–∏)");
        NumberField modelQualityWeightField = new NumberField("–ö–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏ (–æ—á–∫–∏)");
        NumberField statisticsWeightField = new NumberField("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–æ—á–∫–∏)");
        NumberField bonusWeightField = new NumberField("–ë–æ–Ω—É—Å—ã (–æ—á–∫–∏)");

        // –°–æ–∑–¥–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        Checkbox useZScoreScoringCheckbox = new Checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Z-Score —Å–∫–æ—Ä–∏–Ω–≥");
        Checkbox usePixelSpreadScoringCheckbox = new Checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ —Å–∫–æ—Ä–∏–Ω–≥");
        Checkbox useCointegrationScoringCheckbox = new Checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å–∫–æ—Ä–∏–Ω–≥");
        Checkbox useModelQualityScoringCheckbox = new Checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏ —Å–∫–æ—Ä–∏–Ω–≥");
        Checkbox useStatisticsScoringCheckbox = new Checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–æ—Ä–∏–Ω–≥");
        Checkbox useBonusScoringCheckbox = new Checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–Ω—É—Å—ã —Å–∫–æ—Ä–∏–Ω–≥");

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –ø–æ–ª–µ–π
        setNumberFieldProperties(zScoreWeightField, 1.0, 0.0);
        setNumberFieldProperties(pixelSpreadWeightField, 1.0, 0.0);
        setNumberFieldProperties(cointegrationWeightField, 1.0, 0.0);
        setNumberFieldProperties(modelQualityWeightField, 1.0, 0.0);
        setNumberFieldProperties(statisticsWeightField, 1.0, 0.0);
        setNumberFieldProperties(bonusWeightField, 1.0, 0.0);

        // –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏ —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏
        HorizontalLayout zScoreLayout = createFilterLayout(useZScoreScoringCheckbox, zScoreWeightField);
        HorizontalLayout pixelSpreadLayout = createFilterLayout(usePixelSpreadScoringCheckbox, pixelSpreadWeightField);
        HorizontalLayout cointegrationLayout = createFilterLayout(useCointegrationScoringCheckbox, cointegrationWeightField);
        HorizontalLayout modelQualityLayout = createFilterLayout(useModelQualityScoringCheckbox, modelQualityWeightField);
        HorizontalLayout statisticsLayout = createFilterLayout(useStatisticsScoringCheckbox, statisticsWeightField);
        HorizontalLayout bonusLayout = createFilterLayout(useBonusScoringCheckbox, bonusWeightField);

        scoringForm.add(
                zScoreLayout,
                pixelSpreadLayout,
                cointegrationLayout,
                modelQualityLayout,
                statisticsLayout,
                bonusLayout
        );

        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø–æ–ª—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
        bindScoringFields(
                zScoreWeightField, pixelSpreadWeightField, cointegrationWeightField,
                modelQualityWeightField, statisticsWeightField, bonusWeightField,
                useZScoreScoringCheckbox, usePixelSpreadScoringCheckbox, useCointegrationScoringCheckbox,
                useModelQualityScoringCheckbox, useStatisticsScoringCheckbox, useBonusScoringCheckbox
        );

        return createDetailsCard("üéØ –í–µ—Å–∞ —Å–∏—Å—Ç–µ–º—ã —Å–∫–æ—Ä–∏–Ω–≥–∞",
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä", scoringForm);
    }

    private Details createAveragingSection() {
        FormLayout averagingForm = createFormLayout();

        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—è –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
        Checkbox autoAveragingCheckbox = new Checkbox("–ê–≤—Ç–æ—É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ");
        NumberField averagingDrawdownThresholdField = new NumberField("–ü—Ä–æ—Å–∞–¥–∫–∞ –¥–ª—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è (%)");
        NumberField averagingVolumeMultiplierField = new NumberField("–ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ–±—ä–µ–º–∞");
        NumberField averagingDrawdownMultiplierField = new NumberField("–ú–Ω–æ–∂–∏—Ç–µ–ª—å –ø—Ä–æ—Å–∞–¥–∫–∏ –¥–ª—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è");
        NumberField maxAveragingCountField = new NumberField("Max –∫–æ–ª-–≤–æ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–π");

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –ø–æ–ª–µ–π
        setNumberFieldProperties(averagingDrawdownThresholdField, 0.1, 0.1);
        setNumberFieldProperties(averagingVolumeMultiplierField, 0.1, 1.0);
        setNumberFieldProperties(averagingDrawdownMultiplierField, 0.1, 1.0);
        setNumberFieldProperties(maxAveragingCountField, 1, 1);

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º placeholder –∏ helper text
        averagingDrawdownThresholdField.setPlaceholder("10.0");
        averagingDrawdownThresholdField.setHelperText("–ü–æ—Ä–æ–≥ –ø—Ä–æ—Å–∞–¥–∫–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è");

        averagingVolumeMultiplierField.setPlaceholder("1.5");
        averagingVolumeMultiplierField.setHelperText("–ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ–±—ä–µ–º–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è");

        averagingDrawdownMultiplierField.setPlaceholder("1.5");
        averagingDrawdownMultiplierField.setHelperText("–ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Ä–æ–≥–∞ –ø—Ä–æ—Å–∞–¥–∫–∏");

        maxAveragingCountField.setPlaceholder("3");
        maxAveragingCountField.setHelperText("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–π –¥–ª—è –æ–¥–Ω–æ–π –ø–∞—Ä—ã");

        // –õ–æ–≥–∏–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª–µ–π
        boolean isAutoAveragingEnabled = currentSettings.isAutoAveragingEnabled();
        averagingDrawdownThresholdField.setEnabled(isAutoAveragingEnabled);
        averagingVolumeMultiplierField.setEnabled(isAutoAveragingEnabled);
        averagingDrawdownMultiplierField.setEnabled(isAutoAveragingEnabled);
        maxAveragingCountField.setEnabled(isAutoAveragingEnabled);

        autoAveragingCheckbox.addValueChangeListener(event -> {
            boolean enabled = event.getValue();
            averagingDrawdownThresholdField.setEnabled(enabled);
            averagingVolumeMultiplierField.setEnabled(enabled);
            averagingDrawdownMultiplierField.setEnabled(enabled);
            maxAveragingCountField.setEnabled(enabled);
        });

        averagingForm.add(
                autoAveragingCheckbox,
                averagingDrawdownThresholdField,
                averagingVolumeMultiplierField,
                averagingDrawdownMultiplierField,
                maxAveragingCountField
        );

        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø–æ–ª—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
        bindAveragingFields(autoAveragingCheckbox, averagingDrawdownThresholdField,
                averagingVolumeMultiplierField, averagingDrawdownMultiplierField, maxAveragingCountField);

        return createDetailsCard("üéØ –£—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ",
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏ —Ä—É—á–Ω–æ–≥–æ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π", averagingForm);
    }

    private Details createDetailsCard(String title, String description, FormLayout content) {
        Div cardContent = new Div();
        cardContent.addClassNames(LumoUtility.Background.CONTRAST_5, LumoUtility.BorderRadius.MEDIUM);
        cardContent.getStyle().set("padding", "1.5rem");

        Div header = new Div();
        H4 cardTitle = new H4(title);
        cardTitle.getStyle().set("margin", "0 0 0.5rem 0").set("color", "var(--lumo-primary-text-color)");

        Div cardDescription = new Div();
        cardDescription.setText(description);
        cardDescription.addClassNames(LumoUtility.TextColor.SECONDARY, LumoUtility.FontSize.SMALL);
        cardDescription.getStyle().set("margin-bottom", "1rem");

        header.add(cardTitle, cardDescription);
        cardContent.add(header, content);

        Details details = new Details();
        details.setSummaryText(title);
        details.setContent(cardContent);
        details.getStyle().set("margin-bottom", "1rem");
        details.addClassNames(LumoUtility.Border.ALL, LumoUtility.BorderRadius.LARGE);

        return details;
    }

    private FormLayout createFormLayout() {
        FormLayout form = new FormLayout();
        form.setResponsiveSteps(
                new FormLayout.ResponsiveStep("0", 1),
                new FormLayout.ResponsiveStep("500px", 2),
                new FormLayout.ResponsiveStep("800px", 3)
        );
        return form;
    }

    private void createSaveButton() {
        Button saveButton = new Button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", e -> saveSettings());
        saveButton.addThemeVariants(ButtonVariant.LUMO_PRIMARY, ButtonVariant.LUMO_LARGE);
        saveButton.getStyle().set("margin-top", "2rem").set("width", "100%");

        Div buttonContainer = new Div(saveButton);
        buttonContainer.getStyle().set("text-align", "center");

        add(buttonContainer);
    }

    private void setNumberFieldProperties(NumberField field, double step, double min) {
        field.setStep(step);
        field.setMin(min);
        field.setStepButtonsVisible(true);
    }

    private void bindFields(TextField timeframeField,
                            NumberField candleLimitField,
                            NumberField minZField,
                            NumberField minRSquaredField,
                            NumberField minWindowSizeField,
                            NumberField maxPValueField,
                            NumberField maxAdfValueField,
                            NumberField checkIntervalField,
                            NumberField minCorrelationField,
                            NumberField minVolumeField,
                            NumberField usePairsField,
                            TextArea minimumLotBlacklistField,
                            NumberField maxShortMarginSizeField,
                            NumberField maxLongMarginSizeField,
                            NumberField leverageField,
                            NumberField exitTakeField,
                            NumberField exitStopField,
                            NumberField exitZMinField,
                            NumberField exitZMaxField,
                            NumberField exitZMaxPercentField,
                            NumberField exitTimeMinutesField,
                            NumberField exitBreakEvenPercentField,
                            NumberField exitNegativeZMinProfitPercentField,
                            Checkbox useMinZFilterCheckbox,
                            Checkbox useMinRSquaredFilterCheckbox,
                            Checkbox useMinPValueFilterCheckbox,
                            Checkbox useMaxAdfValueFilterCheckbox,
                            Checkbox useMinCorrelationFilterCheckbox,
                            Checkbox useMinVolumeFilterCheckbox,
                            Checkbox useExitTakeCheckbox,
                            Checkbox useExitStopCheckbox,
                            Checkbox useExitZMinCheckbox,
                            Checkbox useExitZMaxCheckbox,
                            Checkbox useExitZMaxPercentCheckbox,
                            Checkbox useExitTimeMinutesCheckbox,
                            Checkbox useExitBreakEvenPercentCheckbox,
                            Checkbox useExitNegativeZMinProfitPercentCheckbox) {

        settingsBinder.forField(timeframeField)
                .withValidator(new StringLengthValidator("–¢–∞–π–º—Ñ—Ä–µ–π–º –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", 1, null))
                .bind(Settings::getTimeframe, Settings::setTimeframe);

        settingsBinder.forField(candleLimitField)
                .withValidator(new DoubleRangeValidator("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0", 1.0, Double.MAX_VALUE))
                .bind(Settings::getCandleLimit, Settings::setCandleLimit);

        settingsBinder.forField(minZField).bind(Settings::getMinZ, Settings::setMinZ);
        settingsBinder.forField(minRSquaredField).bind(Settings::getMinRSquared, Settings::setMinRSquared);
        settingsBinder.forField(minWindowSizeField).bind(Settings::getMinWindowSize, Settings::setMinWindowSize);
        settingsBinder.forField(maxPValueField).bind(Settings::getMaxPValue, Settings::setMaxPValue);
        settingsBinder.forField(maxAdfValueField).bind(Settings::getMaxAdfValue, Settings::setMaxAdfValue);
        settingsBinder.forField(checkIntervalField).bind(Settings::getCheckInterval, Settings::setCheckInterval);
        settingsBinder.forField(maxShortMarginSizeField).bind(Settings::getMaxShortMarginSize, Settings::setMaxShortMarginSize);
        settingsBinder.forField(maxLongMarginSizeField).bind(Settings::getMaxLongMarginSize, Settings::setMaxLongMarginSize);

        settingsBinder.forField(leverageField)
                .withValidator(new DoubleRangeValidator("–ü–ª–µ—á–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0", 0.1, Double.MAX_VALUE))
                .bind(Settings::getLeverage, Settings::setLeverage);


        settingsBinder.forField(exitTakeField).bind(Settings::getExitTake, Settings::setExitTake);
        settingsBinder.forField(exitStopField).bind(Settings::getExitStop, Settings::setExitStop);
        settingsBinder.forField(exitZMinField).bind(Settings::getExitZMin, Settings::setExitZMin);
        settingsBinder.forField(exitZMaxField).bind(Settings::getExitZMax, Settings::setExitZMax);
        settingsBinder.forField(exitZMaxPercentField).bind(Settings::getExitZMaxPercent, Settings::setExitZMaxPercent);
        settingsBinder.forField(exitTimeMinutesField).bind(Settings::getExitTimeMinutes, Settings::setExitTimeMinutes);
        settingsBinder.forField(exitBreakEvenPercentField).bind(Settings::getExitBreakEvenPercent, Settings::setExitBreakEvenPercent);
        settingsBinder.forField(exitNegativeZMinProfitPercentField).bind(Settings::getExitNegativeZMinProfitPercent, Settings::setExitNegativeZMinProfitPercent);
        settingsBinder.forField(minCorrelationField).bind(Settings::getMinCorrelation, Settings::setMinCorrelation);
        settingsBinder.forField(minVolumeField).bind(Settings::getMinVolume, Settings::setMinVolume);
        settingsBinder.forField(usePairsField).bind(Settings::getUsePairs, Settings::setUsePairs);

        // Bind minimum lot blacklist field
        settingsBinder.forField(minimumLotBlacklistField).bind(Settings::getMinimumLotBlacklist, Settings::setMinimumLotBlacklist);

        // Bind filter checkboxes
        settingsBinder.forField(useMinZFilterCheckbox).bind(Settings::isUseMinZFilter, Settings::setUseMinZFilter);
        settingsBinder.forField(useMinRSquaredFilterCheckbox).bind(Settings::isUseMinRSquaredFilter, Settings::setUseMinRSquaredFilter);
        settingsBinder.forField(useMinPValueFilterCheckbox).bind(Settings::isUseMaxPValueFilter, Settings::setUseMaxPValueFilter);
        settingsBinder.forField(useMaxAdfValueFilterCheckbox).bind(Settings::isUseMaxAdfValueFilter, Settings::setUseMaxAdfValueFilter);
        settingsBinder.forField(useMinCorrelationFilterCheckbox).bind(Settings::isUseMinCorrelationFilter, Settings::setUseMinCorrelationFilter);
        settingsBinder.forField(useMinVolumeFilterCheckbox).bind(Settings::isUseMinVolumeFilter, Settings::setUseMinVolumeFilter);

        // Bind exit strategy checkboxes
        settingsBinder.forField(useExitTakeCheckbox).bind(Settings::isUseExitTake, Settings::setUseExitTake);
        settingsBinder.forField(useExitStopCheckbox).bind(Settings::isUseExitStop, Settings::setUseExitStop);
        settingsBinder.forField(useExitZMinCheckbox).bind(Settings::isUseExitZMin, Settings::setUseExitZMin);
        settingsBinder.forField(useExitZMaxCheckbox).bind(Settings::isUseExitZMax, Settings::setUseExitZMax);
        settingsBinder.forField(useExitZMaxPercentCheckbox).bind(Settings::isUseExitZMaxPercent, Settings::setUseExitZMaxPercent);
        settingsBinder.forField(useExitTimeMinutesCheckbox).bind(Settings::isUseExitTimeMinutes, Settings::setUseExitTimeMinutes);
        settingsBinder.forField(useExitBreakEvenPercentCheckbox).bind(Settings::isUseExitBreakEvenPercent, Settings::setUseExitBreakEvenPercent);
        settingsBinder.forField(useExitNegativeZMinProfitPercentCheckbox).bind(Settings::isUseExitNegativeZMinProfitPercent, Settings::setUseExitNegativeZMinProfitPercent);
    }

    /**
     * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –ø–æ–ª—è —Å–∫–æ—Ä–∏–Ω–≥–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
     */
    private void bindScoringFields(NumberField zScoreWeightField, NumberField pixelSpreadWeightField,
                                   NumberField cointegrationWeightField, NumberField modelQualityWeightField,
                                   NumberField statisticsWeightField, NumberField bonusWeightField,
                                   Checkbox useZScoreScoringCheckbox, Checkbox usePixelSpreadScoringCheckbox,
                                   Checkbox useCointegrationScoringCheckbox, Checkbox useModelQualityScoringCheckbox,
                                   Checkbox useStatisticsScoringCheckbox, Checkbox useBonusScoringCheckbox) {

        // Bind scoring weight fields
        settingsBinder.forField(zScoreWeightField)
                .withValidator(new DoubleRangeValidator("–í–µ—Å Z-Score –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0", 0.0, Double.MAX_VALUE))
                .bind(Settings::getZScoreScoringWeight, Settings::setZScoreScoringWeight);

        settingsBinder.forField(pixelSpreadWeightField)
                .withValidator(new DoubleRangeValidator("–í–µ—Å –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0", 0.0, Double.MAX_VALUE))
                .bind(Settings::getPixelSpreadScoringWeight, Settings::setPixelSpreadScoringWeight);

        settingsBinder.forField(cointegrationWeightField)
                .withValidator(new DoubleRangeValidator("–í–µ—Å –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0", 0.0, Double.MAX_VALUE))
                .bind(Settings::getCointegrationScoringWeight, Settings::setCointegrationScoringWeight);

        settingsBinder.forField(modelQualityWeightField)
                .withValidator(new DoubleRangeValidator("–í–µ—Å –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0", 0.0, Double.MAX_VALUE))
                .bind(Settings::getModelQualityScoringWeight, Settings::setModelQualityScoringWeight);

        settingsBinder.forField(statisticsWeightField)
                .withValidator(new DoubleRangeValidator("–í–µ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0", 0.0, Double.MAX_VALUE))
                .bind(Settings::getStatisticsScoringWeight, Settings::setStatisticsScoringWeight);

        settingsBinder.forField(bonusWeightField)
                .withValidator(new DoubleRangeValidator("–í–µ—Å –±–æ–Ω—É—Å–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0", 0.0, Double.MAX_VALUE))
                .bind(Settings::getBonusScoringWeight, Settings::setBonusScoringWeight);

        // Bind scoring checkbox fields  
        settingsBinder.forField(useZScoreScoringCheckbox).bind(Settings::isUseZScoreScoring, Settings::setUseZScoreScoring);
        settingsBinder.forField(usePixelSpreadScoringCheckbox).bind(Settings::isUsePixelSpreadScoring, Settings::setUsePixelSpreadScoring);
        settingsBinder.forField(useCointegrationScoringCheckbox).bind(Settings::isUseCointegrationScoring, Settings::setUseCointegrationScoring);
        settingsBinder.forField(useModelQualityScoringCheckbox).bind(Settings::isUseModelQualityScoring, Settings::setUseModelQualityScoring);
        settingsBinder.forField(useStatisticsScoringCheckbox).bind(Settings::isUseStatisticsScoring, Settings::setUseStatisticsScoring);
        settingsBinder.forField(useBonusScoringCheckbox).bind(Settings::isUseBonusScoring, Settings::setUseBonusScoring);
    }

    /**
     * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –ø–æ–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
     */
    private void bindAveragingFields(Checkbox autoAveragingCheckbox,
                                     NumberField averagingDrawdownThresholdField,
                                     NumberField averagingVolumeMultiplierField,
                                     NumberField averagingDrawdownMultiplierField,
                                     NumberField maxAveragingCountField) {

        // Bind averaging checkbox
        settingsBinder.forField(autoAveragingCheckbox)
                .bind(Settings::isAutoAveragingEnabled, Settings::setAutoAveragingEnabled);

        // Bind averaging drawdown threshold field
        settingsBinder.forField(averagingDrawdownThresholdField)
                .withValidator(new DoubleRangeValidator("–ü—Ä–æ—Å–∞–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.1%", 0.1, 100.0))
                .bind(Settings::getAveragingDrawdownThreshold, Settings::setAveragingDrawdownThreshold);

        // Bind averaging volume multiplier field
        settingsBinder.forField(averagingVolumeMultiplierField)
                .withValidator(new DoubleRangeValidator("–ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ–±—ä–µ–º–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 1.0", 1.0, 10.0))
                .bind(Settings::getAveragingVolumeMultiplier, Settings::setAveragingVolumeMultiplier);

        // Bind averaging drawdown multiplier field
        settingsBinder.forField(averagingDrawdownMultiplierField)
                .withValidator(new DoubleRangeValidator("–ú–Ω–æ–∂–∏—Ç–µ–ª—å –ø—Ä–æ—Å–∞–¥–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 1.0", 1.0, 10.0))
                .bind(Settings::getAveragingDrawdownMultiplier, Settings::setAveragingDrawdownMultiplier);

        // Bind max averaging count field
        settingsBinder.forField(maxAveragingCountField)
                .withValidator(new DoubleRangeValidator("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 1", 1.0, 20.0))
                .bind(settings -> (double) settings.getMaxAveragingCount(),
                        (settings, value) -> settings.setMaxAveragingCount(value.intValue()));
    }

    private void setupValidation() {
        settingsBinder.setStatusLabel(null);
    }

    private void saveSettings() {
        try {
            //todo –±–∞–≥ - –∫–æ–≥–¥–∞ —Å—Ç–∞–≤–∏—à—å/—Å–Ω–∏–º–∞–µ—à—å –ê–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –∏ –∂–º–µ—à—å –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - —á–µ–∫–±–æ–∫—Å —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è! –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º—ã –±–µ—Ä–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞!
            settingsBinder.writeBean(currentSettings);
            settingsService.save(currentSettings);
            Notification.show("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ");
            log.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ");
        } catch (ValidationException e) {
            String errorMessage = "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π: " +
                    e.getValidationErrors().stream()
                            .map(ValidationResult::getErrorMessage)
                            .reduce((a, b) -> a + ", " + b)
                            .orElse("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞");

            Notification.show(errorMessage);
            log.warn("‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {}", errorMessage);
        } catch (Exception e) {
            String errorMessage = "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: " + e.getMessage();
            Notification.show(errorMessage);
            log.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫", e);
        }
    }

    public void refreshSettings() {
        loadCurrentSettings();
        autoTradingCheckbox.setValue(currentSettings.isAutoTradingEnabled());
        settingsBinder.readBean(currentSettings);
    }

    public void setAutoTradingChangeCallback(Runnable callback) {
        this.autoTradingChangeCallback = callback;
    }

    public boolean isAutoTradingEnabled() {
        return autoTradingCheckbox.getValue();
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–æ–Ω–æ–≤–∫—É –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ —Å —á–µ–∫–±–æ–∫—Å–æ–º –∏ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞
     */
    private HorizontalLayout createFilterLayout(Checkbox checkbox, NumberField field) {
        HorizontalLayout layout = new HorizontalLayout();
        layout.setAlignItems(HorizontalLayout.Alignment.CENTER);
        layout.setSpacing(true);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–µ–∫–±–æ–∫—Å–∞
        field.setEnabled(checkbox.getValue());

        // –î–æ–±–∞–≤–ª—è–µ–º listener –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—è
        checkbox.addValueChangeListener(event -> {
            field.setEnabled(event.getValue());
        });

        layout.add(checkbox, field);
        layout.setFlexGrow(0, checkbox);
        layout.setFlexGrow(1, field);

        return layout;
    }

    private Details createCapitalManagementSection(NumberField usePairsField,
                                                   NumberField maxShortMarginSize, 
                                                   NumberField maxLongMarginSize, 
                                                   NumberField leverageField,
                                                   Checkbox autoAveragingCheckbox,
                                                   NumberField averagingDrawdownThresholdField,
                                                   NumberField averagingVolumeMultiplierField,
                                                   NumberField averagingDrawdownMultiplierField,
                                                   NumberField maxAveragingCountField) {
        
        FormLayout capitalForm = createFormLayout();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º placeholder –∏ helper text –¥–ª—è –ø–æ–ª–µ–π —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
        averagingDrawdownThresholdField.setPlaceholder("10.0");
        averagingDrawdownThresholdField.setHelperText("–ü–æ—Ä–æ–≥ –ø—Ä–æ—Å–∞–¥–∫–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è");
        
        averagingVolumeMultiplierField.setPlaceholder("1.5");
        averagingVolumeMultiplierField.setHelperText("–ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ–±—ä–µ–º–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è");
        
        averagingDrawdownMultiplierField.setPlaceholder("1.5");
        averagingDrawdownMultiplierField.setHelperText("–ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Ä–æ–≥–∞ –ø—Ä–æ—Å–∞–¥–∫–∏");
        
        maxAveragingCountField.setPlaceholder("3");
        maxAveragingCountField.setHelperText("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–π –¥–ª—è –æ–¥–Ω–æ–π –ø–∞—Ä—ã");
        
        // –õ–æ–≥–∏–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª–µ–π —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
        boolean isAutoAveragingEnabled = currentSettings.isAutoAveragingEnabled();
        averagingDrawdownThresholdField.setEnabled(isAutoAveragingEnabled);
        averagingVolumeMultiplierField.setEnabled(isAutoAveragingEnabled);
        averagingDrawdownMultiplierField.setEnabled(isAutoAveragingEnabled);
        maxAveragingCountField.setEnabled(isAutoAveragingEnabled);
        
        autoAveragingCheckbox.addValueChangeListener(event -> {
            boolean enabled = event.getValue();
            averagingDrawdownThresholdField.setEnabled(enabled);
            averagingVolumeMultiplierField.setEnabled(enabled);
            averagingDrawdownMultiplierField.setEnabled(enabled);
            maxAveragingCountField.setEnabled(enabled);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–ø–∏—Ç–∞–ª–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
            updateCapitalInfo();
        });
        
        // –°–ª—É—à–∞—Ç–µ–ª–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–ø–∏—Ç–∞–ª–µ
        usePairsField.addValueChangeListener(e -> updateCapitalInfo());
        maxShortMarginSize.addValueChangeListener(e -> updateCapitalInfo());
        maxLongMarginSize.addValueChangeListener(e -> updateCapitalInfo());
        averagingVolumeMultiplierField.addValueChangeListener(e -> updateCapitalInfo());
        maxAveragingCountField.addValueChangeListener(e -> updateCapitalInfo());
        
        // –°–æ–∑–¥–∞–µ–º —Å–ø–∞–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–ø–∏—Ç–∞–ª–µ
        capitalInfoSpan = new Span();
        capitalInfoSpan.getStyle().set("font-weight", "bold").set("margin-top", "1rem").set("display", "block");
        
        capitalForm.add(
                usePairsField,
                maxShortMarginSize,
                maxLongMarginSize,
                leverageField,
                autoAveragingCheckbox,
                averagingDrawdownThresholdField,
                averagingVolumeMultiplierField,
                averagingDrawdownMultiplierField,
                maxAveragingCountField,
                capitalInfoSpan
        );
        
        Details section = createDetailsCard("üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–æ–º", 
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–∞, —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è", capitalForm);
        section.setOpened(true);
        
        return section;
    }
    
    private void updateCapitalInfo() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–æ–ª–µ–π
            Settings tempSettings = Settings.builder()
                    .usePairs(getCurrentDoubleValue("usePairs", currentSettings.getUsePairs()))
                    .maxShortMarginSize(getCurrentDoubleValue("maxShortMarginSize", currentSettings.getMaxShortMarginSize()))
                    .maxLongMarginSize(getCurrentDoubleValue("maxLongMarginSize", currentSettings.getMaxLongMarginSize()))
                    .autoAveragingEnabled(getCurrentBooleanValue("autoAveragingEnabled", currentSettings.isAutoAveragingEnabled()))
                    .averagingVolumeMultiplier(getCurrentDoubleValue("averagingVolumeMultiplier", currentSettings.getAveragingVolumeMultiplier()))
                    .maxAveragingCount(getCurrentIntValue("maxAveragingCount", currentSettings.getMaxAveragingCount()))
                    .build();
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç—Ä–µ–±—É–µ–º—ã–π –∫–∞–ø–∏—Ç–∞–ª
            CapitalCalculationService.CapitalRequirement requirement = 
                    capitalCalculationService.calculateRequiredCapitalAlternative(tempSettings);
            
            // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Å OKX
            double availableBalance = portfolioService.getBalanceUSDT().doubleValue();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
            CapitalCalculationService.DepositCheckResult result = 
                    capitalCalculationService.checkDeposit(requirement, availableBalance);
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            String message = String.format("–ü—Ä–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ç—Ä–µ–±—É–µ—Ç—Å—è: %.2f$ (–±–∞–∑–æ–≤—ã–π: %.2f$, —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ: %.2f$)", 
                    requirement.getTotalRequiredCapital(),
                    requirement.getTotalBaseCapital(),
                    requirement.getTotalAveragingCapital());
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è
            if (result.isExceeded()) {
                capitalInfoSpan.getStyle().set("color", "red");
                message = "‚ùå " + message + String.format(" - –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –Ω–∞ %.2f$ (–¥–æ—Å—Ç—É–ø–Ω–æ: %.2f$)", result.getDifference(), availableBalance);
            } else {
                capitalInfoSpan.getStyle().set("color", "green");
                message = "‚úÖ " + message + String.format(" (–¥–æ—Å—Ç—É–ø–Ω–æ: %.2f$)", availableBalance);
            }
            
            capitalInfoSpan.setText(message);
            
        } catch (Exception e) {
            capitalInfoSpan.setText("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–∞–ø–∏—Ç–∞–ª–∞: " + e.getMessage());
            capitalInfoSpan.getStyle().set("color", "orange");
        }
    }
    
    private double getCurrentDoubleValue(String fieldName, double defaultValue) {
        try {
            return settingsBinder.getBean() != null ? 
                    (Double) settingsBinder.getBean().getClass().getMethod("get" + capitalizeFirst(fieldName)).invoke(settingsBinder.getBean()) : 
                    defaultValue;
        } catch (Exception e) {
            return defaultValue;
        }
    }
    
    private boolean getCurrentBooleanValue(String fieldName, boolean defaultValue) {
        try {
            return settingsBinder.getBean() != null ? 
                    (Boolean) settingsBinder.getBean().getClass().getMethod("is" + capitalizeFirst(fieldName)).invoke(settingsBinder.getBean()) : 
                    defaultValue;
        } catch (Exception e) {
            return defaultValue;
        }
    }
    
    private int getCurrentIntValue(String fieldName, int defaultValue) {
        try {
            return settingsBinder.getBean() != null ? 
                    (Integer) settingsBinder.getBean().getClass().getMethod("get" + capitalizeFirst(fieldName)).invoke(settingsBinder.getBean()) : 
                    defaultValue;
        } catch (Exception e) {
            return defaultValue;
        }
    }
    
    private String capitalizeFirst(String str) {
        if (str == null || str.isEmpty()) return str;
        return str.substring(0, 1).toUpperCase() + str.substring(1);
    }
}