package com.example.core.services;

import com.example.core.repositories.PortfolioHistoryRepository;
import com.example.core.trading.services.TradingIntegrationService;
import com.example.shared.dto.Portfolio;
import com.example.shared.models.PortfolioHistory;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–µ–π –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class PortfolioHistoryService {

    private final PortfolioHistoryRepository portfolioHistoryRepository;
    private final TradingIntegrationService tradingIntegrationService;

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –≤ –∏—Å—Ç–æ—Ä–∏—é
     */
    public void saveCurrentPortfolioSnapshot() {
        try {
            log.debug("üîÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–Ω–∞–ø—à–æ—Ç–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –≤ –∏—Å—Ç–æ—Ä–∏—é");

            Portfolio currentPortfolio = tradingIntegrationService.getPortfolioInfo();
            if (currentPortfolio == null) {
                log.warn("‚ö†Ô∏è –¢–µ–∫—É—â–∏–π –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Å–Ω–∞–ø—à–æ—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω");
                return;
            }

            String providerType = tradingIntegrationService.getCurrentTradingMode().name();
            PortfolioHistory historyRecord = new PortfolioHistory(currentPortfolio, providerType);

            portfolioHistoryRepository.save(historyRecord);
            log.debug("‚úÖ –°–Ω–∞–ø—à–æ—Ç –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: –±–∞–ª–∞–Ω—Å={}, –≤—Ä–µ–º—è={}",
                    currentPortfolio.getTotalBalance(), historyRecord.getSnapshotTime());

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–Ω–∞–ø—à–æ—Ç–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ", e);
        }
    }

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–Ω–∞–ø—à–æ—Ç–∞ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
     */
    @Scheduled(fixedRate = 900000) // 15 –º–∏–Ω—É—Ç = 15 * 60 * 1000 –º—Å
    public void schedulePortfolioSnapshot() {
        log.debug("üì∑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–Ω–∞–ø—à–æ—Ç–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ");
        saveCurrentPortfolioSnapshot();
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
     */
    public List<PortfolioHistory> getPortfolioHistory(LocalDateTime fromTime) {
        try {
            List<PortfolioHistory> history = portfolioHistoryRepository.findBySnapshotTimeGreaterThanEqual(fromTime);
            log.debug("üìä –ü–æ–ª—É—á–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: {} –∑–∞–ø–∏—Å–µ–π —Å {}", history.size(), fromTime);
            return history;
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ", e);
            return List.of();
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∑–∞ –ø–µ—Ä–∏–æ–¥ –º–µ–∂–¥—É –¥–≤—É–º—è –¥–∞—Ç–∞–º–∏
     */
    public List<PortfolioHistory> getPortfolioHistory(LocalDateTime fromTime, LocalDateTime toTime) {
        try {
            List<PortfolioHistory> history = portfolioHistoryRepository.findBySnapshotTimeBetween(fromTime, toTime);
            log.debug("üìä –ü–æ–ª—É—á–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: {} –∑–∞–ø–∏—Å–µ–π —Å {} –ø–æ {}", history.size(), fromTime, toTime);
            return history;
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∑–∞ –ø–µ—Ä–∏–æ–¥", e);
            return List.of();
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
     */
    public PortfolioHistory getLatestRecord() {
        try {
            return portfolioHistoryRepository.findLatest();
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ", e);
            return null;
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π (—Å—Ç–∞—Ä—à–µ 3 –º–µ—Å—è—Ü–µ–≤)
     */
    @Scheduled(cron = "0 0 2 * * ?") // –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 2:00 AM
    public void cleanupOldRecords() {
        try {
            LocalDateTime cutoffDate = LocalDateTime.now().minusMonths(3);
            portfolioHistoryRepository.deleteBySnapshotTimeBefore(cutoffDate);
            log.info("üßπ –û—á–∏—â–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Å—Ç–∞—Ä—à–µ {}", cutoffDate);
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ", e);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥
     */
    public long getRecordCount(LocalDateTime fromTime) {
        try {
            return portfolioHistoryRepository.countBySnapshotTimeGreaterThanEqual(fromTime);
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ", e);
            return 0;
        }
    }
}