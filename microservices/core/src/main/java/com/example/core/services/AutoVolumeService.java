package com.example.core.services;

import com.example.core.repositories.TradingPairRepository;
import com.example.core.trading.services.OkxPortfolioManager;
import com.example.shared.dto.Portfolio;
import com.example.shared.enums.TradeStatus;
import com.example.shared.models.Settings;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.math.RoundingMode;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—ä–µ–º–∞ –ø–æ–∑–∏—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö USDT
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class AutoVolumeService {
    
    private final OkxPortfolioManager okxPortfolioManager;
    private final TradingPairRepository tradingPairRepository;

    /**
     * –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–æ–±—ä–µ–º–∞
     */
    public static class AutoVolumeData {
        private final BigDecimal longVolume;
        private final BigDecimal shortVolume;
        private final BigDecimal reserveAmount;
        
        public AutoVolumeData(BigDecimal longVolume, BigDecimal shortVolume, BigDecimal reserveAmount) {
            this.longVolume = longVolume;
            this.shortVolume = shortVolume;
            this.reserveAmount = reserveAmount;
        }
        
        public BigDecimal getLongVolume() { return longVolume; }
        public BigDecimal getShortVolume() { return shortVolume; }
        public BigDecimal getReserveAmount() { return reserveAmount; }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ USDT –±–∞–ª–∞–Ω—Å–∞ —Å OKX
     */
    public BigDecimal getAvailableUsdtBalance() {
        try {
            Portfolio portfolio = okxPortfolioManager.getCurrentPortfolio();
            if (portfolio == null) {
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∞–≤—Ç–æ–æ–±—ä–µ–º–∞");
                return BigDecimal.ZERO;
            }
            
            BigDecimal availableBalance = portfolio.getAvailableBalance();
            log.info("üí∞ –î–æ—Å—Ç—É–ø–Ω—ã–π USDT –±–∞–ª–∞–Ω—Å: {}", availableBalance);
            return availableBalance;
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ USDT –±–∞–ª–∞–Ω—Å–∞: {}", e.getMessage());
            return BigDecimal.ZERO;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º TRADING
     */
    public int getActiveTradingPairsCount() {
        try {
            int count = tradingPairRepository.countByStatus(TradeStatus.TRADING);
            log.info("üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö TRADING –ø–∞—Ä: {}", count);
            return count;
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä: {}", e.getMessage());
            return 0;
        }
    }

    /**
     * –†–∞—Å—á–µ—Ç –∞–≤—Ç–æ–æ–±—ä–µ–º–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ:
     * –æ–±—ä–µ–º_–ª–æ–Ω–≥ = –æ–±—ä–µ–º_—à–æ—Ä—Ç = —Å–≤–æ–±–æ–¥–Ω—ã–µ_USDT / (2 * (–∫–æ–ª-–≤–æ_–ø–∞—Ä - TRADING_–ø–∞—Ä—ã + 1))
     * +1 —á–∞—Å—Ç—å –æ—Å—Ç–∞–µ—Ç—Å—è –≤ USDT –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–π –∏ –ø—Ä–æ—Å–∞–¥–æ–∫
     */
    public AutoVolumeData calculateAutoVolume(Settings settings) {
        try {
            BigDecimal availableUsdt = getAvailableUsdtBalance();
            int activeTradingPairs = getActiveTradingPairsCount();
            int totalPairsToTrade = (int) settings.getUsePairs();
            
            log.info("üî¢ –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∞–≤—Ç–æ–æ–±—ä–µ–º–∞:");
            log.info("üí∞ –î–æ—Å—Ç—É–ø–Ω–æ USDT: {}", availableUsdt);
            log.info("üìä –ê–∫—Ç–∏–≤–Ω—ã–µ TRADING –ø–∞—Ä—ã: {}", activeTradingPairs);
            log.info("‚öôÔ∏è –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä: {}", totalPairsToTrade);
            
            if (availableUsdt.compareTo(BigDecimal.ZERO) <= 0) {
                log.warn("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∞–≤—Ç–æ–æ–±—ä–µ–º–∞");
                return new AutoVolumeData(BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO);
            }
            
            // –†–∞—Å—á–µ—Ç –ø–æ —Ñ–æ—Ä–º—É–ª–µ: —Å–≤–æ–±–æ–¥–Ω—ã–µ_USDT / (2 * (–∫–æ–ª-–≤–æ_–ø–∞—Ä - TRADING_–ø–∞—Ä—ã + 1))
            int denominator = 2 * (totalPairsToTrade - activeTradingPairs + 1);
            
            if (denominator <= 0) {
                log.warn("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∞–≤—Ç–æ–æ–±—ä–µ–º–∞. –ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å: {}", denominator);
                return new AutoVolumeData(BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO);
            }
            
            BigDecimal positionSize = availableUsdt.divide(
                BigDecimal.valueOf(denominator), 
                2, 
                RoundingMode.HALF_UP
            );
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑–µ—Ä–≤ (1 —á–∞—Å—Ç—å)
            BigDecimal reserve = availableUsdt.divide(
                BigDecimal.valueOf(totalPairsToTrade - activeTradingPairs + 1),
                2, 
                RoundingMode.HALF_UP
            );
            
            log.info("üìà –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –æ–±—ä–µ–º –ø–æ–∑–∏—Ü–∏–∏ (–ª–æ–Ω–≥/—à–æ—Ä—Ç): {}", positionSize);
            log.info("üíæ –†–µ–∑–µ—Ä–≤ –Ω–∞ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è: {}", reserve);
            
            return new AutoVolumeData(positionSize, positionSize, reserve);
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∞–≤—Ç–æ–æ–±—ä–µ–º–∞: {}", e.getMessage());
            return new AutoVolumeData(BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO);
        }
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–æ–±—ä–µ–º–∞
     */
    public void logAutoVolumeStatus(Settings settings) {
        try {
            AutoVolumeData autoVolume = calculateAutoVolume(settings);
            
            if (settings.isAutoVolumeEnabled()) {
                log.info("‚úÖ –ê–≤—Ç–æ–æ–±—ä–µ–º –≤–∫–ª—é—á–µ–Ω. –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –∞–≤—Ç–æ–æ–±—ä–µ–º: –ª–æ–Ω–≥={}, —à–æ—Ä—Ç={}, –Ω–∞ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ={}", 
                    autoVolume.getLongVolume(), 
                    autoVolume.getShortVolume(), 
                    autoVolume.getReserveAmount());
            } else {
                log.info("–ê–≤—Ç–æ–æ–±—ä–µ–º –≤—ã–∫–ª—é—á–µ–Ω. –ê–≤—Ç–æ–æ–±—ä–µ–º –±—ã–ª –±—ã: –ª–æ–Ω–≥={}, —à–æ—Ä—Ç={}, –Ω–∞ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ={}",
                    autoVolume.getLongVolume(), 
                    autoVolume.getShortVolume(), 
                    autoVolume.getReserveAmount());
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–æ–±—ä–µ–º–∞: {}", e.getMessage());
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ª–æ–Ω–≥ —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–æ–±—ä–µ–º–∞
     */
    public BigDecimal getLongPositionSize(Settings settings) {
        try {
            if (settings.isAutoVolumeEnabled()) {
                AutoVolumeData autoVolume = calculateAutoVolume(settings);
                return autoVolume.getLongVolume();
            } else {
                return BigDecimal.valueOf(settings.getMaxLongMarginSize());
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –ª–æ–Ω–≥ –ø–æ–∑–∏—Ü–∏–∏: {}", e.getMessage());
            return BigDecimal.ZERO;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —à–æ—Ä—Ç —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–æ–±—ä–µ–º–∞
     */
    public BigDecimal getShortPositionSize(Settings settings) {
        try {
            if (settings.isAutoVolumeEnabled()) {
                AutoVolumeData autoVolume = calculateAutoVolume(settings);
                return autoVolume.getShortVolume();
            } else {
                return BigDecimal.valueOf(settings.getMaxShortMarginSize());
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ —à–æ—Ä—Ç –ø–æ–∑–∏—Ü–∏–∏: {}", e.getMessage());
            return BigDecimal.ZERO;
        }
    }

    // –ú–µ—Ç–æ–¥—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–µ–∑ –ø–µ—Ä–µ–¥–∞—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–±—É–¥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ SettingsService)
    public AutoVolumeData calculateAutoVolume() {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
        Settings defaultSettings = Settings.builder()
                .usePairs(5) // –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ //todo —Ç—Å—Ä–µ–º–Ω–æ!!!
                .build();
        return calculateAutoVolume(defaultSettings);
    }
}