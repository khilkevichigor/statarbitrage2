package com.example.core.experemental;

import com.example.core.client.CandlesFeignClient;
import com.example.core.client.OkxFeignClient;
import com.example.core.experemental.stability.dto.StabilityRequestDto;
import com.example.core.experemental.stability.dto.StabilityResponseDto;
import com.example.core.experemental.stability.service.StabilityAnalysisService;
import com.example.core.services.SettingsService;
import com.example.shared.dto.Candle;
import com.example.shared.dto.ExtendedCandlesRequest;
import com.example.shared.models.Settings;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/stability")
@RequiredArgsConstructor
@Slf4j
public class StabilityAnalysisController {

    private final StabilityAnalysisService stabilityAnalysisService;
    private final CandlesFeignClient candlesFeignClient;
    private final OkxFeignClient okxFeignClient;
    private final SettingsService settingsService;

    //todo –¥–ª—è –ª—É—á—à–∏—Ö –ø–∞—Ä –¥–µ–ª–∞—Ç—å –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ - –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å—á–∏—Ç–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ä–∞–∑–¥–≤–∏–∂–∫—É –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–Ω, –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –¥–ª—è 1–î, –∏ —Ç–¥ —á—Ç–æ –±—ã –±—ã–ª–∞ –ø–æ–ª–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —á–µ –∂–¥–∞—Ç—å –æ—Ç –ø–∞—Ä—ã

    /**
     * –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–∞—Ä
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ç–∏–∫–µ—Ä—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –Ω–∞ –∞–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –≤ Python
     */
    @GetMapping("/analyze-all-pairs")
    public ResponseEntity<StabilityResponseDto> analyzeAllPairsStability() {
        log.info("üîç –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –ø–∞—Ä...");

        long startTime = System.currentTimeMillis();

        try {
            // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã
            Settings settings = settingsService.getSettings();
            log.info("üìã –ü–æ–ª—É—á–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: minWindowSize={}, minCorr={}",
                    settings.getMinWindowSize(), settings.getMinCorrelation());

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–≤–µ—á–∏ –¥–ª—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ (–±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π)
            Map<String, List<Candle>> candlesMap = getAllCandles(settings);

            if (candlesMap.isEmpty()) {
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π");
                return ResponseEntity.badRequest().build();
            }

            log.info("üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {} —Ç–∏–∫–µ—Ä–æ–≤: {}",
                    candlesMap.size(), String.join(", ", candlesMap.keySet()));

            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ Map –¥–ª—è Python API
            Map<String, Object> settingsMap = convertSettingsToMap(settings);

            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è Python API
            StabilityRequestDto request = new StabilityRequestDto(candlesMap, settingsMap);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            StabilityResponseDto response = stabilityAnalysisService.analyzeStability(request);

            long totalTime = System.currentTimeMillis() - startTime;
            log.info("‚úÖ –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {} —Å–µ–∫—É–Ω–¥. –ù–∞–π–¥–µ–Ω–æ —Ç–æ—Ä–≥—É–µ–º—ã—Ö –ø–∞—Ä: {}/{}",
                    totalTime / 1000.0,
                    response.getTradeablePairsFound(),
                    response.getTotalPairsAnalyzed());

            return ResponseEntity.ok(response);

        } catch (Exception e) {
            long totalTime = System.currentTimeMillis() - startTime;
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ (–≤—Ä–µ–º—è: {}—Å): {}",
                    totalTime / 1000.0, e.getMessage(), e);
            return ResponseEntity.internalServerError().build();
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–≤–µ—á–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç /api/candles/all-available –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤ –∏ –∏—Ö —Å–≤–µ—á–µ–π
     */
    private Map<String, List<Candle>> getAllCandles(Settings settings) {
        try {
            log.info("üìà –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–≤–µ—á–µ–π —á–µ—Ä–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç /all-extended...");

            ExtendedCandlesRequest request = ExtendedCandlesRequest.builder()
                    .timeframe(settings.getTimeframe())
                    .candleLimit((int) settings.getCandleLimit())
                    .minVolume(settings.getMinVolume())
                    .useMinVolumeFilter(settings.isUseMinVolumeFilter())
                    .minimumLotBlacklist(settings.getMinimumLotBlacklist())
                    .tickers(null) // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã
                    .excludeTickers(null) // –ù–∏–∫–æ–≥–æ –Ω–µ –∏—Å–∫–ª—é—á–∞–µ–º
                    .build();

            long startTime = System.currentTimeMillis();
            Map<String, List<Candle>> candlesMap = candlesFeignClient.getValidatedCandlesExtended(request);
            long elapsed = System.currentTimeMillis() - startTime;

            if (candlesMap == null || candlesMap.isEmpty()) {
                log.warn("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ —Å–≤–µ—á–µ–π");
                return new HashMap<>();
            }

            log.info("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {} —Ç–∏–∫–µ—Ä–æ–≤ —Å —Å–≤–µ—á–∞–º–∏ –∑–∞ {} —Å–µ–∫ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç",
                    candlesMap.size(), String.format("%.2f", elapsed / 1000.0));

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–≤–µ—á–∞–º
            if (!candlesMap.isEmpty()) {
                int totalCandles = candlesMap.values().stream()
                        .mapToInt(List::size)
                        .sum();

                List<String> tickers = List.copyOf(candlesMap.keySet());
                log.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {} —Ç–∏–∫–µ—Ä–æ–≤, –≤—Å–µ–≥–æ {} —Å–≤–µ—á–µ–π",
                        candlesMap.size(), totalCandles);

                log.info("üéØ –¢–∏–∫–µ—Ä—ã: {}",
                        tickers.size() > 15 ?
                                String.join(", ", tickers.subList(0, 15)) + "... –∏ –µ—â–µ " + (tickers.size() - 15) :
                                String.join(", ", tickers));
            }

            return candlesMap;

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–µ—á–µ–π —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç: {}", e.getMessage(), e);
            return new HashMap<>();
        }
    }

    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç Settings –≤ Map –¥–ª—è Python API –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
     * Python StabilityAnalyzer –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ minWindowSize –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    private Map<String, Object> convertSettingsToMap(Settings settings) {
        Map<String, Object> map = new HashMap<>();

        // –û—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Python StabilityAnalyzer
        map.put("minWindowSize", 100);

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è
        map.put("minCorrelation", 0.1);
        map.put("maxPValue", 1);
        map.put("maxAdfValue", 1);
        map.put("minRSquared", 0.1);
        map.put("minZ", -10);
        map.put("candleLimit", 300);
        map.put("timeframe", "1D");

        log.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Python –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏: {}", map);
        return map;
    }
}