package com.example.core.ui.views;

import com.example.core.services.CandleCacheManagementService;
import com.example.core.ui.layout.MainLayout;
import com.example.core.ui.utils.PeriodOptions;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.button.ButtonVariant;
import com.vaadin.flow.component.combobox.ComboBox;
import com.vaadin.flow.component.combobox.MultiSelectComboBox;
import com.vaadin.flow.component.confirmdialog.ConfirmDialog;
import com.vaadin.flow.component.grid.Grid;
import com.vaadin.flow.component.html.Div;
import com.vaadin.flow.component.html.H2;
import com.vaadin.flow.component.html.H3;
import com.vaadin.flow.component.html.Span;
import com.vaadin.flow.component.icon.Icon;
import com.vaadin.flow.component.icon.VaadinIcon;
import com.vaadin.flow.component.notification.Notification;
import com.vaadin.flow.component.notification.NotificationVariant;
import com.vaadin.flow.component.orderedlayout.FlexComponent;
import com.vaadin.flow.component.orderedlayout.HorizontalLayout;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.select.Select;
import com.vaadin.flow.component.textfield.IntegerField;
import com.vaadin.flow.component.textfield.TextField;
import com.vaadin.flow.router.PageTitle;
import com.vaadin.flow.router.Route;
import lombok.extern.slf4j.Slf4j;

import java.util.*;
import java.util.stream.Collectors;

/**
 * –í–∫–ª–∞–¥–∫–∞ "–ö—ç—à —Å–≤–µ—á–µ–π" –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–º —Å–≤–µ—á–µ–π
 */
@Slf4j
@PageTitle("–ö—ç—à —Å–≤–µ—á–µ–π")
@Route(value = "candle-cache", layout = MainLayout.class)
public class CandleCacheView extends VerticalLayout {

    private final CandleCacheManagementService candleCacheManagementService;

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    private ComboBox<String> exchangeSelect;
    private MultiSelectComboBox<String> timeframeSelect;
    private IntegerField threadCountField;
    private Select<String> forceLoadPeriodField;

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
    private TextField tickersField;
    private Button forceLoadButton;

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    private Grid<TimeframeStats> statsGrid;
    private Span totalCandlesSpan;
    private Span todayAddedSpan;
    private Button cleanupButton;

    // –†–∞—Å–ø–∏—Å–∞–Ω–∏—è —à–µ–¥—É–ª–ª–µ—Ä–æ–≤
    private TextField preloadScheduleField;
    private TextField dailyUpdateScheduleField;

    // –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
    private final List<String> availableTimeframes = Arrays.asList(
//            "1m",
//            "5m",
            "15m"
//            "1H",
//            "4H",
//            "1D",
//            "1W",
//            "1M"
    );

    // –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∏—Ä–∂–∏
    private final List<String> availableExchanges = Arrays.asList(
            "OKX", "BINANCE", "BYBIT"
    );

    public CandleCacheView(CandleCacheManagementService candleCacheManagementService) {
        this.candleCacheManagementService = candleCacheManagementService;
        setSizeFull();
        setSpacing(true);
        setPadding(true);

        createHeader();
        createSettingsSection();
        createForceLoadSection();
        createStatisticsSection();
        createSchedulerSection();

//        refreshStatistics();
    }

    private void createHeader() {
        H2 title = new H2("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º —Å–≤–µ—á–µ–π");
        title.getStyle().set("margin", "0").set("color", "var(--lumo-primary-color)");
        add(title);
    }

    private void createSettingsSection() {
        H3 settingsTitle = new H3("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏");
        settingsTitle.getStyle().set("margin-top", "20px").set("margin-bottom", "10px");

        // –í—ã–±–æ—Ä –±–∏—Ä–∂–∏
        exchangeSelect = new ComboBox<>("–ë–∏—Ä–∂–∞");
        exchangeSelect.setItems(availableExchanges);
        exchangeSelect.setValue("OKX");
        exchangeSelect.setWidth("200px");

        // –í—ã–±–æ—Ä —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        timeframeSelect = new MultiSelectComboBox<>("–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã");
        timeframeSelect.setItems(availableTimeframes);
        timeframeSelect.setValue(new HashSet<>(Arrays.asList("15m")));
        timeframeSelect.setWidth("300px");

        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
        threadCountField = new IntegerField("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏");
        threadCountField.setValue(5);
        threadCountField.setMin(1);
        threadCountField.setMax(10);
        threadCountField.setWidth("200px");
        threadCountField.setStepButtonsVisible(true);

        // –ü–µ—Ä–∏–æ–¥ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        forceLoadPeriodField = new Select<>();
        forceLoadPeriodField.setLabel("–ü–µ—Ä–∏–æ–¥");
        forceLoadPeriodField.setItems(PeriodOptions.getAll().keySet());
        forceLoadPeriodField.setValue(PeriodOptions.getDefault());
        forceLoadPeriodField.setWidth("200px");
        forceLoadPeriodField.setHelperText("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö");

        HorizontalLayout settingsLayout = new HorizontalLayout(exchangeSelect, timeframeSelect, threadCountField, forceLoadPeriodField);
        settingsLayout.setSpacing(true);
        settingsLayout.setAlignItems(FlexComponent.Alignment.END);

        add(settingsTitle, settingsLayout);
    }

    private void createForceLoadSection() {
        H3 forceLoadTitle = new H3("‚ö° –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–≤–µ—á–µ–π");
        forceLoadTitle.getStyle().set("margin-top", "20px").set("margin-bottom", "10px");

        // –ü–æ–ª–µ –¥–ª—è —Ç–∏–∫–µ—Ä–æ–≤
        tickersField = new TextField("–¢–∏–∫–µ—Ä—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)");
        tickersField.setPlaceholder("BTC-USDT-SWAP, ETH-USDT-SWAP –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –≤—Å–µ—Ö");
        tickersField.setWidth("400px");

        // –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        forceLoadButton = new Button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É", new Icon(VaadinIcon.DOWNLOAD));
        forceLoadButton.addThemeVariants(ButtonVariant.LUMO_PRIMARY);
        forceLoadButton.addClickListener(e -> executeForceLoad());

        HorizontalLayout forceLoadLayout = new HorizontalLayout(tickersField, forceLoadButton);
        forceLoadLayout.setSpacing(true);
        forceLoadLayout.setAlignItems(FlexComponent.Alignment.END);

        add(forceLoadTitle, forceLoadLayout);
    }

    private void createStatisticsSection() {
        H3 statsTitle = new H3("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞");
        statsTitle.getStyle().set("margin-top", "20px").set("margin-bottom", "10px");

        // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        totalCandlesSpan = new Span("–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...");
        totalCandlesSpan.getStyle().set("font-weight", "bold").set("font-size", "16px");

        todayAddedSpan = new Span("–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...");
        todayAddedSpan.getStyle().set("color", "var(--lumo-success-color)").set("font-size", "14px");

        Button refreshButton = new Button("–û–±–Ω–æ–≤–∏—Ç—å", new Icon(VaadinIcon.REFRESH));
        refreshButton.addClickListener(e -> refreshStatistics());

        // –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        cleanupButton = new Button("–û—á–∏—Å—Ç–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –¢–§", new Icon(VaadinIcon.TRASH));
        cleanupButton.addThemeVariants(ButtonVariant.LUMO_ERROR, ButtonVariant.LUMO_SMALL);
        cleanupButton.addClickListener(e -> executeCleanup());
        cleanupButton.getStyle().set("margin-left", "auto");

        HorizontalLayout summaryLayout = new HorizontalLayout(
                new Div(totalCandlesSpan, new Div(todayAddedSpan)),
                refreshButton,
                cleanupButton
        );
        summaryLayout.setSpacing(true);
        summaryLayout.setAlignItems(FlexComponent.Alignment.CENTER);

        // –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
        statsGrid = new Grid<>(TimeframeStats.class, false);
        statsGrid.setHeightFull();
        statsGrid.setMinHeight("400px");
        statsGrid.setColumnReorderingAllowed(true);
        statsGrid.getStyle()
                .set("border", "1px solid var(--lumo-contrast-20pct)")
                .set("background-color", "var(--lumo-base-color)");

        // –¢–∞–±–ª–∏—Ü–∞ –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ refreshStatistics()

        statsGrid.addColumn(TimeframeStats::getTimeframe)
                .setHeader("–¢–∞–π–º—Ñ—Ä–µ–π–º")
                .setWidth("120px")
                .setSortable(true);

        statsGrid.addColumn(stats -> formatNumber(stats.getTotalCandles()))
                .setHeader("–í—Å–µ–≥–æ —Å–≤–µ—á–µ–π")
                .setWidth("150px")
                .setSortable(true);

        statsGrid.addColumn(stats -> formatNumber(stats.getTodayAdded()))
                .setHeader("–ó–∞ —Å–µ–≥–æ–¥–Ω—è")
                .setWidth("120px")
                .setSortable(true);

        statsGrid.addColumn(stats -> formatNumber(stats.getAvgCandles()))
                .setHeader("–°—Ä–µ–¥–Ω–µ–µ")
                .setWidth("120px")
                .setSortable(true);

        statsGrid.addColumn(TimeframeStats::getLastUpdate)
                .setHeader("–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
                .setWidth("200px")
                .setSortable(true);

        add(statsTitle, summaryLayout, statsGrid);
    }

    private void createSchedulerSection() {
        H3 schedulerTitle = new H3("‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏—è —à–µ–¥—É–ª–ª–µ—Ä–æ–≤");
        schedulerTitle.getStyle().set("margin-top", "20px").set("margin-bottom", "10px");

        // –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
        preloadScheduleField = new TextField("–ü–æ–ª–Ω–∞—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞");
        preloadScheduleField.setValue("0 0 2 * * SUN"); // –ö–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 2:00
        preloadScheduleField.setWidth("300px");
        preloadScheduleField.setPlaceholder("Cron –≤—ã—Ä–∞–∂–µ–Ω–∏–µ");

        // –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        dailyUpdateScheduleField = new TextField("–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ");
        dailyUpdateScheduleField.setValue("0 */30 * * * *"); // –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        dailyUpdateScheduleField.setWidth("300px");
        dailyUpdateScheduleField.setPlaceholder("Cron –≤—ã—Ä–∞–∂–µ–Ω–∏–µ");

        Button saveSchedulesButton = new Button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", new Icon(VaadinIcon.CHECK));
        saveSchedulesButton.addThemeVariants(ButtonVariant.LUMO_SUCCESS);
        saveSchedulesButton.addClickListener(e -> saveSchedules());

        HorizontalLayout schedulerLayout = new HorizontalLayout(
                preloadScheduleField,
                dailyUpdateScheduleField,
                saveSchedulesButton
        );
        schedulerLayout.setSpacing(true);
        schedulerLayout.setAlignItems(FlexComponent.Alignment.END);

        add(schedulerTitle, schedulerLayout);
    }

    private void executeForceLoad() {
        try {
            String selectedExchange = exchangeSelect.getValue();
            Set<String> selectedTimeframes = timeframeSelect.getValue();
            String tickersInput = tickersField.getValue();
            Integer threadCount = threadCountField.getValue();
            String selectedPeriod = forceLoadPeriodField.getValue();

            if (selectedExchange == null || selectedTimeframes.isEmpty()) {
                showNotification("–í—ã–±–µ—Ä–∏—Ç–µ –±–∏—Ä–∂—É –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã!", NotificationVariant.LUMO_ERROR);
                return;
            }

            if (selectedPeriod == null || selectedPeriod.trim().isEmpty()) {
                showNotification("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏!", NotificationVariant.LUMO_ERROR);
                return;
            }

            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
            int forceLoadPeriod = PeriodOptions.calculateCandleLimit("1D", selectedPeriod);

            // –ü–∞—Ä—Å–∏–º —Ç–∏–∫–µ—Ä—ã
            List<String> tickersList = new ArrayList<>();
            if (tickersInput != null && !tickersInput.trim().isEmpty()) {
                tickersList = Arrays.stream(tickersInput.split(","))
                        .map(String::trim)
                        .filter(s -> !s.isEmpty())
                        .collect(Collectors.toList());
            }

            forceLoadButton.setEnabled(false);
            forceLoadButton.setText("–ó–∞–≥—Ä—É–∂–∞–µ–º...");

            log.info("üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: –±–∏—Ä–∂–∞={}, —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã={}, —Ç–∏–∫–µ—Ä—ã={}, –ø–æ—Ç–æ–∫–∏={}, –ø–µ—Ä–∏–æ–¥={} ({} –¥–Ω–µ–π)",
                    selectedExchange, selectedTimeframes, tickersList.size(), threadCount, selectedPeriod, forceLoadPeriod);

            // –í—ã–∑–æ–≤ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            candleCacheManagementService.forceLoadCandles(selectedExchange, selectedTimeframes,
                    tickersList, threadCount, forceLoadPeriod);

            showNotification("–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.",
                    NotificationVariant.LUMO_SUCCESS);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            getUI().ifPresent(ui -> ui.access(() -> {
                try {
                    Thread.sleep(5000);
//                    refreshStatistics();
                } catch (InterruptedException ex) {
                    Thread.currentThread().interrupt();
                }
                forceLoadButton.setEnabled(true);
                forceLoadButton.setText("–ó–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É");
            }));

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ: {}", e.getMessage(), e);
            showNotification("–û—à–∏–±–∫–∞: " + e.getMessage(), NotificationVariant.LUMO_ERROR);
            forceLoadButton.setEnabled(true);
            forceLoadButton.setText("–ó–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É");
        }
    }

    private void refreshStatistics() {
        try {
            String selectedExchange = exchangeSelect.getValue();
            if (selectedExchange == null) selectedExchange = "OKX";

            log.info("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –±–∏—Ä–∂–∏: {}", selectedExchange);

            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Å–µ—Ä–≤–∏—Å–∞
            Map<String, Object> stats = candleCacheManagementService.getCacheStatistics(selectedExchange);
            log.info("üìä –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ —Å–µ—Ä–≤–∏—Å–∞: {}", stats);

            // –ü–∞—Ä—Å–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —Å–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
            List<TimeframeStats> parsedStats = parseStatisticsToTimeframeStats(stats);
            log.info("üìà –†–∞—Å–ø–∞—Ä—Å–µ–Ω–æ {} –∑–∞–ø–∏—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", parsedStats.size());

            if (parsedStats.isEmpty()) {
                log.warn("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏");
            }

            statsGrid.setItems(parsedStats);
            log.info("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É: {} –∑–∞–ø–∏—Å–µ–π", parsedStats.size());

            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            long totalCandles = parsedStats.stream().mapToLong(TimeframeStats::getTotalCandles).sum();
            long totalTodayAdded = parsedStats.stream().mapToLong(TimeframeStats::getTodayAdded).sum();

            totalCandlesSpan.setText(String.format("–í—Å–µ–≥–æ —Å–≤–µ—á–µ–π –≤ –∫—ç—à–µ: %s", formatNumber(totalCandles)));
            todayAddedSpan.setText(String.format("–ó–∞ —Å–µ–≥–æ–¥–Ω—è –¥–æ–±–∞–≤–ª–µ–Ω–æ: +%s", formatNumber(totalTodayAdded)));

            log.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: –≤—Å–µ–≥–æ {} —Å–≤–µ—á–µ–π, –∑–∞ —Å–µ–≥–æ–¥–Ω—è +{}, –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ: {}",
                    totalCandles, totalTodayAdded, parsedStats.size());

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {}", e.getMessage(), e);
            showNotification("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: " + e.getMessage(), NotificationVariant.LUMO_ERROR);

            // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
            statsGrid.setItems();
        }
    }

    private void saveSchedules() {
        try {
            String preloadSchedule = preloadScheduleField.getValue();
            String dailySchedule = dailyUpdateScheduleField.getValue();

            if (preloadSchedule == null || preloadSchedule.trim().isEmpty() ||
                    dailySchedule == null || dailySchedule.trim().isEmpty()) {
                showNotification("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è!", NotificationVariant.LUMO_ERROR);
                return;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            candleCacheManagementService.saveSchedulerSettings(preloadSchedule, dailySchedule);

            showNotification("–†–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!", NotificationVariant.LUMO_SUCCESS);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π: {}", e.getMessage(), e);
            showNotification("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: " + e.getMessage(), NotificationVariant.LUMO_ERROR);
        }
    }

    private void executeCleanup() {
        try {
            Set<String> activeTimeframes = timeframeSelect.getValue();
            String selectedExchange = exchangeSelect.getValue();

            if (activeTimeframes.isEmpty()) {
                showNotification("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!", NotificationVariant.LUMO_ERROR);
                return;
            }

            if (selectedExchange == null) {
                selectedExchange = "OKX";
            }

            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–º, —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ
            Map<String, Object> stats = candleCacheManagementService.getCacheStatistics(selectedExchange);
            List<TimeframeStats> parsedStats = parseStatisticsToTimeframeStats(stats);

            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            long candlesToDelete = parsedStats.stream()
                    .filter(stat -> !activeTimeframes.contains(stat.getTimeframe()))
                    .mapToLong(TimeframeStats::getTotalCandles)
                    .sum();

            if (candlesToDelete == 0) {
                showNotification("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –í—Å–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –∞–∫—Ç–∏–≤–Ω—ã.", NotificationVariant.LUMO_PRIMARY);
                return;
            }

            // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            showCleanupConfirmDialog(selectedExchange, activeTimeframes, candlesToDelete);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –æ—á–∏—Å—Ç–∫–∏: {}", e.getMessage(), e);
            showNotification("–û—à–∏–±–∫–∞: " + e.getMessage(), NotificationVariant.LUMO_ERROR);
        }
    }

    private void executeActualCleanup(String exchange, Set<String> activeTimeframes, long candlesToDelete) {
        try {
            log.info("üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤: –±–∏—Ä–∂–∞={}, –∞–∫—Ç–∏–≤–Ω—ã–µ –¢–§={}, –∫ —É–¥–∞–ª–µ–Ω–∏—é={} —Å–≤–µ—á–µ–π",
                    exchange, activeTimeframes, candlesToDelete);

            // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            candleCacheManagementService.cleanupInactiveTimeframes(exchange, activeTimeframes);

            // –ü–æ–∫–∞ —á—Ç–æ —Å–∏–º—É–ª–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
            showNotification(String.format("‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ %s —Å–≤–µ—á–µ–π –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤!",
                    formatNumber(candlesToDelete)), NotificationVariant.LUMO_SUCCESS);

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            cleanupButton.setText("–û—á–∏—Å—Ç–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –¢–§");
            cleanupButton.removeThemeVariants(ButtonVariant.LUMO_ERROR);
            cleanupButton.addThemeVariants(ButtonVariant.LUMO_ERROR, ButtonVariant.LUMO_SMALL);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
//            refreshStatistics();

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {}", e.getMessage(), e);
            showNotification("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: " + e.getMessage(), NotificationVariant.LUMO_ERROR);

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
            cleanupButton.setText("–û—á–∏—Å—Ç–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –¢–§");
            cleanupButton.removeThemeVariants(ButtonVariant.LUMO_ERROR);
            cleanupButton.addThemeVariants(ButtonVariant.LUMO_ERROR, ButtonVariant.LUMO_SMALL);
        }
    }

    @SuppressWarnings("unchecked")
    private List<TimeframeStats> parseStatisticsToTimeframeStats(Map<String, Object> stats) {
        List<TimeframeStats> result = new ArrayList<>();

        try {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ byExchange -> OKX (–∏–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –±–∏—Ä–∂–∏)
            Object byExchangeObj = stats.get("byExchange");
            Object todayByExchangeObj = stats.get("todayByExchange");

            if (byExchangeObj instanceof Map) {
                Map<String, Object> byExchangeMap = (Map<String, Object>) byExchangeObj;
                Map<String, Object> todayByExchangeMap = new HashMap<>();

                // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                if (todayByExchangeObj instanceof Map) {
                    todayByExchangeMap = (Map<String, Object>) todayByExchangeObj;
                }

                String selectedExchange = exchangeSelect.getValue();
                if (selectedExchange == null) selectedExchange = "OKX";

                Object exchangeDataObj = byExchangeMap.get(selectedExchange);
                Object todayExchangeDataObj = todayByExchangeMap.get(selectedExchange);

                if (exchangeDataObj instanceof Map) {
                    Map<String, Object> exchangeData = (Map<String, Object>) exchangeDataObj;
                    Map<String, Object> todayExchangeData = new HashMap<>();

                    if (todayExchangeDataObj instanceof Map) {
                        todayExchangeData = (Map<String, Object>) todayExchangeDataObj;
                    }

                    for (Map.Entry<String, Object> entry : exchangeData.entrySet()) {
                        String timeframe = entry.getKey();
                        Object countObj = entry.getValue();

                        long totalCandles = 0;
                        if (countObj instanceof Number) {
                            totalCandles = ((Number) countObj).longValue();
                        }

                        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
                        long todayAdded = 0;
                        Object todayCountObj = todayExchangeData.get(timeframe);
                        if (todayCountObj instanceof Number) {
                            todayAdded = ((Number) todayCountObj).longValue();
                        }

                        long avgCandles = totalCandles > 0 ? totalCandles / Math.max(1, getEstimatedTickerCount()) : 0;

                        result.add(new TimeframeStats(timeframe, totalCandles, todayAdded, avgCandles, getCurrentTime()));
                    }
                }
            }

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {}", e.getMessage());
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        result.sort((a, b) -> {
            List<String> order = Arrays.asList("1m", "5m", "15m", "1H", "4H", "1D", "1W", "1M");
            int indexA = order.indexOf(a.getTimeframe());
            int indexB = order.indexOf(b.getTimeframe());
            return Integer.compare(indexA != -1 ? indexA : 999, indexB != -1 ? indexB : 999);
        });

        return result;
    }


    private String getCurrentTime() {
        return java.time.LocalDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
    }

    private int getEstimatedTickerCount() {
        return 100; // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ
    }

    private String formatNumber(long number) {
        if (number >= 1_000_000) {
            return String.format("%.1fM", number / 1_000_000.0);
        } else if (number >= 1_000) {
            return String.format("%.1fK", number / 1_000.0);
        } else {
            return String.valueOf(number);
        }
    }

    private void showNotification(String message, NotificationVariant variant) {
        Notification notification = Notification.show(message, 5000, Notification.Position.TOP_CENTER);
        notification.addThemeVariants(variant);
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
     */
    private void showCleanupConfirmDialog(String exchange, Set<String> activeTimeframes, long candlesToDelete) {
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        List<String> allTimeframes = Arrays.asList("1m", "5m", "15m", "1H", "4H", "1D", "1W", "1M");
        List<String> inactiveTimeframes = allTimeframes.stream()
                .filter(tf -> !activeTimeframes.contains(tf))
                .collect(Collectors.toList());

        // –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        String inactiveTimeframesText = inactiveTimeframes.isEmpty() ? "–ù–µ—Ç" : String.join(", ", inactiveTimeframes);
        String activeTimeframesText = String.join(", ", activeTimeframes);

        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        ConfirmDialog confirmDialog = new ConfirmDialog();
        confirmDialog.setHeader("üóëÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞");

        // –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏–∞–ª–æ–≥–∞
        VerticalLayout content = new VerticalLayout();
        content.setSpacing(true);
        content.setPadding(false);

        Span warningText = new Span("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞!");
        warningText.getStyle().set("color", "var(--lumo-error-color)")
                .set("font-weight", "bold")
                .set("font-size", "16px");

        Div detailsDiv = new Div();
        detailsDiv.add(
                new Span("–ë–∏—Ä–∂–∞: " + exchange),
                new Div(),
                new Span("–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã (—Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è): " + activeTimeframesText),
                new Div(),
                new Span("–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã (–±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã): " + inactiveTimeframesText),
                new Div(),
                new Span("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –∫ —É–¥–∞–ª–µ–Ω–∏—é: " + formatNumber(candlesToDelete))
        );
        detailsDiv.getStyle().set("background", "var(--lumo-contrast-5pct)")
                .set("padding", "var(--lumo-space-m)")
                .set("border-radius", "var(--lumo-border-radius-m)")
                .set("margin", "var(--lumo-space-s) 0");

        content.add(warningText, detailsDiv);
        confirmDialog.setText(content);

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
        confirmDialog.setCancelable(true);
        confirmDialog.setCancelText("–û—Ç–º–µ–Ω–∞");
        confirmDialog.setConfirmText("–£–¥–∞–ª–∏—Ç—å " + formatNumber(candlesToDelete) + " —Å–≤–µ—á–µ–π");
        confirmDialog.setConfirmButtonTheme("error primary");

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        confirmDialog.addConfirmListener(event -> {
            executeActualCleanup(exchange, activeTimeframes, candlesToDelete);
        });

        confirmDialog.addCancelListener(event -> {
            showNotification("–û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", NotificationVariant.LUMO_PRIMARY);
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
        confirmDialog.open();
    }

    /**
     * –ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º—É
     */
    public static class TimeframeStats {
        private String timeframe;
        private long totalCandles;
        private long todayAdded;
        private long avgCandles;
        private String lastUpdate;

        public TimeframeStats(String timeframe, long totalCandles, long todayAdded, long avgCandles, String lastUpdate) {
            this.timeframe = timeframe;
            this.totalCandles = totalCandles;
            this.todayAdded = todayAdded;
            this.avgCandles = avgCandles;
            this.lastUpdate = lastUpdate;
        }

        // –ì–µ—Ç—Ç–µ—Ä—ã
        public String getTimeframe() {
            return timeframe;
        }

        public long getTotalCandles() {
            return totalCandles;
        }

        public long getTodayAdded() {
            return todayAdded;
        }

        public long getAvgCandles() {
            return avgCandles;
        }

        public String getLastUpdate() {
            return lastUpdate;
        }
    }
}