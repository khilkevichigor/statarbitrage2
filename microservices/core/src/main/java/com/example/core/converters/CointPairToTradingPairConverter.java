package com.example.core.converters;

import com.example.shared.models.CointPair;
import com.example.shared.models.TradingPair;
import org.springframework.core.convert.converter.Converter;
import org.springframework.stereotype.Component;

@Component
public class CointPairToTradingPairConverter implements Converter<CointPair, TradingPair> {

    @Override
    public TradingPair convert(CointPair source) {
        if (source == null) {
            return null;
        }

        return TradingPair.builder()
//                .id(source.getId())
                .uuid(source.getUuid())
//                .version(source.getVersion())
                .status(source.getStatus())
                .errorDescription(source.getErrorDescription())
                .longTickerCandlesJson(source.getLongTickerCandlesJson())
                .shortTickerCandlesJson(source.getShortTickerCandlesJson())
                .longTickerCandles(source.getLongTickerCandles())
                .shortTickerCandles(source.getShortTickerCandles())
                .zScoreHistoryJson(source.getZScoreHistoryJson())
                .profitHistoryJson(source.getProfitHistoryJson())
                .pixelSpreadHistoryJson(source.getPixelSpreadHistoryJson())
                .zScoreHistory(source.getZScoreHistory())
                .profitHistory(source.getProfitHistory())
                .pixelSpreadHistory(source.getPixelSpreadHistory())
                .longTicker(source.getLongTicker())
                .shortTicker(source.getShortTicker())
                .pairName(source.getPairName())
                .longTickerEntryPrice(source.getLongTickerEntryPrice())
                .longTickerCurrentPrice(source.getLongTickerCurrentPrice())
                .shortTickerEntryPrice(source.getShortTickerEntryPrice())
                .shortTickerCurrentPrice(source.getShortTickerCurrentPrice())
                .meanEntry(source.getMeanEntry())
                .meanCurrent(source.getMeanCurrent())
                .spreadEntry(source.getSpreadEntry())
                .spreadCurrent(source.getSpreadCurrent())
                .zScoreEntry(source.getZScoreEntry())
                .zScoreCurrent(source.getZScoreCurrent())
                .pValueEntry(source.getPValueEntry())
                .pValueCurrent(source.getPValueCurrent())
                .adfPvalueEntry(source.getAdfPvalueEntry())
                .adfPvalueCurrent(source.getAdfPvalueCurrent())
                .correlationEntry(source.getCorrelationEntry())
                .correlationCurrent(source.getCorrelationCurrent())
                .alphaEntry(source.getAlphaEntry())
                .alphaCurrent(source.getAlphaCurrent())
                .betaEntry(source.getBetaEntry())
                .betaCurrent(source.getBetaCurrent())
                .stdEntry(source.getStdEntry())
                .stdCurrent(source.getStdCurrent())
                .zScoreChanges(source.getZScoreChanges())
                .longUSDTChanges(source.getLongUSDTChanges())
                .longPercentChanges(source.getLongPercentChanges())
                .shortUSDTChanges(source.getShortUSDTChanges())
                .shortPercentChanges(source.getShortPercentChanges())
                .portfolioBeforeTradeUSDT(source.getPortfolioBeforeTradeUSDT())
                .profitUSDTChanges(source.getProfitUSDTChanges())
                .portfolioAfterTradeUSDT(source.getPortfolioAfterTradeUSDT())
                .profitPercentChanges(source.getProfitPercentChanges())
                .minutesToMinProfitPercent(source.getMinutesToMinProfitPercent())
                .minutesToMaxProfitPercent(source.getMinutesToMaxProfitPercent())
                .minProfitPercentChanges(source.getMinProfitPercentChanges())
                .maxProfitPercentChanges(source.getMaxProfitPercentChanges())
                .formattedTimeToMinProfit(source.getFormattedTimeToMinProfit())
                .formattedTimeToMaxProfit(source.getFormattedTimeToMaxProfit())
                .formattedProfitLong(source.getFormattedProfitLong())
                .formattedProfitShort(source.getFormattedProfitShort())
                .formattedProfitCommon(source.getFormattedProfitCommon())
                .timestamp(source.getTimestamp())
                .entryTime(source.getEntryTime())
                .updatedTime(source.getUpdatedTime())
                .maxZ(source.getMaxZ())
                .minZ(source.getMinZ())
                .maxLong(source.getMaxLong())
                .minLong(source.getMinLong())
                .maxShort(source.getMaxShort())
                .minShort(source.getMinShort())
                .maxCorr(source.getMaxCorr())
                .minCorr(source.getMinCorr())
                .exitReason(source.getExitReason())
                .closeAtBreakeven(source.isCloseAtBreakeven())
                .settingsTimeframe(source.getSettingsTimeframe())
                .settingsCandleLimit(source.getSettingsCandleLimit())
                .settingsMinZ(source.getSettingsMinZ())
                .settingsMinWindowSize(source.getSettingsMinWindowSize())
                .settingsMinPValue(source.getSettingsMinPValue())
                .settingsMaxAdfValue(source.getSettingsMaxAdfValue())
                .settingsMinRSquared(source.getSettingsMinRSquared())
                .settingsMinCorrelation(source.getSettingsMinCorrelation())
                .settingsMinVolume(source.getSettingsMinVolume())
                .settingsCheckInterval(source.getSettingsCheckInterval())
                .settingsMaxLongMarginSize(source.getSettingsMaxLongMarginSize())
                .settingsMaxShortMarginSize(source.getSettingsMaxShortMarginSize())
                .settingsLeverage(source.getSettingsLeverage())
                .settingsExitTake(source.getSettingsExitTake())
                .settingsExitStop(source.getSettingsExitStop())
                .settingsExitZMin(source.getSettingsExitZMin())
                .settingsExitZMax(source.getSettingsExitZMax())
                .settingsExitZMaxPercent(source.getSettingsExitZMaxPercent())
                .settingsExitTimeMinutes(source.getSettingsExitTimeMinutes())
                .settingsExitBreakEvenPercent(source.getSettingsExitBreakEvenPercent())
                .settingsUsePairs(source.getSettingsUsePairs())
                .settingsAutoTradingEnabled(source.isSettingsAutoTradingEnabled())
                .settingsUseMinZFilter(source.isSettingsUseMinZFilter())
                .settingsUseMinRSquaredFilter(source.isSettingsUseMinRSquaredFilter())
                .settingsUseMinPValueFilter(source.isSettingsUseMinPValueFilter())
                .settingsUseMaxAdfValueFilter(source.isSettingsUseMaxAdfValueFilter())
                .settingsUseMinCorrelationFilter(source.isSettingsUseMinCorrelationFilter())
                .settingsUseMinVolumeFilter(source.isSettingsUseMinVolumeFilter())
                .settingsUseExitTake(source.isSettingsUseExitTake())
                .settingsUseExitStop(source.isSettingsUseExitStop())
                .settingsUseExitZMin(source.isSettingsUseExitZMin())
                .settingsUseExitZMax(source.isSettingsUseExitZMax())
                .settingsUseExitZMaxPercent(source.isSettingsUseExitZMaxPercent())
                .settingsUseExitTimeHours(source.isSettingsUseExitTimeHours())
                .settingsUseExitBreakEvenPercent(source.isSettingsUseExitBreakEvenPercent())
                .settingsMinimumLotBlacklist(source.getSettingsMinimumLotBlacklist())
                .useZScoreScoring(source.isUseZScoreScoring())
                .zScoreScoringWeight(source.getZScoreScoringWeight())
                .usePixelSpreadScoring(source.isUsePixelSpreadScoring())
                .pixelSpreadScoringWeight(source.getPixelSpreadScoringWeight())
                .useCointegrationScoring(source.isUseCointegrationScoring())
                .cointegrationScoringWeight(source.getCointegrationScoringWeight())
                .useModelQualityScoring(source.isUseModelQualityScoring())
                .modelQualityScoringWeight(source.getModelQualityScoringWeight())
                .useStatisticsScoring(source.isUseStatisticsScoring())
                .statisticsScoringWeight(source.getStatisticsScoringWeight())
                .useBonusScoring(source.isUseBonusScoring())
                .bonusScoringWeight(source.getBonusScoringWeight())
                .settingsUseExitNegativeZMinProfitPercent(source.isSettingsUseExitNegativeZMinProfitPercent())
                .settingsExitNegativeZMinProfitPercent(source.getSettingsExitNegativeZMinProfitPercent())
                .settingsAutoAveragingEnabled(source.isSettingsAutoAveragingEnabled())
                .settingsAveragingDrawdownThreshold(source.getSettingsAveragingDrawdownThreshold())
                .settingsAveragingVolumeMultiplier(source.getSettingsAveragingVolumeMultiplier())
                .averagingCount(source.getAveragingCount())
                .lastAveragingTimestamp(source.getLastAveragingTimestamp())
                // Копирование нормализованных цен и количества пересечений
                .normalizedLongPricesJson(source.getNormalizedLongPricesJson())
                .normalizedShortPricesJson(source.getNormalizedShortPricesJson())
                .normalizedLongPrices(source.getNormalizedLongPrices())
                .normalizedShortPrices(source.getNormalizedShortPrices())
                .intersectionsCount(source.getIntersectionsCount())
                .build();
    }
}
