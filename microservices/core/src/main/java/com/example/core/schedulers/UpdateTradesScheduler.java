package com.example.core.schedulers;

import com.example.core.processors.UpdateTradeProcessor;
import com.example.core.services.EventSendService;
import com.example.core.services.PairService;
import com.example.shared.dto.UpdateTradeRequest;
import com.example.shared.enums.TradeStatus;
import com.example.shared.events.UpdateUiEvent;
import com.example.shared.models.Pair;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.concurrent.atomic.AtomicBoolean;

@Slf4j
@Component
@RequiredArgsConstructor
public class UpdateTradesScheduler {

    // –§–ª–∞–≥–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —à–µ–¥—É–ª–ª–µ—Ä–æ–≤
    private final AtomicBoolean updateTradesRunning = new AtomicBoolean(false);
    private final AtomicBoolean maintainPairsRunning = new AtomicBoolean(false);

    private final PairService pairService;
    private final UpdateTradeProcessor updateTradeProcessor;
    private final EventSendService eventSendService;

    @Scheduled(initialDelay = 15000, fixedRate = 60000) // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –≤ 0 —Å–µ–∫—É–Ω–¥
    public void updateTrades() {
        if (!canStartUpdateTrades()) {
            return;
        }

        long schedulerStart = System.currentTimeMillis();

        try {
            List<Pair> tradingPairs = executeUpdateTrades();
            logUpdateTradesCompletion(schedulerStart, tradingPairs.size());
        } finally {
            updateTradesRunning.set(false);
        }
    }

    //todo —Å—á–∏—Ç–∞—Ç—å –ø–æ –±–∞–ª–∞–Ω—Å—É —Å–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ –ø–∞—Ä –≤–µ—Å—Ç–∏! –Ω–∞–ø—Ä–∏–º–µ—Ä –±–∞–ª–∞–Ω—Å 10–∫ –∏ –¥–µ–ª–∞–µ–º 10 –ø–∞—Ä –ø–æ 1–∫ (–ø–æ 500$)! –¢–æ–≥–¥–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º 10% –Ω–∞ –∑–∞–ø–∞—Å –Ω–∞ –ø—Ä–æ—Å–∞–¥–∫—É! –ò—Ç–æ–≥–æ –æ—Ç–∫—Ä–æ–µ–º 9 –ø–∞—Ä –Ω–∞ 9–∫!
    // –ò —Ç–∞–∫ —Å—á–∏—Ç–∞—Ç—å –∫–∞–∂–¥—ã–π —Ä–∞–∑! –ü—Ä–∏ —Ä–æ—Å—Ç–µ –±–∞–ª–∞–Ω—Å–∞ –±—É–¥–µ–º –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –±–æ–ª—å—à–µ –ø–∞—Ä –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç! –ü–æ–ª–Ω—ã–π –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥!=)

    private boolean canStartUpdateTrades() {
        if (maintainPairsRunning.get()) {
            log.debug("‚è∏Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–æ - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–∞—Ä");
            return false;
        }

        if (!updateTradesRunning.compareAndSet(false, true)) {
            log.warn("‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–æ–≤ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è");
            return false;
        }

        return true;
    }

    private List<Pair> executeUpdateTrades() {
        log.debug("üîÑ –®–µ–¥—É–ª–ª–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–π–¥–æ–≤ –∑–∞–ø—É—â–µ–Ω...");

        List<Pair> updatablePairs = getUpdatablePairs();
        if (updatablePairs.isEmpty()) {
            return updatablePairs;
        }

        processTradeUpdates(updatablePairs);
        updateUI();

        return updatablePairs;
    }

    private List<Pair> getUpdatablePairs() {
        try {
            return pairService.findAllByStatusIn(List.of(TradeStatus.TRADING, TradeStatus.OBSERVED));
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {}", e.getMessage());
            return List.of();
        }
    }

    private void processTradeUpdates(List<Pair> updatablePairs) {
        updatablePairs.forEach(this::updateSingleTrade);
    }

    private void updateSingleTrade(Pair tradingPair) {
        try {
            if (tradingPair.getStatus() == TradeStatus.TRADING) {
                updateTradeProcessor.updateTrade(UpdateTradeRequest.builder()
                        .tradingPair(tradingPair)
                        .closeManually(false)
                        .build());
            } else if (tradingPair.getStatus() == TradeStatus.OBSERVED) {
                // Here we will call a new method to only update cointegration data
                updateTradeProcessor.updateObservedPair(tradingPair);
            }
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä—ã {}: {}", tradingPair.getPairName(), e.getMessage());
        }
    }

    private void updateUI() {
        try {
            eventSendService.updateUI(UpdateUiEvent.builder().build());
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ UI: {}", e.getMessage());
        }
    }

    private void logUpdateTradesCompletion(long startTime, int tradesCount) {
        long duration = System.currentTimeMillis() - startTime;
        log.debug("‚è±Ô∏è –®–µ–¥—É–ª–ª–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–π–¥–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª —Ä–∞–±–æ—Ç—É –∑–∞ {} —Å–µ–∫. –û–±–Ω–æ–≤–ª–µ–Ω–æ {} —Ç—Ä–µ–π–¥–æ–≤",
                duration / 1000.0, tradesCount);
    }
}
