package com.example.core.messaging;

import com.example.shared.events.CoreEvent;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.annotation.Bean;
import org.springframework.stereotype.Service;

import java.util.function.Consumer;

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class ReceiveEventService {

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π
     */
    @Bean
    public Consumer<CoreEvent> coreEventsConsumer() {
        return this::handleEvent;
    }

    private void handleEvent(CoreEvent event) {
        log.info("üìÑ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {}", event.getEventType());

        try {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
            switch (event.getEventType()) {
                case "NEW_COINT_PAIRS":
                    log.info("...—Ç—É—Ç —è–∫–æ–±—ã —á—Ç–æ-—Ç–æ –¥–µ–ª–∞–µ–º...");
                    //–ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –±—Ä–∞—Ç—å –≤ —Ç–æ—Ä–≥–æ–≤–ª—é –µ—â–µ –ø–∞—Ä—ã –∏ —Ç–æ—Ä–≥—É–µ–º –∏—Ö
                    break;
                default:
                    log.warn("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: {}", event.getEventType());
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è: {}", e.getMessage(), e);
        }
    }
}