package com.example.core.trading.services;

import com.example.core.services.SettingsService;
import com.example.core.trading.interfaces.TradingProvider;
import com.example.shared.models.Settings;
import com.example.shared.models.TradingPair;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.Arrays;
import java.util.List;

@Slf4j
@Service
@RequiredArgsConstructor
public class ValidateMinimumLotRequirementsService {

    private final SettingsService settingsService;

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—ã –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ª–æ—Ç–∞.
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç false, –µ—Å–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–æ—Ç –¥–ª—è –ª—é–±–æ–π –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É –±–æ–ª–µ–µ —á–µ–º –≤ 3 —Ä–∞–∑–∞.
     */
    public boolean validate(TradingProvider provider, TradingPair tradingPair, BigDecimal longAmount, BigDecimal shortAmount) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª—ç–∫–ª–∏—Å—Ç–∞ –î–û –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        for (String ticker : List.of(tradingPair.getLongTicker(), tradingPair.getShortTicker())) {
            if (isInBlacklist(ticker)) {
                log.warn("‚ùå –ë–õ–û–ö–ò–†–û–í–ö–ê: –ü–∞—Ä–∞ {} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ —Ç–∏–∫–µ—Ä–∞ {} –≤ –±–ª—ç–∫–ª–∏—Å—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –ª–æ—Ç–æ–≤",
                        tradingPair.getPairName(), ticker);
                return false;
            }
        }
        try {
            BigDecimal longPrice = provider.getCurrentPrice(tradingPair.getLongTicker());
            BigDecimal shortPrice = provider.getCurrentPrice(tradingPair.getShortTicker());

            if (isInvalidPrice(longPrice) || isInvalidPrice(shortPrice)) {
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –ª–æ—Ç–æ–≤ –¥–ª—è –ø–∞—Ä—ã {}", tradingPair.getPairName());
                return true; // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö
            }

            if (!validatePositionForMinimumLot(tradingPair.getLongTicker(), longAmount, longPrice)) {
                return false;
            }

            if (!validatePositionForMinimumLot(tradingPair.getShortTicker(), shortAmount, shortPrice)) {
                return false;
            }

            log.debug("‚úÖ –ü–∞—Ä–∞ {} –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –ª–æ—Ç–æ–≤", tradingPair.getPairName());
            return true;

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –ª–æ—Ç–æ–≤ –¥–ª—è {}: {}", tradingPair.getPairName(), e.getMessage(), e);
            return true; // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        }
    }

    private boolean isInvalidPrice(BigDecimal price) {
        return price == null || price.compareTo(BigDecimal.ZERO) <= 0;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ª–æ—Ç–∞.
     */
    private boolean validatePositionForMinimumLot(String symbol, BigDecimal desiredAmount, BigDecimal currentPrice) {
        try {
            BigDecimal desiredSize = desiredAmount.divide(currentPrice, 8, RoundingMode.HALF_UP);

            // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–æ—Ç –æ–∫—Ä—É–≥–ª—è–µ–º –≤–Ω–∏–∑ –¥–æ —Ü–µ–ª–æ–≥–æ, –º–∏–Ω–∏–º—É–º 1
            BigDecimal adjustedSize = desiredSize.setScale(0, RoundingMode.DOWN);
            if (adjustedSize.compareTo(BigDecimal.ONE) < 0) {
                adjustedSize = BigDecimal.ONE;
            }

            BigDecimal adjustedAmount = adjustedSize.multiply(currentPrice);
            BigDecimal excessRatio = adjustedAmount.divide(desiredAmount, 4, RoundingMode.HALF_UP);

            if (excessRatio.compareTo(BigDecimal.valueOf(3)) > 0) {
                log.warn("‚ùå –ë–õ–û–ö–ò–†–û–í–ö–ê: {} –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–æ—Ç —Ç—Ä–µ–±—É–µ—Ç —Å—É–º–º—É {} –≤–º–µ—Å—Ç–æ –∂–µ–ª–∞–µ–º–æ–π {} (–ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –≤ {} —Ä–∞–∑)",
                        symbol, adjustedAmount, desiredAmount, excessRatio);

                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±–ª—ç–∫–ª–∏—Å—Ç –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
                addToBlacklist(symbol);

                return false;
            }

            log.debug("‚úÖ {} –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É: –∂–µ–ª–∞–µ–º–∞—è —Å—É–º–º–∞ = {}, –∏—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ = {}, —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ = {}",
                    symbol, desiredAmount, adjustedAmount, excessRatio);
            return true;

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ª–æ—Ç–∞ –¥–ª—è {}: {}", symbol, e.getMessage(), e);
            return true;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–∏–∫–µ—Ä –≤ –±–ª—ç–∫–ª–∏—Å—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –ª–æ—Ç–æ–≤
     */
    private boolean isInBlacklist(String ticker) {
        try {
            Settings settings = settingsService.getSettings();
            String blacklist = settings.getMinimumLotBlacklist();

            if (blacklist == null || blacklist.trim().isEmpty()) {
                return false;
            }

            return Arrays.stream(blacklist.split(","))
                    .map(String::trim)
                    .map(String::toUpperCase)
                    .anyMatch(ticker.toUpperCase()::equals);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–ª—ç–∫–ª–∏—Å—Ç–∞ –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}: {}", ticker, e.getMessage(), e);
            return false; // –ü—Ä–∏ –æ—à–∏–±–∫–µ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é
        }
    }

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–∏–∫–µ—Ä –≤ –±–ª—ç–∫–ª–∏—Å—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –ª–æ—Ç–æ–≤
     */
    private void addToBlacklist(String ticker) {
        try {
            Settings settings = settingsService.getSettings();
            String currentBlacklist = settings.getMinimumLotBlacklist();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —É–∂–µ –≤ –±–ª—ç–∫–ª–∏—Å—Ç–µ
            if (isInBlacklist(ticker)) {
                return;
            }

            String newBlacklist;
            if (currentBlacklist == null || currentBlacklist.trim().isEmpty()) {
                newBlacklist = ticker.toUpperCase();
            } else {
                newBlacklist = currentBlacklist + "," + ticker.toUpperCase();
            }

            settings.setMinimumLotBlacklist(newBlacklist);
            settingsService.save(settings); //todo –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç!

            log.warn("üö´ –ê–í–¢–û–ë–õ–û–ö–ò–†–û–í–ö–ê: –¢–∏–∫–µ—Ä {} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–ª—ç–∫–ª–∏—Å—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –ª–æ—Ç–æ–≤", ticker);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ä–∞ {} –≤ –±–ª—ç–∫–ª–∏—Å—Ç: {}", ticker, e.getMessage(), e);
        }
    }
}