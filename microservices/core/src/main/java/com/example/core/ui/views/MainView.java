package com.example.core.ui.views;

import com.example.core.processors.FetchPairsProcessor;
import com.example.core.services.TradingPairService;
import com.example.core.ui.components.PortfolioComponent;
import com.example.core.ui.components.SettingsComponent;
import com.example.core.ui.components.StatisticsComponent;
import com.example.core.ui.components.TradingPairsComponent;
import com.example.core.ui.services.UIUpdateService;
import com.example.core.ui.services.UIUpdateable;
import com.example.shared.dto.FetchPairsRequest;
import com.example.shared.enums.TradeStatus;
import com.example.shared.models.TradingPair;
import com.vaadin.flow.component.AttachEvent;
import com.vaadin.flow.component.DetachEvent;
import com.vaadin.flow.component.UI;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.html.H1;
import com.vaadin.flow.component.icon.Icon;
import com.vaadin.flow.component.icon.VaadinIcon;
import com.vaadin.flow.component.notification.Notification;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.router.Route;
import jakarta.annotation.PostConstruct;
import lombok.extern.slf4j.Slf4j;

import java.util.Collections;
import java.util.List;
import java.util.concurrent.CompletableFuture;

@Slf4j
@Route("old-main") // –ò–∑–º–µ–Ω–∏–ª —Ä–æ—É—Ç, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞–ª —Å –Ω–æ–≤—ã–º DashboardView
public class MainView extends VerticalLayout implements UIUpdateable {

    private final FetchPairsProcessor fetchPairsProcessor;
    private final TradingPairService tradingPairService;
    private final UIUpdateService uiUpdateService;

    // Components
    private final SettingsComponent settingsComponent;
    private final TradingPairsComponent tradingPairsComponent;
    private final StatisticsComponent statisticsComponent;
    private final PortfolioComponent portfolioComponent;

    // UI elements
    private Button getCointPairsButton;

    public MainView(FetchPairsProcessor fetchPairsProcessor,
                    TradingPairService tradingPairService,
                    UIUpdateService uiUpdateService,
                    SettingsComponent settingsComponent,
                    TradingPairsComponent tradingPairsComponent,
                    StatisticsComponent statisticsComponent,
                    PortfolioComponent portfolioComponent) {

        this.fetchPairsProcessor = fetchPairsProcessor;
        this.tradingPairService = tradingPairService;
        this.uiUpdateService = uiUpdateService;
        this.settingsComponent = settingsComponent;
        this.tradingPairsComponent = tradingPairsComponent;
        this.statisticsComponent = statisticsComponent;
        this.portfolioComponent = portfolioComponent;

        initializeLayout();
        setupUIUpdateCallback();
    }

    @PostConstruct
    public void setupCallbacks() {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback'–∏ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        log.info("üîó MainView: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback'–∏ –ø–æ—Å–ª–µ PostConstruct");
        setupAutoTradingCallback();
    }

    private void initializeLayout() {
        add(new H1("Welcome to StatArbitrage"));

        getCointPairsButton = new Button("–ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä—ã", new Icon(VaadinIcon.REFRESH), e -> handleFetchPairsClick());

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
        updateButtonState();

        add(
                portfolioComponent,
                settingsComponent,
                getCointPairsButton,
                tradingPairsComponent,
                statisticsComponent
        );
    }

    private void setupUIUpdateCallback() {
        tradingPairsComponent.setUiUpdateCallback(v -> updateUI());
    }

    private void setupAutoTradingCallback() {
        settingsComponent.setAutoTradingChangeCallback(this::updateButtonState);
    }

    private void updateButtonState() {
        getUI().ifPresent(ui -> ui.access(() -> {
            boolean autoTradingEnabled = settingsComponent.isAutoTradingEnabled();
            getCointPairsButton.setEnabled(!autoTradingEnabled);

            if (autoTradingEnabled) {
                getCointPairsButton.setText("–ê–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω");
                getCointPairsButton.setIcon(new Icon(VaadinIcon.AUTOMATION));
            } else {
                getCointPairsButton.setText("–ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä—ã");
                getCointPairsButton.setIcon(new Icon(VaadinIcon.REFRESH));
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤ PortfolioComponent
            portfolioComponent.updateTradingModeAvailability();
        }));
    }

    private void handleFetchPairsClick() {
        setButtonLoadingState(true);

        CompletableFuture.runAsync(() -> {
            try {
                // –í—ã–ø–æ–ª–Ω—è–µ–º UI –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ UI –ø–æ—Ç–æ–∫–µ
                getUI().ifPresent(ui -> ui.access(() -> {
                    tradingPairsComponent.setSelectedPairs(Collections.emptyList());
                }));

                // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –≤ background –ø–æ—Ç–æ–∫–µ
                int deleteAllByStatus = tradingPairService.deleteAllByStatus(TradeStatus.SELECTED);
                log.debug("Deleted all {} pairs from database", deleteAllByStatus);
                List<TradingPair> pairs = fetchPairsProcessor.fetchPairs(FetchPairsRequest.builder().build());

                // –û–±–Ω–æ–≤–ª—è–µ–º UI –≤ UI –ø–æ—Ç–æ–∫–µ
                getUI().ifPresent(ui -> ui.access(() -> {
                    tradingPairsComponent.setSelectedPairs(pairs);
                }));
            } catch (Exception ex) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä", ex);
                getUI().ifPresent(ui -> ui.access(() ->
                        Notification.show("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞—Ä: " + ex.getMessage())
                ));
            } finally {
                getUI().ifPresent(ui -> ui.access(() -> setButtonLoadingState(false)));
            }
        });
    }

    private void setButtonLoadingState(boolean loading) {
        if (loading) {
            getCointPairsButton.setEnabled(false);
            getCointPairsButton.setText("–ò—â–µ–º –ø–∞—Ä—ã...");
            getCointPairsButton.setIcon(new Icon(VaadinIcon.SPINNER));
        } else {
            updateButtonState(); // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–∞
        }
    }


    @Override
    protected void onAttach(AttachEvent attachEvent) {
        super.onAttach(attachEvent);
        uiUpdateService.registerView(UI.getCurrent(), this);
        // Initial data load
        updateUI();
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        updateButtonState();
    }

    public void handleUiUpdateRequest() {
        getUI().ifPresent(ui -> ui.access(this::updateUI));
    }


    public void updateUI() {
        getUI().ifPresent(ui -> ui.access(() -> {
            try {
                portfolioComponent.updatePortfolioInfo();
                tradingPairsComponent.updateAllData();
                statisticsComponent.updateStatistics();
            } catch (Exception e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ UI", e);
            }
        }));
    }

    @Override
    protected void onDetach(DetachEvent detachEvent) {
        uiUpdateService.unregisterView(UI.getCurrent());
        super.onDetach(detachEvent);
    }


}