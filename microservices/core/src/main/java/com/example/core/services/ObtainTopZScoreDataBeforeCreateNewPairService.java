package com.example.core.services;

import com.example.shared.dto.ZScoreData;
import com.example.shared.models.Candle;
import com.example.shared.models.Settings;
import com.example.shared.models.ZScoreParam;
import com.example.shared.utils.NumberFormatter;
import lombok.Data;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.*;

@Slf4j
@Service
@RequiredArgsConstructor
public class ObtainTopZScoreDataBeforeCreateNewPairService {

    private final TradingPairService tradingPairService;
    private final PixelSpreadService pixelSpreadService;

    /**
     * –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª—É—á—à–µ–π –ø–∞—Ä—ã (–ö–û–ù–§–ò–ì–£–†–ò–†–£–ï–ú–´–ï –í–ï–°–ê!)
     * <p>
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ü–û–õ–ù–£–Æ —Å–∏—Å—Ç–µ–º—É –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–∞—Ä:
     * - –ù–ê–°–¢–†–ê–ò–í–ê–ï–ú–´–ï –í–ï–°–ê —á–µ—Ä–µ–∑ UI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
     * - –ü–ò–ö–°–ï–õ–¨–ù–´–ô –°–ü–†–ï–î —Å —Ä–∞–≤–Ω—ã–º –≤–µ—Å–æ–º –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (25 –æ—á–∫–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
     * - Z-Score + –ü–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ + –ö–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è + –ö–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏ + –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ + –ë–æ–Ω—É—Å—ã
     * - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–∫–æ—Ä: —Å—É–º–º–∞ –≤—Å–µ—Ö –≤–µ—Å–æ–≤ (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è)
     */
    public Optional<ZScoreData> getBestZScoreData(Settings settings, List<ZScoreData> dataList, Map<String, List<Candle>> candlesMap) {
        if (dataList == null || dataList.isEmpty()) {
            return Optional.empty();
        }

        log.debug("üéØ –û–ë–™–ï–î–ò–ù–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê: –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à—É—é –ø–∞—Ä—É –∏–∑ {} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∑–∞ –æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥!", dataList.size());

        // –°–Ω–∞—á–∞–ª–∞ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ (–≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è)
        List<ZScoreData> filteredList = new ArrayList<>();
        Map<String, Integer> filterStats = new HashMap<>();
        double expected = settings.getExpectedZParamsCount();

        for (ZScoreData data : dataList) {
            String reason = shouldFilterPair(data, settings, expected);
            if (reason != null) {
                filterStats.merge(reason, 1, Integer::sum);
                log.debug("‚ö†Ô∏è –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {}/{} ‚Äî {}",
                        data.getUnderValuedTicker(), data.getOverValuedTicker(), reason);
            } else {
                filteredList.add(data);
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–∫–æ—Ä –¥–ª—è –ª–æ–≥–∞
                double qualityScore = calculatePairQualityScore(data, settings, candlesMap);
                log.debug("üìä –ü–∞—Ä–∞ {}/{} –ø—Ä–æ—à–ª–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é. –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–∫–æ—Ä: {}",
                        data.getUnderValuedTicker(), data.getOverValuedTicker(),
                        NumberFormatter.format(qualityScore, 2));
            }
        }

        log.debug("‚úÖ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å {} –∏–∑ {} –ø–∞—Ä", filteredList.size(), dataList.size());

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        filterStats.forEach((reason, count) ->
                log.debug("üìä –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è - {}: {} –ø–∞—Ä", reason, count));

        if (filteredList.isEmpty()) {
            log.debug("‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏");
            return Optional.empty();
        }

        // –¢–µ–ø–µ—Ä—å –æ—Ü–µ–Ω–∏–≤–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã
        List<PairCandidate> candidates = new ArrayList<>();

        for (ZScoreData z : filteredList) {
            PairCandidate candidate = evaluatePair(z, settings, candlesMap);
            if (candidate != null) {
                candidates.add(candidate);
            }
        }

        if (candidates.isEmpty()) {
            log.debug("‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä –ø–æ—Å–ª–µ –æ—Ü–µ–Ω–∫–∏");
            return Optional.empty();
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–º—É —Å–∫–æ—Ä—É (–ª—É—á—à–∏–π –ø–µ—Ä–≤—ã–π)
        candidates.sort(Comparator.comparingDouble(PairCandidate::getCompositeScore).reversed());

        PairCandidate best = candidates.get(0);
        log.debug("üèÜ –û–ë–™–ï–î–ò–ù–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê: –í—ã–±—Ä–∞–Ω–∞ –ª—É—á—à–∞—è –ø–∞—Ä–∞ {}/{} —Å –ø–æ–ª–Ω—ã–º —Å–∫–æ—Ä–æ–º {}! –î–µ—Ç–∞–ª–∏: Z-Score={}, –ö–æ—Ä—Ä={}, P-Value(corr)={}, P-Value(coint)={}, R¬≤={}",
                best.getData().getUnderValuedTicker(),
                best.getData().getOverValuedTicker(),
                NumberFormatter.format(best.getCompositeScore(), 2),
                NumberFormatter.format(best.getZScore(), 2),
                NumberFormatter.format(best.getCorrelation(), 3),
                NumberFormatter.format(best.getPValue(), 4),
                NumberFormatter.format(best.getAdfValue(), 4),
                NumberFormatter.format(best.getRSquared(), 3)
        );

        // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ø-3 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        logTopCandidates(candidates);

        return Optional.of(best.getData());
    }

    /**
     * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –ø–∞—Ä—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ù–û–í–û–ô —Å–∏—Å—Ç–µ–º—ã –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
     * –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ - –≤—Å—è –ª–æ–≥–∏–∫–∞ —Å–∫–æ—Ä–∏–Ω–≥–∞ –≤ FilterIncompleteZScoreParamsServiceV2
     * –î–û–ë–ê–í–õ–ï–ù–ê –ü–†–û–í–ï–†–ö–ê –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π Z-Score
     */
    private PairCandidate evaluatePair(ZScoreData z, Settings settings, Map<String, List<Candle>> candlesMap) {
        List<ZScoreParam> params = z.getZScoreHistory();

        double zVal, pValue, adf, corr, rSquared;

        if (params != null && !params.isEmpty()) {
            // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            ZScoreParam last = params.get(params.size() - 1);
            zVal = last.getZscore();
            pValue = last.getPvalue();
            adf = last.getAdfpvalue();
            corr = last.getCorrelation();
            rSquared = z.getAvgRSquared() != null ? z.getAvgRSquared() : 0.0;
        } else {
            // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            if (z.getLatestZScore() == null || z.getPearsonCorr() == null) {
                log.warn("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—É —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {}/{}",
                        z.getUnderValuedTicker(), z.getOverValuedTicker());
                return null;
            }

            zVal = z.getLatestZScore();
            corr = z.getPearsonCorr();
            pValue = z.getPearsonCorrPValue() != null ? z.getPearsonCorrPValue() : 0.0;
            adf = z.getJohansenCointPValue() != null ? z.getJohansenCointPValue() : 0.0;
            rSquared = z.getAvgRSquared() != null ? z.getAvgRSquared() : 0.0;
        }

        // ====== –ü–û–õ–ù–´–ô –ö–ê–õ–ö–£–õ–Ø–¢–û–† –°–ö–û–†–ê —Å –ü–ò–ö–°–ï–õ–¨–ù–´–ú –°–ü–†–ï–î–û–ú ======
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Å–∫–æ—Ä–∏–Ω–≥–∞ —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º–∏ –≤–µ—Å–∞–º–∏ –≤–∫–ª—é—á–∞—è –ø–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥!

        double fullQualityScore = calculatePairQualityScore(z, settings, candlesMap);

        return new PairCandidate(z, fullQualityScore, zVal, corr, adf, pValue, rSquared);
    }

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç —Ç–æ–ø –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
     */
    private void logTopCandidates(List<PairCandidate> candidates) {
        log.debug("üèÖ –¢–æ–ø-3 –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:");

        for (int i = 0; i < Math.min(3, candidates.size()); i++) {
            PairCandidate candidate = candidates.get(i);
            ZScoreData data = candidate.getData();

            String johansenStatus = "‚ùå";
            if (data.getJohansenCointPValue() != null && data.getJohansenCointPValue() > 0) {
                johansenStatus = String.format("‚úÖ (p=%.4f)", data.getJohansenCointPValue());
            }

            log.debug("   {}. {}/{} -> –°–∫–æ—Ä: {}, Z: {}, –ö–æ—Ä—Ä: {}, R¬≤: {}, Johansen: {}, ADF: {}",
                    i + 1,
                    data.getUnderValuedTicker(),
                    data.getOverValuedTicker(),
                    NumberFormatter.format(candidate.getCompositeScore(), 2),
                    NumberFormatter.format(candidate.getZScore(), 2),
                    NumberFormatter.format(candidate.getCorrelation(), 3),
                    NumberFormatter.format(candidate.getRSquared(), 3),
                    johansenStatus,
                    NumberFormatter.format(candidate.getAdfValue(), 4)
            );
        }
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ–ª–∂–Ω–∞ –ª–∏ –±—ã—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–∞ –ø–∞—Ä–∞ (–ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø)
     * –û—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ - –æ—Å—Ç–∞–ª—å–Ω–æ–µ —á–µ—Ä–µ–∑ —Å–∫–æ—Ä–∏–Ω–≥!
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏—á–∏–Ω—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ null –µ—Å–ª–∏ –ø–∞—Ä–∞ –ø—Ä–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
     */
    private String shouldFilterPair(ZScoreData data, Settings settings, double expectedSize) {
        List<ZScoreParam> params = data.getZScoreHistory();
        String pairName = data.getUnderValuedTicker() + "/" + data.getOverValuedTicker();

        log.debug("‚öôÔ∏è –ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—ã {} (–æ—Å–Ω–æ–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —á–µ—Ä–µ–∑ —Å–∫–æ—Ä–∏–Ω–≥):", pairName);

        // ====== –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò (—Ç–æ–ª—å–∫–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ!) ======

        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö
        String reason = isDataMissing(data, params) ? "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ Z-score" : null;
        if (reason != null) {
            log.debug("   ‚ùå {}: {}", pairName, reason);
            return reason;
        }

        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤
        reason = isTickersInvalid(data) ? "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã" : null;
        if (reason != null) {
            log.debug("   ‚ùå {}: {}", pairName, reason);
            return reason;
        }

        // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ Z-Score –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–∫–ª—é—á–µ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä!)
        double currentZScore = getLatestZScore(data, params);
        if (currentZScore <= 0) {
            reason = String.format("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π/–Ω—É–ª–µ–≤–æ–π Z-score: %.2f (–Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–∞)", currentZScore);
            log.debug("   ‚ùå {}: {}", pairName, reason);
            return reason;
        }
        log.debug("   ‚úÖ {}: –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π Z-score: {}", pairName, NumberFormatter.format(currentZScore, 2));

        // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ Z-Score (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö)
        if (settings.isUseMinZFilter()) {
            double minZ = settings.getMinZ();
            if (currentZScore < minZ) {
                reason = String.format("Z-score –Ω–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞: %.2f < %.2f", currentZScore, minZ);
                log.debug("   ‚ùå {}: {}", pairName, reason);
                return reason;
            }
            log.debug("   ‚úÖ {}: Z-score –≤—ã—à–µ –º–∏–Ω–∏–º—É–º–∞: {} >= {}", pairName,
                    NumberFormatter.format(currentZScore, 2), NumberFormatter.format(minZ, 2));
        }

        // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ P-Value –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö)
        if (settings.isUseMaxPValueFilter()) {
            Double correlationPValue = getCorrelationPValue(data, params);
            double maxPValue = settings.getMaxPValue();
            if (correlationPValue != null && correlationPValue > maxPValue) {
                reason = String.format("P-Value –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –≤—ã—à–µ –º–∞–∫—Å–∏–º—É–º–∞: %.6f > %.6f", correlationPValue, maxPValue);
                log.debug("   ‚ùå {}: {}", pairName, reason);
                return reason;
            }
            log.debug("   ‚úÖ {}: P-Value –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –≤ –Ω–æ—Ä–º–µ: {} <= {}", pairName,
                    correlationPValue != null ? NumberFormatter.format(correlationPValue, 6) : "null",
                    NumberFormatter.format(maxPValue, 6));
        }

        // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ ADF P-Value (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö)
        if (settings.isUseMaxAdfValueFilter()) {
            Double adfPValue = getAdfPValue(data, params);
            double maxAdfValue = settings.getMaxAdfValue();
            if (adfPValue != null && adfPValue > maxAdfValue) {
                reason = String.format("ADF P-Value –≤—ã—à–µ –º–∞–∫—Å–∏–º—É–º–∞: %.6f > %.6f", adfPValue, maxAdfValue);
                log.debug("   ‚ùå {}: {}", pairName, reason);
                return reason;
            }
            log.debug("   ‚úÖ {}: ADF P-Value –≤ –Ω–æ—Ä–º–µ: {} <= {}", pairName,
                    adfPValue != null ? NumberFormatter.format(adfPValue, 6) : "null",
                    NumberFormatter.format(maxAdfValue, 6));
        }

        // 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ R-Squared (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö)
        if (settings.isUseMinRSquaredFilter()) {
            Double rSquared = getRSquared(data);
            double minRSquared = settings.getMinRSquared();
            if (rSquared == null || rSquared < minRSquared) {
                reason = String.format("R-Squared –Ω–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞: %s < %.3f",
                        rSquared != null ? String.format("%.3f", rSquared) : "null", minRSquared);
                log.debug("   ‚ùå {}: {}", pairName, reason);
                return reason;
            }
            log.debug("   ‚úÖ {}: R-Squared –≤—ã—à–µ –º–∏–Ω–∏–º—É–º–∞: {} >= {}", pairName,
                    NumberFormatter.format(rSquared, 3), NumberFormatter.format(minRSquared, 3));
        }

        // 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö)
        if (settings.isUseMinCorrelationFilter()) {
            Double correlation = data.getPearsonCorr();
            double minCorrelation = settings.getMinCorrelation();
            if (correlation == null || Math.abs(correlation) < minCorrelation) {
                reason = String.format("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –Ω–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞: %s < %.3f",
                        correlation != null ? String.format("%.3f", Math.abs(correlation)) : "null", minCorrelation);
                log.debug("   ‚ùå {}: {}", pairName, reason);
                return reason;
            }
            log.debug("   ‚úÖ {}: –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –≤—ã—à–µ –º–∏–Ω–∏–º—É–º–∞: {} >= {}", pairName,
                    NumberFormatter.format(Math.abs(correlation), 3), NumberFormatter.format(minCorrelation, 3));
        }

        return null; // –ü–∞—Ä–∞ –ø—Ä–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    }

    // ============ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –§–ò–õ–¨–¢–†–ê–¶–ò–ò ============

    private boolean isDataMissing(ZScoreData data, List<ZScoreParam> params) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Z-score –¥–∞–Ω–Ω—ã—Ö –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        if (params != null && !params.isEmpty()) {
            return false; // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
        }
        return data.getLatestZScore() == null; // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ–º latest_zscore
    }

    private boolean isTickersInvalid(ZScoreData data) {
        return data.getUnderValuedTicker() == null ||
                data.getOverValuedTicker() == null ||
                data.getUnderValuedTicker().isEmpty() ||
                data.getOverValuedTicker().isEmpty() ||
                data.getUnderValuedTicker().equals(data.getOverValuedTicker());
    }

    private Double getAdfPValue(ZScoreData data, List<ZScoreParam> params) {
        if (params != null && !params.isEmpty()) {
            // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç API
            ZScoreParam lastParam = params.get(params.size() - 1);
            return lastParam.getAdfpvalue();
        } else {
            // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç API - –∏—Å–ø–æ–ª—å–∑—É–µ–º avgAdfPvalue –¥–ª—è ADF —Ç–µ—Å—Ç–∞
            return data.getAvgAdfPvalue();
        }
    }

    private Double getCorrelationPValue(ZScoreData data, List<ZScoreParam> params) {
        if (params != null && !params.isEmpty()) {
            // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç API
            ZScoreParam lastParam = params.get(params.size() - 1);
            return lastParam.getPvalue();
        } else {
            // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç API
            return data.getPearsonCorrPValue();
        }
    }

    private double getLatestZScore(ZScoreData data, List<ZScoreParam> params) {
        if (params != null && !params.isEmpty()) {
            // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç API
            return params.get(params.size() - 1).getZscore();
        } else if (data.getLatestZScore() != null) {
            // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç API
            return data.getLatestZScore();
        } else {
            return 0.0;
        }
    }

    private Double getRSquared(ZScoreData data) {
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
        if (data.getAvgRSquared() != null) {
            return data.getAvgRSquared();
        }
        return null;
    }

    // ============ –°–ò–°–¢–ï–ú–ê –û–¶–ï–ù–ö–ò –ö–ê–ß–ï–°–¢–í–ê –ü–ê–† ============

    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–∫–æ—Ä –ø–∞—Ä—ã —Å –ö–û–ù–§–ò–ì–£–†–ò–†–£–ï–ú–´–ú–ò –í–ï–°–ê–ú–ò –∏–∑ Settings
     */
    public double calculatePairQualityScore(ZScoreData data, Settings settings, Map<String, List<Candle>> candlesMap) {
        double totalScore = 0.0;
        List<ZScoreParam> params = data.getZScoreHistory();
        String pairName = data.getUnderValuedTicker() + "/" + data.getOverValuedTicker();

        log.debug("üéØ –†–∞—Å—Å—á–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–∫–æ—Ä–∞ –¥–ª—è {} —Å –ù–ê–°–¢–†–ê–ò–í–ê–ï–ú–´–ú–ò –≤–µ—Å–∞–º–∏", pairName);

        // ====== 1. Z-SCORE –°–ò–õ–ê (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –≤–µ—Å) ======
        if (settings.isUseZScoreScoring()) {
            double zScore = getLatestZScore(data, params);
            double maxWeight = settings.getZScoreScoringWeight();
            double zScorePoints = Math.min(Math.abs(zScore) * (maxWeight / 5.0), maxWeight); // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ –≤–µ—Å—É
            totalScore += zScorePoints;
            log.debug("  üéØ Z-Score –∫–æ–º–ø–æ–Ω–µ–Ω—Ç: {} –æ—á–∫–æ–≤ (Z-score={}, –≤–µ—Å={})",
                    NumberFormatter.format(zScorePoints, 1), NumberFormatter.format(zScore, 2), maxWeight);
        }

        // ====== 2. –ü–ò–ö–°–ï–õ–¨–ù–´–ô –°–ü–†–ï–î (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –≤–µ—Å, –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç!) ======
        if (settings.isUsePixelSpreadScoring()) {
            double pixelSpreadScore = calculatePixelSpreadScoreComponent(data, settings, candlesMap);
            totalScore += pixelSpreadScore;
            log.debug("  üìè –ü–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: {} –æ—á–∫–æ–≤ (–≤–µ—Å={})",
                    NumberFormatter.format(pixelSpreadScore, 1), settings.getPixelSpreadScoringWeight());
        }

        // ====== 3. –ö–û–ò–ù–¢–ï–ì–†–ê–¶–ò–Ø (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –≤–µ—Å) ======
        if (settings.isUseCointegrationScoring()) {
            double cointegrationScore = calculateCointegrationScoreComponent(data, params, settings);
            totalScore += cointegrationScore;
            log.debug("  üî¨ –ö–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {} –æ—á–∫–æ–≤ (–≤–µ—Å={})",
                    NumberFormatter.format(cointegrationScore, 1), settings.getCointegrationScoringWeight());
        }

        // ====== 4. –ö–ê–ß–ï–°–¢–í–û –ú–û–î–ï–õ–ò (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –≤–µ—Å) ======
        if (settings.isUseModelQualityScoring()) {
            double modelQualityScore = calculateModelQualityScoreComponent(data, params, settings);
            totalScore += modelQualityScore;
            log.debug("  üìä –ö–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏: {} –æ—á–∫–æ–≤ (–≤–µ—Å={})",
                    NumberFormatter.format(modelQualityScore, 1), settings.getModelQualityScoringWeight());
        }

        // ====== 5. –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ê–Ø –ó–ù–ê–ß–ò–ú–û–°–¢–¨ (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –≤–µ—Å) ======
        if (settings.isUseStatisticsScoring()) {
            double statisticalScore = calculateStatisticalSignificanceScoreComponent(data, params, settings);
            totalScore += statisticalScore;
            log.debug("  üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {} –æ—á–∫–æ–≤ (–≤–µ—Å={})",
                    NumberFormatter.format(statisticalScore, 1), settings.getStatisticsScoringWeight());
        }

        // ====== 6. –ë–û–ù–£–°–´ (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –≤–µ—Å) ======
        if (settings.isUseBonusScoring()) {
            double bonusScore = calculateBonusScoreComponent(data, settings);
            totalScore += bonusScore;
            log.debug("  üéÅ –ë–æ–Ω—É—Å—ã: {} –æ—á–∫–æ–≤ (–≤–µ—Å={})",
                    NumberFormatter.format(bonusScore, 1), settings.getBonusScoringWeight());
        }

        log.debug("üèÜ –ò—Ç–æ–≥–æ–≤—ã–π —Å–∫–æ—Ä –¥–ª—è {}: {} –æ—á–∫–æ–≤ (–ù–ê–°–¢–†–ê–ò–í–ê–ï–ú–´–ï –í–ï–°–ê)", pairName, NumberFormatter.format(totalScore, 1));
        return totalScore;
    }

    /**
     * –†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–∞ –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞ (–ù–û–í–ê–Ø –í–ï–†–°–ò–Ø: —Å —Ä–∞—Å—á–µ—Ç–æ–º –∏–∑ candlesMap –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é)
     */
    private double calculatePixelSpreadScoreComponent(ZScoreData data, Settings settings, Map<String, List<Candle>> candlesMap) {
        try {
            String longTicker = data.getUnderValuedTicker();  // undervalued = long
            String shortTicker = data.getOverValuedTicker(); // overvalued = short

            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é PairData (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)
            var existingPairs = tradingPairService.findByTickers(longTicker, shortTicker);

            if (!existingPairs.isEmpty()) {
                var pairData = existingPairs.get(0);

                // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã
                double avgSpread = pixelSpreadService.getAveragePixelSpread(pairData);

                if (avgSpread > 0) {
                    double maxWeight = settings.getPixelSpreadScoringWeight();
                    double baseScore = calculateScoreFromPixelSpread(avgSpread, maxWeight);

                    log.debug("    üìè –ü–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø–∞—Ä–∞): avg={}px ‚Üí {} –±–∞–ª–ª–æ–≤",
                            String.format("%.1f", avgSpread), String.format("%.1f", baseScore));
                    return baseScore;
                }
            }

            // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä—ã –Ω–µ—Ç, –≤—ã—á–∏—Å–ª—è–µ–º –∏–∑ candlesMap
            if (candlesMap != null && candlesMap.containsKey(longTicker) && candlesMap.containsKey(shortTicker)) {
                List<Candle> longCandles = candlesMap.get(longTicker);
                List<Candle> shortCandles = candlesMap.get(shortTicker);

                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥ (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã) –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Å–∫–æ—Ä–∏–Ω–≥–µ
                double currentSpread = pixelSpreadService.calculateCurrentPixelSpreadFromCandles(
                        longCandles, shortCandles, longTicker, shortTicker);

                if (currentSpread > 0) {
                    double maxWeight = settings.getPixelSpreadScoringWeight();
                    double baseScore = calculateScoreFromPixelSpread(currentSpread, maxWeight);

                    // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å –∑–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞
                    double volatilityBonus = calculateVolatilityBonusFromCandles(longCandles, shortCandles, maxWeight);

                    // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å –∑–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–æ–π —Ç–µ–∫—É—â–∏–π –ø–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥
                    double currentSpreadBonus = calculateCurrentSpreadBonus(currentSpread, maxWeight);

                    double totalScore = baseScore + volatilityBonus + currentSpreadBonus;

                    log.debug("    üìè –ü–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ (–≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π): {}px ‚Üí {} –±–∞–ª–ª–æ–≤ (–±–∞–∑–æ–≤—ã–π: {}, –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {}, —Ç–µ–∫—É—â–∏–π —Å–ø—Ä–µ–¥: {})",
                            String.format("%.1f", currentSpread), String.format("%.1f", totalScore),
                            String.format("%.1f", baseScore), String.format("%.1f", volatilityBonus),
                            String.format("%.1f", currentSpreadBonus));
                    return totalScore;
                }
            }

            log.debug("    üìè –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞ –ø–∞—Ä—ã {}/{}", longTicker, shortTicker);
            return 0.0; // –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–∏–∫—Å–µ–ª—å–Ω–æ–º —Å–ø—Ä–µ–¥–µ

        } catch (Exception e) {
            log.warn("    üìè –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–æ—Ä–∞ –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞: {}", e.getMessage());
            return 0.0;
        }
    }

    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç —Å–∫–æ—Ä –∏–∑ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞
     * –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
     */
    private double calculateScoreFromPixelSpread(double avgSpread, double maxWeight) {
        double scoreRatio;

        if (avgSpread < 0) {
            // –û—à–∏–±–∫–∞: –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω
            log.warn("    üìè –û–®–ò–ë–ö–ê: –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –ø–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ {}px", String.format("%.1f", avgSpread));
            scoreRatio = 0.0;
        } else if (avgSpread > 720) {
            // –û—à–∏–±–∫–∞: —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Å–ø—Ä–µ–¥, –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            log.warn("    üìè –û–®–ò–ë–ö–ê: —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –ø–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ {}px (>720px)", String.format("%.1f", avgSpread));
            scoreRatio = 0.0;
        } else if (avgSpread <= 240) {
            // –ù–∏–∑–∫–∏–π —Å–ø—Ä–µ–¥: 0-240px - –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç –æ—Ç 10% –¥–æ 60%
            scoreRatio = 0.1 + (avgSpread / 240.0) * 0.5; // 10% - 60%
        } else if (avgSpread <= 480) {
            // –ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: 240-480px - –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω 60%-100%
            scoreRatio = 0.6 + ((avgSpread - 240) / 240.0) * 0.4; // 60% - 100%
        } else {
            // –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π —Ä–∏—Å–∫: 480-720px - —É–±—ã–≤–∞—é—â–∏–π –æ—Ç 100% –¥–æ 30%
            scoreRatio = 1.0 - ((avgSpread - 480) / 240.0) * 0.7; // 100% - 30%
        }

        double score = maxWeight * scoreRatio;

        log.debug("    üìè –ü–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ {}px ‚Üí ratio={}% ‚Üí {} –±–∞–ª–ª–æ–≤",
                String.format("%.1f", avgSpread), String.format("%.0f", scoreRatio * 100), String.format("%.1f", score));

        return score;
    }

    /**
     * –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–µ—Å–æ–≤ –¥–ª—è –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
     */
    private double calculateCointegrationScoreComponent(ZScoreData data, List<ZScoreParam> params, Settings settings) {
        boolean hasJohansen = data.getJohansenCointPValue() != null && data.getJohansenCointPValue() > 0;
        boolean hasAdf = getAdfPValue(data, params) != null && getAdfPValue(data, params) > 0;

        String pairName = data.getUnderValuedTicker() + "/" + data.getOverValuedTicker();

        if (!hasJohansen && !hasAdf) {
            log.debug("  üî¨ {}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏", pairName);
            return 0.0;
        }

        double maxWeight = settings.getCointegrationScoringWeight();
        double score = 0.0;

        if (hasJohansen && hasAdf) {
            // –û–ë–ê –¢–ï–°–¢–ê –î–û–°–¢–£–ü–ù–´ - —Ä–∞–≤–Ω—ã–µ –≤–µ—Å–∞ –ø–æ 50% –æ—Ç –ø–æ–ª–Ω–æ–≥–æ –≤–µ—Å–∞
            log.debug("  üî¨ {}: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –≤–µ—Å–∞ - –æ–±–∞ —Ç–µ—Å—Ç–∞ ({}+{})", pairName, maxWeight / 2, maxWeight / 2);

            // Johansen (50% –æ—Ç –≤–µ—Å–∞)
            double johansenPValue = data.getJohansenCointPValue();
            double johansenScore = Math.max(0, (0.05 - johansenPValue) / 0.05) * (maxWeight / 2.0);
            score += johansenScore;

            // ADF (50% –æ—Ç –≤–µ—Å–∞)
            Double adfPValue = getAdfPValue(data, params);
            double adfScore = Math.max(0, (0.05 - Math.min(adfPValue, 0.05)) / 0.05) * (maxWeight / 2.0);
            score += adfScore;

            log.debug("    Johansen: {} –æ—á–∫–æ–≤ (p-value={})",
                    NumberFormatter.format(johansenScore, 1),
                    NumberFormatter.format(johansenPValue, 6));
            log.debug("    ADF: {} –æ—á–∫–æ–≤ (p-value={})",
                    NumberFormatter.format(adfScore, 1),
                    NumberFormatter.format(adfPValue, 6));

        } else if (hasJohansen) {
            // –¢–û–õ–¨–ö–û JOHANSEN - –ø–æ–ª–Ω—ã–π –≤–µ—Å
            log.debug("  üî¨ {}: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –≤–µ—Å–∞ - —Ç–æ–ª—å–∫–æ Johansen ({})", pairName, maxWeight);

            double johansenPValue = data.getJohansenCointPValue();
            double johansenScore = Math.max(0, (0.05 - johansenPValue) / 0.05) * maxWeight;
            score += johansenScore;

            log.debug("     Johansen: {} –æ—á–∫–æ–≤ (p-value={})",
                    NumberFormatter.format(johansenScore, 1),
                    NumberFormatter.format(johansenPValue, 6));

        } else if (hasAdf) {
            // –¢–û–õ–¨–ö–û ADF - –ø–æ–ª–Ω—ã–π –≤–µ—Å
            log.debug("  üî¨ {}: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –≤–µ—Å–∞ - —Ç–æ–ª—å–∫–æ ADF ({})", pairName, maxWeight);

            Double adfPValue = getAdfPValue(data, params);
            double adfScore = Math.max(0, (0.05 - Math.min(adfPValue, 0.05)) / 0.05) * maxWeight;
            score += adfScore;

            log.debug("    ADF: {} –æ—á–∫–æ–≤ (p-value={})",
                    NumberFormatter.format(adfScore, 1),
                    NumberFormatter.format(adfPValue, 6));
        }

        // –ù–µ–±–æ–ª—å—à–æ–π –±–æ–Ω—É—Å –∑–∞ trace statistic (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å Johansen) - 5% –æ—Ç –≤–µ—Å–∞
        if (hasJohansen && data.getJohansenTraceStatistic() != null && data.getJohansenCriticalValue95() != null) {
            if (data.getJohansenTraceStatistic() > data.getJohansenCriticalValue95()) {
                double traceBonus = maxWeight * 0.05; // 5% –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤–µ—Å–∞
                score += traceBonus;
                log.debug("    –ë–æ–Ω—É—Å trace statistic: +{} –æ—á–∫–æ–≤", NumberFormatter.format(traceBonus, 1));
            }
        }

        return score;
    }

    private double calculateModelQualityScoreComponent(ZScoreData data, List<ZScoreParam> params, Settings settings) {
        double maxWeight = settings.getModelQualityScoringWeight();
        double score = 0.0;

        // R-squared (75% –æ—Ç –≤–µ—Å–∞)
        Double rSquared = getRSquared(data);
        if (rSquared != null && rSquared > 0) {
            score += rSquared * (maxWeight * 0.75); // 75% –æ—Ç –≤–µ—Å–∞ –ø—Ä–∏ R¬≤ = 1.0
        }

        // –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å (25% –æ—Ç –≤–µ—Å–∞)
        if (data.getStablePeriods() != null && data.getTotalObservations() != null && data.getTotalObservations() > 0) {
            double stabilityRatio = (double) data.getStablePeriods() / data.getTotalObservations();
            score += stabilityRatio * (maxWeight * 0.25); // 25% –æ—Ç –≤–µ—Å–∞
        }

        return score;
    }

    private double calculateStatisticalSignificanceScoreComponent(ZScoreData data, List<ZScoreParam> params, Settings settings) {
        double maxWeight = settings.getStatisticsScoringWeight();
        double score = 0.0;

        // Pearson –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è P-value (50% –æ—Ç –≤–µ—Å–∞)
        Double pearsonPValue = getCorrelationPValue(data, params);
        if (pearsonPValue != null && pearsonPValue >= 0) {
            score += Math.max(0, (0.05 - Math.min(pearsonPValue, 0.05)) / 0.05) * (maxWeight * 0.5);
        }

        // –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å–∏–ª–∞ (50% –æ—Ç –≤–µ—Å–∞)
        if (data.getPearsonCorr() != null) {
            double absCorr = Math.abs(data.getPearsonCorr());
            score += Math.min(absCorr, 1.0) * (maxWeight * 0.5);
        }

        return score;
    }

    private double calculateBonusScoreComponent(ZScoreData data, Settings settings) {
        double maxWeight = settings.getBonusScoringWeight();
        double bonusScore = 0.0;

        // –ë–æ–Ω—É—Å –∑–∞ –ø–æ–ª–Ω–æ—Ç—É –¥–∞–Ω–Ω—ã—Ö Johansen (30% –æ—Ç –≤–µ—Å–∞)
        if (data.getJohansenCointPValue() != null && data.getJohansenTraceStatistic() != null) {
            bonusScore += maxWeight * 0.3;
        }

        // –ë–æ–Ω—É—Å –∑–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å (20% –æ—Ç –≤–µ—Å–∞)
        if (data.getStablePeriods() != null && data.getTotalObservations() != null) {
            bonusScore += maxWeight * 0.2;
        }

        // –ë–æ–Ω—É—Å –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏ (30% –æ—Ç –≤–µ—Å–∞)
        if (data.getAvgRSquared() != null && data.getAvgRSquared() > 0.8) {
            bonusScore += maxWeight * 0.3;
        }

        return bonusScore;
    }

    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –±–æ–Ω—É—Å –∑–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –ù–ê–°–¢–û–Ø–©–ï–ì–û –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç PixelSpreadService –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∞—Ä—Ç–∞
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ü–∏–∫–ª—ã –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞ –º–µ–∂–¥—É –Ω–∏–∑–∫–∏–º (10%) –∏ –≤—ã—Å–æ–∫–∏–º (90%) –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏
     */
    private double calculateVolatilityBonusFromCandles(List<Candle> longCandles, List<Candle> shortCandles, double maxWeight) {
        try {
            if (longCandles == null || shortCandles == null || longCandles.isEmpty() || shortCandles.isEmpty()) {
                return 0.0;
            }

            log.debug("    üéØ –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞: LONG {} —Å–≤–µ—á–µ–π, SHORT {} —Å–≤–µ—á–µ–π",
                    longCandles.size(), shortCandles.size());

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º PixelSpreadService –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞ –ø–æ –≤—Å–µ–º —Å–≤–µ—á–∞–º
            List<Double> pixelSpreads = calculatePixelSpreadHistoryFromCandles(longCandles, shortCandles);

            if (pixelSpreads.size() < 10) {
                log.debug("    üéØ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ ({} —Ç–æ—á–µ–∫)", pixelSpreads.size());
                return 0.0;
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ü–∏–∫–ª–æ–≤
            double minSpread = pixelSpreads.stream().mapToDouble(Double::doubleValue).min().orElse(0.0);
            double maxSpread = pixelSpreads.stream().mapToDouble(Double::doubleValue).max().orElse(0.0);

            if (maxSpread - minSpread < 50) {
                log.debug("    üéØ –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞: –¥–∏–∞–ø–∞–∑–æ–Ω {}px", String.format("%.1f", maxSpread - minSpread));
                return 0.0; // –°–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            }

            log.debug("    üéØ –î–∏–∞–ø–∞–∑–æ–Ω –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞: {}-{}px –Ω–∞ {} —Ç–æ—á–∫–∞—Ö",
                    String.format("%.1f", minSpread), String.format("%.1f", maxSpread), pixelSpreads.size());

            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–∏–∫–ª—ã –º–µ–∂–¥—É –Ω–∏–∑–∫–∏–º (10% –æ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞) –∏ –≤—ã—Å–æ–∫–∏–º (90% –æ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞)
            double lowThreshold = minSpread + (maxSpread - minSpread) * 0.1;   // 10% –æ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            double highThreshold = minSpread + (maxSpread - minSpread) * 0.9;  // 90% –æ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞

            int cycles = 0;
            boolean wasInLowZone = false;
            boolean wasInHighZone = false;

            for (double spread : pixelSpreads) {
                if (spread <= lowThreshold) {
                    if (!wasInLowZone && wasInHighZone) {
                        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∏–∑ –≤—ã—Å–æ–∫–æ–π –∑–æ–Ω—ã –≤ –Ω–∏–∑–∫—É—é - –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π —Ü–∏–∫–ª
                        wasInHighZone = false;
                    }
                    wasInLowZone = true;
                } else if (spread >= highThreshold && wasInLowZone) {
                    // –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω: –æ—Ç –Ω–∏–∑–∫–æ–≥–æ –∫ –≤—ã—Å–æ–∫–æ–º—É
                    cycles++;
                    wasInLowZone = false;
                    wasInHighZone = true;
                }
            }

            // –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å –∑–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            double volatilityBonus = 0.0;
            if (cycles >= 2) {
                // –ë–æ–Ω—É—Å 15% –æ—Ç –≤–µ—Å–∞ –∑–∞ —Ö–æ—Ä–æ—à—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (2+ —Ü–∏–∫–ª–∞)
                volatilityBonus = maxWeight * 0.15;
                log.debug("    üéØ –ë–û–ù–£–° –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞: {} —Ü–∏–∫–ª–æ–≤ ‚Üí +{} –±–∞–ª–ª–æ–≤ (15% –æ—Ç –≤–µ—Å–∞)",
                        cycles, String.format("%.1f", volatilityBonus));
            } else if (cycles == 1) {
                // –ú–∞–ª—ã–π –±–æ–Ω—É—Å 7% –æ—Ç –≤–µ—Å–∞ –∑–∞ —É–º–µ—Ä–µ–Ω–Ω—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (1 —Ü–∏–∫–ª)
                volatilityBonus = maxWeight * 0.07;
                log.debug("    üéØ –ú–∞–ª—ã–π –±–æ–Ω—É—Å –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞: {} —Ü–∏–∫–ª ‚Üí +{} –±–∞–ª–ª–æ–≤ (7% –æ—Ç –≤–µ—Å–∞)",
                        cycles, String.format("%.1f", volatilityBonus));
            } else {
                log.debug("    üéØ –ù–µ—Ç —Ü–∏–∫–ª–æ–≤ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞: –ø–æ—Ä–æ–≥–∏ {}-{}px, —Ü–∏–∫–ª—ã: {}",
                        String.format("%.1f", lowThreshold), String.format("%.1f", highThreshold), cycles);
            }

            return volatilityBonus;

        } catch (Exception e) {
            log.warn("    üéØ –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞: {}", e.getMessage());
            return 0.0;
        }
    }

    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞ –∏–∑ —Å–≤–µ—á–µ–π, –∏—Å–ø–æ–ª—å–∑—É—è –ª–æ–≥–∏–∫—É PixelSpreadService
     * –ù–æ –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è PairData (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏)
     */
    private List<Double> calculatePixelSpreadHistoryFromCandles(List<Candle> longCandles, List<Candle> shortCandles) {
        List<Double> pixelSpreads = new ArrayList<>();

        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        List<Candle> sortedLongCandles = new ArrayList<>(longCandles);
        List<Candle> sortedShortCandles = new ArrayList<>(shortCandles);
        sortedLongCandles.sort(Comparator.comparing(Candle::getTimestamp));
        sortedShortCandles.sort(Comparator.comparing(Candle::getTimestamp));

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—ã –∏ –≤—Ä–µ–º–µ–Ω–∞
        List<Date> longTimes = sortedLongCandles.stream().map(c -> new Date(c.getTimestamp())).toList();
        List<Double> longPrices = sortedLongCandles.stream().map(Candle::getClose).toList();

        List<Date> shortTimes = sortedShortCandles.stream().map(c -> new Date(c.getTimestamp())).toList();
        List<Double> shortPrices = sortedShortCandles.stream().map(Candle::getClose).toList();

        // –ù–∞–π—Ç–∏ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ (–∫–∞–∫ –≤ PixelSpreadService)
        double minLongPrice = longPrices.stream().min(Double::compareTo).orElse(0.0);
        double maxLongPrice = longPrices.stream().max(Double::compareTo).orElse(1.0);
        double longPriceRange = maxLongPrice - minLongPrice;

        double minShortPrice = shortPrices.stream().min(Double::compareTo).orElse(0.0);
        double maxShortPrice = shortPrices.stream().max(Double::compareTo).orElse(1.0);
        double shortPriceRange = maxShortPrice - minShortPrice;

        if (longPriceRange == 0.0 || shortPriceRange == 0.0) {
            return pixelSpreads; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω Z-Score –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ (–∫–∞–∫ –≤ PixelSpreadService)
        double minZScore = -3.0;
        double maxZScore = 3.0;
        double zRange = maxZScore - minZScore;

        // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è long —Ü–µ–Ω –≤ –¥–∏–∞–ø–∞–∑–æ–Ω Z-Score
        List<Double> scaledLongPrices = longPrices.stream()
                .map(price -> minZScore + ((price - minLongPrice) / longPriceRange) * zRange)
                .toList();

        // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è short —Ü–µ–Ω –≤ –¥–∏–∞–ø–∞–∑–æ–Ω Z-Score  
        List<Double> scaledShortPrices = shortPrices.stream()
                .map(price -> minZScore + ((price - minShortPrice) / shortPriceRange) * zRange)
                .toList();

        // –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ (–∫–∞–∫ –≤ PixelSpreadService)
        Set<Long> allTimestamps = new HashSet<>();
        longTimes.forEach(date -> allTimestamps.add(date.getTime()));
        shortTimes.forEach(date -> allTimestamps.add(date.getTime()));

        List<Long> sortedTimestamps = allTimestamps.stream().sorted().toList();

        // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∫–∞–∫ –≤ PixelSpreadService
        int chartHeight = 720;

        // –ù–∞—Ö–æ–¥–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        double minValue = Math.min(
                scaledLongPrices.stream().min(Double::compareTo).orElse(-3.0),
                scaledShortPrices.stream().min(Double::compareTo).orElse(-3.0)
        );
        double maxValue = Math.max(
                scaledLongPrices.stream().max(Double::compareTo).orElse(3.0),
                scaledShortPrices.stream().max(Double::compareTo).orElse(3.0)
        );

        // –í—ã—á–∏—Å–ª—è–µ–º –ø–∏–∫—Å–µ–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫ (–∫–∞–∫ –≤ PixelSpreadService)
        for (Long timestamp : sortedTimestamps) {
            Double longPrice = findNearestPriceForVolatility(longTimes, scaledLongPrices, timestamp);
            Double shortPrice = findNearestPriceForVolatility(shortTimes, scaledShortPrices, timestamp);

            if (longPrice != null && shortPrice != null) {
                double longPixelY = convertValueToPixelForVolatility(longPrice, minValue, maxValue, chartHeight);
                double shortPixelY = convertValueToPixelForVolatility(shortPrice, minValue, maxValue, chartHeight);
                double pixelDistance = Math.abs(longPixelY - shortPixelY);
                pixelSpreads.add(pixelDistance);
            }
        }

        return pixelSpreads;
    }

    /**
     * –ù–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à—É—é —Ü–µ–Ω—É –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–∫–æ–ø–∏—è –º–µ—Ç–æ–¥–∞ –∏–∑ PixelSpreadService)
     */
    private Double findNearestPriceForVolatility(List<Date> timeAxis, List<Double> prices, long targetTimestamp) {
        if (timeAxis.isEmpty() || prices.isEmpty()) return null;

        int bestIndex = 0;
        long bestDiff = Math.abs(timeAxis.get(0).getTime() - targetTimestamp);

        for (int i = 1; i < timeAxis.size(); i++) {
            long diff = Math.abs(timeAxis.get(i).getTime() - targetTimestamp);
            if (diff < bestDiff) {
                bestDiff = diff;
                bestIndex = i;
            }
        }

        return prices.get(bestIndex);
    }

    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–∏–∫—Å–µ–ª—å–Ω—É—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É Y (–∫–æ–ø–∏—è –º–µ—Ç–æ–¥–∞ –∏–∑ PixelSpreadService)
     */
    private double convertValueToPixelForVolatility(double value, double minValue, double maxValue, int chartHeight) {
        if (maxValue - minValue == 0) return chartHeight / 2.0;

        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω [0, 1]
        double normalized = (value - minValue) / (maxValue - minValue);

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø–∏–∫—Å–µ–ª–∏ (Y=0 –≤–≤–µ—Ä—Ö—É, Y=chartHeight –≤–Ω–∏–∑—É)
        return chartHeight - (normalized * chartHeight);
    }

    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –±–æ–Ω—É—Å –∑–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–æ–π —Ç–µ–∫—É—â–∏–π –ø–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥
     * –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –≤—ã–±–æ—Ä –ø–∞—Ä —Å –Ω–∏–∑–∫–∏–º –∏–ª–∏ –Ω—É–ª–µ–≤—ã–º —Å–ø—Ä–µ–¥–æ–º
     */
    private double calculateCurrentSpreadBonus(double currentSpread, double maxWeight) {
        double bonusRatio = 0.0;

        if (currentSpread <= 0) {
            // –ù—É–ª–µ–≤–æ–π —Å–ø—Ä–µ–¥ - –Ω–∏–∫–∞–∫–∏—Ö –±–æ–Ω—É—Å–æ–≤
            bonusRatio = 0.0;
            log.debug("    üìê –ù—É–ª–µ–≤–æ–π —Ç–µ–∫—É—â–∏–π —Å–ø—Ä–µ–¥: –Ω–µ—Ç –±–æ–Ω—É—Å–∞");
        } else if (currentSpread < 30) {
            // –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π —Å–ø—Ä–µ–¥: 0-30px - —à—Ç—Ä–∞—Ñ (-10% –æ—Ç –≤–µ—Å–∞)
            bonusRatio = -0.1;
            log.debug("    üìê –®–¢–†–ê–§ –∑–∞ –æ—á–µ–Ω—å –Ω–∏–∑–∫–∏–π —Ç–µ–∫—É—â–∏–π —Å–ø—Ä–µ–¥: {}px ‚Üí {}% —à—Ç—Ä–∞—Ñ–∞",
                    String.format("%.1f", currentSpread), String.format("%.0f", bonusRatio * 100));
        } else if (currentSpread < 60) {
            // –ù–∏–∑–∫–∏–π —Å–ø—Ä–µ–¥: 30-60px - –±–µ–∑ –±–æ–Ω—É—Å–æ–≤ –∏ —à—Ç—Ä–∞—Ñ–æ–≤
            bonusRatio = 0.0;
            log.debug("    üìê –ù–∏–∑–∫–∏–π —Ç–µ–∫—É—â–∏–π —Å–ø—Ä–µ–¥: {}px ‚Üí –Ω–µ—Ç –±–æ–Ω—É—Å–∞",
                    String.format("%.1f", currentSpread));
        } else if (currentSpread < 120) {
            // –£–º–µ—Ä–µ–Ω–Ω—ã–π —Å–ø—Ä–µ–¥: 60-120px - –º–∞–ª—ã–π –±–æ–Ω—É—Å 5%
            bonusRatio = 0.15;
            log.debug("    üìê –£–º–µ—Ä–µ–Ω–Ω—ã–π —Ç–µ–∫—É—â–∏–π —Å–ø—Ä–µ–¥: {}px ‚Üí +{}% –±–æ–Ω—É—Å–∞",
                    String.format("%.1f", currentSpread), String.format("%.0f", bonusRatio * 100));
        } else if (currentSpread < 240) {
            // –•–æ—Ä–æ—à–∏–π —Å–ø—Ä–µ–¥: 120-240px - —Ö–æ—Ä–æ—à–∏–π –±–æ–Ω—É—Å 10%
            bonusRatio = 0.30;
            log.debug("    üìê –ë–û–ù–£–° –∑–∞ —Ö–æ—Ä–æ—à–∏–π —Ç–µ–∫—É—â–∏–π —Å–ø—Ä–µ–¥: {}px ‚Üí +{}% –±–æ–Ω—É—Å–∞",
                    String.format("%.1f", currentSpread), String.format("%.0f", bonusRatio * 100));
        } else if (currentSpread <= 480) {
            // –û—Ç–ª–∏—á–Ω—ã–π —Å–ø—Ä–µ–¥: 240-480px - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å 15%
            bonusRatio = 0.45;
            log.debug("    üìê –ë–û–õ–¨–®–û–ô –ë–û–ù–£–° –∑–∞ –æ—Ç–ª–∏—á–Ω—ã–π —Ç–µ–∫—É—â–∏–π —Å–ø—Ä–µ–¥: {}px ‚Üí +{}% –±–æ–Ω—É—Å–∞",
                    String.format("%.1f", currentSpread), String.format("%.0f", bonusRatio * 100));
        } else {
            // –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Å–ø—Ä–µ–¥: >480px - —É–º–µ–Ω—å—à–∞—é—â–∏–π—Å—è –±–æ–Ω—É—Å
            double excessRatio = Math.min((currentSpread - 480) / 240.0, 1.0); // –î–æ 720px
            bonusRatio = 0.15 - (excessRatio * 0.1); // –û—Ç 15% –¥–æ 5%
            log.debug("    üìê –ë–æ–ª—å—à–æ–π —Ç–µ–∫—É—â–∏–π —Å–ø—Ä–µ–¥: {}px ‚Üí +{}% —É–±—ã–≤–∞—é—â–µ–≥–æ –±–æ–Ω—É—Å–∞",
                    String.format("%.1f", currentSpread), String.format("%.0f", bonusRatio * 100));
        }

        double bonus = maxWeight * bonusRatio;

        if (bonus != 0.0) {
            log.debug("    üìê –ë–æ–Ω—É—Å –∑–∞ —Ç–µ–∫—É—â–∏–π —Å–ø—Ä–µ–¥: {} –±–∞–ª–ª–æ–≤", String.format("%.1f", bonus));
        }

        return bonus;
    }

    /**
     * –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
     */
    @Data
    private static class PairCandidate {
        // Getters
        private final ZScoreData data;
        private final double compositeScore;
        private final double zScore;
        private final double correlation;
        private final double adfValue;
        private final double pValue;
        private final double rSquared;

        public PairCandidate(ZScoreData data, double compositeScore, double zScore,
                             double correlation, double adfValue, double pValue, double rSquared) {
            this.data = data;
            this.compositeScore = compositeScore;
            this.zScore = zScore;
            this.correlation = correlation;
            this.adfValue = adfValue;
            this.pValue = pValue;
            this.rSquared = rSquared;
        }
    }
}
