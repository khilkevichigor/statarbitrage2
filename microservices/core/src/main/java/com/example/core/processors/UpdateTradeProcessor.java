package com.example.core.processors;

import com.example.core.client.CandlesFeignClient;
import com.example.core.messaging.SendEventService;
import com.example.core.services.*;
import com.example.core.trading.interfaces.TradingProvider;
import com.example.core.trading.services.TradingIntegrationService;
import com.example.core.trading.services.TradingProviderFactory;
import com.example.shared.dto.*;
import com.example.shared.enums.TradeStatus;
import com.example.shared.events.rabbit.CoreEvent;
import com.example.shared.models.Pair;
import com.example.shared.models.Settings;
import com.example.shared.utils.FormatUtil;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.util.*;

@Slf4j
@Component
@RequiredArgsConstructor
public class UpdateTradeProcessor {
    private final PairService pairService;
    private final SettingsService settingsService;
    private final TradeHistoryService tradeHistoryService;
    private final ZScoreService zScoreService;
    private final TradingIntegrationService tradingIntegrationServiceImpl;
    private final ExitStrategyService exitStrategyService;
    private final SendEventService sendEventService;
    private final ChartService chartService;
    private final AveragingService averagingService;
    private final TradingProviderFactory tradingProviderFactory;
    private final CandlesFeignClient candlesFeignClient;
    private final UpdateZScoreDataCurrentService updateZScoreDataCurrentService;


    //todo —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É zScore - —á—Ç–æ –æ–Ω –ø–µ—Ä–µ—Å–µ–∫–∞–ª +3 –∏ -3 –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ - –≥–æ–≤–æ—Ä–∏—Ç –æ —Ç–æ–º —á—Ç–æ –ø–∞—Ä–∞ –≥—É–ª—è–µ—Ç —Ç—É–¥–∞-—Å—é–¥–∞
    //todo —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ –ø–∞—Ä—É –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø–ª–µ—á–æ –∏ –º–∞—Ä–∂—É —Ç–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω—ã –∞ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –¥–µ–ª–∞–µ—Ç—Å—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
    //todo –ø–æ–¥—É–º–∞—Ç—å –æ —Ç–æ–º —á—Ç–æ –±—ã –±—Ä–∞—Ç—å –±–æ–ª—å—à–µ 300 —Å–≤–µ—á–µ–π, –∏ –º–æ–∂–µ—Ç —Å—Ä–∞–∑—É –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¢–§ —á—Ç–æ –±—ã –≤ —á–∞—Ä—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –∏ —Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
    //todo —Å–∏—Å—Ç–µ–º–∞ –æ—á–∫–æ–≤ –¥–ª—è –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö/—É–±—ã—Ç–æ—á–Ω—ã—Ö –ø–∞—Ä —á–µ—Ä–µ–∑ –±–¥ - —Å–¥–µ–ª–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Ç–æ—Ä–≥—É–µ–º—ã—Ö –ø–∞—Ä! –Ω–∞—á–∏—Å–ª—è—Ç—å –±–∞–ª–ª—ã –ø–æ –ø—Ä–æ—Ñ–∏—Ç—É! –ø—Ä–∏ –æ—Ç–±–æ—Ä–µ –Ω–æ–≤—ã—Ö –ø–∞—Ä - –±—Ä–∞—Ç—å –±—ã–ª–ª–ª—ã –∏–∑ —ç—Ç–æ–π —Ç–∞–±–ª–∏—Ü—ã

    //todo –∫–æ–ª–æ–Ω–∫–∏ min/max –¥–ª—è –ª–æ–Ω–≥ –∏ —à–æ—Ä—Ç –Ω–∞ UI
    //todo –Ω–∞ —á–∞—Ä—Ç –≤ —Ç–∞–π—Ç–ª –≤—ã–≤–æ–¥–∏—Ç—å –ø—Ä–æ—Ñ–∏—Ç, —Ü–µ–Ω—ã –º–æ–Ω–µ—Ç, –∑-—Å–∫–æ—Ä, —É—Ä–æ–≤–µ–Ω—å –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞
    //todo –≤—ã–≤–æ–¥–∏—Ç—å —Å—Ç–∞—Ç—É –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –≤—Ä–µ–º–µ–Ω–∏ timeToMin/Max –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø–æ–¥—Å—Ç—Ä–æ–π–∫–∏ Settings

    //todo —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—É –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–π–¥–∏–Ω–≥ –ø–∞—Ä—ã, –∑–∞–∫—Ä—ã—Ç—å –≤—Å–µ, –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ –±—É, –≤–∫–ª/–æ—Ç–∫–ª –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥
    //todo –≤ updateTrade() –¥–æ–±–∞–≤–∏—Ç—å –±—ã—Å—Ç—Ä—ã–π —á–µ–∫ –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –Ω–∞ UI –≤ –≤–∏–¥–µ –∑–µ–ª–µ–Ω–æ–≥–æ, –∂–µ–ª—Ç–æ–≥–æ, –∫—Ä–∞—Å–Ω–æ–≥–æ —Ñ–ª–∞–≥–∞ (–≥—É–¥, —É—Ö—É–¥—à–∏–ª–∞—Å—å, —É—à–ª–∞) - –¥–æ–±–∞–≤–∏–ª –ª–æ–≥ —Å –≥–∞–ª–æ—á–∫–∞–º–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏
    //todo —Å–¥–µ–ª–∞—Ç—å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä - –±—É–¥–µ—Ç —Å–ª–µ–¥–∏—Ç—å –∑–∞ –æ–¥–Ω–æ–π –ø–∞—Ä–æ–π —Å –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ–º –∑-—Å–∫–æ—Ä–∞ –∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∫–æ–π —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ (–µ—Å–ª–∏ —á–∞—Ä—Ç —É–π–¥–µ—Ç –¥–∞–ª–µ–∫–æ –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª–∫–∞ –∏—Å—á–µ–∑–Ω–µ—Ç) - –æ—Ç–¥–µ–ª—å–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ –∏ —Ç–∞–±–ª–∏—Ü–∞ –∫–∞–∫ –¥–ª—è –¢–†–ï–ô–î–ò–ù–ì –ø–∞—Ä —á—Ç–æ –±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤–∏–¥–µ—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ - –∫–∞–∫ —Ö–æ–¥–∏—Ç z-—Å–∫–æ—Ä –Ω–∞ –¥–æ–ª–≥–æ—Å—Ä–æ–∫
    //todo –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤ updateTrade() –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ - "–µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∞ –ø–∞—Ä –Ω–µ—Ç—É!" - –º–æ–∂–µ—Ç –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ —Ç–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º—ã –±–µ—Ä–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –±–¥ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä—ã

    // ? todo —Å–¥–µ–ª–∞—Ç—å –±—ã—Å—Ç—Ä—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ—Ñ–∏—Ç–∞ –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —á—Ç–æ –±—ã –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É–±—ã—Ç–æ–∫ - –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è —Ç–∫ —Å–ª–æ–∂–Ω–æ - –Ω—É–∂–Ω–æ –≤—Å–µ –¥–µ–ª–∞—Ç—å –≤–º–µ—Å—Ç–µ - –∏ —Å—á–∏—Ç–∞—Ç—å z-—Å–∫–æ—Ä –ø–æ —Ö–æ—Ä–æ—à–µ–º—É
    // ? todo –µ—Å–ª–∏ –∑–∞–∫—Ä—ã–ª–∏—Å—å —Å —É–±—ã—Ç–∫–æ–º (—Å—Ç–æ–ø –∏–ª–∏ –µ—â–µ —á—Ç–æ) —Ç–æ —Å–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥—Ä—É–≥–æ–π –∞ –Ω–µ —Ç–æ —á—Ç–æ —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø—Ä–∏–Ω–µ—Å–ª–æ —É–±—ã—Ç–æ–∫ - –º–æ–∂–µ—Ç –∏ –Ω–µ –Ω–∞–¥–æ —Ç–∫ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ —Ç–æ–∂–µ –µ—Å—Ç—å
    // ? todo —Å–¥–µ–ª–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ –ø–æ –ø—Ä–æ—Ñ–∏—Ç—É USDT (%) - –º–æ–∂–µ—Ç –∏ –Ω–µ –Ω–∞–¥–æ —Ç–∫ –µ—Å—Ç—å –≤—Ä–µ–º—è –¥–æ –º–∏–Ω/–º–∞–∫—Å

    // +/- todo —Å–¥–µ–ª–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ –ø–æ Z-—Å–∫–æ—Ä (–ü–†–û–í–ï–†–ò–¢–¨)

    // + todo —Å–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫—É –∫ –ø–∞—Ä–µ "—É—Å—Ä–µ–¥–Ω–∏—Ç—å" (–µ—Å–ª–∏ –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –µ—â–µ –Ω–µ —É—à–ª–∞, –Ω—É –∏–ª–∏ —Å–∞–º–æ–º—É —Å–º–æ—Ç—Ä–µ—Ç—å –∏ —É—Å—Ä–µ–¥–Ω—è—Ç—å –∫–∞–∫ –ø–æ—Å—á–∏—Ç–∞–µ—à—å)
    // + todo –ø–æ—Ñ–∏–∫—Å–∏—Ç—å —á–∞—Ä—Ç –Ω–∞–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ü–µ–Ω - –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—å—à–µ –∏–ª–∏ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –∏ —á–∞—Ä—Ç —Å—ä–µ–∑–∂–∞–µ—Ç –≤–ø—Ä–∞–≤–æ –∫–æ–≥–¥–∞ –≤—ã–±–∏—Ä–∞–µ—à—å –ø–∏–∫—Å–µ–ª—å–Ω—ã–π –∏–ª–∏ zscore —Å–ø—Ä–µ–¥
    // + todo —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ –≤ csv
    // + todo –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ä—Ç –ø—Ä–æ—Ñ–∏—Ç–∞ –ø–æ–¥ —á–∞—Ä—Ç z-—Å–∫–æ—Ä (–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
    // + todo –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É "–≤—Ä–µ–º—è –∂–∏–∑–Ω–∏"
    // + todo Position –≤ –±–¥ –∞ –Ω–µ –≤ –º–∞–ø—É - —á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å —Ç—Ä–µ–π–¥—ã –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
    // + todo —Ç–æ—á–∫–∞ –Ω–∞ —á–∞—Ä—Ç–µ –ø—Ä–æ—Ñ–∏—Ç–∞ —á—Ç–æ –±—ã –±—ã–ª–æ –ª—É—á—à–µ –≤–∏–¥–Ω–æ –≥–¥–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

    @Transactional
    public Pair updateTrade(UpdateTradeRequest request) {
        validateRequest(request);

        final Pair tradingPair = loadFreshPairData(request.getTradingPair());
        if (tradingPair == null) {
            return request.getTradingPair();
        }
        log.info("");
        log.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—ã {}...", tradingPair.getPairName());

        final Settings settings = settingsService.getSettings();

        //todo –∑–¥–µ—Å—å —Å–µ—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ø–∞—Ä—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —á–∞—Ç–ñ–ü–¢
        pairService.updateSettingsParam(tradingPair, settings);

        TradingProvider provider = tradingProviderFactory.getCurrentProvider();
        provider.updatePositionPrices(List.of(tradingPair.getLongTicker(), tradingPair.getShortTicker()));

        if (arePositionsClosed(tradingPair)) {
            return handleNoOpenPositions(tradingPair);
        }

        final Map<String, Object> cointegrationData = updateZScoreDataForExistingPair(tradingPair, settings);
        final ZScoreData zScoreData = (ZScoreData) cointegrationData.get("zScoreData");
        final Map<String, List<Candle>> candlesMap = (Map<String, List<Candle>>) cointegrationData.get("candlesMap");

        tradingPair.setLongTickerCandles(candlesMap.get(tradingPair.getLongTicker()));
        tradingPair.setShortTickerCandles(candlesMap.get(tradingPair.getShortTicker()));

        logPairInfo(zScoreData, settings);

        pairService.updateZScoreDataCurrent(tradingPair, zScoreData);

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å Z-Score –∏ —Ü–µ–Ω–∞–º–∏
        log.debug("üî¢ –û–±–Ω–æ–≤–ª—è–µ–º –ø–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ –¥–ª—è –ø–∞—Ä—ã {}", tradingPair.getPairName());
        chartService.calculatePixelSpreadIfNeeded(tradingPair); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        chartService.addCurrentPixelSpreadPoint(tradingPair); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ç–æ—á–∫—É

        pairService.addChanges(tradingPair); // –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏—Ç –¥–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤—ã—Ö–æ–¥–∞

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏—Ç–∞
        if (averagingService.shouldPerformAutoAveraging(tradingPair, settings)) {
            AveragingService.AveragingResult averagingResult = averagingService.performAutoAveraging(tradingPair, settings);
            if (averagingResult.isSuccess()) {
                log.info("‚úÖ –ê–≤—Ç–æ—É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–ª—è –ø–∞—Ä—ã {}: {}", tradingPair.getPairName(), averagingResult.getMessage());
            } else {
                log.warn("‚ö†Ô∏è –ê–≤—Ç–æ—É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–ª—è –ø–∞—Ä—ã {}: {}", tradingPair.getPairName(), averagingResult.getMessage());
            }
        }

        if (request.isCloseManually()) {
            return handleManualClose(tradingPair, settings);
        }

        final String exitReason = exitStrategyService.getExitReason(tradingPair, settings);
        if (exitReason != null) {
            return handleAutoClose(tradingPair, settings, exitReason);
        }

        pairService.save(tradingPair);
        tradeHistoryService.updateTradeLog(tradingPair, settings);
        return tradingPair;
    }

    @Transactional
    public void updateObservedPair(Pair tradingPair) {
        final Pair freshPair = loadFreshPairData(tradingPair);
        if (freshPair == null) {
            return;
        }

        try {
            final Settings settings = settingsService.getSettings();
            final Map<String, Object> cointegrationData = updateZScoreDataForExistingPair(freshPair, settings);
            final ZScoreData zScoreData = (ZScoreData) cointegrationData.get("zScoreData");
            final Map<String, List<Candle>> candlesMap = (Map<String, List<Candle>>) cointegrationData.get("candlesMap");

            if (zScoreData != null) {
                freshPair.setLongTickerCandles(candlesMap.get(freshPair.getLongTicker()));
                freshPair.setShortTickerCandles(candlesMap.get(freshPair.getShortTicker()));
                pairService.updateZScoreDataCurrent(freshPair, zScoreData);

                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ –¥–ª—è –Ω–∞–±–ª—é–¥–∞–µ–º–æ–π –ø–∞—Ä—ã
                log.debug("üî¢ –û–±–Ω–æ–≤–ª—è–µ–º –ø–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ –¥–ª—è –Ω–∞–±–ª—é–¥–∞–µ–º–æ–π –ø–∞—Ä—ã {}", freshPair.getPairName());
                chartService.calculatePixelSpreadIfNeeded(freshPair); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
                chartService.addCurrentPixelSpreadPoint(freshPair); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ç–æ—á–∫—É

                // –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º z-Score –¥–∞–Ω–Ω—ã–µ –∏ –∏—Å—Ç–æ—Ä–∏—é (–∫–∞–∫ –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä)
                updateZScoreDataCurrentService.updateCurrent(freshPair, zScoreData);
                
                pairService.save(freshPair);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é z-Score –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
                tradeHistoryService.updateTradeLog(freshPair, settings);
            }
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–±–ª—é–¥–∞–µ–º–æ–π –ø–∞—Ä—ã {}: {}",
                    freshPair.getPairName(), e.getMessage());
            // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–∞–ª—å—à–µ, —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        }
    }

    private void validateRequest(UpdateTradeRequest request) {
        if (request == null || request.getTradingPair() == null) {
            throw new IllegalArgumentException("–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∞");
        }
    }

    private Pair loadFreshPairData(Pair tradingPair) {
        final Pair freshPair = pairService.findById(tradingPair.getId());
        if (freshPair == null || freshPair.getStatus() == TradeStatus.CLOSED) {
            log.debug("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ–π –ø–∞—Ä—ã {}", tradingPair.getPairName());
            return null;
        }

        log.debug("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∞ –¥–ª—è {}/{}", freshPair.getLongTicker(), freshPair.getShortTicker());
        return freshPair;
    }

    private boolean arePositionsClosed(Pair tradingPair) {
        final Positioninfo openPositionsInfo = tradingIntegrationServiceImpl.getOpenPositionsInfo(tradingPair);
        if (openPositionsInfo.isPositionsClosed()) {
            log.error("‚ùå –ü–æ–∑–∏—Ü–∏–∏ —É–∂–µ –∑–∞–∫—Ä—ã—Ç—ã –¥–ª—è –ø–∞—Ä—ã {}.", tradingPair.getPairName());
            return true;
        }
        return false;
    }

    private Map<String, Object> updateZScoreDataForExistingPair(Pair tradingPair, Settings settings) {

        // –°–æ–∑–¥–∞–µ–º ExtendedCandlesRequest –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π —á–µ—Ä–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        ExtendedCandlesRequest extendedRequest = ExtendedCandlesRequest.builder()
                .timeframe(settings.getTimeframe())
                .candleLimit((int) settings.getCandleLimit()) //todo check
                .minVolume(0.001) //todo –¥–ª—è —É–∂–µ —Ç–æ—Ä–≥—É–µ–º–æ–π –ø–∞—Ä—ã –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –æ–±—ä–µ–º—É - —Å–µ—Ç–∏–º –º–∏–Ω–∏–º–∞–ª–∫—É
                .tickers(List.of(tradingPair.getLongTicker(), tradingPair.getShortTicker()))
                .period(settings.calculateCurrentPeriod()) //todo –±–µ—Ä–µ–º –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                .build();

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–≤–µ—á–∏ —á–µ—Ä–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        Map<String, List<Candle>> allCandlesMap = candlesFeignClient.getValidatedCacheExtended(extendedRequest);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π
        if (allCandlesMap == null || allCandlesMap.isEmpty()) {
            log.warn("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è –ø–∞—Ä—ã {} ‚Äî –ø—Ä–æ–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", tradingPair.getPairName());
            throw new RuntimeException("–î–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã ‚Äî –ø—Ä–æ–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞");
        }

        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã –¥–ª—è –¥–∞–Ω–Ω–æ–π –ø–∞—Ä—ã
        Map<String, List<Candle>> candlesMap = new HashMap<>();
        String longTicker = tradingPair.getLongTicker();
        String shortTicker = tradingPair.getShortTicker();

        if (allCandlesMap.containsKey(longTicker)) {
            candlesMap.put(longTicker, allCandlesMap.get(longTicker));
        }
        if (allCandlesMap.containsKey(shortTicker)) {
            candlesMap.put(shortTicker, allCandlesMap.get(shortTicker));
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã —Å–≤–µ—á–∏ –¥–ª—è –æ–±–æ–∏—Ö —Ç–∏–∫–µ—Ä–æ–≤
        if (!candlesMap.containsKey(longTicker) ||
                !candlesMap.containsKey(shortTicker) ||
                candlesMap.get(longTicker).isEmpty() ||
                candlesMap.get(shortTicker).isEmpty()) {
            log.warn("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è –ø–∞—Ä—ã {} (long: {}, short: {}) ‚Äî –ø—Ä–æ–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
                    tradingPair.getPairName(),
                    candlesMap.containsKey(longTicker) ? candlesMap.get(longTicker).size() : 0,
                    candlesMap.containsKey(shortTicker) ? candlesMap.get(shortTicker).size() : 0);
            throw new RuntimeException("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π ‚Äî –ø—Ä–æ–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞");
        }

        ZScoreData zScoreData = zScoreService.calculateZScoreData(settings, candlesMap);
        Map<String, Object> result = new HashMap<>();
        result.put("candlesMap", candlesMap);
        result.put("zScoreData", zScoreData);
        return result;
    }

    private void logPairInfo(ZScoreData zScoreData, Settings settings) {
        if (zScoreData == null) {
            log.warn("ZScoreData is null, cannot log pair info.");
            return;
        }

        StringBuilder logMessage = new StringBuilder();

        logMessage.append(String.format("–ù–∞—à–∞ –ø–∞—Ä–∞: long=%s, short=%s | cointegrated=%s | p=%.5f | adf=%.5f | z=%.2f | corr=%.2f",
                zScoreData.getUnderValuedTicker(),
                zScoreData.getOverValuedTicker(),
                zScoreData.isJohansenIsCoint(),
                zScoreData.getJohansenCointPValue(),
                zScoreData.getAvgAdfPvalue(),
                zScoreData.getLatestZScore(),
                zScoreData.getPearsonCorr()));

        logMessage.append(String.format(" | avgAdf=%.2f | avgR=%.2f | stablePeriods=%d",
                zScoreData.getAvgAdfPvalue(),
                zScoreData.getAvgRSquared(),
                zScoreData.getStablePeriods()));

        logMessage.append(String.format(
                " | traceStat=%.2f | criticalValue95=%.2f | eigenSize=%d | vectorSize=%d | errors=%s",
                zScoreData.getJohansenTraceStatistic() != null ? zScoreData.getJohansenTraceStatistic() : 0.0,
                zScoreData.getJohansenCriticalValue95() != null ? zScoreData.getJohansenCriticalValue95() : 0.0,
                zScoreData.getJohansenEigenValues() != null ? zScoreData.getJohansenEigenValues().size() : 0,
                zScoreData.getJohansenCointegratingVector() != null ? zScoreData.getJohansenCointegratingVector().size() : 0,
                zScoreData.getJohansenError() != null ? zScoreData.getJohansenError() : "N/A"));

        logMessage.append(String.format(". –ß–µ–∫: pValue=%s, ADF=%s, R2=%s, stablePeriods=%d",
                FormatUtil.color(zScoreData.getJohansenCointPValue(), settings.getMaxPValue()),
                FormatUtil.color(zScoreData.getAvgAdfPvalue(), settings.getMaxAdfValue()),
                FormatUtil.color(zScoreData.getAvgRSquared(), settings.getMinRSquared()),
                zScoreData.getStablePeriods()));

        log.info(logMessage.toString());
    }

    private Pair handleManualClose(Pair tradingPair, Settings settings) {
        final ArbitragePairTradeInfo closeInfo = tradingIntegrationServiceImpl.closeArbitragePair(tradingPair);
        if (closeInfo == null || !closeInfo.isSuccess()) {
            return handleTradeError(tradingPair, UpdateTradeErrorType.MANUAL_CLOSE_FAILED);
        }

        log.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –ø–∞—Ä–∞ —á–µ—Ä–µ–∑ —Ç–æ—Ä–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É: {}", tradingPair.getPairName());

        tradingPair.setStatus(TradeStatus.CLOSED);
        tradingPair.setExitReason(ExitReasonType.EXIT_REASON_MANUALLY.name());
        finalizeClosedTrade(tradingPair, settings);
//        notificationService.sendTelegramClosedPair(tradingPair);
        sendEventService.sendCoreEvent(new CoreEvent(tradingPair, CoreEvent.Type.CLOSED_MESSAGE_TO_TELEGRAM));
        sendEventService.sendCoreEvent(new CoreEvent(tradingPair, CoreEvent.Type.ADD_CLOSED_TO_CSV));
        settings.setMinimumLotBlacklist("");
        return tradingPair;
    }

    private void finalizeClosedTrade(Pair tradingPair, Settings settings) {
        pairService.addChanges(tradingPair);
        pairService.updatePortfolioBalanceAfterTradeUSDT(tradingPair); //–±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ
        tradingIntegrationServiceImpl.deletePositions(tradingPair);
        pairService.save(tradingPair);
        tradeHistoryService.updateTradeLog(tradingPair, settings);
    }

    private Pair handleNoOpenPositions(Pair tradingPair) {
        log.debug("==> handleNoOpenPositions: –ù–ê–ß–ê–õ–û –¥–ª—è –ø–∞—Ä—ã {}", tradingPair.getPairName());
        log.debug("iÔ∏è –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –ø–∞—Ä—ã {}! –í–æ–∑–º–æ–∂–Ω–æ –æ–Ω–∏ –±—ã–ª–∏ –∑–∞–∫—Ä—ã—Ç—ã –≤—Ä—É—á–Ω—É—é –Ω–∞ –±–∏—Ä–∂–µ.", tradingPair.getPairName());

        final Positioninfo verificationResult = tradingIntegrationServiceImpl.verifyPositionsClosed(tradingPair);
        log.debug("–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π: {}", verificationResult);

        if (verificationResult.isPositionsClosed()) {
            log.debug("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã –Ω–∞ –±–∏—Ä–∂–µ –¥–ª—è –ø–∞—Ä—ã {}, PnL: {} USDT ({} %)", tradingPair.getPairName(), verificationResult.getTotalPnLUSDT(), verificationResult.getTotalPnLPercent());
            Pair result = handleTradeError(tradingPair, UpdateTradeErrorType.MANUALLY_CLOSED_NO_POSITIONS);
            log.debug("<== handleNoOpenPositions: –ö–û–ù–ï–¶ (–ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã) –¥–ª—è –ø–∞—Ä—ã {}", tradingPair.getPairName());
            return result;
        } else {
            log.warn("‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏–∏ –ù–ï –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ –±–∏—Ä–∂–µ –¥–ª—è –ø–∞—Ä—ã {}. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.", tradingPair.getPairName());
            Pair result = handleTradeError(tradingPair, UpdateTradeErrorType.POSITIONS_NOT_FOUND);
            log.debug("<== handleNoOpenPositions: –ö–û–ù–ï–¶ (–ø–æ–∑–∏—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã) –¥–ª—è –ø–∞—Ä—ã {}", tradingPair.getPairName());
            return result;
        }
    }

    private Pair handleAutoClose(Pair tradingPair, Settings settings, String exitReason) {
        log.info("üö™ –ù–∞–π–¥–µ–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏: {} –¥–ª—è –ø–∞—Ä—ã {}", exitReason, tradingPair.getPairName());

        final ArbitragePairTradeInfo closeResult = tradingIntegrationServiceImpl.closeArbitragePair(tradingPair);
        if (closeResult == null || !closeResult.isSuccess()) {
            tradingPair.setExitReason(exitReason);
            return handleTradeError(tradingPair, UpdateTradeErrorType.AUTO_CLOSE_FAILED);
        }

        log.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –ø–∞—Ä–∞: {}", tradingPair.getPairName());

        tradingPair.setStatus(TradeStatus.CLOSED);
        tradingPair.setExitReason(exitReason);
        finalizeClosedTrade(tradingPair, settings);
//        notificationService.sendTelegramClosedPair(tradingPair);
        sendEventService.sendCoreEvent(new CoreEvent(tradingPair, CoreEvent.Type.CLOSED_MESSAGE_TO_TELEGRAM));
        sendEventService.sendCoreEvent(new CoreEvent(tradingPair, CoreEvent.Type.ADD_CLOSED_TO_CSV));
        settings.setMinimumLotBlacklist("");
        return tradingPair;
    }

    private Pair handleTradeError(Pair tradingPair, UpdateTradeErrorType errorType) {
        log.error("‚ùå –û—à–∏–±–∫–∞: {} –¥–ª—è –ø–∞—Ä—ã {}", errorType.getDescription(), tradingPair.getPairName());

        tradingPair.setStatus(TradeStatus.ERROR);
        tradingPair.setErrorDescription(errorType.getDescription());
        pairService.save(tradingPair);
        // –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ —Ç–∫ –Ω—É–∂–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–¥–µ–ª–∫–∞–º!
        return tradingPair;
    }
}