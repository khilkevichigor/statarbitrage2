package com.example.core.services;

import com.example.shared.dto.Candle;
import com.example.shared.dto.ZScoreData;
import com.example.shared.enums.PairType;
import com.example.shared.enums.TradeStatus;
import com.example.shared.models.Pair;
import com.example.shared.models.Settings;
import com.example.shared.utils.CandlesUtil;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@Slf4j
@Service
@RequiredArgsConstructor
public class CreatePairDataService {

    private final UpdateZScoreDataCurrentService updateZScoreDataCurrentService;
    private final PixelSpreadService pixelSpreadService;
    private final SettingsService settingsService;

    /**
     * –°–æ–∑–¥–∞—ë—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä PairData –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–∏—Å–∫–∞ Z-–æ—Ü–µ–Ω–æ–∫ –∏ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π
     */
    public List<Pair> createPairs(List<ZScoreData> zScoreDataList, Map<String, List<Candle>> candlesMap) {
        List<Pair> result = new ArrayList<>();

        for (ZScoreData zScoreData : zScoreDataList) {
            try {
                Pair tradingPair = buildPairData(zScoreData, candlesMap);
                result.add(tradingPair);
            } catch (IllegalArgumentException e) {
                log.warn("‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ –ø–∞—Ä–∞ {}/{}: {}",
                        zScoreData.getUnderValuedTicker(),
                        zScoreData.getOverValuedTicker(),
                        e.getMessage());
            } catch (Exception e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PairData –¥–ª—è –ø–∞—Ä—ã {}/{}: {}",
                        zScoreData.getUnderValuedTicker(),
                        zScoreData.getOverValuedTicker(),
                        e.getMessage(), e);
            }
        }

        return result;
    }

    /**
     * –°—Ç—Ä–æ–∏—Ç –æ–¥–Ω—É —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ Z-–¥–∞–Ω–Ω—ã—Ö –∏ —Å–≤–µ—á–µ–π
     */
    private Pair buildPairData(ZScoreData zScoreData, Map<String, List<Candle>> candlesMap) {
        String undervalued = zScoreData.getUnderValuedTicker();
        String overvalued = zScoreData.getOverValuedTicker();

        List<Candle> undervaluedCandles = candlesMap.get(undervalued);
        List<Candle> overvaluedCandles = candlesMap.get(overvalued);

        if (isEmpty(undervaluedCandles) || isEmpty(overvaluedCandles)) {
            throw new IllegalArgumentException("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–≤–µ—á–∞–º");
        }

        // –°–æ–∑–¥–∞—ë–º —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É —Å —Ç–∏–ø–æ–º TRADING
        Pair tradingPair = Pair.builder()
            .type(PairType.TRADING)
            .status(TradeStatus.SELECTED)
            .tickerA(undervalued)  // Long ticker
            .tickerB(overvalued)   // Short ticker
            .pairName(undervalued + "/" + overvalued)
            .longTickerCurrentPrice(BigDecimal.valueOf(CandlesUtil.getLastClose(undervaluedCandles)))
            .shortTickerCurrentPrice(BigDecimal.valueOf(CandlesUtil.getLastClose(overvaluedCandles)))
            .timestamp(System.currentTimeMillis())
            .entryTime(LocalDateTime.now())
            .updatedTime(LocalDateTime.now())
            .createdAt(LocalDateTime.now())
            .searchDate(LocalDateTime.now())
            .build();

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤–µ—á–∏
        tradingPair.setLongTickerCandles(undervaluedCandles);
        tradingPair.setShortTickerCandles(overvaluedCandles);
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ä–∞–∑—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ä—ã
        Settings settings = settingsService.getSettings();
        tradingPair.setSettingsCandleLimit(BigDecimal.valueOf(settings.getCandleLimit()));
        tradingPair.setSettingsMinZ(BigDecimal.valueOf(settings.getMinZ()));
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        tradingPair.setMinVolMln(BigDecimal.valueOf(settings.getMinVolume()));
        
        updateZScoreDataCurrentService.updateCurrent(tradingPair, zScoreData);

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ –¥–ª—è –Ω–æ–≤–æ–π –ø–∞—Ä—ã
        try {
            pixelSpreadService.calculatePixelSpreadIfNeeded(tradingPair);

            // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞
            double avgSpread = pixelSpreadService.getAveragePixelSpread(tradingPair);
            double maxSpread = pixelSpreadService.getMaxPixelSpread(tradingPair);
            double currentSpread = pixelSpreadService.getCurrentPixelSpread(tradingPair);

            log.debug("üî¢ –ü–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ –¥–ª—è {}/{}: avg={}px, max={}px, current={}px",
                    tradingPair.getLongTicker(), tradingPair.getShortTicker(),
                    String.format("%.1f", avgSpread), String.format("%.1f", maxSpread),
                    String.format("%.1f", currentSpread));

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞ –¥–ª—è {}/{}: {}",
                    tradingPair.getLongTicker(), tradingPair.getShortTicker(), e.getMessage());
        }

        return tradingPair;
    }

    private boolean isEmpty(List<?> list) {
        return list == null || list.isEmpty();
    }
}
