package com.example.core.schedulers;

import com.example.core.experemental.stability.dto.StabilityResponseDto;
import com.example.core.services.PairService;
import com.example.core.services.StablePairsScreenerSettingsService;
import com.example.shared.models.StablePairsScreenerSettings;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.*;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * –®–µ–¥—É–ª–ª–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä
 */
@Slf4j
@Component
@RequiredArgsConstructor
public class StablePairsScheduler {

    private final StablePairsScreenerSettingsService settingsService;
    private final PairService pairService;

    // –ü—É–ª –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    private final ExecutorService executorService = Executors.newFixedThreadPool(5,
            r -> {
                Thread t = new Thread(r, "StablePairsScheduler-");
                t.setDaemon(true);
                return t;
            });

    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á (6 —á–∞—Å–æ–≤)
    private static final int MAX_EXECUTION_TIME_HOURS = 6;

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (–º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π)
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—É—é –Ω–æ—á—å –≤ 2:00 –ø–æ –º–µ—Å—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
     */
//    @Scheduled(cron = "0 10 1 * * *") // –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 2:00
    public void searchStablePairsScheduled() {
        log.info("üåô –ó–∞–ø—É—Å–∫ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä –≤ {}", LocalDateTime.now());

        try {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∑–∞–ø—É—Å–∫–æ–º
            List<StablePairsScreenerSettings> scheduledSettings = settingsService.getScheduledSettings();

            if (scheduledSettings.isEmpty()) {
                log.info("‚è∞ –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–∏—Å–∫–æ–º");
                return;
            }

            // –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á
            int totalTasks = scheduledSettings.stream()
                    .mapToInt(settings ->
                            settings.getSelectedTimeframesSet().size() *
                                    settings.getSelectedPeriodsSet().size())
                    .sum();

            log.info("üìã –ù–∞–π–¥–µ–Ω–æ {} –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞", scheduledSettings.size());
            log.info("üßÆ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {}", totalTasks);
            log.info("üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º {} –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏", 5);

            // –ê—Ç–æ–º–∞—Ä–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            AtomicInteger totalPairsFound = new AtomicInteger(0);
            AtomicInteger totalPairsAnalyzed = new AtomicInteger(0);
            AtomicInteger successfulTasks = new AtomicInteger(0);
            AtomicInteger failedTasks = new AtomicInteger(0);

            // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            List<CompletableFuture<Void>> futures = new ArrayList<>();

            // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–æ –∫–∞–∂–¥–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
            for (StablePairsScreenerSettings settings : scheduledSettings) {
                try {
                    Set<String> timeframes = settings.getSelectedTimeframesSet();
                    Set<String> periods = settings.getSelectedPeriodsSet();

                    if (timeframes.isEmpty() || periods.isEmpty()) {
                        log.warn("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ {} - –Ω–µ –≤—ã–±—Ä–∞–Ω—ã —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –∏–ª–∏ –ø–µ—Ä–∏–æ–¥—ã",
                                settings.getName());
                        continue;
                    }

                    Map<String, Object> searchSettings = settingsService.buildSearchSettingsMap(settings);

                    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ timeframe + period
                    for (String timeframe : timeframes) {
                        for (String period : periods) {
                            CompletableFuture<Void> future = CompletableFuture.runAsync(() ->
                                    processTimeframePeriodCombination(
                                            settings, timeframe, period, searchSettings,
                                            totalPairsFound, totalPairsAnalyzed,
                                            successfulTasks, failedTasks
                                    ), executorService);

                            futures.add(future);
                        }
                    }

                } catch (Exception e) {
                    log.error("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ '{}': {}",
                            settings.getName(), e.getMessage(), e);
                }
            }

            // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
            CompletableFuture<Void> allFutures = CompletableFuture.allOf(
                    futures.toArray(new CompletableFuture[0]));

            try {
                allFutures.get(MAX_EXECUTION_TIME_HOURS, TimeUnit.HOURS);
                log.info("‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ");
            } catch (TimeoutException e) {
                log.warn("‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ({} —á–∞—Å–æ–≤). –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á–∏",
                        MAX_EXECUTION_TIME_HOURS);
                allFutures.cancel(true);
            }

            // –û—Ç–º–µ—á–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ
            for (StablePairsScreenerSettings settings : scheduledSettings) {
                try {
                    settingsService.markAsUsed(settings.getId());
                } catch (Exception e) {
                    log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ '{}' –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ: {}",
                            settings.getName(), e.getMessage());
                }
            }

            // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            log.info("üèÅ –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω:");
            log.info("   üìä –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–¥–∞—á: {}/{}", successfulTasks.get(), totalTasks);
            log.info("   ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–¥–∞—á: {}", failedTasks.get());
            log.info("   üîç –í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–∞—Ä: {}", totalPairsAnalyzed.get());
            log.info("   ‚úÖ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ—Ä–≥—É–µ–º—ã—Ö –ø–∞—Ä: {}", totalPairsFound.get());
            log.info("   ‚ö° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–æ—Ç–æ–∫–æ–≤: 5");

        } catch (Exception e) {
            log.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –ø–æ–∏—Å–∫–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä: {}",
                    e.getMessage(), e);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ timeframe + period –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
     */
    private void processTimeframePeriodCombination(
            StablePairsScreenerSettings settings,
            String timeframe,
            String period,
            Map<String, Object> searchSettings,
            AtomicInteger totalPairsFound,
            AtomicInteger totalPairsAnalyzed,
            AtomicInteger successfulTasks,
            AtomicInteger failedTasks) {

        String taskId = String.format("%s[%s-%s]", settings.getName(), timeframe, period);
        String threadName = Thread.currentThread().getName();

        log.info("üßµ –ü–æ—Ç–æ–∫ {}: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {}", threadName, taskId);

        try {
            // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
            StabilityResponseDto response = pairService.searchStablePairs(
                    Set.of(timeframe), Set.of(period), searchSettings);

            if (response.getSuccess()) {
                int pairsFound = response.getTradeablePairsFound();
                int pairsAnalyzed = response.getTotalPairsAnalyzed();

                // –ê—Ç–æ–º–∞—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
                totalPairsFound.addAndGet(pairsFound);
                totalPairsAnalyzed.addAndGet(pairsAnalyzed);
                successfulTasks.incrementAndGet();

                log.info("‚úÖ –ü–æ—Ç–æ–∫ {}: {} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ - –Ω–∞–π–¥–µ–Ω–æ {} —Ç–æ—Ä–≥—É–µ–º—ã—Ö –ø–∞—Ä –∏–∑ {} –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö",
                        threadName, taskId, pairsFound, pairsAnalyzed);

            } else {
                failedTasks.incrementAndGet();
                log.error("‚ùå –ü–æ—Ç–æ–∫ {}: {} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ—É–¥–∞—á–Ω–æ", threadName, taskId);
            }

        } catch (Exception e) {
            failedTasks.incrementAndGet();
            log.error("üí• –ü–æ—Ç–æ–∫ {}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {}: {}",
                    threadName, taskId, e.getMessage(), e);
        }
    }

    /**
     * –¢–µ—Å—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
     * –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Ä—É—á–Ω—É—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    public void testScheduledSearch() {
        log.info("üß™ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä");
        searchStablePairsScheduled();
    }

    /**
     * Graceful shutdown –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    @jakarta.annotation.PreDestroy
    public void shutdown() {
        log.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —à–µ–¥—É–ª–ª–µ—Ä–∞ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä");

        executorService.shutdown();
        try {
            if (!executorService.awaitTermination(60, TimeUnit.SECONDS)) {
                executorService.shutdownNow();
                if (!executorService.awaitTermination(60, TimeUnit.SECONDS)) {
                    log.error("‚ùå –ü—É–ª –ø–æ—Ç–æ–∫–æ–≤ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
                }
            }
        } catch (InterruptedException ie) {
            executorService.shutdownNow();
            Thread.currentThread().interrupt();
        }

        log.info("‚úÖ –®–µ–¥—É–ª–ª–µ—Ä —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    }
}