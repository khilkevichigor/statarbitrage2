package com.example.core.services;

import com.example.shared.dto.ProfitHistoryItem;
import com.example.shared.models.PortfolioHistory;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö PnL –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class PortfolioPnLHistoryService {

    private final PortfolioHistoryService portfolioHistoryService;

    /**
     * –ü–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ PnL
     */
    public enum PnLPeriod {
        ALL_TIME("–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è"),
        ONE_MONTH("–ó–∞ –º–µ—Å—è—Ü"),
        ONE_WEEK("–ó–∞ 7 –¥–Ω–µ–π"),
        ONE_DAY("–ó–∞ –¥–µ–Ω—å");

        private final String displayName;

        PnLPeriod(String displayName) {
            this.displayName = displayName;
        }

        public String getDisplayName() {
            return displayName;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ PnL –±–∞–ª–∞–Ω—Å–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
     */
    public List<ProfitHistoryItem> getPnLHistory(PnLPeriod period) {
        try {
            log.debug("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ PnL —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥: {}", period.getDisplayName());

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
            LocalDateTime fromTime = getFromTime(period);
            LocalDateTime toTime = LocalDateTime.now();

            log.debug("üìÖ –ü–µ—Ä–∏–æ–¥: {} - {}", fromTime, toTime);

            // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            List<PortfolioHistory> balanceHistory = portfolioHistoryService.getPortfolioHistory(fromTime, toTime);

            if (balanceHistory.isEmpty()) {
                log.warn("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ {}", period.getDisplayName());
                return createEmptyHistory(period);
            }

            // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ PnL –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
            PortfolioHistory firstRecord = balanceHistory.get(0);
            BigDecimal initialBalance = firstRecord.getTotalBalance();

            if (initialBalance == null || initialBalance.compareTo(BigDecimal.ZERO) == 0) {
                log.warn("‚ö†Ô∏è –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω –Ω—É–ª—é –∏–ª–∏ null");
                return createEmptyHistory(period);
            }

            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ (PnL –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞)
            List<ProfitHistoryItem> result = new ArrayList<>();

            for (PortfolioHistory record : balanceHistory) {
                BigDecimal currentBalance = record.getTotalBalance();
                if (currentBalance != null) {
                    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º PnL –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
                    BigDecimal pnlPercent = currentBalance.subtract(initialBalance)
                            .divide(initialBalance, 6, RoundingMode.HALF_UP)
                            .multiply(BigDecimal.valueOf(100));

                    result.add(ProfitHistoryItem.builder()
                            .timestamp(record.getTimestampMillis())
                            .profitPercent(pnlPercent.doubleValue())
                            .build());
                }
            }

            log.debug("üìä –ü–æ–ª—É—á–µ–Ω–æ {} —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∞–ª—å–Ω–æ–≥–æ PnL –±–∞–ª–∞–Ω—Å–∞ (–Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {} USDT)",
                    result.size(), initialBalance);
            return result;

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ PnL —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞", e);
            return createEmptyHistory(period);
        }
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞
     */
    private LocalDateTime getFromTime(PnLPeriod period) {
        LocalDateTime now = LocalDateTime.now();

        switch (period) {
            case ONE_DAY:
                return now.minusDays(1);
            case ONE_WEEK:
                return now.minusWeeks(1);
            case ONE_MONTH:
                return now.minusMonths(1);
            case ALL_TIME:
            default:
                return now.minusYears(10); // –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–ª–µ–∫–æ –≤ –ø—Ä–æ—à–ª–æ–µ
        }
    }


    /**
     * –°–æ–∑–¥–∞—Ç—å –ø—É—Å—Ç—É—é –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Å–ª—É—á–∞—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–∞–Ω–Ω—ã—Ö
     */
    private List<ProfitHistoryItem> createEmptyHistory(PnLPeriod period) {
        List<ProfitHistoryItem> emptyHistory = new ArrayList<>();
        LocalDateTime fromTime = getFromTime(period);
        LocalDateTime toTime = LocalDateTime.now();

        long fromTimestamp = fromTime.atZone(java.time.ZoneId.systemDefault()).toInstant().toEpochMilli();
        long toTimestamp = toTime.atZone(java.time.ZoneId.systemDefault()).toInstant().toEpochMilli();

        emptyHistory.add(ProfitHistoryItem.builder()
                .timestamp(fromTimestamp)
                .profitPercent(0.0)
                .build());

        emptyHistory.add(ProfitHistoryItem.builder()
                .timestamp(toTimestamp)
                .profitPercent(0.0)
                .build());

        return emptyHistory;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–∏ –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–∏–±—ã–ª—å (–∑–µ–ª–µ–Ω—ã–π) –∏–ª–∏ —É–±—ã—Ç–æ–∫ (–∫—Ä–∞—Å–Ω—ã–π)
     */
    public boolean isProfitable(List<ProfitHistoryItem> history) {
        if (history == null || history.isEmpty()) {
            return false;
        }

        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–æ—á–∫—É —Å –ø–µ—Ä–≤–æ–π
        double startValue = history.get(0).getProfitPercent();
        double endValue = history.get(history.size() - 1).getProfitPercent();

        return endValue >= startValue;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–ø–∏—Å–µ–π –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
     */
    public PnLExtremes getExtremes(List<ProfitHistoryItem> history) {
        if (history == null || history.isEmpty()) {
            return new PnLExtremes(null, null);
        }

        ProfitHistoryItem minItem = history.get(0);
        ProfitHistoryItem maxItem = history.get(0);

        for (ProfitHistoryItem item : history) {
            if (item.getProfitPercent() < minItem.getProfitPercent()) {
                minItem = item;
            }
            if (item.getProfitPercent() > maxItem.getProfitPercent()) {
                maxItem = item;
            }
        }

        return new PnLExtremes(minItem, maxItem);
    }

    /**
     * –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
     */
    public static class PnLExtremes {
        private final ProfitHistoryItem min;
        private final ProfitHistoryItem max;

        public PnLExtremes(ProfitHistoryItem min, ProfitHistoryItem max) {
            this.min = min;
            this.max = max;
        }

        public ProfitHistoryItem getMin() {
            return min;
        }

        public ProfitHistoryItem getMax() {
            return max;
        }
    }
}