package com.example.core.services;

import com.example.core.repositories.TradeHistoryRepository;
import com.example.shared.dto.ProfitHistoryItem;
import com.example.shared.models.TradeHistory;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö PnL –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class PortfolioPnLHistoryService {

    private final TradeHistoryRepository tradeHistoryRepository;

    /**
     * –ü–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ PnL
     */
    public enum PnLPeriod {
        ALL_TIME("–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è"),
        ONE_MONTH("–ó–∞ –º–µ—Å—è—Ü"),
        ONE_WEEK("–ó–∞ 7 –¥–Ω–µ–π"),
        ONE_DAY("–ó–∞ –¥–µ–Ω—å");

        private final String displayName;

        PnLPeriod(String displayName) {
            this.displayName = displayName;
        }

        public String getDisplayName() {
            return displayName;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ PnL –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
     */
    public List<ProfitHistoryItem> getPnLHistory(PnLPeriod period) {
        try {
            log.debug("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ PnL –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥: {}", period.getDisplayName());
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
            long fromTimestamp = getFromTimestamp(period);
            long toTimestamp = System.currentTimeMillis();
            
            log.debug("üìÖ –ü–µ—Ä–∏–æ–¥: {} - {}", 
                Instant.ofEpochMilli(fromTimestamp).atZone(ZoneId.systemDefault()),
                Instant.ofEpochMilli(toTimestamp).atZone(ZoneId.systemDefault()));

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Ç—Ä–µ–π–¥–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥
            List<TradeHistory> allTrades = tradeHistoryRepository.findAll();
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–µ—Ä–∏–æ–¥—É –∏ –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            TreeMap<Long, BigDecimal> aggregatedPnL = new TreeMap<>();
            
            for (TradeHistory trade : allTrades) {
                if (trade.getTimestamp() >= fromTimestamp && trade.getTimestamp() <= toTimestamp) {
                    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
                    long groupedTimestamp = groupTimestamp(trade.getTimestamp(), period);
                    
                    BigDecimal currentProfit = trade.getCurrentProfitPercent();
                    if (currentProfit != null) {
                        aggregatedPnL.merge(groupedTimestamp, currentProfit, BigDecimal::add);
                    }
                }
            }

            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
            List<ProfitHistoryItem> result = new ArrayList<>();
            BigDecimal cumulativePnL = BigDecimal.ZERO;

            for (var entry : aggregatedPnL.entrySet()) {
                cumulativePnL = cumulativePnL.add(entry.getValue());
                result.add(ProfitHistoryItem.builder()
                    .timestamp(entry.getKey())
                    .profitPercent(cumulativePnL.doubleValue())
                    .build());
            }

            // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –Ω—É–ª–µ–≤—ã–µ —Ç–æ—á–∫–∏
            if (result.isEmpty()) {
                result.add(ProfitHistoryItem.builder()
                    .timestamp(fromTimestamp)
                    .profitPercent(0.0)
                    .build());
                result.add(ProfitHistoryItem.builder()
                    .timestamp(toTimestamp)
                    .profitPercent(0.0)
                    .build());
            }

            log.debug("üìä –ü–æ–ª—É—á–µ–Ω–æ {} —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö PnL", result.size());
            return result;
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ PnL –∏—Å—Ç–æ—Ä–∏–∏", e);
            return createEmptyHistory(period);
        }
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞
     */
    private long getFromTimestamp(PnLPeriod period) {
        LocalDateTime now = LocalDateTime.now();
        LocalDateTime from;

        switch (period) {
            case ONE_DAY:
                from = now.minusDays(1);
                break;
            case ONE_WEEK:
                from = now.minusWeeks(1);
                break;
            case ONE_MONTH:
                from = now.minusMonths(1);
                break;
            case ALL_TIME:
            default:
                from = now.minusYears(10); // –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–ª–µ–∫–æ –≤ –ø—Ä–æ—à–ª–æ–µ
                break;
        }

        return from.atZone(ZoneId.systemDefault()).toInstant().toEpochMilli();
    }

    /**
     * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
     */
    private long groupTimestamp(long timestamp, PnLPeriod period) {
        LocalDateTime dateTime = Instant.ofEpochMilli(timestamp)
            .atZone(ZoneId.systemDefault())
            .toLocalDateTime();

        LocalDateTime grouped;
        switch (period) {
            case ONE_DAY:
                // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —á–∞—Å–∞–º
                grouped = dateTime.truncatedTo(ChronoUnit.HOURS);
                break;
            case ONE_WEEK:
                // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 4 —á–∞—Å–∞
                int hour = dateTime.getHour();
                int groupedHour = (hour / 4) * 4;
                grouped = dateTime.withHour(groupedHour).truncatedTo(ChronoUnit.HOURS);
                break;
            case ONE_MONTH:
                // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
                grouped = dateTime.truncatedTo(ChronoUnit.DAYS);
                break;
            case ALL_TIME:
            default:
                // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –Ω–µ–¥–µ–ª—è–º
                grouped = dateTime.truncatedTo(ChronoUnit.DAYS)
                    .with(java.time.DayOfWeek.MONDAY);
                break;
        }

        return grouped.atZone(ZoneId.systemDefault()).toInstant().toEpochMilli();
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –ø—É—Å—Ç—É—é –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Å–ª—É—á–∞—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–∞–Ω–Ω—ã—Ö
     */
    private List<ProfitHistoryItem> createEmptyHistory(PnLPeriod period) {
        List<ProfitHistoryItem> emptyHistory = new ArrayList<>();
        long fromTimestamp = getFromTimestamp(period);
        long toTimestamp = System.currentTimeMillis();

        emptyHistory.add(ProfitHistoryItem.builder()
            .timestamp(fromTimestamp)
            .profitPercent(0.0)
            .build());
        
        emptyHistory.add(ProfitHistoryItem.builder()
            .timestamp(toTimestamp)
            .profitPercent(0.0)
            .build());

        return emptyHistory;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–∏ –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–∏–±—ã–ª—å (–∑–µ–ª–µ–Ω—ã–π) –∏–ª–∏ —É–±—ã—Ç–æ–∫ (–∫—Ä–∞—Å–Ω—ã–π)
     */
    public boolean isProfitable(List<ProfitHistoryItem> history) {
        if (history == null || history.isEmpty()) {
            return false;
        }

        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–æ—á–∫—É —Å –ø–µ—Ä–≤–æ–π
        double startValue = history.get(0).getProfitPercent();
        double endValue = history.get(history.size() - 1).getProfitPercent();
        
        return endValue >= startValue;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–ø–∏—Å–µ–π –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
     */
    public PnLExtremes getExtremes(List<ProfitHistoryItem> history) {
        if (history == null || history.isEmpty()) {
            return new PnLExtremes(null, null);
        }

        ProfitHistoryItem minItem = history.get(0);
        ProfitHistoryItem maxItem = history.get(0);

        for (ProfitHistoryItem item : history) {
            if (item.getProfitPercent() < minItem.getProfitPercent()) {
                minItem = item;
            }
            if (item.getProfitPercent() > maxItem.getProfitPercent()) {
                maxItem = item;
            }
        }

        return new PnLExtremes(minItem, maxItem);
    }

    /**
     * –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
     */
    public static class PnLExtremes {
        private final ProfitHistoryItem min;
        private final ProfitHistoryItem max;

        public PnLExtremes(ProfitHistoryItem min, ProfitHistoryItem max) {
            this.min = min;
            this.max = max;
        }

        public ProfitHistoryItem getMin() { return min; }
        public ProfitHistoryItem getMax() { return max; }
    }
}