package com.example.core.services;

import com.example.shared.models.Pair;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.time.Duration;
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ Z-Score
 * –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class CandleUpdateCheckService {

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—Ç—å Z-Score –¥–ª—è –ø–∞—Ä—ã
     * –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞
     */
    public boolean shouldRecalculateZScore(Pair pair) {
        if (pair == null) {
            log.warn("‚ùå –ü–∞—Ä–∞ null - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å—á–µ—Ç Z-Score");
            return true;
        }

        LocalDateTime lastZScoreUpdate = pair.getLastZScoreUpdateTime();
        if (lastZScoreUpdate == null) {
            log.info("üìä –ü–µ—Ä–≤—ã–π —Ä–∞—Å—á–µ—Ç Z-Score –¥–ª—è –ø–∞—Ä—ã {} - –ø–µ—Ä–µ—Å—á–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º", pair.getPairName());
            return true;
        }

        String timeframe = pair.getTimeframe();
        if (timeframe == null || timeframe.isEmpty()) {
            log.warn("‚ö†Ô∏è –¢–∞–π–º—Ñ—Ä–µ–π–º –Ω–µ —É–∫–∞–∑–∞–Ω –¥–ª—è –ø–∞—Ä—ã {} - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å—á–µ—Ç", pair.getPairName());
            return true;
        }

        LocalDateTime now = LocalDateTime.now();
        Duration timeSinceLastUpdate = Duration.between(lastZScoreUpdate, now);
        Duration timeframeInterval = getTimeframeInterval(timeframe);

        if (timeframeInterval == null) {
            log.warn("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º {} –¥–ª—è –ø–∞—Ä—ã {} - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å—á–µ—Ç", 
                    timeframe, pair.getPairName());
            return true;
        }

        boolean shouldRecalculate = timeSinceLastUpdate.compareTo(timeframeInterval) >= 0;

        if (shouldRecalculate) {
            log.info("üîÑ –ü–æ—Ä–∞ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—Ç—å Z-Score –¥–ª—è –ø–∞—Ä—ã {} (–¢–§: {}, –ø—Ä–æ—à–ª–æ: {} –º–∏–Ω, –∏–Ω—Ç–µ—Ä–≤–∞–ª: {} –º–∏–Ω)",
                    pair.getPairName(), timeframe, 
                    timeSinceLastUpdate.toMinutes(), timeframeInterval.toMinutes());
        } else {
            log.debug("‚è∞ Z-Score –¥–ª—è –ø–∞—Ä—ã {} –µ—â–µ –∞–∫—Ç—É–∞–ª–µ–Ω (–¢–§: {}, –ø—Ä–æ—à–ª–æ: {} –º–∏–Ω, –∏–Ω—Ç–µ—Ä–≤–∞–ª: {} –º–∏–Ω)",
                    pair.getPairName(), timeframe, 
                    timeSinceLastUpdate.toMinutes(), timeframeInterval.toMinutes());
        }

        return shouldRecalculate;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
     */
    private Duration getTimeframeInterval(String timeframe) {
        return switch (timeframe.toLowerCase()) {
            case "1m" -> Duration.ofMinutes(1);
//            case "3m" -> Duration.ofMinutes(3);
            case "5m" -> Duration.ofMinutes(5);
            case "15m" -> Duration.ofMinutes(15);
//            case "30m" -> Duration.ofMinutes(30);
            case "1H" -> Duration.ofHours(1);
//            case "2h" -> Duration.ofHours(2);
            case "4H" -> Duration.ofHours(4);
//            case "6h" -> Duration.ofHours(6);
//            case "8h" -> Duration.ofHours(8);
//            case "12h" -> Duration.ofHours(12);
            case "1D" -> Duration.ofDays(1);
//            case "3d" -> Duration.ofDays(3);
            case "1W" -> Duration.ofDays(7);
            case "1M" -> Duration.ofDays(30); // –º–µ—Å—è—Ü
            default -> {
                log.error("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º: {}", timeframe);
                yield null;
            }
        };
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ Z-Score –¥–ª—è –ø–∞—Ä—ã
     */
    public void markZScoreUpdated(Pair pair) {
        if (pair != null) {
            pair.setLastZScoreUpdateTime(LocalDateTime.now());
            log.debug("‚úÖ –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ Z-Score –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–∞—Ä—ã {}", pair.getPairName());
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    public String getTimeUntilNextUpdate(Pair pair) {
        if (pair == null || pair.getLastZScoreUpdateTime() == null || pair.getTimeframe() == null) {
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
        }

        LocalDateTime lastUpdate = pair.getLastZScoreUpdateTime();
        Duration timeframeInterval = getTimeframeInterval(pair.getTimeframe());
        
        if (timeframeInterval == null) {
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
        }

        LocalDateTime nextUpdateTime = lastUpdate.plus(timeframeInterval);
        LocalDateTime now = LocalDateTime.now();

        if (now.isAfter(nextUpdateTime)) {
            return "–ü–æ—Ä–∞ –æ–±–Ω–æ–≤–ª—è—Ç—å";
        }

        Duration timeUntilNext = Duration.between(now, nextUpdateTime);
        
        if (timeUntilNext.toDays() > 0) {
            return String.format("%d –¥–Ω %d —á %d –º–∏–Ω", 
                    timeUntilNext.toDays(), 
                    timeUntilNext.toHoursPart(), 
                    timeUntilNext.toMinutesPart());
        } else if (timeUntilNext.toHours() > 0) {
            return String.format("%d —á %d –º–∏–Ω", 
                    timeUntilNext.toHours(), 
                    timeUntilNext.toMinutesPart());
        } else {
            return String.format("%d –º–∏–Ω", timeUntilNext.toMinutes());
        }
    }

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º Z-Score –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–∞—Ä
     */
    public void logUpdateStatistics(Iterable<Pair> pairs) {
        int totalPairs = 0;
        int needsUpdate = 0;
        int upToDate = 0;

        for (Pair pair : pairs) {
            totalPairs++;
            if (shouldRecalculateZScore(pair)) {
                needsUpdate++;
            } else {
                upToDate++;
            }
        }

        log.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Z-Score: –≤—Å–µ–≥–æ –ø–∞—Ä: {}, —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {}, –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö: {}",
                totalPairs, needsUpdate, upToDate);
    }
}