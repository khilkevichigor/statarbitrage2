package com.example.core.core.services;

import com.example.shared.models.Candle;
import com.example.shared.models.PairData;
import com.example.shared.models.PixelSpreadHistoryItem;
import com.example.shared.models.ZScoreParam;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.*;

@Service
@Slf4j
public class PixelSpreadService {

    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –ø–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ –¥–ª—è –ø–∞—Ä—ã, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –≤—ã—á–∏—Å–ª–µ–Ω
     */
    public void calculatePixelSpreadIfNeeded(PairData pairData) {
        if (pairData.getPixelSpreadHistory().isEmpty()) {
            log.debug("üî¢ –ü–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ –Ω–µ –≤—ã—á–∏—Å–ª–µ–Ω, –≤—ã—á–∏—Å–ª—è–µ–º –¥–ª—è –ø–∞—Ä—ã {}", pairData.getPairName());
            calculatePixelSpreadForPair(pairData);
        }
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ –¥–ª—è –ø–∞—Ä—ã
     */
    public void recalculatePixelSpread(PairData pairData) {
        log.debug("üî¢ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ –¥–ª—è –ø–∞—Ä—ã {}", pairData.getPairName());
        pairData.clearPixelSpreadHistory(); // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏—Å—Ç–æ—Ä–∏—é
        calculatePixelSpreadForPair(pairData);
    }

    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –ø–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ –¥–ª—è –ø–∞—Ä—ã
     */
    private void calculatePixelSpreadForPair(PairData pairData) {
        List<Candle> longCandles = pairData.getLongTickerCandles();
        List<Candle> shortCandles = pairData.getShortTickerCandles();
        List<ZScoreParam> history = pairData.getZScoreHistory();

        if (longCandles == null || shortCandles == null || longCandles.isEmpty() || shortCandles.isEmpty() || history.isEmpty()) {
            log.warn("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞: longCandles={}, shortCandles={}, history={}",
                    longCandles != null ? longCandles.size() : "null",
                    shortCandles != null ? shortCandles.size() : "null",
                    history.size());
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω Z-Score –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π
        long zScoreStartTime = history.get(0).getTimestamp();
        long zScoreEndTime = history.get(history.size() - 1).getTimestamp();

        log.debug("üìä Z-Score –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: {} - {}", new Date(zScoreStartTime), new Date(zScoreEndTime));

        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        longCandles.sort(Comparator.comparing(Candle::getTimestamp));
        shortCandles.sort(Comparator.comparing(Candle::getTimestamp));

        // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–≤–µ—á–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É Z-Score —Å –Ω–µ–±–æ–ª—å—à–∏–º –±—É—Ñ–µ—Ä–æ–º
        long bufferTime = 300000; // 5 –º–∏–Ω—É—Ç –±—É—Ñ–µ—Ä
        List<Candle> filteredLongCandles = longCandles.stream()
                .filter(c -> c.getTimestamp() >= (zScoreStartTime - bufferTime) && c.getTimestamp() <= (zScoreEndTime + bufferTime))
                .toList();

        List<Candle> filteredShortCandles = shortCandles.stream()
                .filter(c -> c.getTimestamp() >= (zScoreStartTime - bufferTime) && c.getTimestamp() <= (zScoreEndTime + bufferTime))
                .toList();

        if (filteredLongCandles.isEmpty() || filteredShortCandles.isEmpty()) {
            log.warn("‚ö†Ô∏è –ù–µ—Ç —Å–≤–µ—á–µ–π –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ Z-Score: LONG filtered={}, SHORT filtered={}",
                    filteredLongCandles.size(), filteredShortCandles.size());
            return;
        }

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ü–µ–Ω –¥–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π
        List<Date> timeLong = filteredLongCandles.stream().map(c -> new Date(c.getTimestamp())).toList();
        List<Double> longPrices = filteredLongCandles.stream().map(Candle::getClose).toList();

        List<Date> timeShort = filteredShortCandles.stream().map(c -> new Date(c.getTimestamp())).toList();
        List<Double> shortPrices = filteredShortCandles.stream().map(Candle::getClose).toList();

        // –ù–∞–π—Ç–∏ –¥–∏–∞–ø–∞–∑–æ–Ω Z-Score –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω
        double minZScore = history.stream().mapToDouble(ZScoreParam::getZscore).min().orElse(-3.0);
        double maxZScore = history.stream().mapToDouble(ZScoreParam::getZscore).max().orElse(3.0);
        double zRange = maxZScore - minZScore;

        // –ù–∞–π—Ç–∏ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã)
        double minLongPrice = longPrices.stream().min(Double::compareTo).orElse(0.0);
        double maxLongPrice = longPrices.stream().max(Double::compareTo).orElse(1.0);
        double longPriceRange = maxLongPrice - minLongPrice;

        double minShortPrice = shortPrices.stream().min(Double::compareTo).orElse(0.0);
        double maxShortPrice = shortPrices.stream().max(Double::compareTo).orElse(1.0);
        double shortPriceRange = maxShortPrice - minShortPrice;

        // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è long —Ü–µ–Ω –≤ –¥–∏–∞–ø–∞–∑–æ–Ω Z-Score
        List<Double> scaledLongPrices = longPrices.stream()
                .map(price -> longPriceRange != 0 ?
                        minZScore + ((price - minLongPrice) / longPriceRange) * zRange : minZScore)
                .toList();

        // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è short —Ü–µ–Ω –≤ –¥–∏–∞–ø–∞–∑–æ–Ω Z-Score  
        List<Double> scaledShortPrices = shortPrices.stream()
                .map(price -> shortPriceRange != 0 ?
                        minZScore + ((price - minShortPrice) / shortPriceRange) * zRange : minZScore)
                .toList();

        log.debug("‚úÖ –í—ã—á–∏—Å–ª—è–µ–º –ø–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥: LONG {} —Ç–æ—á–µ–∫ (–¥–∏–∞–ø–∞–∑–æ–Ω: {}-{}), SHORT {} —Ç–æ—á–µ–∫ (–¥–∏–∞–ø–∞–∑–æ–Ω: {}-{})",
                scaledLongPrices.size(), minLongPrice, maxLongPrice,
                scaledShortPrices.size(), minShortPrice, maxShortPrice);

        // –í—ã—á–∏—Å–ª—è–µ–º –ø–∏–∫—Å–µ–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ long –∏ short
        calculateAndSavePixelSpread(pairData, timeLong, scaledLongPrices, timeShort, scaledShortPrices);
    }

    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –ø–∏–∫—Å–µ–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ Long –∏ Short —Ü–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
     */
    private void calculateAndSavePixelSpread(PairData pairData, List<Date> timeLong, List<Double> scaledLongPrices,
                                             List<Date> timeShort, List<Double> scaledShortPrices) {
        log.debug("üî¢ –ù–∞—á–∏–Ω–∞–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞ –¥–ª—è –ø–∞—Ä—ã {}", pairData.getPairName());

        if (timeLong.isEmpty() || timeShort.isEmpty() || scaledLongPrices.isEmpty() || scaledShortPrices.isEmpty()) {
            log.warn("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞");
            return;
        }

        int chartHeight = 720; // –í—ã—Å–æ—Ç–∞ —á–∞—Ä—Ç–∞

        // –ù–∞—Ö–æ–¥–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        double minValue = Math.min(
                scaledLongPrices.stream().min(Double::compareTo).orElse(0.0),
                scaledShortPrices.stream().min(Double::compareTo).orElse(0.0)
        );
        double maxValue = Math.max(
                scaledLongPrices.stream().max(Double::compareTo).orElse(1.0),
                scaledShortPrices.stream().max(Double::compareTo).orElse(1.0)
        );

        // –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏
        Set<Long> allTimestamps = new HashSet<>();
        timeLong.forEach(date -> allTimestamps.add(date.getTime()));
        timeShort.forEach(date -> allTimestamps.add(date.getTime()));

        List<Long> sortedTimestamps = allTimestamps.stream().sorted().toList();

        log.debug("üî¢ –ù–∞–π–¥–µ–Ω–æ {} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞", sortedTimestamps.size());

        for (Long timestamp : sortedTimestamps) {
            // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è Long –∏ Short –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏
            Double longPrice = findNearestPrice(timeLong, scaledLongPrices, timestamp);
            Double shortPrice = findNearestPrice(timeShort, scaledShortPrices, timestamp);

            if (longPrice != null && shortPrice != null) {
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–∏–∫—Å–µ–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Å–æ—Ç—ã —á–∞—Ä—Ç–∞
                double longPixelY = convertValueToPixel(longPrice, minValue, maxValue, chartHeight);
                double shortPixelY = convertValueToPixel(shortPrice, minValue, maxValue, chartHeight);

                // –í—ã—á–∏—Å–ª—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –ø–∏–∫—Å–µ–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
                double pixelDistance = Math.abs(longPixelY - shortPixelY);

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞
                PixelSpreadHistoryItem pixelSpreadItem = new PixelSpreadHistoryItem(timestamp, pixelDistance);
                pairData.addPixelSpreadPoint(pixelSpreadItem);

                log.trace("üî¢ Timestamp: {}, Long: {} px, Short: {} px, Distance: {} px",
                        new Date(timestamp), Math.round(longPixelY), Math.round(shortPixelY), Math.round(pixelDistance));
            }
        }

        log.debug("‚úÖ –ü–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ –≤—ã—á–∏—Å–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –í—Å–µ–≥–æ —Ç–æ—á–µ–∫: {}",
                pairData.getPixelSpreadHistory().size());
    }

    /**
     * –ù–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à—É—é —Ü–µ–Ω—É –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
     */
    private Double findNearestPrice(List<Date> timeAxis, List<Double> prices, long targetTimestamp) {
        if (timeAxis.isEmpty() || prices.isEmpty()) return null;

        int bestIndex = 0;
        long bestDiff = Math.abs(timeAxis.get(0).getTime() - targetTimestamp);

        for (int i = 1; i < timeAxis.size(); i++) {
            long diff = Math.abs(timeAxis.get(i).getTime() - targetTimestamp);
            if (diff < bestDiff) {
                bestDiff = diff;
                bestIndex = i;
            }
        }

        return prices.get(bestIndex);
    }

    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–∏–∫—Å–µ–ª—å–Ω—É—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É Y (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç)
     */
    private double convertValueToPixel(double value, double minValue, double maxValue, int chartHeight) {
        if (maxValue - minValue == 0) return chartHeight / 2.0;

        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω [0, 1]
        double normalized = (value - minValue) / (maxValue - minValue);

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø–∏–∫—Å–µ–ª–∏ (Y=0 –≤–≤–µ—Ä—Ö—É, Y=chartHeight –≤–Ω–∏–∑—É)
        return chartHeight - (normalized * chartHeight);
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞ –¥–ª—è –ø–∞—Ä—ã
     */
    public double getAveragePixelSpread(PairData pairData) {
        List<PixelSpreadHistoryItem> history = pairData.getPixelSpreadHistory();
        if (history.isEmpty()) {
            return 0.0;
        }

        return history.stream()
                .mapToDouble(PixelSpreadHistoryItem::getPixelDistance)
                .average()
                .orElse(0.0);
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞ –¥–ª—è –ø–∞—Ä—ã
     */
    public double getMaxPixelSpread(PairData pairData) {
        List<PixelSpreadHistoryItem> history = pairData.getPixelSpreadHistory();
        if (history.isEmpty()) {
            return 0.0;
        }

        return history.stream()
                .mapToDouble(PixelSpreadHistoryItem::getPixelDistance)
                .max()
                .orElse(0.0);
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞ –¥–ª—è –ø–∞—Ä—ã
     */
    public double getMinPixelSpread(PairData pairData) {
        List<PixelSpreadHistoryItem> history = pairData.getPixelSpreadHistory();
        if (history.isEmpty()) {
            return 0.0;
        }

        return history.stream()
                .mapToDouble(PixelSpreadHistoryItem::getPixelDistance)
                .min()
                .orElse(0.0);
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞ –¥–ª—è –ø–∞—Ä—ã (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
     */
    public double getCurrentPixelSpread(PairData pairData) {
        List<PixelSpreadHistoryItem> history = pairData.getPixelSpreadHistory();
        if (history.isEmpty()) {
            return 0.0;
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        return history.stream()
                .max(Comparator.comparing(PixelSpreadHistoryItem::getTimestamp))
                .map(PixelSpreadHistoryItem::getPixelDistance)
                .orElse(0.0);
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞ –¥–ª—è –ø–∞—Ä—ã
     */
    public double getPixelSpreadStandardDeviation(PairData pairData) {
        List<PixelSpreadHistoryItem> history = pairData.getPixelSpreadHistory();
        if (history.size() < 2) {
            return 0.0;
        }

        double average = getAveragePixelSpread(pairData);

        double sumSquaredDifferences = history.stream()
                .mapToDouble(item -> {
                    double diff = item.getPixelDistance() - average;
                    return diff * diff;
                })
                .sum();

        return Math.sqrt(sumSquaredDifferences / (history.size() - 1));
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Ç–æ—á–∫—É –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
     */
    public void addCurrentPixelSpreadPoint(PairData pairData) {
        List<Candle> longCandles = pairData.getLongTickerCandles();
        List<Candle> shortCandles = pairData.getShortTickerCandles();
        List<ZScoreParam> history = pairData.getZScoreHistory();

        if (longCandles == null || shortCandles == null || longCandles.isEmpty() || shortCandles.isEmpty() || history.isEmpty()) {
            log.warn("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ç–æ—á–∫–∏ –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞: longCandles={}, shortCandles={}, history={}",
                    longCandles != null ? longCandles.size() : "null",
                    shortCandles != null ? shortCandles.size() : "null",
                    history.size());
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è - –ø–æ—Å–ª–µ–¥–Ω–∏–π Z-Score
        ZScoreParam latestZScore = history.get(history.size() - 1);
        long currentTimestamp = latestZScore.getTimestamp();

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã
        Candle latestLongCandle = longCandles.stream()
                .max(Comparator.comparing(Candle::getTimestamp))
                .orElse(null);
        Candle latestShortCandle = shortCandles.stream()
                .max(Comparator.comparing(Candle::getTimestamp))
                .orElse(null);

        if (latestLongCandle == null || latestShortCandle == null) {
            log.warn("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ—á–∫–∏ –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞");
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω Z-Score –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        double minZScore = history.stream().mapToDouble(ZScoreParam::getZscore).min().orElse(-3.0);
        double maxZScore = history.stream().mapToDouble(ZScoreParam::getZscore).max().orElse(3.0);
        double zRange = maxZScore - minZScore;

        // –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        double minLongPrice = longCandles.stream().mapToDouble(Candle::getClose).min().orElse(0.0);
        double maxLongPrice = longCandles.stream().mapToDouble(Candle::getClose).max().orElse(1.0);
        double longPriceRange = maxLongPrice - minLongPrice;

        double minShortPrice = shortCandles.stream().mapToDouble(Candle::getClose).min().orElse(0.0);
        double maxShortPrice = shortCandles.stream().mapToDouble(Candle::getClose).max().orElse(1.0);
        double shortPriceRange = maxShortPrice - minShortPrice;

        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω Z-Score
        double scaledLongPrice = longPriceRange != 0 ?
                minZScore + ((latestLongCandle.getClose() - minLongPrice) / longPriceRange) * zRange : minZScore;
        double scaledShortPrice = shortPriceRange != 0 ?
                minZScore + ((latestShortCandle.getClose() - minShortPrice) / shortPriceRange) * zRange : minZScore;

        // –í—ã—á–∏—Å–ª—è–µ–º –ø–∏–∫—Å–µ–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
        int chartHeight = 720;
        double minValue = Math.min(scaledLongPrice, scaledShortPrice);
        double maxValue = Math.max(scaledLongPrice, scaledShortPrice);

        double longPixelY = convertValueToPixelY(scaledLongPrice, minZScore, maxZScore, chartHeight);
        double shortPixelY = convertValueToPixelY(scaledShortPrice, minZScore, maxZScore, chartHeight);
        double pixelDistance = Math.abs(longPixelY - shortPixelY);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —Ç–æ—á–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        boolean alreadyExists = pairData.getPixelSpreadHistory().stream()
                .anyMatch(item -> Math.abs(item.getTimestamp() - currentTimestamp) < 1000); // 1 —Å–µ–∫—É–Ω–¥–∞ —Ç–æ–ª–µ—Ä–∞–Ω—Å

        if (!alreadyExists) {
            PixelSpreadHistoryItem newPoint = new PixelSpreadHistoryItem(currentTimestamp, pixelDistance);
            pairData.addPixelSpreadPoint(newPoint);

            log.debug("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Ç–æ—á–∫–∞ –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞ –¥–ª—è –ø–∞—Ä—ã {} –≤ {}: {} –ø–∏–∫—Å–µ–ª–µ–π",
                    pairData.getPairName(), new Date(currentTimestamp), Math.round(pixelDistance));
        } else {
            log.trace("‚è≠Ô∏è –¢–æ—á–∫–∞ –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ {} –ø–∞—Ä—ã {}",
                    new Date(currentTimestamp), pairData.getPairName());
        }
    }

    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–∏–∫—Å–µ–ª—å–Ω—É—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É Y (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç)
     */
    private double convertValueToPixelY(double value, double minValue, double maxValue, int chartHeight) {
        if (maxValue - minValue == 0) return chartHeight / 2.0;

        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω [0, 1]
        double normalized = (value - minValue) / (maxValue - minValue);

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø–∏–∫—Å–µ–ª–∏ (Y=0 –≤–≤–µ—Ä—Ö—É, Y=chartHeight –≤–Ω–∏–∑—É)
        return chartHeight - (normalized * chartHeight);
    }

    /**
     * –ù–û–í–´–ô –ú–ï–¢–û–î: –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–∏–π –ø–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ –∏–∑ —Å–ø–∏—Å–∫–æ–≤ —Å–≤–µ—á–µ–π –±–µ–∑ PairData
     *
     * @param longCandles  —Å–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π –¥–ª—è long —Ç–∏–∫–µ—Ä–∞
     * @param shortCandles —Å–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π –¥–ª—è short —Ç–∏–∫–µ—Ä–∞
     * @param longTicker   –∏–º—è long —Ç–∏–∫–µ—Ä–∞ –¥–ª—è –ª–æ–≥–æ–≤
     * @param shortTicker  –∏–º—è short —Ç–∏–∫–µ—Ä–∞ –¥–ª—è –ª–æ–≥–æ–≤
     * @return —Å—Ä–µ–¥–Ω–∏–π –ø–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ 0.0 –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
     */
    public double calculateAveragePixelSpreadFromCandles(List<Candle> longCandles, List<Candle> shortCandles,
                                                         String longTicker, String shortTicker) {
        if (longCandles == null || shortCandles == null || longCandles.isEmpty() || shortCandles.isEmpty()) {
            log.debug("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞: long={}, short={}",
                    longCandles != null ? longCandles.size() : "null",
                    shortCandles != null ? shortCandles.size() : "null");
            return 0.0;
        }

        String pairName = longTicker + "/" + shortTicker;
        log.debug("üî¢ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞ –¥–ª—è –ø–∞—Ä—ã {}", pairName);

        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        List<Candle> sortedLongCandles = new ArrayList<>(longCandles);
        List<Candle> sortedShortCandles = new ArrayList<>(shortCandles);
        sortedLongCandles.sort(Comparator.comparing(Candle::getTimestamp));
        sortedShortCandles.sort(Comparator.comparing(Candle::getTimestamp));

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–≤–µ—á–µ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
        int maxCandles = 200; // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 200 —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        List<Candle> recentLongCandles = sortedLongCandles.size() > maxCandles ?
                sortedLongCandles.subList(sortedLongCandles.size() - maxCandles, sortedLongCandles.size()) :
                sortedLongCandles;
        List<Candle> recentShortCandles = sortedShortCandles.size() > maxCandles ?
                sortedShortCandles.subList(sortedShortCandles.size() - maxCandles, sortedShortCandles.size()) :
                sortedShortCandles;

        log.debug("üî¢ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: LONG {} —Å–≤–µ—á–µ–π, SHORT {} —Å–≤–µ—á–µ–π",
                recentLongCandles.size(), recentShortCandles.size());

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—ã
        List<Double> longPrices = recentLongCandles.stream().map(Candle::getClose).toList();
        List<Double> shortPrices = recentShortCandles.stream().map(Candle::getClose).toList();

        // –ù–∞–π—Ç–∏ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        double minLongPrice = longPrices.stream().min(Double::compareTo).orElse(0.0);
        double maxLongPrice = longPrices.stream().max(Double::compareTo).orElse(1.0);
        double longPriceRange = maxLongPrice - minLongPrice;

        double minShortPrice = shortPrices.stream().min(Double::compareTo).orElse(0.0);
        double maxShortPrice = shortPrices.stream().max(Double::compareTo).orElse(1.0);
        double shortPriceRange = maxShortPrice - minShortPrice;

        if (longPriceRange == 0.0 || shortPriceRange == 0.0) {
            log.debug("‚ö†Ô∏è –ù—É–ª–µ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –¥–ª—è –ø–∞—Ä—ã {}: long={}, short={}",
                    pairName, longPriceRange, shortPriceRange);
            return 0.0;
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω Z-Score –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ ([-3, 3])
        double minZScore = -3.0;
        double maxZScore = 3.0;
        double zRange = maxZScore - minZScore;

        // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è long —Ü–µ–Ω –≤ –¥–∏–∞–ø–∞–∑–æ–Ω Z-Score
        List<Double> scaledLongPrices = longPrices.stream()
                .map(price -> minZScore + ((price - minLongPrice) / longPriceRange) * zRange)
                .toList();

        // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è short —Ü–µ–Ω –≤ –¥–∏–∞–ø–∞–∑–æ–Ω Z-Score
        List<Double> scaledShortPrices = shortPrices.stream()
                .map(price -> minZScore + ((price - minShortPrice) / shortPriceRange) * zRange)
                .toList();

        // –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ —Å–ø—Ä–µ–¥–∞
        List<Date> longTimes = recentLongCandles.stream().map(c -> new Date(c.getTimestamp())).toList();
        List<Date> shortTimes = recentShortCandles.stream().map(c -> new Date(c.getTimestamp())).toList();

        Set<Long> allTimestamps = new HashSet<>();
        longTimes.forEach(date -> allTimestamps.add(date.getTime()));
        shortTimes.forEach(date -> allTimestamps.add(date.getTime()));

        List<Long> sortedTimestamps = allTimestamps.stream().sorted().toList();

        List<Double> pixelDistances = new ArrayList<>();
        int chartHeight = 720;

        // –ù–∞—Ö–æ–¥–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        double minValue = Math.min(
                scaledLongPrices.stream().min(Double::compareTo).orElse(-3.0),
                scaledShortPrices.stream().min(Double::compareTo).orElse(-3.0)
        );
        double maxValue = Math.max(
                scaledLongPrices.stream().max(Double::compareTo).orElse(3.0),
                scaledShortPrices.stream().max(Double::compareTo).orElse(3.0)
        );

        // –í—ã—á–∏—Å–ª—è–µ–º –ø–∏–∫—Å–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫
        for (Long timestamp : sortedTimestamps) {
            Double longPrice = findNearestPrice(longTimes, scaledLongPrices, timestamp);
            Double shortPrice = findNearestPrice(shortTimes, scaledShortPrices, timestamp);

            if (longPrice != null && shortPrice != null) {
                double longPixelY = convertValueToPixel(longPrice, minValue, maxValue, chartHeight);
                double shortPixelY = convertValueToPixel(shortPrice, minValue, maxValue, chartHeight);
                double pixelDistance = Math.abs(longPixelY - shortPixelY);
                pixelDistances.add(pixelDistance);
            }
        }

        if (pixelDistances.isEmpty()) {
            log.debug("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å –ø–∏–∫—Å–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–∞—Ä—ã {}", pairName);
            return 0.0;
        }

        double averagePixelSpread = pixelDistances.stream().mapToDouble(Double::doubleValue).average().orElse(0.0);

        log.debug("‚úÖ –°—Ä–µ–¥–Ω–∏–π –ø–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ –¥–ª—è –ø–∞—Ä—ã {}: {} px (–Ω–∞ –æ—Å–Ω–æ–≤–µ {} —Ç–æ—á–µ–∫)",
                pairName, String.format("%.1f", averagePixelSpread), pixelDistances.size());

        return averagePixelSpread;
    }

    /**
     * –ë–´–°–¢–†–´–ô –ú–ï–¢–û–î: –í—ã—á–∏—Å–ª—è–µ—Ç –ø–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Ü–µ–Ω–∞–º (–¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏)
     *
     * @param longCandles  —Å–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π –¥–ª—è long —Ç–∏–∫–µ—Ä–∞
     * @param shortCandles —Å–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π –¥–ª—è short —Ç–∏–∫–µ—Ä–∞
     * @param longTicker   –∏–º—è long —Ç–∏–∫–µ—Ä–∞ –¥–ª—è –ª–æ–≥–æ–≤
     * @param shortTicker  –∏–º—è short —Ç–∏–∫–µ—Ä–∞ –¥–ª—è –ª–æ–≥–æ–≤
     * @return —Ç–µ–∫—É—â–∏–π –ø–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Ü–µ–Ω–∞–º –∏–ª–∏ 0.0 –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
     */
    public double calculateCurrentPixelSpreadFromCandles(List<Candle> longCandles, List<Candle> shortCandles,
                                                         String longTicker, String shortTicker) {
        if (longCandles == null || shortCandles == null || longCandles.isEmpty() || shortCandles.isEmpty()) {
            log.debug("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞: long={}, short={}",
                    longCandles != null ? longCandles.size() : "null",
                    shortCandles != null ? shortCandles.size() : "null");
            return 0.0;
        }

        String pairName = longTicker + "/" + shortTicker;
        log.debug("üî¢ –ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç –ø–∏–∫—Å–µ–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ–¥–∞ –¥–ª—è –ø–∞—Ä—ã {} (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã)", pairName);

        // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–≤–µ—á–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        int quickAnalysisSize = 50; // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–≤–µ—á–µ–π
        List<Candle> sortedLongCandles = new ArrayList<>(longCandles);
        List<Candle> sortedShortCandles = new ArrayList<>(shortCandles);
        sortedLongCandles.sort(Comparator.comparing(Candle::getTimestamp));
        sortedShortCandles.sort(Comparator.comparing(Candle::getTimestamp));

        List<Candle> recentLongCandles = sortedLongCandles.size() > quickAnalysisSize ?
                sortedLongCandles.subList(sortedLongCandles.size() - quickAnalysisSize, sortedLongCandles.size()) :
                sortedLongCandles;
        List<Candle> recentShortCandles = sortedShortCandles.size() > quickAnalysisSize ?
                sortedShortCandles.subList(sortedShortCandles.size() - quickAnalysisSize, sortedShortCandles.size()) :
                sortedShortCandles;

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—ã
        List<Double> longPrices = recentLongCandles.stream().map(Candle::getClose).toList();
        List<Double> shortPrices = recentShortCandles.stream().map(Candle::getClose).toList();

        // –ù–∞–π—Ç–∏ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        double minLongPrice = longPrices.stream().min(Double::compareTo).orElse(0.0);
        double maxLongPrice = longPrices.stream().max(Double::compareTo).orElse(1.0);
        double longPriceRange = maxLongPrice - minLongPrice;

        double minShortPrice = shortPrices.stream().min(Double::compareTo).orElse(0.0);
        double maxShortPrice = shortPrices.stream().max(Double::compareTo).orElse(1.0);
        double shortPriceRange = maxShortPrice - minShortPrice;

        if (longPriceRange == 0.0 || shortPriceRange == 0.0) {
            log.debug("‚ö†Ô∏è –ù—É–ª–µ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –¥–ª—è –ø–∞—Ä—ã {}: long={}, short={}",
                    pairName, longPriceRange, shortPriceRange);
            return 0.0;
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω Z-Score –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ ([-3, 3])
        double minZScore = -3.0;
        double maxZScore = 3.0;
        double zRange = maxZScore - minZScore;

        // –ë–µ—Ä–µ–º –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
        double lastLongPrice = longPrices.get(longPrices.size() - 1);
        double lastShortPrice = shortPrices.get(shortPrices.size() - 1);

        // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–µ–Ω –≤ –¥–∏–∞–ø–∞–∑–æ–Ω Z-Score
        double scaledLongPrice = minZScore + ((lastLongPrice - minLongPrice) / longPriceRange) * zRange;
        double scaledShortPrice = minZScore + ((lastShortPrice - minShortPrice) / shortPriceRange) * zRange;

        // –í—ã—á–∏—Å–ª—è–µ–º –ø–∏–∫—Å–µ–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Ç–æ—á–∫–∞–º–∏
        int chartHeight = 720;
        double minValue = Math.min(scaledLongPrice, scaledShortPrice);
        double maxValue = Math.max(scaledLongPrice, scaledShortPrice);

        // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
        if (maxValue - minValue == 0) {
            return 0.0;
        }

        double longPixelY = convertValueToPixel(scaledLongPrice, minValue, maxValue, chartHeight);
        double shortPixelY = convertValueToPixel(scaledShortPrice, minValue, maxValue, chartHeight);
        double pixelDistance = Math.abs(longPixelY - shortPixelY);

        log.debug("‚úÖ –ë—ã—Å—Ç—Ä—ã–π –ø–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ –¥–ª—è –ø–∞—Ä—ã {}: {} px (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã: LONG={}, SHORT={})",
                pairName, String.format("%.1f", pixelDistance),
                String.format("%.8f", lastLongPrice), String.format("%.8f", lastShortPrice));

        return pixelDistance;
    }
}