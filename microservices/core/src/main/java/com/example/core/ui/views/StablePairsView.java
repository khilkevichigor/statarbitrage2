package com.example.core.ui.views;

import com.example.core.experemental.stability.dto.StabilityResponseDto;
import com.example.core.services.PairService;
import com.example.core.services.StablePairsScreenerSettingsService;
import com.example.core.ui.components.ZScoreChartDialog;
import com.example.core.ui.layout.MainLayout;
import com.example.shared.models.Pair;
import com.example.shared.models.StablePairsScreenerSettings;
import com.example.shared.utils.TimeFormatterUtil;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.button.ButtonVariant;
import com.vaadin.flow.component.checkbox.Checkbox;
import com.vaadin.flow.component.combobox.ComboBox;
import com.vaadin.flow.component.combobox.MultiSelectComboBox;
import com.vaadin.flow.component.confirmdialog.ConfirmDialog;
import com.vaadin.flow.component.grid.Grid;
import com.vaadin.flow.component.html.H2;
import com.vaadin.flow.component.html.H3;
import com.vaadin.flow.component.html.Span;
import com.vaadin.flow.component.icon.VaadinIcon;
import com.vaadin.flow.component.notification.Notification;
import com.vaadin.flow.component.notification.NotificationVariant;
import com.vaadin.flow.component.orderedlayout.FlexComponent;
import com.vaadin.flow.component.orderedlayout.HorizontalLayout;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.progressbar.ProgressBar;
import com.vaadin.flow.component.textfield.NumberField;
import com.vaadin.flow.component.textfield.TextArea;
import com.vaadin.flow.data.renderer.ComponentRenderer;
import com.vaadin.flow.data.renderer.TextRenderer;
import com.vaadin.flow.router.PageTitle;
import com.vaadin.flow.router.Route;
import lombok.extern.slf4j.Slf4j;

import java.util.*;

/**
 * –°–∫—Ä–∏–Ω–Ω–µ—Ä —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –∫–æ–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä
 */
@Slf4j
@PageTitle("–°—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–∞—Ä—ã")
@Route(value = "stable-pairs", layout = MainLayout.class)
public class StablePairsView extends VerticalLayout {

    private final PairService pairService;
    private final ZScoreChartDialog zScoreChartDialog;
    private final StablePairsScreenerSettingsService settingsService;

    // –≠–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã –ø–æ–∏—Å–∫–∞ - –º—É–ª—å—Ç–∏-—Å–µ–ª–µ–∫—Ç—ã
    private MultiSelectComboBox<String> timeframeMultiSelect;
    private MultiSelectComboBox<String> periodMultiSelect;

    // –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    private final List<String> availableTimeframes = Arrays.asList(
            "1m", "5m", "15m", "1H", "4H", "1D", "1W", "1M"
    );
    private final List<String> availablePeriods = Arrays.asList(
            "–¥–µ–Ω—å", "–Ω–µ–¥–µ–ª—è", "–º–µ—Å—è—Ü", "6 –º–µ—Å—è—Ü–µ–≤", "1 –≥–æ–¥", "2 –≥–æ–¥–∞", "3 –≥–æ–¥–∞"
    );
    private Checkbox minCorrelationEnabled;
    private NumberField minCorrelationField;
    private Checkbox minWindowSizeEnabled;
    private NumberField minWindowSizeField;
    private Checkbox maxAdfValueEnabled;
    private NumberField maxAdfValueField;
    private Checkbox minRSquaredEnabled;
    private NumberField minRSquaredField;
    private Checkbox maxPValueEnabled;
    private NumberField maxPValueField;

    // –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –æ–±—ä–µ–º—É
    private Checkbox minVolumeEnabled;
    private NumberField minVolumeField;

    // –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–∏–∫–µ—Ä–∞–º
    private Checkbox searchTickersEnabled;
    private TextArea searchTickersField;
    
    // –ß–µ–∫–±–æ–∫—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—ç—à–∞
    private Checkbox useCacheCheckbox;

    private Button searchButton;
    private Button clearAllButton;
    private ProgressBar progressBar;

    // –ù–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    private Checkbox runOnScheduleCheckbox;
    private Button saveSettingsButton;
    private Button loadSettingsButton;
    private ComboBox<StablePairsScreenerSettings> savedSettingsCombo;

    // –¢–∞–±–ª–∏—Ü—ã
    private Grid<Pair> foundPairsGrid;
    private Grid<Pair> monitoringPairsGrid;

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    private Span statsLabel;

    public StablePairsView(PairService pairService, ZScoreChartDialog zScoreChartDialog,
                           StablePairsScreenerSettingsService settingsService) {
        this.pairService = pairService;
        this.zScoreChartDialog = zScoreChartDialog;
        this.settingsService = settingsService;

        initializeLayout();
        loadData();
    }

    private void initializeLayout() {
        setSizeFull();
        setSpacing(true);
        setPadding(true);

        add(
                createTitle(),
                createSearchForm(),
                createProgressSection(),
                createFoundPairsSection(),
                createMonitoringSection()
        );
    }

    private H2 createTitle() {
        H2 title = new H2("üîç –°–∫—Ä–∏–Ω–Ω–µ—Ä —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä");
        title.getStyle().set("margin", "0 0 20px 0");
        return title;
    }

    private VerticalLayout createSearchForm() {
        VerticalLayout formLayout = new VerticalLayout();
        formLayout.getStyle()
                .set("border", "1px solid var(--lumo-contrast-20pct)")
                .set("border-radius", "var(--lumo-border-radius)")
                .set("padding", "20px")
                .set("background", "var(--lumo-base-color)");

        H3 formTitle = new H3("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞");
        formTitle.getStyle().set("margin-top", "0");

        // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –¢–∞–π–º—Ñ—Ä–µ–π–º –∏ –ü–µ—Ä–∏–æ–¥
        HorizontalLayout row1 = new HorizontalLayout();
        row1.setAlignItems(FlexComponent.Alignment.END);
        row1.setWidthFull();

        timeframeMultiSelect = new MultiSelectComboBox<>("–¢–∞–π–º—Ñ—Ä–µ–π–º");
        timeframeMultiSelect.setItems(availableTimeframes);
        timeframeMultiSelect.setValue(new HashSet<>(Arrays.asList("15m"))); //by default
        timeframeMultiSelect.setWidth("250px");

        periodMultiSelect = new MultiSelectComboBox<>("–ü–µ—Ä–∏–æ–¥");
        periodMultiSelect.setItems(availablePeriods);
        periodMultiSelect.setValue(new HashSet<>(Arrays.asList("1 –≥–æ–¥"))); //by default
        periodMultiSelect.setWidth("250px");

        row1.add(timeframeMultiSelect, periodMultiSelect);

        // –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–∫–µ—Ä–∞–º
        HorizontalLayout row2 = createSearchTickersRow();

        // –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        HorizontalLayout row3 = createFilterRow1();
        HorizontalLayout row4 = createFilterRow2();

        // –ü—è—Ç–∞—è —Å—Ç—Ä–æ–∫–∞: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        HorizontalLayout row5 = createAutomationRow();

        // –ö–Ω–æ–ø–∫–∏
        HorizontalLayout buttonRow = new HorizontalLayout();
        buttonRow.setAlignItems(FlexComponent.Alignment.CENTER);

        searchButton = new Button("–ò—Å–∫–∞—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–∞—Ä—ã", VaadinIcon.SEARCH.create());
        searchButton.addThemeVariants(ButtonVariant.LUMO_PRIMARY);

        //todo —Å–¥–µ–ª–∞—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–µ—Ä–µ–∑ –∫—Ä–æ–ª–∏–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–≤–µ–Ω—Ç –≤ cointegration, –æ–Ω —Å—á–∏—Ç–∞–µ—Ç –∏ –∫–∏–¥–∞–µ—Ç —Å–≤–æ–π —ç–≤–µ–Ω—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏–ª–∏ –ø–∏—à–µ—Ç –≤ –±–¥ –∏ –∫–∏–¥–∞–µ—Ç —ç–≤–µ–Ω—Ç —á—Ç–æ –±—ã –º—ã –∑–∞–±—Ä–∞–ª–∏ —Å –±–¥
        searchButton.addClickListener(e -> performSearch());

        clearAllButton = new Button("–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", VaadinIcon.TRASH.create());
        clearAllButton.addThemeVariants(ButtonVariant.LUMO_ERROR, ButtonVariant.LUMO_CONTRAST);
        clearAllButton.addClickListener(e -> clearAllResults());

        saveSettingsButton = new Button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", VaadinIcon.DOWNLOAD.create());
        saveSettingsButton.addThemeVariants(ButtonVariant.LUMO_CONTRAST);
        saveSettingsButton.addClickListener(e -> saveCurrentSettings());

        loadSettingsButton = new Button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", VaadinIcon.UPLOAD.create());
        loadSettingsButton.addThemeVariants(ButtonVariant.LUMO_CONTRAST);
        loadSettingsButton.addClickListener(e -> loadSelectedSettings());

        buttonRow.add(searchButton, clearAllButton, saveSettingsButton, loadSettingsButton);

        formLayout.add(formTitle, row1, row2, row3, row4, row5, buttonRow);
        return formLayout;
    }

    private HorizontalLayout createSearchTickersRow() {
        HorizontalLayout row = new HorizontalLayout();
        row.setAlignItems(FlexComponent.Alignment.START);
        row.setWidthFull();

        // –ß–µ–∫–±–æ–∫—Å –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–∏–∫–µ—Ä–∞–º
        searchTickersEnabled = new Checkbox("–ò—Å–∫–∞—Ç—å –¥–ª—è");
        searchTickersEnabled.setValue(false);
        searchTickersEnabled.getStyle().set("align-self", "flex-start");
        searchTickersEnabled.getStyle().set("margin-top", "8px");

        // TextArea –¥–ª—è –≤–≤–æ–¥–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        searchTickersField = new TextArea();
        searchTickersField.setPlaceholder("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTC-USDT-SWAP,ETH-USDT-SWAP,BTCUSDT,ETHUSDT)");
        searchTickersField.setWidth("500px");
        searchTickersField.setHeight("80px");
        searchTickersField.setEnabled(searchTickersEnabled.getValue());
        searchTickersField.getStyle().set("font-family", "monospace");

        // –°–≤—è–∑—ã–≤–∞–µ–º —á–µ–∫–±–æ–∫—Å —Å –ø–æ–ª–µ–º
        searchTickersEnabled.addValueChangeListener(e -> {
            searchTickersField.setEnabled(e.getValue());
            if (!e.getValue()) {
                searchTickersField.clear();
            }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        searchTickersField.addValueChangeListener(e -> {
            String value = e.getValue();
            if (value != null && !value.trim().isEmpty()) {
                // –û—á–∏—â–∞–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                String normalized = Arrays.stream(value.split(","))
                        .map(String::trim)
                        .map(String::toUpperCase)
                        .filter(s -> !s.isEmpty())
                        .reduce((a, b) -> a + "," + b)
                        .orElse("");

                if (!normalized.equals(value)) {
                    searchTickersField.setValue(normalized);
                }
            }
        });

        row.add(searchTickersEnabled, searchTickersField);
        return row;
    }

    private HorizontalLayout createFilterRow1() {
        HorizontalLayout row = new HorizontalLayout();
        row.setAlignItems(FlexComponent.Alignment.END);
        row.setWidthFull();

        minCorrelationEnabled = new Checkbox("Min Correlation");
        minCorrelationEnabled.setValue(true);
        minCorrelationField = new NumberField();
        minCorrelationField.setValue(0.1);
        minCorrelationField.setWidth("120px");
        minCorrelationField.setEnabled(minCorrelationEnabled.getValue());
        minCorrelationEnabled.addValueChangeListener(e -> minCorrelationField.setEnabled(e.getValue()));

        minWindowSizeEnabled = new Checkbox("Min Window Size");
        minWindowSizeEnabled.setValue(true);
        minWindowSizeField = new NumberField();
        minWindowSizeField.setValue(100.0);
        minWindowSizeField.setWidth("120px");
        minWindowSizeField.setEnabled(minWindowSizeEnabled.getValue());
        minWindowSizeEnabled.addValueChangeListener(e -> minWindowSizeField.setEnabled(e.getValue()));

        maxAdfValueEnabled = new Checkbox("Max ADF Value");
        maxAdfValueEnabled.setValue(true);
        maxAdfValueField = new NumberField();
        maxAdfValueField.setValue(0.1);
        maxAdfValueField.setWidth("120px");
        maxAdfValueField.setEnabled(maxAdfValueEnabled.getValue());
        maxAdfValueEnabled.addValueChangeListener(e ->
                maxAdfValueField.setEnabled(e.getValue()));

        HorizontalLayout corrGroup = new HorizontalLayout(minCorrelationEnabled, minCorrelationField);
        corrGroup.setSpacing(false);
        corrGroup.setAlignItems(FlexComponent.Alignment.END);

        HorizontalLayout windowGroup = new HorizontalLayout(minWindowSizeEnabled, minWindowSizeField);
        windowGroup.setSpacing(false);
        windowGroup.setAlignItems(FlexComponent.Alignment.END);

        HorizontalLayout adfGroup = new HorizontalLayout(maxAdfValueEnabled, maxAdfValueField);
        adfGroup.setSpacing(false);
        adfGroup.setAlignItems(FlexComponent.Alignment.END);

        row.add(corrGroup, windowGroup, adfGroup);
        return row;
    }

    private HorizontalLayout createFilterRow2() {
        HorizontalLayout row = new HorizontalLayout();
        row.setAlignItems(FlexComponent.Alignment.END);
        row.setWidthFull();

        minRSquaredEnabled = new Checkbox("Min R2");
        minRSquaredEnabled.setValue(true);
        minRSquaredField = new NumberField();
        minRSquaredField.setValue(0.1);
        minRSquaredField.setWidth("120px");
        minRSquaredField.setEnabled(minRSquaredEnabled.getValue());
        minRSquaredEnabled.addValueChangeListener(e -> minRSquaredField.setEnabled(e.getValue()));

        maxPValueEnabled = new Checkbox("Max P-Value");
        maxPValueEnabled.setValue(true);
        maxPValueField = new NumberField();
        maxPValueField.setValue(0.1);
        maxPValueField.setWidth("120px");
        maxPValueField.setEnabled(maxPValueEnabled.getValue());
        maxPValueEnabled.addValueChangeListener(e -> maxPValueField.setEnabled(e.getValue()));

        // –§–∏–ª—å—Ç—Ä –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –æ–±—ä–µ–º—É (–ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫)
        minVolumeEnabled = new Checkbox("Min Vol (–º–ª–Ω $)");
        minVolumeEnabled.setValue(false);
        minVolumeField = new NumberField();
        minVolumeField.setValue(1.0);
        minVolumeField.setStep(1.0);
        minVolumeField.setMin(0.0);
        minVolumeField.setStepButtonsVisible(true);
        minVolumeField.setWidth("120px");
        minVolumeField.setEnabled(minVolumeEnabled.getValue());
        minVolumeEnabled.addValueChangeListener(e -> minVolumeField.setEnabled(e.getValue()));

        HorizontalLayout rSquaredGroup = new HorizontalLayout(minRSquaredEnabled, minRSquaredField);
        rSquaredGroup.setSpacing(false);
        rSquaredGroup.setAlignItems(FlexComponent.Alignment.END);

        HorizontalLayout pValueGroup = new HorizontalLayout(maxPValueEnabled, maxPValueField);
        pValueGroup.setSpacing(false);
        pValueGroup.setAlignItems(FlexComponent.Alignment.END);

        HorizontalLayout minVolumeGroup = new HorizontalLayout(minVolumeEnabled, minVolumeField);
        minVolumeGroup.setSpacing(false);
        minVolumeGroup.setAlignItems(FlexComponent.Alignment.END);
        
        // –ß–µ–∫–±–æ–∫—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—ç—à–∞
        useCacheCheckbox = new Checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ö–≠–®");
        useCacheCheckbox.setValue(true);
        useCacheCheckbox.getElement().setAttribute("title", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ï—Å–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω–æ - –∑–∞–≥—Ä—É–∂–∞—Ç—å —Å–≤–µ—á–∏ –Ω–∞–ø—Ä—è–º—É—é —Å OKX (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤)");

        row.add(rSquaredGroup, pValueGroup, minVolumeGroup, useCacheCheckbox);
        return row;
    }

    private HorizontalLayout createAutomationRow() {
        HorizontalLayout row = new HorizontalLayout();
        row.setAlignItems(FlexComponent.Alignment.END);
        row.setWidthFull();

        runOnScheduleCheckbox = new Checkbox("–ó–∞–ø—É—Å–∫–∞—Ç—å –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é");
        runOnScheduleCheckbox.setValue(false);
        runOnScheduleCheckbox.getElement().setAttribute("title", "–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∫–∞–∂–¥—É—é –Ω–æ—á—å –≤ 2:00");

        savedSettingsCombo = new ComboBox<>("–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏");
        savedSettingsCombo.setItemLabelGenerator(StablePairsScreenerSettings::getName);
        savedSettingsCombo.setWidth("300px");

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        loadAvailableSettings();

        row.add(runOnScheduleCheckbox, savedSettingsCombo);
        return row;
    }

    private VerticalLayout createProgressSection() {
        VerticalLayout section = new VerticalLayout();
        section.setPadding(false);
        section.setSpacing(false);

        progressBar = new ProgressBar();
        progressBar.setIndeterminate(true);
        progressBar.setVisible(false);
        progressBar.setWidthFull();

        statsLabel = new Span();
        statsLabel.getStyle().set("font-size", "var(--lumo-font-size-s)");

        section.add(progressBar, statsLabel);
        return section;
    }

    private VerticalLayout createFoundPairsSection() {
        VerticalLayout section = new VerticalLayout();
        section.getStyle()
                .set("border", "1px solid var(--lumo-contrast-20pct)")
                .set("border-radius", "var(--lumo-border-radius)")
                .set("padding", "15px");

        H3 title = new H3("üìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–∞—Ä—ã");
        title.getStyle().set("margin", "0 0 15px 0");

        foundPairsGrid = createFoundPairsGrid();

        section.add(title, foundPairsGrid);
        return section;
    }

    private VerticalLayout createMonitoringSection() {
        VerticalLayout section = new VerticalLayout();
        section.getStyle()
                .set("border", "1px solid var(--lumo-contrast-20pct)")
                .set("border-radius", "var(--lumo-border-radius)")
                .set("padding", "15px");

        H3 title = new H3("üëÅÔ∏è –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞");
        title.getStyle().set("margin", "0 0 15px 0");

        monitoringPairsGrid = createMonitoringPairsGrid();

        section.add(title, monitoringPairsGrid);
        return section;
    }

    private Grid<Pair> createFoundPairsGrid() {
        Grid<Pair> grid = new Grid<>(Pair.class, false);
        grid.setHeight("300px");
        grid.addThemeVariants(com.vaadin.flow.component.grid.GridVariant.LUMO_ROW_STRIPES);

        // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        grid.addColumn(Pair::getPairName).setHeader("–ü–∞—Ä–∞").setSortable(true).setAutoWidth(true).setFlexGrow(0);
        Grid.Column<Pair> scoreColumn = grid.addColumn(new TextRenderer<>(pair -> pair.getTotalScore() != null ? pair.getTotalScore().toString() : "-"));
        scoreColumn.setHeader("–°–∫–æ—Ä").setSortable(true).setAutoWidth(true).setFlexGrow(0);
        scoreColumn.setComparator((pair1, pair2) -> {
            Integer score1 = pair1.getTotalScore();
            Integer score2 = pair2.getTotalScore();
            if (score1 == null && score2 == null) return 0;
            if (score1 == null) return 1; // null values go to end
            if (score2 == null) return -1; // null values go to end
            return score2.compareTo(score1); // Descending order (higher scores first)
        });
        grid.addColumn(Pair::getStabilityRating).setHeader("–†–µ–π—Ç–∏–Ω–≥").setSortable(true).setAutoWidth(true).setFlexGrow(0);
        grid.addColumn(new TextRenderer<>(pair -> pair.isTradeable() ? "–î–∞" : "–ù–µ—Ç")).setHeader("–¢–æ—Ä–≥—É–µ–º–∞—è").setSortable(true).setAutoWidth(true).setFlexGrow(0);
        grid.addColumn(new TextRenderer<>(pair -> pair.getDataPoints() != null ? pair.getDataPoints().toString() : "-")).setHeader("–¢–æ—á–∫–∏").setSortable(true).setAutoWidth(true).setFlexGrow(0);
        grid.addColumn(new TextRenderer<>(pair -> pair.getCandleCount() != null ? pair.getCandleCount().toString() : "-")).setHeader("–°–≤–µ—á–µ–π").setSortable(true).setAutoWidth(true).setFlexGrow(0);
        grid.addColumn(Pair::getTimeframe).setHeader("–¢–§").setSortable(true).setAutoWidth(true).setFlexGrow(0);
        grid.addColumn(Pair::getPeriod).setHeader("–ü–µ—Ä–∏–æ–¥").setSortable(true).setAutoWidth(true).setFlexGrow(0);
        grid.addColumn(new TextRenderer<>(pair -> pair.getSearchDate() != null ? TimeFormatterUtil.formatDateTime(pair.getSearchDate()) : "-")).setHeader("–î–∞—Ç–∞ –ø–æ–∏—Å–∫–∞").setSortable(true).setAutoWidth(true).setFlexGrow(0);
        // –ö–æ–ª–æ–Ω–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
        grid.addColumn(new ComponentRenderer<>(this::createFoundPairActions)).setHeader("–î–µ–π—Å—Ç–≤–∏—è").setSortable(true).setAutoWidth(true).setFlexGrow(0);

        return grid;
    }

    private Grid<Pair> createMonitoringPairsGrid() {
        Grid<Pair> grid = new Grid<>(Pair.class, false);
        grid.setHeight("200px");
        grid.addThemeVariants(com.vaadin.flow.component.grid.GridVariant.LUMO_ROW_STRIPES);

        // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        grid.addColumn(Pair::getPairName).setHeader("–ü–∞—Ä–∞").setSortable(true).setAutoWidth(true).setFlexGrow(0);
        Grid.Column<Pair> scoreColumnMonitoring = grid.addColumn(new TextRenderer<>(pair -> pair.getTotalScore() != null ? pair.getTotalScore().toString() : "-"));
        scoreColumnMonitoring.setHeader("–°–∫–æ—Ä").setSortable(true).setAutoWidth(true).setFlexGrow(0);
        scoreColumnMonitoring.setComparator((pair1, pair2) -> {
            Integer score1 = pair1.getTotalScore();
            Integer score2 = pair2.getTotalScore();
            if (score1 == null && score2 == null) return 0;
            if (score1 == null) return 1; // null values go to end
            if (score2 == null) return -1; // null values go to end
            return score2.compareTo(score1); // Descending order (higher scores first)
        });
        grid.addColumn(Pair::getStabilityRating).setHeader("–†–µ–π—Ç–∏–Ω–≥").setSortable(true).setAutoWidth(true).setFlexGrow(0);
        grid.addColumn(new TextRenderer<>(pair -> pair.getCandleCount() != null ? pair.getCandleCount().toString() : "-")).setHeader("–°–≤–µ—á–µ–π").setSortable(true).setAutoWidth(true).setFlexGrow(0);
        grid.addColumn(Pair::getTimeframe).setHeader("–¢–§").setSortable(true).setAutoWidth(true).setFlexGrow(0);
        grid.addColumn(Pair::getPeriod).setHeader("–ü–µ—Ä–∏–æ–¥").setSortable(true).setAutoWidth(true).setFlexGrow(0);
        grid.addColumn(new TextRenderer<>(pair -> pair.getCreatedAt() != null ? TimeFormatterUtil.formatDateTime(pair.getCreatedAt()) : "-")).setHeader("–î–æ–±–∞–≤–ª–µ–Ω–∞").setAutoWidth(true).setFlexGrow(0);
        // –ö–æ–ª–æ–Ω–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
        grid.addColumn(new ComponentRenderer<>(this::createMonitoringPairActions)).setHeader("–î–µ–π—Å—Ç–≤–∏—è").setSortable(true).setAutoWidth(true).setFlexGrow(0);

        return grid;
    }

    private HorizontalLayout createFoundPairActions(Pair pair) {
        HorizontalLayout actions = new HorizontalLayout();
        actions.setSpacing(true);

        Button addButton = new Button("–î–æ–±–∞–≤–∏—Ç—å", VaadinIcon.PLUS.create());
        addButton.addThemeVariants(ButtonVariant.LUMO_SUCCESS, ButtonVariant.LUMO_SMALL);
        addButton.addClickListener(e -> addToMonitoring(pair));

        Button addTickersButton = new Button("–î–æ–±–∞–≤–∏—Ç—å —Ç–∏–∫–µ—Ä—ã", VaadinIcon.TAGS.create());
        addTickersButton.addThemeVariants(ButtonVariant.LUMO_PRIMARY, ButtonVariant.LUMO_SMALL);
        addTickersButton.getElement().setAttribute("title", "–î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–∞—Ä—ã –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞");
        addTickersButton.addClickListener(e -> addTickersToSearch(pair));

        Button chartButton = new Button(VaadinIcon.LINE_CHART.create());
        chartButton.addThemeVariants(ButtonVariant.LUMO_TERTIARY, ButtonVariant.LUMO_SMALL);
        chartButton.getElement().setAttribute("title", "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å Z-Score –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫");
        chartButton.addClickListener(e -> calculateZScore(pair));

        Button deleteButton = new Button(VaadinIcon.TRASH.create());
        deleteButton.addThemeVariants(ButtonVariant.LUMO_ERROR, ButtonVariant.LUMO_TERTIARY, ButtonVariant.LUMO_SMALL);
        deleteButton.getElement().setAttribute("title", "–£–¥–∞–ª–∏—Ç—å");
        deleteButton.addClickListener(e -> deleteFoundPair(pair));

        actions.add(addButton, addTickersButton, chartButton, deleteButton);
        return actions;
    }

    private HorizontalLayout createMonitoringPairActions(Pair pair) {
        HorizontalLayout actions = new HorizontalLayout();
        actions.setSpacing(true);

        Button chartButton = new Button(VaadinIcon.LINE_CHART.create());
        chartButton.addThemeVariants(ButtonVariant.LUMO_TERTIARY, ButtonVariant.LUMO_SMALL);
        chartButton.getElement().setAttribute("title", "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å Z-Score –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫");
        chartButton.addClickListener(e -> calculateZScore(pair));

        Button removeButton = new Button(VaadinIcon.MINUS.create());
        removeButton.addThemeVariants(ButtonVariant.LUMO_ERROR, ButtonVariant.LUMO_SMALL);
        removeButton.getElement().setAttribute("title", "–£–¥–∞–ª–∏—Ç—å –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞");
        removeButton.addClickListener(e -> removeFromMonitoring(pair));

        actions.add(chartButton, removeButton);
        return actions;
    }

    private void performSearch() {
        searchButton.setEnabled(false);
        progressBar.setVisible(true);

        try {
            Set<String> timeframes = timeframeMultiSelect.getValue();
            Set<String> periods = periodMultiSelect.getValue();

            if (timeframes.isEmpty()) {
                Notification.show("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∞–π–º—Ñ—Ä–µ–π–º", 3000, Notification.Position.TOP_CENTER)
                        .addThemeVariants(NotificationVariant.LUMO_ERROR);
                return;
            }

            if (periods.isEmpty()) {
                Notification.show("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–µ—Ä–∏–æ–¥", 3000, Notification.Position.TOP_CENTER)
                        .addThemeVariants(NotificationVariant.LUMO_ERROR);
                return;
            }

            Map<String, Object> searchSettings = buildSearchSettings();

            log.info("üîç –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä: TF={}, Period={}", timeframes, periods);

            // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
            getUI().ifPresent(ui -> {
                Thread searchThread = new Thread(() -> {
                    try {
                        StabilityResponseDto response = pairService.searchStablePairs(
                                timeframes, periods, searchSettings);

                        ui.access(() -> {
                            progressBar.setVisible(false);
                            searchButton.setEnabled(true);

                            if (response.getSuccess()) {
                                Notification.show(
                                                String.format("‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞–π–¥–µ–Ω–æ %d —Ç–æ—Ä–≥—É–µ–º—ã—Ö –ø–∞—Ä –∏–∑ %d –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö",
                                                        response.getTradeablePairsFound(),
                                                        response.getTotalPairsAnalyzed()),
                                                5000, Notification.Position.TOP_CENTER)
                                        .addThemeVariants(NotificationVariant.LUMO_SUCCESS);
                                loadFoundPairs();
                                updateStatistics();
                            } else {
                                Notification.show("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–∞—Ä", 3000, Notification.Position.TOP_CENTER)
                                        .addThemeVariants(NotificationVariant.LUMO_ERROR);
                            }
                        });

                    } catch (Exception e) {
                        log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–∞—Ä: {}", e.getMessage(), e);
                        ui.access(() -> {
                            progressBar.setVisible(false);
                            searchButton.setEnabled(true);
                            Notification.show("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage(), 5000, Notification.Position.TOP_CENTER)
                                    .addThemeVariants(NotificationVariant.LUMO_ERROR);
                        });
                    }
                });
                searchThread.start();
            });

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞: {}", e.getMessage(), e);
            progressBar.setVisible(false);
            searchButton.setEnabled(true);
            Notification.show("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage(), 3000, Notification.Position.TOP_CENTER)
                    .addThemeVariants(NotificationVariant.LUMO_ERROR);
        }
    }

    private Map<String, Object> buildSearchSettings() {
        Map<String, Object> settings = new HashMap<>();

        if (minCorrelationEnabled.getValue() && minCorrelationField.getValue() != null) {
            settings.put("minCorrelation", minCorrelationField.getValue());
        }
        if (minWindowSizeEnabled.getValue() && minWindowSizeField.getValue() != null) {
            settings.put("minWindowSize", minWindowSizeField.getValue().intValue());
        }
        if (maxAdfValueEnabled.getValue() && maxAdfValueField.getValue() != null) {
            settings.put("maxAdfValue", maxAdfValueField.getValue());
        }
        if (minRSquaredEnabled.getValue() && minRSquaredField.getValue() != null) {
            settings.put("minRSquared", minRSquaredField.getValue());
        }
        if (maxPValueEnabled.getValue() && maxPValueField.getValue() != null) {
            settings.put("maxPValue", maxPValueField.getValue());
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –æ–±—ä–µ–º—É
        if (minVolumeEnabled.getValue() && minVolumeField.getValue() != null) {
            settings.put("minVolume", minVolumeField.getValue());
            log.info("üí∞ –î–æ–±–∞–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –æ–±—ä–µ–º—É: {} –º–ª–Ω $", minVolumeField.getValue());
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ç–∏–∫–µ—Ä–∞–º
        if (searchTickersEnabled.getValue() && searchTickersField.getValue() != null && !searchTickersField.getValue().trim().isEmpty()) {
            Set<String> tickers = getSearchTickersSet();
            settings.put("searchTickers", tickers);
            log.info("üéØ –î–æ–±–∞–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–∫–µ—Ä–∞–º: {}", tickers);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—ç—à–∞
        boolean useCache = useCacheCheckbox.getValue();
        settings.put("useCache", useCache);
        log.info("üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—ç—à–∞: {}", useCache ? "–≤–∫–ª—é—á–µ–Ω–æ" : "–≤—ã–∫–ª—é—á–µ–Ω–æ");

        return settings;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏–∑ UI –ø–æ–ª—è
     */
    private Set<String> getSearchTickersSet() {
        if (searchTickersField.getValue() == null || searchTickersField.getValue().trim().isEmpty()) {
            return new HashSet<>();
        }

        Set<String> instruments = new HashSet<>();
        String[] instrumentArray = searchTickersField.getValue().split(",");
        for (String instrument : instrumentArray) {
            String trimmed = instrument.trim().toUpperCase();
            if (!trimmed.isEmpty()) {
                instruments.add(trimmed);
            }
        }
        return instruments;
    }

    private void clearAllResults() {
        ConfirmDialog dialog = new ConfirmDialog(
                "–û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
                "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ä—ã? " +
                        "–ü–∞—Ä—ã –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –ù–ï –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.",
                "–û—á–∏—Å—Ç–∏—Ç—å", event -> {
            try {
                int deletedCount = pairService.clearAllFoundPairs();
                Notification.show(
                                String.format("üßπ –£–¥–∞–ª–µ–Ω–æ %d –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ä", deletedCount),
                                3000, Notification.Position.TOP_CENTER)
                        .addThemeVariants(NotificationVariant.LUMO_SUCCESS);
                loadFoundPairs();
                updateStatistics();
            } catch (Exception e) {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–∞—Ä: {}", e.getMessage(), e);
                Notification.show("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: " + e.getMessage(),
                                3000, Notification.Position.TOP_CENTER)
                        .addThemeVariants(NotificationVariant.LUMO_ERROR);
            }
        },
                "–û—Ç–º–µ–Ω–∞", event -> {
        });
        dialog.open();
    }

    private void addToMonitoring(Pair pair) {
        try {
            pairService.addToMonitoring(pair.getId());
            Notification.show(
                            String.format("‚ûï –ü–∞—Ä–∞ %s –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", pair.getPairName()),
                            3000, Notification.Position.BOTTOM_CENTER)
                    .addThemeVariants(NotificationVariant.LUMO_SUCCESS);
            loadData(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±–µ —Ç–∞–±–ª–∏—Ü—ã
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {}", e.getMessage(), e);
            Notification.show("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage(), 3000, Notification.Position.TOP_CENTER)
                    .addThemeVariants(NotificationVariant.LUMO_ERROR);
        }
    }

    private void removeFromMonitoring(Pair pair) {
        try {
            pairService.removeFromMonitoring(pair.getId());
            Notification.show(
                            String.format("‚ûñ –ü–∞—Ä–∞ %s —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", pair.getPairName()),
                            3000, Notification.Position.BOTTOM_CENTER)
                    .addThemeVariants(NotificationVariant.LUMO_SUCCESS);
            loadData(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±–µ —Ç–∞–±–ª–∏—Ü—ã
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {}", e.getMessage(), e);
            Notification.show("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage(), 3000, Notification.Position.TOP_CENTER)
                    .addThemeVariants(NotificationVariant.LUMO_ERROR);
        }
    }

    private void deleteFoundPair(Pair pair) {
        ConfirmDialog dialog = new ConfirmDialog(
                "–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä—ã",
                String.format("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–∞—Ä—É %s?", pair.getPairName()),
                "–£–¥–∞–ª–∏—Ç—å", event -> {
            try {
                pairService.deleteFoundPair(pair.getId());
                Notification.show(
                                String.format("üóëÔ∏è –ü–∞—Ä–∞ %s —É–¥–∞–ª–µ–Ω–∞", pair.getPairName()),
                                3000, Notification.Position.BOTTOM_CENTER)
                        .addThemeVariants(NotificationVariant.LUMO_SUCCESS);
                loadFoundPairs();
                updateStatistics();
            } catch (Exception e) {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞—Ä—ã: {}", e.getMessage(), e);
                Notification.show("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage(),
                                3000, Notification.Position.TOP_CENTER)
                        .addThemeVariants(NotificationVariant.LUMO_ERROR);
            }
        },
                "–û—Ç–º–µ–Ω–∞", event -> {
        });
        dialog.open();
    }

    private void addTickersToSearch(Pair pair) {
        try {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–∫–µ—Ä—ã –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞—Ä—ã
            String pairName = pair.getPairName();
            if (pairName == null || pairName.trim().isEmpty()) {
                Notification.show("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—ã", 3000, Notification.Position.TOP_CENTER)
                        .addThemeVariants(NotificationVariant.LUMO_ERROR);
                return;
            }

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –ø–∞—Ä—ã
            Set<String> instruments = extractInstrumentsFromPairName(pairName);

            if (instruments.isEmpty()) {
                Notification.show("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞—Ä—ã", 3000, Notification.Position.TOP_CENTER)
                        .addThemeVariants(NotificationVariant.LUMO_ERROR);
                return;
            }

            // –í–∫–ª—é—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–∫–µ—Ä–∞–º
            searchTickersEnabled.setValue(true);
            searchTickersField.setEnabled(true);

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
            Set<String> existingInstruments = getSearchTickersSet();
            existingInstruments.addAll(instruments);

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
            String instrumentsString = String.join(",", existingInstruments);
            searchTickersField.setValue(instrumentsString);

            log.info("üìù –î–æ–±–∞–≤–ª–µ–Ω—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–∑ –ø–∞—Ä—ã {}: {}", pairName, instruments);
            Notification.show(
                            String.format("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–∑ –ø–∞—Ä—ã %s: %s", pairName, String.join(", ", instruments)),
                            3000, Notification.Position.BOTTOM_CENTER)
                    .addThemeVariants(NotificationVariant.LUMO_SUCCESS);

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ –ø–∞—Ä—ã {}: {}", pair.getPairName(), e.getMessage(), e);
            Notification.show("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage(), 3000, Notification.Position.TOP_CENTER)
                    .addThemeVariants(NotificationVariant.LUMO_ERROR);
        }
    }

    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞—Ä—ã
     * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã:
     * - "ENJ-USDT-SWAP/LUNA-USDT-SWAP" -> [ENJ-USDT-SWAP, LUNA-USDT-SWAP]
     * - "BTC-ETH" -> [BTC, ETH]
     * - "BTCUSDT-ETHUSDT" -> [BTCUSDT, ETHUSDT]
     */
    private Set<String> extractInstrumentsFromPairName(String pairName) {
        Set<String> instruments = new HashSet<>();

        try {
            // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Å–ª–µ—à—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            String[] parts = pairName.split("/");

            for (String part : parts) {
                String instrument = part.trim().toUpperCase();
                if (!instrument.isEmpty()) {
                    instruments.add(instrument);
                }
            }

            log.debug("üîç –ò–∑–≤–ª–µ—á–µ–Ω—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–∑ '{}': {}", pairName, instruments);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏–∑ '{}': {}", pairName, e.getMessage(), e);
        }

        return instruments;
    }

    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ —Ç–∏–∫–µ—Ä—ã –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞—Ä—ã (DEPRECATED - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
     * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã:
     * - "ENJ-USDT-SWAP/LUNA-USDT-SWAP" -> [ENJ, LUNA]
     * - "BTC-ETH" -> [BTC, ETH]
     * - "BTCUSDT-ETHUSDT" -> [BTC, ETH]
     */
    private Set<String> extractTickersFromPairName(String pairName) {
        Set<String> tickers = new HashSet<>();

        try {
            // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Å–ª–µ—à—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            String[] instruments = pairName.split("/");

            for (String instrument : instruments) {
                String ticker = extractBaseTickerFromInstrument(instrument.trim());
                if (!ticker.isEmpty()) {
                    tickers.add(ticker);
                }
            }

            log.debug("üîç –ò–∑–≤–ª–µ—á–µ–Ω—ã —Ç–∏–∫–µ—Ä—ã –∏–∑ '{}': {}", pairName, tickers);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ '{}': {}", pairName, e.getMessage(), e);
        }

        return tickers;
    }

    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –±–∞–∑–æ–≤—ã–π —Ç–∏–∫–µ—Ä –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
     * –ü—Ä–∏–º–µ—Ä—ã:
     * - "ENJ-USDT-SWAP" -> "ENJ"
     * - "BTCUSDT" -> "BTC"
     * - "ETH" -> "ETH"
     */
    private String extractBaseTickerFromInstrument(String instrument) {
        if (instrument == null || instrument.isEmpty()) {
            return "";
        }

        String upper = instrument.toUpperCase();

        // –î–ª—è —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ç–∏–ø–∞ "ENJ-USDT-SWAP", "BTC-USDT", "ETH-USD" 
        if (upper.contains("-")) {
            // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –¥–æ –ø–µ—Ä–≤–æ–≥–æ –¥–µ—Ñ–∏—Å–∞
            String baseTicker = upper.split("-")[0];
            return baseTicker.trim();
        }

        // –î–ª—è —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ç–∏–ø–∞ "BTCUSDT", "ETHUSDC"
        // –£–±–∏—Ä–∞–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å—É—Ñ—Ñ–∏–∫—Å—ã-–≤–∞–ª—é—Ç—ã
        String[] knownSuffixes = {"USDT", "USDC", "USD", "BTC", "ETH", "BNB", "BUSD"};
        for (String suffix : knownSuffixes) {
            if (upper.endsWith(suffix) && upper.length() > suffix.length()) {
                return upper.substring(0, upper.length() - suffix.length()).trim();
            }
        }

        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        return upper.trim();
    }

    private void calculateZScore(Pair pair) {
        try {
            log.info("üßÆ –†–∞—Å—á–µ—Ç Z-Score –¥–ª—è –ø–∞—Ä—ã {}", pair.getPairName());

            // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
            getUI().ifPresent(ui -> {
                Thread calculateThread = new Thread(() -> {
                    try {
                        Pair calculatedTradingPair =
                                pairService.calculateZScoreForStablePair(pair);

                        ui.access(() -> {
                            if (calculatedTradingPair != null) {
                                Notification.show(
                                                String.format("‚úÖ Z-Score —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –¥–ª—è –ø–∞—Ä—ã %s! –ü–æ–∫–∞–∑—ã–≤–∞—é –≥—Ä–∞—Ñ–∏–∫...",
                                                        pair.getPairName()),
                                                3000, Notification.Position.BOTTOM_CENTER)
                                        .addThemeVariants(NotificationVariant.LUMO_SUCCESS);

                                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                                zScoreChartDialog.showChart(calculatedTradingPair);
                            } else {
                                Notification.show(
                                                String.format("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å Z-Score –¥–ª—è –ø–∞—Ä—ã %s",
                                                        pair.getPairName()),
                                                3000, Notification.Position.TOP_CENTER)
                                        .addThemeVariants(NotificationVariant.LUMO_ERROR);
                            }
                        });

                    } catch (Exception e) {
                        log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ Z-Score –¥–ª—è –ø–∞—Ä—ã {}: {}", pair.getPairName(), e.getMessage(), e);
                        ui.access(() -> {
                            Notification.show("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: " + e.getMessage(),
                                            5000, Notification.Position.TOP_CENTER)
                                    .addThemeVariants(NotificationVariant.LUMO_ERROR);
                        });
                    }
                });
                calculateThread.start();
            });

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ —Ä–∞—Å—á–µ—Ç–∞ Z-Score –¥–ª—è –ø–∞—Ä—ã {}: {}", pair.getPairName(), e.getMessage(), e);
            Notification.show("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage(), 3000, Notification.Position.TOP_CENTER)
                    .addThemeVariants(NotificationVariant.LUMO_ERROR);
        }
    }


    private void loadData() {
        loadFoundPairs();
        loadMonitoringPairs();
        updateStatistics();
    }

    private void loadFoundPairs() {
        try {
            List<Pair> pairs = pairService.getAllFoundPairs();
            foundPairsGrid.setItems(pairs);
            log.debug("–ó–∞–≥—Ä—É–∂–µ–Ω–æ {} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ä", pairs.size());
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ä: {}", e.getMessage(), e);
            Notification.show("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö", 3000, Notification.Position.TOP_CENTER)
                    .addThemeVariants(NotificationVariant.LUMO_ERROR);
        }
    }

    private void loadMonitoringPairs() {
        try {
            List<Pair> pairs = pairService.getMonitoringPairs();
            monitoringPairsGrid.setItems(pairs);
            log.debug("–ó–∞–≥—Ä—É–∂–µ–Ω–æ {} –ø–∞—Ä –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ", pairs.size());
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {}", e.getMessage(), e);
            Notification.show("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", 3000, Notification.Position.TOP_CENTER)
                    .addThemeVariants(NotificationVariant.LUMO_ERROR);
        }
    }

    private void updateStatistics() {
        try {
            Map<String, Object> stats = pairService.getSearchStatistics();
            int totalFound = ((Number) stats.get("totalFound")).intValue();
            int totalInMonitoring = ((Number) stats.get("totalInMonitoring")).intValue();

            statsLabel.setText(String.format(
                    "üìä –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ä: %d | –í –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: %d",
                    totalFound, totalInMonitoring));
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {}", e.getMessage(), e);
            statsLabel.setText("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
        }
    }

    // ======== –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ù–ê–°–¢–†–û–ô–ö–ê–ú–ò –°–ö–†–ò–ù–ù–ï–†–ê ========

    private void loadAvailableSettings() {
        try {
            List<StablePairsScreenerSettings> allSettings = settingsService.getAllSettings();
            savedSettingsCombo.setItems(allSettings);

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            allSettings.stream()
                    .filter(StablePairsScreenerSettings::isDefault)
                    .findFirst()
                    .ifPresent(defaultSettings -> {
                        savedSettingsCombo.setValue(defaultSettings);
                        loadSettingsIntoUI(defaultSettings);
                    });

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫: {}", e.getMessage(), e);
            Notification.show("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫", 3000, Notification.Position.TOP_CENTER)
                    .addThemeVariants(NotificationVariant.LUMO_ERROR);
        }
    }

    private void loadSettingsIntoUI(StablePairsScreenerSettings settings) {
        try {
            log.debug("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ UI: {}", settings.getName());

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –∏ –ø–µ—Ä–∏–æ–¥—ã
            timeframeMultiSelect.setValue(settings.getSelectedTimeframesSet());
            periodMultiSelect.setValue(settings.getSelectedPeriodsSet());

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            minCorrelationEnabled.setValue(settings.isMinCorrelationEnabled());
            minCorrelationField.setValue(settings.getMinCorrelationValue());
            minCorrelationField.setEnabled(settings.isMinCorrelationEnabled());

            minWindowSizeEnabled.setValue(settings.isMinWindowSizeEnabled());
            minWindowSizeField.setValue(settings.getMinWindowSizeValue());
            minWindowSizeField.setEnabled(settings.isMinWindowSizeEnabled());

            maxAdfValueEnabled.setValue(settings.isMaxAdfValueEnabled());
            maxAdfValueField.setValue(settings.getMaxAdfValue());
            maxAdfValueField.setEnabled(settings.isMaxAdfValueEnabled());

            minRSquaredEnabled.setValue(settings.isMinRSquaredEnabled());
            minRSquaredField.setValue(settings.getMinRSquaredValue());
            minRSquaredField.setEnabled(settings.isMinRSquaredEnabled());

            maxPValueEnabled.setValue(settings.isMaxPValueEnabled());
            maxPValueField.setValue(settings.getMaxPValue());
            maxPValueField.setEnabled(settings.isMaxPValueEnabled());

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –æ–±—ä–µ–º—É
            minVolumeEnabled.setValue(settings.isMinVolumeEnabled());
            minVolumeField.setValue(settings.getMinVolumeValue());
            minVolumeField.setEnabled(settings.isMinVolumeEnabled());

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–∏–∫–µ—Ä–∞–º
            searchTickersEnabled.setValue(settings.isSearchTickersEnabled());
            if (settings.getSearchTickers() != null && !settings.getSearchTickers().trim().isEmpty()) {
                searchTickersField.setValue(settings.getSearchTickers());
            } else {
                searchTickersField.clear();
            }
            searchTickersField.setEnabled(settings.isSearchTickersEnabled());

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            runOnScheduleCheckbox.setValue(settings.isRunOnSchedule());
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—ç—à–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω–æ)
            useCacheCheckbox.setValue(settings.getUseCache() != null ? settings.getUseCache() : true);

            log.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ '{}' –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ UI", settings.getName());

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ UI: {}", e.getMessage(), e);
            Notification.show("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: " + e.getMessage(),
                            3000, Notification.Position.TOP_CENTER)
                    .addThemeVariants(NotificationVariant.LUMO_ERROR);
        }
    }

    private void saveCurrentSettings() {
        try {
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            com.vaadin.flow.component.textfield.TextField nameField = new com.vaadin.flow.component.textfield.TextField("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫");
            nameField.setValue("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ " + java.time.LocalDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm")));
            nameField.setWidth("300px");

            com.vaadin.flow.component.orderedlayout.VerticalLayout dialogContent = new com.vaadin.flow.component.orderedlayout.VerticalLayout(nameField);

            com.vaadin.flow.component.confirmdialog.ConfirmDialog dialog = new com.vaadin.flow.component.confirmdialog.ConfirmDialog();
            dialog.setHeader("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫");
            dialog.add(dialogContent);
            dialog.setConfirmText("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å");
            dialog.setCancelText("–û—Ç–º–µ–Ω–∞");
            dialog.addConfirmListener(event -> {
                try {
                    String settingsName = nameField.getValue();
                    if (settingsName == null || settingsName.trim().isEmpty()) {
                        Notification.show("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", 3000, Notification.Position.TOP_CENTER)
                                .addThemeVariants(NotificationVariant.LUMO_ERROR);
                        return;
                    }

                    // –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è UI
                    StablePairsScreenerSettings settings = settingsService.createFromUIParams(
                            settingsName.trim(),
                            timeframeMultiSelect.getValue(),
                            periodMultiSelect.getValue(),
                            minCorrelationEnabled.getValue(), minCorrelationField.getValue(),
                            minWindowSizeEnabled.getValue(), minWindowSizeField.getValue(),
                            maxAdfValueEnabled.getValue(), maxAdfValueField.getValue(),
                            minRSquaredEnabled.getValue(), minRSquaredField.getValue(),
                            maxPValueEnabled.getValue(), maxPValueField.getValue(),
                            minVolumeEnabled.getValue(), minVolumeField.getValue(),
                            searchTickersEnabled.getValue(), getSearchTickersSet(),
                            runOnScheduleCheckbox.getValue(),
                            useCacheCheckbox.getValue()
                    );

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º
                    StablePairsScreenerSettings saved = settingsService.saveSettings(settings);

                    Notification.show(
                                    String.format("üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ '%s' —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", saved.getName()),
                                    3000, Notification.Position.BOTTOM_CENTER)
                            .addThemeVariants(NotificationVariant.LUMO_SUCCESS);

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
                    loadAvailableSettings();
                    savedSettingsCombo.setValue(saved);

                } catch (Exception e) {
                    log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {}", e.getMessage(), e);
                    Notification.show("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: " + e.getMessage(),
                                    3000, Notification.Position.TOP_CENTER)
                            .addThemeVariants(NotificationVariant.LUMO_ERROR);
                }
            });

            dialog.open();

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {}", e.getMessage(), e);
            Notification.show("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage(), 3000, Notification.Position.TOP_CENTER)
                    .addThemeVariants(NotificationVariant.LUMO_ERROR);
        }
    }

    private void loadSelectedSettings() {
        try {
            StablePairsScreenerSettings selected = savedSettingsCombo.getValue();
            if (selected == null) {
                Notification.show("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏", 3000, Notification.Position.TOP_CENTER)
                        .addThemeVariants(NotificationVariant.LUMO_ERROR);
                return;
            }

            loadSettingsIntoUI(selected);

            // –û—Ç–º–µ—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ
            settingsService.markAsUsed(selected.getId());

            Notification.show(
                            String.format("üìÅ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ '%s' –∑–∞–≥—Ä—É–∂–µ–Ω—ã", selected.getName()),
                            3000, Notification.Position.BOTTOM_CENTER)
                    .addThemeVariants(NotificationVariant.LUMO_SUCCESS);

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫: {}", e.getMessage(), e);
            Notification.show("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: " + e.getMessage(),
                            3000, Notification.Position.TOP_CENTER)
                    .addThemeVariants(NotificationVariant.LUMO_ERROR);
        }
    }
}