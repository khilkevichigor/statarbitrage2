package com.example.core.ui.views;

import com.example.core.experemental.stability.dto.StabilityResponseDto;
import com.example.core.services.StablePairService;
import com.example.core.ui.components.ZScoreChartDialog;
import com.example.core.ui.layout.MainLayout;
import com.example.shared.models.StablePair;
import com.example.shared.utils.TimeFormatterUtil;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.button.ButtonVariant;
import com.vaadin.flow.component.checkbox.Checkbox;
import com.vaadin.flow.component.combobox.ComboBox;
import com.vaadin.flow.component.confirmdialog.ConfirmDialog;
import com.vaadin.flow.component.grid.Grid;
import com.vaadin.flow.component.html.H2;
import com.vaadin.flow.component.html.H3;
import com.vaadin.flow.component.html.Span;
import com.vaadin.flow.component.icon.VaadinIcon;
import com.vaadin.flow.component.notification.Notification;
import com.vaadin.flow.component.notification.NotificationVariant;
import com.vaadin.flow.component.orderedlayout.FlexComponent;
import com.vaadin.flow.component.orderedlayout.HorizontalLayout;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.progressbar.ProgressBar;
import com.vaadin.flow.component.textfield.NumberField;
import com.vaadin.flow.data.renderer.ComponentRenderer;
import com.vaadin.flow.data.renderer.TextRenderer;
import com.vaadin.flow.router.PageTitle;
import com.vaadin.flow.router.Route;
import lombok.extern.slf4j.Slf4j;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * –°–∫—Ä–∏–Ω–Ω–µ—Ä —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –∫–æ–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä
 */
@Slf4j
@PageTitle("–°—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–∞—Ä—ã")
@Route(value = "stable-pairs", layout = MainLayout.class)
public class StablePairsView extends VerticalLayout {

    private final StablePairService stablePairService;
    private final ZScoreChartDialog zScoreChartDialog;

    // –≠–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã –ø–æ–∏—Å–∫–∞
    private ComboBox<String> timeframeComboBox;
    private ComboBox<String> periodComboBox;
    private Checkbox minCorrelationEnabled;
    private NumberField minCorrelationField;
    private Checkbox minWindowSizeEnabled;
    private NumberField minWindowSizeField;
    private Checkbox maxAdfValueEnabled;
    private NumberField maxAdfValueField;
    private Checkbox minRSquaredEnabled;
    private NumberField minRSquaredField;
    private Checkbox maxPValueEnabled;
    private NumberField maxPValueField;

    private Button searchButton;
    private Button clearAllButton;
    private ProgressBar progressBar;

    // –¢–∞–±–ª–∏—Ü—ã
    private Grid<StablePair> foundPairsGrid;
    private Grid<StablePair> monitoringPairsGrid;

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    private Span statsLabel;

    public StablePairsView(StablePairService stablePairService, ZScoreChartDialog zScoreChartDialog) {
        this.stablePairService = stablePairService;
        this.zScoreChartDialog = zScoreChartDialog;

        initializeLayout();
        loadData();
    }

    private void initializeLayout() {
        setSizeFull();
        setSpacing(true);
        setPadding(true);

        add(
                createTitle(),
                createSearchForm(),
                createProgressSection(),
                createFoundPairsSection(),
                createMonitoringSection()
        );
    }

    private H2 createTitle() {
        H2 title = new H2("üîç –°–∫—Ä–∏–Ω–Ω–µ—Ä —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä");
        title.getStyle().set("margin", "0 0 20px 0");
        return title;
    }

    private VerticalLayout createSearchForm() {
        VerticalLayout formLayout = new VerticalLayout();
        formLayout.getStyle()
                .set("border", "1px solid var(--lumo-contrast-20pct)")
                .set("border-radius", "var(--lumo-border-radius)")
                .set("padding", "20px")
                .set("background", "var(--lumo-base-color)");

        H3 formTitle = new H3("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞");
        formTitle.getStyle().set("margin-top", "0");

        // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –¢–∞–π–º—Ñ—Ä–µ–π–º –∏ –ü–µ—Ä–∏–æ–¥
        HorizontalLayout row1 = new HorizontalLayout();
        row1.setAlignItems(FlexComponent.Alignment.END);
        row1.setWidthFull();

        timeframeComboBox = new ComboBox<>("–¢–∞–π–º—Ñ—Ä–µ–π–º");
        timeframeComboBox.setItems("1m", "5m", "15m", "1H", "4H", "1D", "1W", "1M");
        timeframeComboBox.setValue("1D");
        timeframeComboBox.setWidth("150px");

        periodComboBox = new ComboBox<>("–ü–µ—Ä–∏–æ–¥");
        periodComboBox.setItems("–¥–µ–Ω—å", "–Ω–µ–¥–µ–ª—è", "–º–µ—Å—è—Ü", "1 –≥–æ–¥", "2 –≥–æ–¥–∞", "3 –≥–æ–¥–∞");
        periodComboBox.setValue("–º–µ—Å—è—Ü");
        periodComboBox.setWidth("150px");

        row1.add(timeframeComboBox, periodComboBox);

        // –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        HorizontalLayout row2 = createFilterRow1();
        HorizontalLayout row3 = createFilterRow2();

        // –ö–Ω–æ–ø–∫–∏
        HorizontalLayout buttonRow = new HorizontalLayout();
        buttonRow.setAlignItems(FlexComponent.Alignment.CENTER);

        searchButton = new Button("–ò—Å–∫–∞—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–∞—Ä—ã", VaadinIcon.SEARCH.create());
        searchButton.addThemeVariants(ButtonVariant.LUMO_PRIMARY);

        //todo —Å–¥–µ–ª–∞—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–µ—Ä–µ–∑ –∫—Ä–æ–ª–∏–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–≤–µ–Ω—Ç –≤ cointegration, –æ–Ω —Å—á–∏—Ç–∞–µ—Ç –∏ –∫–∏–¥–∞–µ—Ç —Å–≤–æ–π —ç–≤–µ–Ω—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏–ª–∏ –ø–∏—à–µ—Ç –≤ –±–¥ –∏ –∫–∏–¥–∞–µ—Ç —ç–≤–µ–Ω—Ç —á—Ç–æ –±—ã –º—ã –∑–∞–±—Ä–∞–ª–∏ —Å –±–¥
        searchButton.addClickListener(e -> performSearch());

        clearAllButton = new Button("–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", VaadinIcon.TRASH.create());
        clearAllButton.addThemeVariants(ButtonVariant.LUMO_ERROR, ButtonVariant.LUMO_CONTRAST);
        clearAllButton.addClickListener(e -> clearAllResults());

        buttonRow.add(searchButton, clearAllButton);

        formLayout.add(formTitle, row1, row2, row3, buttonRow);
        return formLayout;
    }

    private HorizontalLayout createFilterRow1() {
        HorizontalLayout row = new HorizontalLayout();
        row.setAlignItems(FlexComponent.Alignment.END);
        row.setWidthFull();

        minCorrelationEnabled = new Checkbox("Min Correlation");
        minCorrelationEnabled.setValue(true);
        minCorrelationField = new NumberField();
        minCorrelationField.setValue(0.1);
        minCorrelationField.setWidth("120px");
        minCorrelationField.setEnabled(minCorrelationEnabled.getValue());
        minCorrelationEnabled.addValueChangeListener(e -> minCorrelationField.setEnabled(e.getValue()));

        minWindowSizeEnabled = new Checkbox("Min Window Size");
        minWindowSizeEnabled.setValue(true);
        minWindowSizeField = new NumberField();
        minWindowSizeField.setValue(100.0);
        minWindowSizeField.setWidth("120px");
        minWindowSizeField.setEnabled(minWindowSizeEnabled.getValue());
        minWindowSizeEnabled.addValueChangeListener(e -> minWindowSizeField.setEnabled(e.getValue()));

        maxAdfValueEnabled = new Checkbox("Max ADF Value");
        maxAdfValueEnabled.setValue(true);
        maxAdfValueField = new NumberField();
        maxAdfValueField.setValue(0.1);
        maxAdfValueField.setWidth("120px");
        maxAdfValueField.setEnabled(maxAdfValueEnabled.getValue());
        maxAdfValueEnabled.addValueChangeListener(e ->
                maxAdfValueField.setEnabled(e.getValue()));

        HorizontalLayout corrGroup = new HorizontalLayout(minCorrelationEnabled, minCorrelationField);
        corrGroup.setSpacing(false);
        corrGroup.setAlignItems(FlexComponent.Alignment.END);

        HorizontalLayout windowGroup = new HorizontalLayout(minWindowSizeEnabled, minWindowSizeField);
        windowGroup.setSpacing(false);
        windowGroup.setAlignItems(FlexComponent.Alignment.END);

        HorizontalLayout adfGroup = new HorizontalLayout(maxAdfValueEnabled, maxAdfValueField);
        adfGroup.setSpacing(false);
        adfGroup.setAlignItems(FlexComponent.Alignment.END);

        row.add(corrGroup, windowGroup, adfGroup);
        return row;
    }

    private HorizontalLayout createFilterRow2() {
        HorizontalLayout row = new HorizontalLayout();
        row.setAlignItems(FlexComponent.Alignment.END);
        row.setWidthFull();

        minRSquaredEnabled = new Checkbox("Min R2");
        minRSquaredEnabled.setValue(true);
        minRSquaredField = new NumberField();
        minRSquaredField.setValue(0.1);
        minRSquaredField.setWidth("120px");
        minRSquaredField.setEnabled(minRSquaredEnabled.getValue());
        minRSquaredEnabled.addValueChangeListener(e -> minRSquaredField.setEnabled(e.getValue()));

        maxPValueEnabled = new Checkbox("Max P-Value");
        maxPValueEnabled.setValue(true);
        maxPValueField = new NumberField();
        maxPValueField.setValue(0.1);
        maxPValueField.setWidth("120px");
        maxPValueField.setEnabled(maxPValueEnabled.getValue());
        maxPValueEnabled.addValueChangeListener(e -> maxPValueField.setEnabled(e.getValue()));

        HorizontalLayout rSquaredGroup = new HorizontalLayout(minRSquaredEnabled, minRSquaredField);
        rSquaredGroup.setSpacing(false);
        rSquaredGroup.setAlignItems(FlexComponent.Alignment.END);

        HorizontalLayout pValueGroup = new HorizontalLayout(maxPValueEnabled, maxPValueField);
        pValueGroup.setSpacing(false);
        pValueGroup.setAlignItems(FlexComponent.Alignment.END);

        row.add(rSquaredGroup, pValueGroup);
        return row;
    }

    private VerticalLayout createProgressSection() {
        VerticalLayout section = new VerticalLayout();
        section.setPadding(false);
        section.setSpacing(false);

        progressBar = new ProgressBar();
        progressBar.setIndeterminate(true);
        progressBar.setVisible(false);
        progressBar.setWidthFull();

        statsLabel = new Span();
        statsLabel.getStyle().set("font-size", "var(--lumo-font-size-s)");

        section.add(progressBar, statsLabel);
        return section;
    }

    private VerticalLayout createFoundPairsSection() {
        VerticalLayout section = new VerticalLayout();
        section.getStyle()
                .set("border", "1px solid var(--lumo-contrast-20pct)")
                .set("border-radius", "var(--lumo-border-radius)")
                .set("padding", "15px");

        H3 title = new H3("üìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–∞—Ä—ã");
        title.getStyle().set("margin", "0 0 15px 0");

        foundPairsGrid = createFoundPairsGrid();

        section.add(title, foundPairsGrid);
        return section;
    }

    private VerticalLayout createMonitoringSection() {
        VerticalLayout section = new VerticalLayout();
        section.getStyle()
                .set("border", "1px solid var(--lumo-contrast-20pct)")
                .set("border-radius", "var(--lumo-border-radius)")
                .set("padding", "15px");

        H3 title = new H3("üëÅÔ∏è –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞");
        title.getStyle().set("margin", "0 0 15px 0");

        monitoringPairsGrid = createMonitoringPairsGrid();

        section.add(title, monitoringPairsGrid);
        return section;
    }

    private Grid<StablePair> createFoundPairsGrid() {
        Grid<StablePair> grid = new Grid<>(StablePair.class, false);
        grid.setHeight("300px");
        grid.addThemeVariants(com.vaadin.flow.component.grid.GridVariant.LUMO_ROW_STRIPES);

        // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        grid.addColumn(StablePair::getPairName).setHeader("–ü–∞—Ä–∞").setSortable(true).setAutoWidth(true).setFlexGrow(0);
        grid.addColumn(new TextRenderer<>(pair -> pair.getTotalScore() != null ? pair.getTotalScore().toString() : "-")).setHeader("–°–∫–æ—Ä").setSortable(true).setAutoWidth(true).setFlexGrow(0);
        grid.addColumn(StablePair::getStabilityRating).setHeader("–†–µ–π—Ç–∏–Ω–≥").setSortable(true).setAutoWidth(true).setFlexGrow(0);
        grid.addColumn(new TextRenderer<>(pair -> pair.getIsTradeable() != null && pair.getIsTradeable() ? "–î–∞" : "–ù–µ—Ç")).setHeader("–¢–æ—Ä–≥—É–µ–º–∞—è").setSortable(true).setAutoWidth(true).setFlexGrow(0);
        grid.addColumn(new TextRenderer<>(pair -> pair.getDataPoints() != null ? pair.getDataPoints().toString() : "-")).setHeader("–¢–æ—á–∫–∏").setSortable(true).setAutoWidth(true).setFlexGrow(0);
        grid.addColumn(new TextRenderer<>(pair -> pair.getCandleCount() != null ? pair.getCandleCount().toString() : "-")).setHeader("–°–≤–µ—á–µ–π").setSortable(true).setAutoWidth(true).setFlexGrow(0);
        grid.addColumn(StablePair::getTimeframe).setHeader("–¢–§").setSortable(true).setAutoWidth(true).setFlexGrow(0);
        grid.addColumn(StablePair::getPeriod).setHeader("–ü–µ—Ä–∏–æ–¥").setSortable(true).setAutoWidth(true).setFlexGrow(0);
        grid.addColumn(new TextRenderer<>(pair -> pair.getSearchDate() != null ? TimeFormatterUtil.formatDateTime(pair.getSearchDate()) : "-")).setHeader("–î–∞—Ç–∞ –ø–æ–∏—Å–∫–∞").setSortable(true).setAutoWidth(true).setFlexGrow(0);
        // –ö–æ–ª–æ–Ω–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
        grid.addColumn(new ComponentRenderer<>(this::createFoundPairActions)).setHeader("–î–µ–π—Å—Ç–≤–∏—è").setSortable(true).setAutoWidth(true).setFlexGrow(0);

        return grid;
    }

    private Grid<StablePair> createMonitoringPairsGrid() {
        Grid<StablePair> grid = new Grid<>(StablePair.class, false);
        grid.setHeight("200px");
        grid.addThemeVariants(com.vaadin.flow.component.grid.GridVariant.LUMO_ROW_STRIPES);

        // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        grid.addColumn(StablePair::getPairName).setHeader("–ü–∞—Ä–∞").setSortable(true).setAutoWidth(true).setFlexGrow(0);
        grid.addColumn(new TextRenderer<>(pair -> pair.getTotalScore() != null ? pair.getTotalScore().toString() : "-")).setHeader("–°–∫–æ—Ä").setSortable(true).setAutoWidth(true).setFlexGrow(0);
        grid.addColumn(StablePair::getStabilityRating).setHeader("–†–µ–π—Ç–∏–Ω–≥").setSortable(true).setAutoWidth(true).setFlexGrow(0);
        grid.addColumn(new TextRenderer<>(pair -> pair.getCandleCount() != null ? pair.getCandleCount().toString() : "-")).setHeader("–°–≤–µ—á–µ–π").setSortable(true).setAutoWidth(true).setFlexGrow(0);
        grid.addColumn(StablePair::getTimeframe).setHeader("–¢–§").setSortable(true).setAutoWidth(true).setFlexGrow(0);
        grid.addColumn(StablePair::getPeriod).setHeader("–ü–µ—Ä–∏–æ–¥").setSortable(true).setAutoWidth(true).setFlexGrow(0);
        grid.addColumn(new TextRenderer<>(pair -> pair.getCreatedAt() != null ? TimeFormatterUtil.formatDateTime(pair.getCreatedAt()) : "-")).setHeader("–î–æ–±–∞–≤–ª–µ–Ω–∞").setAutoWidth(true).setFlexGrow(0);
        // –ö–æ–ª–æ–Ω–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
        grid.addColumn(new ComponentRenderer<>(this::createMonitoringPairActions)).setHeader("–î–µ–π—Å—Ç–≤–∏—è").setSortable(true).setAutoWidth(true).setFlexGrow(0);

        return grid;
    }

    private HorizontalLayout createFoundPairActions(StablePair pair) {
        HorizontalLayout actions = new HorizontalLayout();
        actions.setSpacing(true);

        Button addButton = new Button("–î–æ–±–∞–≤–∏—Ç—å", VaadinIcon.PLUS.create());
        addButton.addThemeVariants(ButtonVariant.LUMO_SUCCESS, ButtonVariant.LUMO_SMALL);
        addButton.addClickListener(e -> addToMonitoring(pair));

        Button chartButton = new Button(VaadinIcon.LINE_CHART.create());
        chartButton.addThemeVariants(ButtonVariant.LUMO_TERTIARY, ButtonVariant.LUMO_SMALL);
        chartButton.getElement().setAttribute("title", "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å Z-Score –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫");
        chartButton.addClickListener(e -> calculateZScore(pair));

        Button deleteButton = new Button(VaadinIcon.TRASH.create());
        deleteButton.addThemeVariants(ButtonVariant.LUMO_ERROR, ButtonVariant.LUMO_TERTIARY, ButtonVariant.LUMO_SMALL);
        deleteButton.getElement().setAttribute("title", "–£–¥–∞–ª–∏—Ç—å");
        deleteButton.addClickListener(e -> deleteFoundPair(pair));

        actions.add(addButton, chartButton, deleteButton);
        return actions;
    }

    private HorizontalLayout createMonitoringPairActions(StablePair pair) {
        HorizontalLayout actions = new HorizontalLayout();
        actions.setSpacing(true);

        Button chartButton = new Button(VaadinIcon.LINE_CHART.create());
        chartButton.addThemeVariants(ButtonVariant.LUMO_TERTIARY, ButtonVariant.LUMO_SMALL);
        chartButton.getElement().setAttribute("title", "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å Z-Score –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫");
        chartButton.addClickListener(e -> calculateZScore(pair));

        Button removeButton = new Button(VaadinIcon.MINUS.create());
        removeButton.addThemeVariants(ButtonVariant.LUMO_ERROR, ButtonVariant.LUMO_SMALL);
        removeButton.getElement().setAttribute("title", "–£–¥–∞–ª–∏—Ç—å –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞");
        removeButton.addClickListener(e -> removeFromMonitoring(pair));

        actions.add(chartButton, removeButton);
        return actions;
    }

    private void performSearch() {
        searchButton.setEnabled(false);
        progressBar.setVisible(true);

        try {
            String timeframe = timeframeComboBox.getValue();
            String period = periodComboBox.getValue();
            Map<String, Object> searchSettings = buildSearchSettings();

            log.info("üîç –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä: TF={}, Period={}", timeframe, period);

            // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
            getUI().ifPresent(ui -> {
                Thread searchThread = new Thread(() -> {
                    try {
                        StabilityResponseDto response = stablePairService.searchStablePairs(
                                timeframe, period, searchSettings);

                        ui.access(() -> {
                            progressBar.setVisible(false);
                            searchButton.setEnabled(true);

                            if (response.getSuccess()) {
                                Notification.show(
                                                String.format("‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞–π–¥–µ–Ω–æ %d —Ç–æ—Ä–≥—É–µ–º—ã—Ö –ø–∞—Ä –∏–∑ %d –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö",
                                                        response.getTradeablePairsFound(),
                                                        response.getTotalPairsAnalyzed()),
                                                5000, Notification.Position.TOP_CENTER)
                                        .addThemeVariants(NotificationVariant.LUMO_SUCCESS);
                                loadFoundPairs();
                                updateStatistics();
                            } else {
                                Notification.show("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–∞—Ä", 3000, Notification.Position.TOP_CENTER)
                                        .addThemeVariants(NotificationVariant.LUMO_ERROR);
                            }
                        });

                    } catch (Exception e) {
                        log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–∞—Ä: {}", e.getMessage(), e);
                        ui.access(() -> {
                            progressBar.setVisible(false);
                            searchButton.setEnabled(true);
                            Notification.show("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage(), 5000, Notification.Position.TOP_CENTER)
                                    .addThemeVariants(NotificationVariant.LUMO_ERROR);
                        });
                    }
                });
                searchThread.start();
            });

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞: {}", e.getMessage(), e);
            progressBar.setVisible(false);
            searchButton.setEnabled(true);
            Notification.show("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage(), 3000, Notification.Position.TOP_CENTER)
                    .addThemeVariants(NotificationVariant.LUMO_ERROR);
        }
    }

    private Map<String, Object> buildSearchSettings() {
        Map<String, Object> settings = new HashMap<>();

        if (minCorrelationEnabled.getValue() && minCorrelationField.getValue() != null) {
            settings.put("minCorrelation", minCorrelationField.getValue());
        }
        if (minWindowSizeEnabled.getValue() && minWindowSizeField.getValue() != null) {
            settings.put("minWindowSize", minWindowSizeField.getValue().intValue());
        }
        if (maxAdfValueEnabled.getValue() && maxAdfValueField.getValue() != null) {
            settings.put("maxAdfValue", maxAdfValueField.getValue());
        }
        if (minRSquaredEnabled.getValue() && minRSquaredField.getValue() != null) {
            settings.put("minRSquared", minRSquaredField.getValue());
        }
        if (maxPValueEnabled.getValue() && maxPValueField.getValue() != null) {
            settings.put("maxPValue", maxPValueField.getValue());
        }

        return settings;
    }

    private void clearAllResults() {
        ConfirmDialog dialog = new ConfirmDialog(
                "–û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
                "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ä—ã? " +
                        "–ü–∞—Ä—ã –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –ù–ï –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.",
                "–û—á–∏—Å—Ç–∏—Ç—å", event -> {
            try {
                int deletedCount = stablePairService.clearAllFoundPairs();
                Notification.show(
                                String.format("üßπ –£–¥–∞–ª–µ–Ω–æ %d –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ä", deletedCount),
                                3000, Notification.Position.TOP_CENTER)
                        .addThemeVariants(NotificationVariant.LUMO_SUCCESS);
                loadFoundPairs();
                updateStatistics();
            } catch (Exception e) {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–∞—Ä: {}", e.getMessage(), e);
                Notification.show("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: " + e.getMessage(),
                                3000, Notification.Position.TOP_CENTER)
                        .addThemeVariants(NotificationVariant.LUMO_ERROR);
            }
        },
                "–û—Ç–º–µ–Ω–∞", event -> {
        });
        dialog.open();
    }

    private void addToMonitoring(StablePair pair) {
        try {
            stablePairService.addToMonitoring(pair.getId());
            Notification.show(
                            String.format("‚ûï –ü–∞—Ä–∞ %s –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", pair.getPairName()),
                            3000, Notification.Position.BOTTOM_CENTER)
                    .addThemeVariants(NotificationVariant.LUMO_SUCCESS);
            loadData(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±–µ —Ç–∞–±–ª–∏—Ü—ã
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {}", e.getMessage(), e);
            Notification.show("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage(), 3000, Notification.Position.TOP_CENTER)
                    .addThemeVariants(NotificationVariant.LUMO_ERROR);
        }
    }

    private void removeFromMonitoring(StablePair pair) {
        try {
            stablePairService.removeFromMonitoring(pair.getId());
            Notification.show(
                            String.format("‚ûñ –ü–∞—Ä–∞ %s —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", pair.getPairName()),
                            3000, Notification.Position.BOTTOM_CENTER)
                    .addThemeVariants(NotificationVariant.LUMO_SUCCESS);
            loadData(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±–µ —Ç–∞–±–ª–∏—Ü—ã
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {}", e.getMessage(), e);
            Notification.show("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage(), 3000, Notification.Position.TOP_CENTER)
                    .addThemeVariants(NotificationVariant.LUMO_ERROR);
        }
    }

    private void deleteFoundPair(StablePair pair) {
        ConfirmDialog dialog = new ConfirmDialog(
                "–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä—ã",
                String.format("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–∞—Ä—É %s?", pair.getPairName()),
                "–£–¥–∞–ª–∏—Ç—å", event -> {
            try {
                stablePairService.deleteFoundPair(pair.getId());
                Notification.show(
                                String.format("üóëÔ∏è –ü–∞—Ä–∞ %s —É–¥–∞–ª–µ–Ω–∞", pair.getPairName()),
                                3000, Notification.Position.BOTTOM_CENTER)
                        .addThemeVariants(NotificationVariant.LUMO_SUCCESS);
                loadFoundPairs();
                updateStatistics();
            } catch (Exception e) {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞—Ä—ã: {}", e.getMessage(), e);
                Notification.show("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage(),
                                3000, Notification.Position.TOP_CENTER)
                        .addThemeVariants(NotificationVariant.LUMO_ERROR);
            }
        },
                "–û—Ç–º–µ–Ω–∞", event -> {
        });
        dialog.open();
    }

    private void calculateZScore(StablePair pair) {
        try {
            log.info("üßÆ –†–∞—Å—á–µ—Ç Z-Score –¥–ª—è –ø–∞—Ä—ã {}", pair.getPairName());
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
            getUI().ifPresent(ui -> {
                Thread calculateThread = new Thread(() -> {
                    try {
                        com.example.shared.models.TradingPair calculatedTradingPair = 
                                stablePairService.calculateZScoreForStablePair(pair);

                        ui.access(() -> {
                            if (calculatedTradingPair != null) {
                                Notification.show(
                                                String.format("‚úÖ Z-Score —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –¥–ª—è –ø–∞—Ä—ã %s! –ü–æ–∫–∞–∑—ã–≤–∞—é –≥—Ä–∞—Ñ–∏–∫...", 
                                                        pair.getPairName()),
                                                3000, Notification.Position.BOTTOM_CENTER)
                                        .addThemeVariants(NotificationVariant.LUMO_SUCCESS);
                                
                                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                                zScoreChartDialog.showChart(calculatedTradingPair);
                            } else {
                                Notification.show(
                                                String.format("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å Z-Score –¥–ª—è –ø–∞—Ä—ã %s", 
                                                        pair.getPairName()),
                                                3000, Notification.Position.TOP_CENTER)
                                        .addThemeVariants(NotificationVariant.LUMO_ERROR);
                            }
                        });

                    } catch (Exception e) {
                        log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ Z-Score –¥–ª—è –ø–∞—Ä—ã {}: {}", pair.getPairName(), e.getMessage(), e);
                        ui.access(() -> {
                            Notification.show("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: " + e.getMessage(), 
                                            5000, Notification.Position.TOP_CENTER)
                                    .addThemeVariants(NotificationVariant.LUMO_ERROR);
                        });
                    }
                });
                calculateThread.start();
            });

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ —Ä–∞—Å—á–µ—Ç–∞ Z-Score –¥–ª—è –ø–∞—Ä—ã {}: {}", pair.getPairName(), e.getMessage(), e);
            Notification.show("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage(), 3000, Notification.Position.TOP_CENTER)
                    .addThemeVariants(NotificationVariant.LUMO_ERROR);
        }
    }


    private void loadData() {
        loadFoundPairs();
        loadMonitoringPairs();
        updateStatistics();
    }

    private void loadFoundPairs() {
        try {
            List<StablePair> pairs = stablePairService.getAllFoundPairs();
            foundPairsGrid.setItems(pairs);
            log.debug("–ó–∞–≥—Ä—É–∂–µ–Ω–æ {} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ä", pairs.size());
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ä: {}", e.getMessage(), e);
            Notification.show("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö", 3000, Notification.Position.TOP_CENTER)
                    .addThemeVariants(NotificationVariant.LUMO_ERROR);
        }
    }

    private void loadMonitoringPairs() {
        try {
            List<StablePair> pairs = stablePairService.getMonitoringPairs();
            monitoringPairsGrid.setItems(pairs);
            log.debug("–ó–∞–≥—Ä—É–∂–µ–Ω–æ {} –ø–∞—Ä –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ", pairs.size());
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {}", e.getMessage(), e);
            Notification.show("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", 3000, Notification.Position.TOP_CENTER)
                    .addThemeVariants(NotificationVariant.LUMO_ERROR);
        }
    }

    private void updateStatistics() {
        try {
            Map<String, Object> stats = stablePairService.getSearchStatistics();
            int totalFound = ((Number) stats.get("totalFound")).intValue();
            int totalInMonitoring = ((Number) stats.get("totalInMonitoring")).intValue();

            statsLabel.setText(String.format(
                    "üìä –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ä: %d | –í –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: %d",
                    totalFound, totalInMonitoring));
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {}", e.getMessage(), e);
            statsLabel.setText("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
        }
    }
}