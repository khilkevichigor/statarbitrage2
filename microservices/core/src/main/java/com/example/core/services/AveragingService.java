package com.example.core.services;

import com.example.core.repositories.TradingPairRepository;
import com.example.core.trading.services.TradingIntegrationService;
import com.example.core.trading.services.TradingProviderFactory;
import com.example.shared.dto.ArbitragePairTradeInfo;
import com.example.shared.enums.TradeStatus;
import com.example.shared.models.Settings;
import com.example.shared.models.TradingPair;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –≤ –ø–∞—Ä–Ω–æ–º —Ç—Ä–µ–π–¥–∏–Ω–≥–µ
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class AveragingService {

    private final TradingIntegrationService tradingIntegrationService;
    private final TradingProviderFactory tradingProviderFactory;
    private final TradingPairRepository tradingPairRepository;

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä—É—á–Ω–æ–µ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞—Ä—ã
     *
     * @param tradingPair —Ç–æ—Ä–≥—É–µ–º–∞—è –ø–∞—Ä–∞
     * @param settings    –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
     * @return —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
     */
    @Transactional
    public AveragingResult performManualAveraging(TradingPair tradingPair, Settings settings) {
        log.info("");
        log.info("üîÑ –ù–∞—á–∞–ª–æ —Ä—É—á–Ω–æ–≥–æ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä—ã: {}", tradingPair.getPairName());

        return executeAveraging(tradingPair, settings, "MANUAL");
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞ –ø—Ä–æ—Å–∞–¥–∫–∏
     *
     * @param tradingPair —Ç–æ—Ä–≥—É–µ–º–∞—è –ø–∞—Ä–∞
     * @param settings    –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
     * @return —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
     */
    @Transactional
    public AveragingResult performAutoAveraging(TradingPair tradingPair, Settings settings) {
        log.info("ü§ñ –ù–∞—á–∞–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä—ã: {}", tradingPair.getPairName());

        return executeAveraging(tradingPair, settings, "AUTO");
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä—ã
     *
     * @param tradingPair —Ç–æ—Ä–≥—É–µ–º–∞—è –ø–∞—Ä–∞
     * @param settings    –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
     * @return true, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —É—Å—Ä–µ–¥–Ω–∏—Ç—å
     */
    public boolean shouldPerformAutoAveraging(TradingPair tradingPair, Settings settings) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–æ –ª–∏ –∞–≤—Ç–æ—É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ
        if (!settings.isAutoAveragingEnabled()) {
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–∞ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Ç—Ä–µ–π–¥–µ
        if (!isActiveTrade(tradingPair)) {
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–π
        if (tradingPair.getAveragingCount() >= settings.getMaxAveragingCount()) {
            log.info("üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–π –¥–ª—è –ø–∞—Ä—ã {}: {} >= {}",
                    tradingPair.getPairName(), tradingPair.getAveragingCount(), settings.getMaxAveragingCount());
            return false;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏—Ç –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        BigDecimal currentProfitPercent = tradingPair.getProfitPercentChanges();
        if (currentProfitPercent == null) {
            return false;
        }

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥ –ø—Ä–æ—Å–∞–¥–∫–∏
        double threshold = calculateAveragingThreshold(tradingPair.getAveragingCount(), settings);
        double currentProfitDouble = currentProfitPercent.doubleValue();

        boolean shouldAverage = currentProfitDouble <= threshold;

        if (shouldAverage) {
            log.info("üìâ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ—Å–∞–¥–∫–∞ –¥–ª—è –ø–∞—Ä—ã {}: {}% <= {}%. –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ #{}/{}.",
                    tradingPair.getPairName(), currentProfitDouble, threshold,
                    tradingPair.getAveragingCount() + 1, settings.getMaxAveragingCount());
        }

        return shouldAverage;
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
     */
    private AveragingResult executeAveraging(TradingPair tradingPair, Settings settings, String trigger) {
        try {
            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º –æ–±—ä–µ–º–æ–º
            Settings averagingSettings = createAveragingSettings(settings, tradingPair.getAveragingCount());

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏—Ç –ø–µ—Ä–µ–¥ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ–º –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            tradingPair.setLastAveragingProfitPercent(tradingPair.getProfitPercentChanges());

            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
            ArbitragePairTradeInfo tradeResult = tradingIntegrationService.openArbitragePair(tradingPair, averagingSettings);

            if (tradeResult == null || !tradeResult.isSuccess()) {
                log.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä—ã: {}", tradingPair.getPairName());
                return AveragingResult.failure("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è");
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–π
            int newAveragingCount = tradingPair.getAveragingCount() + 1;
            tradingPair.setAveragingCount(newAveragingCount);
            tradingPair.setLastAveragingTimestamp(System.currentTimeMillis());

            // –ö–æ–ø–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è –≤ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            tradingPair.setSettingsAveragingDrawdownMultiplier(settings.getAveragingDrawdownMultiplier());
            tradingPair.setSettingsMaxAveragingCount(settings.getMaxAveragingCount());

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            tradingPairRepository.save(tradingPair);

            double volumeMultiplier = calculateVolumeMultiplier(newAveragingCount - 1, settings);
            log.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ #{}/{} –¥–ª—è –ø–∞—Ä—ã: {} (—Ç—Ä–∏–≥–≥–µ—Ä: {}, –º–Ω–æ–∂–∏—Ç–µ–ª—å –æ–±—ä–µ–º–∞: x{})",
                    newAveragingCount, settings.getMaxAveragingCount(),
                    tradingPair.getPairName(), trigger, String.format("%.2f", volumeMultiplier));

            return AveragingResult.success(
                    String.format("–í—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ #%d/%d –¥–ª—è –ø–∞—Ä—ã %s",
                            newAveragingCount, settings.getMaxAveragingCount(), tradingPair.getPairName())
            );

        } catch (Exception e) {
            log.error("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä—ã {}: {}",
                    tradingPair.getPairName(), e.getMessage(), e);
            return AveragingResult.failure("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–∏: " + e.getMessage());
        }
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ—Å–∞–¥–∫–∏ –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –º–Ω–æ–∂–∏—Ç–µ–ª—è
     *
     * @param currentAveragingCount —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–π
     * @param settings              –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
     * @return –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ—Å–∞–¥–∫–∏ (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ)
     */
    private double calculateAveragingThreshold(int currentAveragingCount, Settings settings) {
        double baseThreshold = settings.getAveragingDrawdownThreshold();
        double multiplier = settings.getAveragingDrawdownMultiplier();

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥
        // –ü–µ—Ä–≤–æ–µ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ: -10%, –≤—Ç–æ—Ä–æ–µ: -15%, —Ç—Ä–µ—Ç—å–µ: -22.5% –ø—Ä–∏ –º–Ω–æ–∂–∏—Ç–µ–ª–µ 1.5
        double threshold = baseThreshold;
        for (int i = 0; i < currentAveragingCount; i++) {
            threshold *= multiplier;
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–ø—Ä–æ—Å–∞–¥–∫–∞)
        return -Math.abs(threshold);
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—å –æ–±—ä–µ–º–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
     *
     * @param currentAveragingCount —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–π
     * @param settings              –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
     * @return –º–Ω–æ–∂–∏—Ç–µ–ª—å –æ–±—ä–µ–º–∞
     */
    private double calculateVolumeMultiplier(int currentAveragingCount, Settings settings) {
        double baseMultiplier = settings.getAveragingVolumeMultiplier();

        // –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –æ–±—ä–µ–º–∞
        // –ü–µ—Ä–≤–æ–µ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ: x1.5, –≤—Ç–æ—Ä–æ–µ: x2.25, —Ç—Ä–µ—Ç—å–µ: x3.375 –ø—Ä–∏ –º–Ω–æ–∂–∏—Ç–µ–ª–µ 1.5
        double volumeMultiplier = 1.0;
        for (int i = 0; i <= currentAveragingCount; i++) {
            volumeMultiplier *= baseMultiplier;
        }

        return volumeMultiplier;
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º –æ–±—ä–µ–º–æ–º
     */
    private Settings createAveragingSettings(Settings originalSettings, int currentAveragingCount) {
        double volumeMultiplier = calculateVolumeMultiplier(currentAveragingCount, originalSettings);
        
        return Settings.builder()
                // –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
                .timeframe(originalSettings.getTimeframe())
                .candleLimit(originalSettings.getCandleLimit())
                .minZ(originalSettings.getMinZ())
                .minWindowSize(originalSettings.getMinWindowSize())
                .maxPValue(originalSettings.getMaxPValue())
                .maxAdfValue(originalSettings.getMaxAdfValue())
                .minRSquared(originalSettings.getMinRSquared())
                .minCorrelation(originalSettings.getMinCorrelation())
                .minVolume(originalSettings.getMinVolume())
                .checkInterval(originalSettings.getCheckInterval())
                
                // –†–∞–∑–º–µ—Ä—ã –ø–æ–∑–∏—Ü–∏–π —Å –º–Ω–æ–∂–∏—Ç–µ–ª–µ–º –æ–±—ä–µ–º–∞
                .maxLongMarginSize(originalSettings.getMaxLongMarginSize() * volumeMultiplier) //–Ω–æ–≤—ã–π –æ–±—ä–µ–º
                .maxShortMarginSize(originalSettings.getMaxShortMarginSize() * volumeMultiplier) //–Ω–æ–≤—ã–π –æ–±—ä–µ–º
                .leverage(originalSettings.getLeverage())
                
                // –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤—ã—Ö–æ–¥–∞
                .exitTake(originalSettings.getExitTake())
                .exitStop(originalSettings.getExitStop())
                .exitZMin(originalSettings.getExitZMin())
                .exitZMax(originalSettings.getExitZMax())
                .exitZMaxPercent(originalSettings.getExitZMaxPercent())
                .exitTimeMinutes(originalSettings.getExitTimeMinutes())
                .exitBreakEvenPercent(originalSettings.getExitBreakEvenPercent())
                .exitNegativeZMinProfitPercent(originalSettings.getExitNegativeZMinProfitPercent())
                
                .usePairs(originalSettings.getUsePairs())
                .autoTradingEnabled(originalSettings.isAutoTradingEnabled())
                
                // –§–ª–∞–≥–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
                .useMinZFilter(originalSettings.isUseMinZFilter())
                .useMinRSquaredFilter(originalSettings.isUseMinRSquaredFilter())
                .useMaxPValueFilter(originalSettings.isUseMaxPValueFilter())
                .useMaxAdfValueFilter(originalSettings.isUseMaxAdfValueFilter())
                .useMinCorrelationFilter(originalSettings.isUseMinCorrelationFilter())
                .useMinVolumeFilter(originalSettings.isUseMinVolumeFilter())
                
                // –§–ª–∞–≥–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –≤—ã—Ö–æ–¥–∞
                .useExitTake(originalSettings.isUseExitTake())
                .useExitStop(originalSettings.isUseExitStop())
                .useExitZMin(originalSettings.isUseExitZMin())
                .useExitZMax(originalSettings.isUseExitZMax())
                .useExitZMaxPercent(originalSettings.isUseExitZMaxPercent())
                .useExitTimeMinutes(originalSettings.isUseExitTimeMinutes())
                .useExitBreakEvenPercent(originalSettings.isUseExitBreakEvenPercent())
                .useExitNegativeZMinProfitPercent(originalSettings.isUseExitNegativeZMinProfitPercent())
                .useCointegrationStabilityFilter(originalSettings.isUseCointegrationStabilityFilter())
                
                // –°–ø–∏—Å–∫–∏
                .minimumLotBlacklist(originalSettings.getMinimumLotBlacklist())
                .observedPairs(originalSettings.getObservedPairs())
                
                // –§–ª–∞–≥–∏ —Å–∫–æ—Ä–∏–Ω–≥–∞
                .useZScoreScoring(originalSettings.isUseZScoreScoring())
                .usePixelSpreadScoring(originalSettings.isUsePixelSpreadScoring())
                .useCointegrationScoring(originalSettings.isUseCointegrationScoring())
                .useModelQualityScoring(originalSettings.isUseModelQualityScoring())
                .useStatisticsScoring(originalSettings.isUseStatisticsScoring())
                .useBonusScoring(originalSettings.isUseBonusScoring())
                
                // –í–µ—Å–∞ —Å–∫–æ—Ä–∏–Ω–≥–∞
                .zScoreScoringWeight(originalSettings.getZScoreScoringWeight())
                .pixelSpreadScoringWeight(originalSettings.getPixelSpreadScoringWeight())
                .cointegrationScoringWeight(originalSettings.getCointegrationScoringWeight())
                .modelQualityScoringWeight(originalSettings.getModelQualityScoringWeight())
                .statisticsScoringWeight(originalSettings.getStatisticsScoringWeight())
                .bonusScoringWeight(originalSettings.getBonusScoringWeight())
                
                // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
                .autoAveragingEnabled(originalSettings.isAutoAveragingEnabled())
                .averagingDrawdownThreshold(originalSettings.getAveragingDrawdownThreshold())
                .averagingVolumeMultiplier(originalSettings.getAveragingVolumeMultiplier())
                .averagingDrawdownMultiplier(originalSettings.getAveragingDrawdownMultiplier())
                .maxAveragingCount(originalSettings.getMaxAveragingCount())
                
                .build();
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–∞—Ä–∞ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Ç—Ä–µ–π–¥–µ
     */
    private boolean isActiveTrade(TradingPair tradingPair) {
        return tradingPair.getStatus() == TradeStatus.TRADING;
    }

    /**
     * –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
     */
    public static class AveragingResult {
        private final boolean success;
        private final String message;

        private AveragingResult(boolean success, String message) {
            this.success = success;
            this.message = message;
        }

        public static AveragingResult success(String message) {
            return new AveragingResult(true, message);
        }

        public static AveragingResult failure(String message) {
            return new AveragingResult(false, message);
        }

        public boolean isSuccess() {
            return success;
        }

        public String getMessage() {
            return message;
        }
    }
}