package com.example.core.services;

import com.example.core.trading.services.TradingIntegrationService;
import com.example.shared.dto.StartNewTradeRequest;
import com.example.shared.dto.ZScoreData;
import com.example.shared.models.Settings;
import com.example.shared.models.Pair;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.Objects;

@Slf4j
@Service
@RequiredArgsConstructor
public class StartNewTradeValidationService {
    private final SettingsService settingsService;
    private final TradingIntegrationService tradingIntegrationServiceImpl;

    public void validateRequest(StartNewTradeRequest request) {
        if (request == null || request.getTradingPair() == null) {
            throw new IllegalArgumentException("–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–π–¥–∞");
        }
    }

    public boolean validateTickers(Pair tradingPair, ZScoreData zScoreData) {
        return Objects.equals(tradingPair.getLongTicker(), zScoreData.getUnderValuedTicker()) &&
                Objects.equals(tradingPair.getShortTicker(), zScoreData.getOverValuedTicker());
    }

    public boolean validateAutoTrading(Pair tradingPair, boolean checkAutoTrading) {
        if (!checkAutoTrading) {
            log.debug("üîß –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Ç—Ä–µ–π–¥–∞ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞ –¥–ª—è –ø–∞—Ä—ã {}", tradingPair.getPairName());
            return true;
        }

        Settings currentSettings = settingsService.getSettings(); //—Å–Ω–æ–≤–∞ —á–∏—Ç–∞–µ–º –∏–∑ –±–¥
        log.debug("üìñ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: –ß–∏—Ç–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î: autoTrading={}", currentSettings.isAutoTradingEnabled());

        if (!currentSettings.isAutoTradingEnabled()) {
            log.warn("‚ö†Ô∏è –ê–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω! –ü—Ä–æ–ø—É—Å–∫–∞—é –æ—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–π–¥–∞ –¥–ª—è –ø–∞—Ä—ã {}", tradingPair.getPairName());
            return false;
        }

        log.debug("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: –ê–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º");
        return true;
    }

    public boolean isLastZLessThenMinZ(Pair tradingPair, Settings settings) {
        if (tradingPair == null) {
            throw new IllegalArgumentException("pairData is null");
        }

        double zScore = tradingPair.getZScoreCurrent() != null ? tradingPair.getZScoreCurrent().doubleValue() : 0.0;
        if (zScore < settings.getMinZ()) {
            if (zScore < 0) {
                log.warn("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é –ø–∞—Ä—É {}. Z-—Å–∫–æ—Ä {} < 0", tradingPair.getPairName(), zScore);
            } else {
                log.warn("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é –ø–∞—Ä—É {}. Z-—Å–∫–æ—Ä {} < Z-—Å–∫–æ—Ä Min {}", tradingPair.getPairName(), zScore, settings.getMinZ());
            }
            return true;
        }

        return false;
    }

    public boolean validateBalance(Pair tradingPair, Settings settings) {
        if (!tradingIntegrationServiceImpl.canOpenNewPair(settings)) {
            log.warn("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º –¥–µ–ø–æ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞—Ä—ã {}", tradingPair.getPairName());
            return false;
        }
        return true;
    }
}
