package com.example.core.services;

import com.example.core.client.CandlesFeignClient;
import com.example.core.experemental.stability.dto.StabilityRequestDto;
import com.example.core.experemental.stability.dto.StabilityResponseDto;
import com.example.core.experemental.stability.dto.StabilityResultDto;
import com.example.core.experemental.stability.service.StabilityAnalysisService;
import com.example.core.repositories.StablePairRepository;
import com.example.shared.dto.Candle;
import com.example.shared.dto.ExtendedCandlesRequest;
import com.example.shared.models.Settings;
import com.example.shared.models.StablePair;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
@RequiredArgsConstructor
@Slf4j
public class StablePairService {

    private final StablePairRepository stablePairRepository;
    private final StabilityAnalysisService stabilityAnalysisService;
    private final CandlesFeignClient candlesFeignClient;
    private final SettingsService settingsService;

    /**
     * –ü–æ–∏—Å–∫ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
     */
    @Transactional
    public StabilityResponseDto searchStablePairs(String timeframe, String period,
                                                  Map<String, Object> searchSettings) {
        log.info("üîç –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä: timeframe={}, period={}", timeframe, period);

        try {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–≤–µ—á–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            Settings settings = settingsService.getSettings();
            Map<String, List<Candle>> candlesMap = getCandlesForAnalysis(settings, timeframe, period);

            if (candlesMap.isEmpty()) {
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞");
                throw new RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π");
            }

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞ –∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –∞–Ω–∞–ª–∏–∑–∞
            Map<String, Object> analysisSettings = buildAnalysisSettings(searchSettings);

            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è Python API
            StabilityRequestDto request = new StabilityRequestDto(candlesMap, analysisSettings);

            // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            StabilityResponseDto response = stabilityAnalysisService.analyzeStability(request);

            if (response.getSuccess() && response.getResults() != null) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                saveSearchResults(response, timeframe, period, searchSettings);
                log.info("‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ {} —Ç–æ—Ä–≥—É–µ–º—ã—Ö –ø–∞—Ä –∏–∑ {}",
                        response.getTradeablePairsFound(), response.getTotalPairsAnalyzed());
            }

            return response;

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä: {}", e.getMessage(), e);
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä: " + e.getMessage(), e);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–∏–æ–¥–∞ –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ candles –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—É –¥–ª—è –±–æ–ª—å—à–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
     */
    private Map<String, List<Candle>> getCandlesForAnalysis(Settings settings, String timeframe, String period) {
        try {
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –¥–ª—è –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            int candleLimit = calculateCandleLimit(timeframe, period);
            log.info("üìä –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º {} —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ {} –∏ –ø–µ—Ä–∏–æ–¥–∞ {}", candleLimit, timeframe, period);

            // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ candles –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
            return getCandlesExtended(settings, timeframe, candleLimit);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–µ—á–µ–π: {}", e.getMessage(), e);
            return new HashMap<>();
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–≤–µ—á–µ–π —á–µ—Ä–µ–∑ candles –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å
     * –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å —Å–∞–º –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∏ —Å–æ–±–∏—Ä–∞—Ç—å –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
     */
    private Map<String, List<Candle>> getCandlesExtended(Settings settings, String timeframe, int candleLimit) {
        try {
            log.info("üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å {} —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ {} —á–µ—Ä–µ–∑ candles –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å",
                    candleLimit, timeframe);

            ExtendedCandlesRequest request = ExtendedCandlesRequest.builder()
                    .timeframe(timeframe)
                    .candleLimit(candleLimit)
                    .minVolume(settings.getMinVolume())
                    .useMinVolumeFilter(settings.isUseMinVolumeFilter())
                    .minimumLotBlacklist(settings.getMinimumLotBlacklist())
                    .tickers(null) // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã
                    .excludeTickers(null) // –ù–∏–∫–æ–≥–æ –Ω–µ –∏—Å–∫–ª—é—á–∞–µ–º
                    .build();

            Map<String, List<Candle>> result = candlesFeignClient.getAllCandlesExtended(request);

            if (result != null && !result.isEmpty()) {
                int totalCandles = result.values().stream().mapToInt(List::size).sum();
                int avgCandles = result.values().stream().mapToInt(List::size).sum() / result.size();
                log.info("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {} —Ç–∏–∫–µ—Ä–æ–≤ —Å–æ —Å—Ä–µ–¥–Ω–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º {} —Å–≤–µ—á–µ–π (–≤—Å–µ–≥–æ {} —Å–≤–µ—á–µ–π)",
                        result.size(), avgCandles, totalCandles);
            }

            return result != null ? result : new HashMap<>();

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–µ—á–µ–π: {}", e.getMessage(), e);
            // Fallback –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º—É –º–µ—Ç–æ–¥—É —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
            log.warn("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º—É –º–µ—Ç–æ–¥—É —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º 300 —Å–≤–µ—á–µ–π");
            ExtendedCandlesRequest fallbackRequest = ExtendedCandlesRequest.builder()
                    .timeframe(timeframe)
                    .candleLimit(300)
                    .minVolume(settings.getMinVolume())
                    .useMinVolumeFilter(settings.isUseMinVolumeFilter())
                    .minimumLotBlacklist(settings.getMinimumLotBlacklist())
                    .tickers(null) // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã
                    .excludeTickers(null) // –ù–∏–∫–æ–≥–æ –Ω–µ –∏—Å–∫–ª—é—á–∞–µ–º
                    .build();
            return candlesFeignClient.getAllCandlesExtended(fallbackRequest);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–µ–π –ø–∞—á–∫–∞–º–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
     */
    private Map<String, List<Candle>> getCandlesBatch(Settings settings, String timeframe, int totalLimit) {
        try {
            log.info("üìä –ü–∞—á–∫–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ {} —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ {}", totalLimit, timeframe);

            // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ —Å –æ–±—ã—á–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ (300 —Å–≤–µ—á–µ–π)
            Settings tempSettings = new Settings();
            tempSettings.copyFrom(settings);
            tempSettings.setCandleLimit(300); // –ú–∞–∫—Å–∏–º—É–º –¥–ª—è OKX
            tempSettings.setTimeframe(timeframe);

            ExtendedCandlesRequest initialRequest = ExtendedCandlesRequest.builder()
                    .timeframe(timeframe)
                    .candleLimit(300)
                    .minVolume(settings.getMinVolume())
                    .useMinVolumeFilter(settings.isUseMinVolumeFilter())
                    .minimumLotBlacklist(settings.getMinimumLotBlacklist())
                    .tickers(null) // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã
                    .excludeTickers(null) // –ù–∏–∫–æ–≥–æ –Ω–µ –∏—Å–∫–ª—é—á–∞–µ–º
                    .build();
            Map<String, List<Candle>> initialData = candlesFeignClient.getAllCandlesExtended(initialRequest);

            if (initialData.isEmpty()) {
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π");
                return new HashMap<>();
            }

            // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ 300 —Å–≤–µ—á–µ–π, –ø–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if (totalLimit > 300) {
                int remainingCandles = totalLimit - 300;
                int batchSize = 300;
                int numberOfBatches = (remainingCandles + batchSize - 1) / batchSize; // –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö

                log.info("üîÑ –ù—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ {} —Å–≤–µ—á–µ–π –≤ {} –ø–∞—á–∫–∞—Ö", remainingCandles, numberOfBatches);

                // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–∫–µ—Ä–∞ –ø–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                Map<String, List<Candle>> result = new HashMap<>();

                for (Map.Entry<String, List<Candle>> entry : initialData.entrySet()) {
                    String ticker = entry.getKey();
                    List<Candle> candles = new ArrayList<>(entry.getValue());

                    // –ü–æ–ª—É—á–∞–µ–º —Å–∞–º—É—é —Å—Ç–∞—Ä—É—é —Å–≤–µ—á—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ—á–∫–∏ –Ω–∞—á–∞–ª–∞
                    if (!candles.isEmpty()) {
                        long oldestTimestamp = candles.stream()
                                .mapToLong(Candle::getTimestamp)
                                .min()
                                .orElse(System.currentTimeMillis());

                        // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—á–∫–∞–º–∏
                        for (int batch = 0; batch < numberOfBatches; batch++) {
                            try {
                                // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–æ—á–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—á–∫–∏
                                long timeOffset = getTimeframeOffsetMs(timeframe) * 300 * (batch + 1);
                                long beforeTimestamp = oldestTimestamp - timeOffset;

                                // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é –ø–∞—á–∫—É (–∑–¥–µ—Å—å –Ω—É–∂–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ API)
                                List<Candle> historicalBatch = getHistoricalCandlesBatch(
                                        ticker, timeframe, beforeTimestamp, batchSize);

                                if (!historicalBatch.isEmpty()) {
                                    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞ (–±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ)
                                    candles.addAll(0, historicalBatch);
                                } else {
                                    log.debug("üìâ –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {} –¥–æ timestamp {}",
                                            ticker, beforeTimestamp);
                                    break; // –ù–µ—Ç –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö
                                }

                                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
                                if (candles.size() >= totalLimit) {
                                    break;
                                }

                            } catch (Exception batchException) {
                                log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞—á–∫–∏ {} –¥–ª—è {}: {}",
                                        batch, ticker, batchException.getMessage());
                                break;
                            }
                        }

                        // –û–±—Ä–µ–∑–∞–µ–º –¥–æ –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                        if (candles.size() > totalLimit) {
                            candles = candles.subList(candles.size() - totalLimit, candles.size());
                        }
                    }

                    result.put(ticker, candles);
                }

                log.info("‚úÖ –ü–∞—á–∫–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {} —Å–≤–µ—á–µ–π",
                        result.values().stream().mapToInt(List::size).average().orElse(0));

                return result;
            } else {
                return initialData;
            }

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—á–∫–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ —Å–≤–µ—á–µ–π: {}", e.getMessage(), e);
            return new HashMap<>();
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞
     * –ó–ê–ì–õ–£–®–ö–ê - –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ API
     */
    private List<Candle> getHistoricalCandlesBatch(String ticker, String timeframe,
                                                   long beforeTimestamp, int batchSize) {
        try {
            // TODO: –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤—ã–∑–æ–≤ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
            log.debug("üîç –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {} –¥–æ {}", ticker, beforeTimestamp);

            // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π API –≤—ã–∑–æ–≤
            // –∫ —Å–µ—Ä–≤–∏—Å—É —Å–≤–µ—á–µ–π —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: ticker, timeframe, before, limit

            return new ArrayList<>();

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π –¥–ª—è {}: {}", ticker, e.getMessage());
            return new ArrayList<>();
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–º–µ—â–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
     */
    private long getTimeframeOffsetMs(String timeframe) {
        return switch (timeframe) {
            case "1m" -> 60 * 1000L;
            case "5m" -> 5 * 60 * 1000L;
            case "15m" -> 15 * 60 * 1000L;
            case "1H" -> 60 * 60 * 1000L;
            case "4H" -> 4 * 60 * 60 * 1000L;
            case "1D" -> 24 * 60 * 60 * 1000L;
            case "1W" -> 7 * 24 * 60 * 60 * 1000L;
            case "1M" -> 30L * 24 * 60 * 60 * 1000L; // –ü—Ä–∏–º–µ—Ä–Ω–æ –º–µ—Å—è—Ü
            default -> 60 * 60 * 1000L; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —á–∞—Å
        };
    }

    /**
     * –†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–≤–µ—á–µ–π –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
     * –¢–µ–ø–µ—Ä—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –±–æ–ª—å—à–∏–µ –ø–µ—Ä–∏–æ–¥—ã —á–µ—Ä–µ–∑ candles –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å
     */
    private int calculateCandleLimit(String timeframe, String period) {
        int multiplier = switch (period.toLowerCase()) {
            case "–¥–µ–Ω—å" -> 1;
            case "–Ω–µ–¥–µ–ª—è" -> 7;
            case "–º–µ—Å—è—Ü" -> 30;
            case "1 –≥–æ–¥" -> 365;
            case "2 –≥–æ–¥–∞" -> 730;
            case "3 –≥–æ–¥–∞" -> 1095;
            default -> 30;
        };

        int idealLimit = switch (timeframe) {
            case "1m" -> multiplier * 24 * 60; // –º–∏–Ω—É—Ç—ã –≤ –¥–µ–Ω—å
            case "5m" -> multiplier * 24 * 12; // 5-–º–∏–Ω—É—Ç–∫–∏ –≤ –¥–µ–Ω—å
            case "15m" -> multiplier * 24 * 4; // 15-–º–∏–Ω—É—Ç–∫–∏ –≤ –¥–µ–Ω—å
            case "1H" -> multiplier * 24; // —á–∞—Å—ã –≤ –¥–µ–Ω—å
            case "4H" -> multiplier * 6; // 4-—á–∞—Å–æ–≤–∫–∏ –≤ –¥–µ–Ω—å
            case "1D" -> multiplier; // –¥–Ω–∏
            case "1W" -> multiplier / 7; // –Ω–µ–¥–µ–ª–∏
            case "1M" -> multiplier / 30; // –º–µ—Å—è—Ü—ã
            default -> multiplier * 24; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —á–∞—Å–æ–≤–∫–∏
        };

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç - candles –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å —Å–ø—Ä–∞–≤–∏—Ç—Å—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        return Math.max(100, idealLimit); // –ú–∏–Ω–∏–º—É–º 100 —Å–≤–µ—á–µ–π –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    }

    /**
     * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
     */
    private Map<String, Object> buildAnalysisSettings(Map<String, Object> searchSettings) {
        Map<String, Object> settings = new HashMap<>();

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        settings.put("minWindowSize", 100);
        settings.put("minCorrelation", 0.1);
        settings.put("maxPValue", 1.0);
        settings.put("maxAdfValue", 1.0);
        settings.put("minRSquared", 0.1);

        // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if (searchSettings != null) {
            searchSettings.forEach((key, value) -> {
                if (value != null) {
                    settings.put(key, value);
                }
            });
        }

        return settings;
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
     */
    @Transactional
    public void saveSearchResults(StabilityResponseDto response, String timeframe,
                                  String period, Map<String, Object> searchSettings) {
        if (response.getResults() == null || response.getResults().isEmpty()) {
            return;
        }

        List<StablePair> pairsToSave = new ArrayList<>();

        for (StabilityResultDto result : response.getResults()) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ø–æ—Ö–æ–∂–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            LocalDateTime cutoffTime = LocalDateTime.now().minusHours(1); // –î—É–±–ª–∏–∫–∞—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
            List<StablePair> existing = stablePairRepository.findSimilarPairs(
                    result.getTickerA(), result.getTickerB(), timeframe, period, cutoffTime);

            if (existing.isEmpty()) {
                StablePair stablePair = StablePair.fromStabilityResult(result, timeframe, period, searchSettings);
                pairsToSave.add(stablePair);
            }
        }

        if (!pairsToSave.isEmpty()) {
            stablePairRepository.saveAll(pairsToSave);
            log.info("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {} –Ω–æ–≤—ã—Ö —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä", pairsToSave.size());
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ä—ã (–Ω–µ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ)
     */
    public List<StablePair> getAllFoundPairs() {
        return stablePairRepository.findByIsInMonitoringFalseOrderBySearchDateDesc();
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä—ã –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
     */
    public List<StablePair> getMonitoringPairs() {
        return stablePairRepository.findByIsInMonitoringTrueOrderByCreatedAtDesc();
    }

    /**
     * –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
     */
    @Transactional
    public void addToMonitoring(Long pairId) {
        StablePair pair = stablePairRepository.findById(pairId)
                .orElseThrow(() -> new RuntimeException("–ü–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: " + pairId));

        pair.setIsInMonitoring(true);
        stablePairRepository.save(pair);

        log.info("‚ûï –ü–∞—Ä–∞ {}/{} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", pair.getTickerA(), pair.getTickerB());
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å –ø–∞—Ä—É –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    @Transactional
    public void removeFromMonitoring(Long pairId) {
        StablePair pair = stablePairRepository.findById(pairId)
                .orElseThrow(() -> new RuntimeException("–ü–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: " + pairId));

        pair.setIsInMonitoring(false);
        stablePairRepository.save(pair);

        log.info("‚ûñ –ü–∞—Ä–∞ {}/{} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", pair.getTickerA(), pair.getTickerB());
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—É—é –ø–∞—Ä—É
     */
    @Transactional
    public void deleteFoundPair(Long pairId) {
        stablePairRepository.deleteById(pairId);
        log.info("üóëÔ∏è –ü–∞—Ä–∞ —É–¥–∞–ª–µ–Ω–∞: {}", pairId);
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ä—ã (–Ω–µ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ)
     */
    @Transactional
    public int clearAllFoundPairs() {
        List<StablePair> pairsToDelete = stablePairRepository.findByIsInMonitoringFalseOrderBySearchDateDesc();
        int count = pairsToDelete.size();

        if (count > 0) {
            stablePairRepository.deleteAll(pairsToDelete);
            log.info("üßπ –û—á–∏—â–µ–Ω–æ {} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ä", count);
        }

        return count;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
     */
    @Transactional
    public int cleanupOldResults(int daysToKeep) {
        LocalDateTime cutoffDate = LocalDateTime.now().minusDays(daysToKeep);
        int deletedCount = stablePairRepository.deleteOldSearchResults(cutoffDate);

        if (deletedCount > 0) {
            log.info("üßπ –£–¥–∞–ª–µ–Ω–æ {} —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ (—Å—Ç–∞—Ä—à–µ {} –¥–Ω–µ–π)", deletedCount, daysToKeep);
        }

        return deletedCount;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –ø–∞—Ä–∞–º
     */
    public Map<String, Object> getSearchStatistics() {
        LocalDateTime weekAgo = LocalDateTime.now().minusDays(7);
        List<Object[]> stats = stablePairRepository.getStabilityRatingStats(weekAgo);

        Map<String, Object> result = new HashMap<>();
        result.put("totalFound", stablePairRepository.findByIsInMonitoringFalseOrderBySearchDateDesc().size());
        result.put("totalInMonitoring", stablePairRepository.findByIsInMonitoringTrueOrderByCreatedAtDesc().size());

        Map<String, Long> ratingStats = new HashMap<>();
        for (Object[] stat : stats) {
            ratingStats.put((String) stat[0], (Long) stat[1]);
        }
        result.put("ratingDistribution", ratingStats);

        return result;
    }
}