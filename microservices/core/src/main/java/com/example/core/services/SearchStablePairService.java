package com.example.core.services;

import com.example.core.client.CandlesFeignClient;
import com.example.core.experemental.stability.dto.StabilityRequestDto;
import com.example.core.experemental.stability.dto.StabilityResponseDto;
import com.example.core.experemental.stability.dto.StabilityResultDto;
import com.example.core.experemental.stability.service.StabilityAnalysisService;
import com.example.core.repositories.PairRepository;
import com.example.shared.dto.Candle;
import com.example.shared.dto.ExtendedCandlesRequest;
import com.example.shared.models.Pair;
import com.example.shared.models.Settings;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.util.*;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é Pair
 * –ó–∞–º–µ–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å StablePairService —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –ø–∞—Ä
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class SearchStablePairService {

    private final PairRepository pairRepository;
    private final StabilityAnalysisService stabilityAnalysisService;
    private final CandlesFeignClient candlesFeignClient;
    private final SettingsService settingsService;

    /**
     * –ü–æ–∏—Å–∫ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º–∏ –∏ –ø–µ—Ä–∏–æ–¥–∞–º–∏
     */
    public StabilityResponseDto searchStablePairs(Set<String> timeframes, Set<String> periods,
                                                  Map<String, Object> searchSettings) {
        log.info("üîç –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä: timeframes={}, periods={}", timeframes, periods);

        try {
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞ –∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–∏–Ω —Ä–∞–∑
            Map<String, Object> analysisSettings = buildAnalysisSettings(searchSettings);
            Settings settings = settingsService.getSettings();

            // –ò–∑–≤–ª–µ–∫–∞–µ–º searchTickers –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            Set<String> searchTickers = extractSearchTickers(searchSettings);

            // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∞–∫–∫—É–º—É–ª—è—Ü–∏–∏
            StabilityResponseDto aggregatedResponse = new StabilityResponseDto();
            aggregatedResponse.setSuccess(true);
            aggregatedResponse.setResults(new ArrayList<>());
            int totalPairsFound = 0;
            int totalPairsAnalyzed = 0;

            // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ timeframe + period
            for (String timeframe : timeframes) {
                for (String period : periods) {
                    log.info("üîç –ü–æ–∏—Å–∫ –¥–ª—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏: timeframe={}, period={}", timeframe, period);

                    try {
                        // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞ —Ç–∏–∫–µ—Ä–æ–≤
                        Map<String, List<Candle>> candlesMap = getCandlesForAnalysis(settings, timeframe, period, searchTickers, searchSettings);

                        if (candlesMap.isEmpty()) {
                            log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π –¥–ª—è timeframe={}, period={}", timeframe, period);
                            continue;
                        }

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                        if (candlesMap.size() < 2) {
                            if (searchTickers != null && !searchTickers.isEmpty()) {
                                log.warn("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏: –ø–æ–ª—É—á–µ–Ω–æ {} –∏–∑ {} –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö. " +
                                                "–í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏—Å–∫–ª—é—á–µ–Ω—ã –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö.",
                                        candlesMap.size(), searchTickers.size());
                                log.warn("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å –±–æ–ª–µ–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–º–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ —É–≤–µ–ª–∏—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.");
                            } else {
                                log.warn("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏: –ø–æ–ª—É—á–µ–Ω–æ —Ç–æ–ª—å–∫–æ {}", candlesMap.size());
                            }
                            continue;
                        }

                        // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø
                        Map<String, List<Candle>> validatedCandlesMap = validateCandlesConsistency(candlesMap, timeframe);

                        if (validatedCandlesMap.isEmpty()) {
                            log.warn("‚ö†Ô∏è –ü–æ—Å–ª–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è timeframe={}, period={}", timeframe, period);
                            continue;
                        }

                        log.info("‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø: –ò–∑ {} —Ç–∏–∫–µ—Ä–æ–≤ {} –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è timeframe={}, period={}",
                                candlesMap.size(), validatedCandlesMap.size(), timeframe, period);

                        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è Python API
                        StabilityRequestDto request = new StabilityRequestDto(validatedCandlesMap, analysisSettings);

                        // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                        StabilityResponseDto response = stabilityAnalysisService.analyzeStability(request);

                        if (response.getSuccess() && response.getResults() != null) {
                            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –æ—Ç–¥–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
                            try {
                                saveSearchResults(response, timeframe, period, searchSettings);
                            } catch (Exception saveEx) {
                                log.warn("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è timeframe={}, period={}: {}",
                                        timeframe, period, saveEx.getMessage());
                                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É - –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
                            }

                            // –ê–∫–∫—É–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                            aggregatedResponse.getResults().addAll(response.getResults());
                            totalPairsFound += response.getTradeablePairsFound();
                            totalPairsAnalyzed += response.getTotalPairsAnalyzed();

                            log.info("‚úÖ –ü–æ–∏—Å–∫ –¥–ª—è timeframe={}, period={} –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ {} —Ç–æ—Ä–≥—É–µ–º—ã—Ö –ø–∞—Ä –∏–∑ {}",
                                    timeframe, period, response.getTradeablePairsFound(), response.getTotalPairsAnalyzed());
                        } else {
                            log.warn("‚ö†Ô∏è –ü–æ–∏—Å–∫ –¥–ª—è timeframe={}, period={} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ—É—Å–ø–µ—à–Ω–æ",
                                    timeframe, period);
                        }

                    } catch (Exception e) {
                        log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–ª—è timeframe={}, period={}: {}",
                                timeframe, period, e.getMessage(), e);
                        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
                    }
                }
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            aggregatedResponse.setTradeablePairsFound(totalPairsFound);
            aggregatedResponse.setTotalPairsAnalyzed(totalPairsAnalyzed);

            if (totalPairsAnalyzed > 0) {
                log.info("üèÅ –û–±—â–∏–π –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ {} —Ç–æ—Ä–≥—É–µ–º—ã—Ö –ø–∞—Ä –∏–∑ {} –ø–æ {} –∫–æ–º–±–∏–Ω–∞—Ü–∏—è–º",
                        totalPairsFound, totalPairsAnalyzed, timeframes.size() * periods.size());
            } else {
                log.warn("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –ø–∞—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—è–º");
                aggregatedResponse.setSuccess(false);
            }

            return aggregatedResponse;

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä: {}", e.getMessage(), e);
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä: " + e.getMessage(), e);
        }
    }

    // ======== –í–ê–õ–ò–î–ê–¶–ò–Ø –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–ò –°–í–ï–ß–ï–ô ========

    /**
     * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Å–≤–µ—á–µ–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Python API
     * –£–±–∏—Ä–∞–µ—Ç —Ç–∏–∫–µ—Ä—ã —Å —Ä–∞–∑–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–≤–µ—á–µ–π, —Ä–∞–∑–Ω—ã–º–∏ —Ç–∞–π–º—à—Ç–∞–º–ø–∞–º–∏ –Ω–∞—á–∞–ª–∞/–∫–æ–Ω—Ü–∞
     */
    private Map<String, List<Candle>> validateCandlesConsistency(Map<String, List<Candle>> candlesMap, String timeframe) {
        if (candlesMap == null || candlesMap.isEmpty()) {
            return new HashMap<>();
        }

        log.info("üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–ò: –ü—Ä–æ–≤–µ—Ä—è–µ–º {} —Ç–∏–∫–µ—Ä–æ–≤ (—Ç–∞–π–º—Ñ—Ä–µ–π–º: {})",
                candlesMap.size(), timeframe);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–π —Ç–∏–∫–µ—Ä (BTC-USDT-SWAP –∏–ª–∏ –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π)
        String referenceTicker = candlesMap.containsKey("BTC-USDT-SWAP") ?
                "BTC-USDT-SWAP" : candlesMap.keySet().iterator().next();

        List<Candle> referenceCandles = candlesMap.get(referenceTicker);
        int referenceCount = referenceCandles.size();
        long referenceStart = referenceCandles.get(0).getTimestamp();
        long referenceEnd = referenceCandles.get(referenceCandles.size() - 1).getTimestamp();

        log.info("üéØ –≠–¢–ê–õ–û–ù: {} - {} —Å–≤–µ—á–µ–π, {}-{}",
                referenceTicker, referenceCount,
                formatTimestamp(referenceStart), formatTimestamp(referenceEnd));

        Map<String, List<Candle>> validatedCandles = new HashMap<>();
        List<String> invalidTickers = new ArrayList<>();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–∫–µ—Ä –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —ç—Ç–∞–ª–æ–Ω—É
        for (Map.Entry<String, List<Candle>> entry : candlesMap.entrySet()) {
            String ticker = entry.getKey();
            List<Candle> candles = entry.getValue();

            if (candles.size() == referenceCount &&
                    candles.get(0).getTimestamp() == referenceStart &&
                    candles.get(candles.size() - 1).getTimestamp() == referenceEnd) {

                validatedCandles.put(ticker, candles);
            } else {
                // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑–ª–∏—á–∞—é—â–∏—Ö—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                List<String> differences = new ArrayList<>();
                
                if (candles.size() != referenceCount) {
                    differences.add(String.format("—Å–≤–µ—á–µ–π:%d‚â†%d", candles.size(), referenceCount));
                }
                if (candles.get(0).getTimestamp() != referenceStart) {
                    differences.add(String.format("–Ω–∞—á–∞–ª–æ:%s‚â†%s", 
                        formatTimestamp(candles.get(0).getTimestamp()), formatTimestamp(referenceStart)));
                }
                if (candles.get(candles.size() - 1).getTimestamp() != referenceEnd) {
                    differences.add(String.format("–∫–æ–Ω–µ—Ü:%s‚â†%s", 
                        formatTimestamp(candles.get(candles.size() - 1).getTimestamp()), formatTimestamp(referenceEnd)));
                }
                
                String reason = !differences.isEmpty() ? 
                    "(" + String.join(", ", differences) + ")" : 
                    "(–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞)";
                    
                invalidTickers.add(ticker + reason);
            }
        }

        int validCount = validatedCandles.size();
        double validPercent = (double) validCount / candlesMap.size() * 100;

        log.info("üìä –í–ê–õ–ò–î–ê–¶–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢:");
        log.info("   ‚úÖ –í–∞–ª–∏–¥–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã: {} –∏–∑ {} ({}%)", validCount, candlesMap.size(), String.format("%.1f", validPercent));

        if (!invalidTickers.isEmpty()) {
            log.warn("   ‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã ({}): {}", invalidTickers.size(), String.join(", ", invalidTickers));
        }

        // –ï—Å–ª–∏ –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ –º–µ–Ω–µ–µ 100%, —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
        if (validPercent < 100.0) {
            log.error("üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –¢–æ–ª—å–∫–æ {}% —Ç–∏–∫–µ—Ä–æ–≤ –≤–∞–ª–∏–¥–Ω—ã - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏!", validPercent);
            return new HashMap<>(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∫–∞—Ä—Ç—É
        }

        if (validCount < candlesMap.size()) {
            log.warn("üóëÔ∏è –ò–°–ö–õ–Æ–ß–ï–ù–´: {} —Ç–∏–∫–µ—Ä–æ–≤ - {}", invalidTickers.size(), String.join(", ", invalidTickers));
        }

        return validatedCandles;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç timestamp –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö
     */
    private String formatTimestamp(long timestamp) {
        if (timestamp <= 0) return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç timestamp: –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, —Ç–æ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö, –∏–Ω–∞—á–µ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            if (timestamp > 9999999999L) { // –±–æ–ª—å—à–µ —á–µ–º 2001 –≥–æ–¥ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                return java.time.Instant.ofEpochMilli(timestamp).toString();
            } else {
                return java.time.Instant.ofEpochSecond(timestamp).toString();
            }
        } catch (Exception e) {
            return "–æ—à–∏–±–∫–∞_—Ñ–æ—Ä–º–∞—Ç–∞";
        }
    }

    // ======== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ========

    private Map<String, List<Candle>> getCandlesForAnalysis(Settings settings, String timeframe, String period, Set<String> searchTickers, Map<String, Object> searchSettings) {
        try {
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –¥–ª—è –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            int candleLimit = calculateCandleLimit(timeframe, period);

            if (searchTickers != null && !searchTickers.isEmpty()) {
                log.info("üìä –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º {} —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ {} –∏ –ø–µ—Ä–∏–æ–¥–∞ {} —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ {} —Ç–∏–∫–µ—Ä–∞–º: {}",
                        candleLimit, timeframe, period, searchTickers.size(), searchTickers);
            } else {
                log.info("üìä –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º {} —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ {} –∏ –ø–µ—Ä–∏–æ–¥–∞ {} –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ —Ç–∏–∫–µ—Ä–æ–≤",
                        candleLimit, timeframe, period);
            }

            // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ candles –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
            return getCandlesExtended(settings, timeframe, candleLimit, searchTickers, period, searchSettings);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–µ—á–µ–π: {}", e.getMessage(), e);
            return new HashMap<>();
        }
    }

    private Map<String, List<Candle>> getCandlesExtended(Settings settings, String timeframe, int candleLimit, Set<String> searchTickers, String period, Map<String, Object> searchSettings) {
        try {
            if (searchTickers != null && !searchTickers.isEmpty()) {
                log.info("üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å {} —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ {} —á–µ—Ä–µ–∑ candles –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ {} —Ç–∏–∫–µ—Ä–∞–º",
                        candleLimit, timeframe, searchTickers.size());
            } else {
                log.info("üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å {} —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ {} —á–µ—Ä–µ–∑ candles –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ —Ç–∏–∫–µ—Ä–æ–≤",
                        candleLimit, timeframe);
            }

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä useCache –∏–∑ searchSettings
            Boolean useCache = searchSettings != null ? (Boolean) searchSettings.get("useCache") : null;

            ExtendedCandlesRequest request = ExtendedCandlesRequest.builder()
                    .timeframe(timeframe)
                    .candleLimit(candleLimit)
                    .minVolume(settings.getMinVolume())
//                    .useMinVolumeFilter(settings.isUseMinVolumeFilter())
//                    .minimumLotBlacklist(settings.getMinimumLotBlacklist())
                    .tickers(searchTickers != null && !searchTickers.isEmpty() ? searchTickers.stream().toList() : null) // –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                    .excludeTickers(Arrays.asList(settings.getMinimumLotBlacklist().split(",")))
//                    .useCache(useCache != null ? useCache : true) // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à
                    .period(period)
                    .build();

            Map<String, List<Candle>> result = candlesFeignClient.getValidatedCacheExtended(request);

            if (result != null && !result.isEmpty()) {
                int totalCandles = result.values().stream().mapToInt(List::size).sum();
                int avgCandles = result.values().stream().mapToInt(List::size).sum() / result.size();
                if (searchTickers != null && !searchTickers.isEmpty()) {
                    log.info("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {} —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ {} –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö —Å–æ —Å—Ä–µ–¥–Ω–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º {} —Å–≤–µ—á–µ–π (–≤—Å–µ–≥–æ {} —Å–≤–µ—á–µ–π)",
                            result.size(), searchTickers.size(), avgCandles, totalCandles);
                } else {
                    log.info("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {} —Ç–∏–∫–µ—Ä–æ–≤ —Å–æ —Å—Ä–µ–¥–Ω–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º {} —Å–≤–µ—á–µ–π (–≤—Å–µ–≥–æ {} —Å–≤–µ—á–µ–π)",
                            result.size(), avgCandles, totalCandles);
                }
            }

            return result != null ? result : new HashMap<>();

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–µ—á–µ–π: {}", e.getMessage(), e);
            throw new RuntimeException(e);
        }
    }

    private int calculateCandleLimit(String timeframe, String period) {
        int multiplier = switch (period.toLowerCase()) {
            case "–¥–µ–Ω—å" -> 1;
            case "–Ω–µ–¥–µ–ª—è" -> 7;
            case "–º–µ—Å—è—Ü" -> 30;
            case "6 –º–µ—Å—è—Ü–µ–≤" -> 180;  // 6 –º–µ—Å—è—Ü–µ–≤ = 180 –¥–Ω–µ–π
            case "1 –≥–æ–¥" -> 365;
            case "2 –≥–æ–¥–∞" -> 730;
            case "3 –≥–æ–¥–∞" -> 1095;
            default -> 30;
        };

        int idealLimit = switch (timeframe) {
            case "1m" -> multiplier * 24 * 60;
            case "5m" -> multiplier * 24 * 12;
            case "15m" -> multiplier * 24 * 4;
            case "1H" -> multiplier * 24;
            case "4H" -> multiplier * 6;
            case "1D" -> multiplier;
            case "1W" -> multiplier / 7;
            case "1M" -> multiplier / 30;
            default -> multiplier * 24;
        };

//        return Math.max(100, idealLimit); //todo –ø–æ–∫–∞ –æ—Ç—Ä—É–±–∏–ª —Ç–∫ –¥–ª—è 1–ú –∏ 3 –≥–æ–¥–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ 36 —Å–≤–µ—á–µ–π, 100 —Å–≤–µ—á–µ–π –¥–ª—è BTC —Ç—É–ø–æ –Ω–µ—Ç –Ω–∞ –æ–∫—Ö –ø–æ—á–µ–º—É-—Ç–æ
        return idealLimit;
    }

    private Map<String, Object> buildAnalysisSettings(Map<String, Object> searchSettings) {
        Map<String, Object> settings = new HashMap<>();

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        settings.put("minWindowSize", 100);
        settings.put("minCorrelation", 0.1);
        settings.put("maxPValue", 1.0);
        settings.put("maxAdfValue", 1.0);
        settings.put("minRSquared", 0.1);

        // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if (searchSettings != null) {
            searchSettings.forEach((key, value) -> {
                if (value != null) {
                    settings.put(key, value);
                }
            });
        }

        return settings;
    }

    public void saveSearchResults(StabilityResponseDto response, String timeframe,
                                  String period, Map<String, Object> searchSettings) {
        if (response.getResults() == null || response.getResults().isEmpty()) {
            return;
        }

        int savedCount = 0;
        int skippedCount = 0;

        // –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ - —É–±–∏—Ä–∞–µ–º —Å–ª–æ–∂–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        for (StabilityResultDto result : response.getResults()) {
            try {
                // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—É –ë–ï–ó –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö (–±—ã—Å—Ç—Ä–µ–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ)
                Pair pair = Pair.fromStabilityResult(result, timeframe, period, searchSettings);
                if (pair != null && pair.getTickerA() != null && pair.getTickerB() != null) {
                    try {
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                        savePairSafely(pair);
                        savedCount++;
                    } catch (Exception saveEx) {
                        // –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                        if (saveEx.getMessage() != null && (saveEx.getMessage().contains("unique constraint") ||
                                saveEx.getMessage().contains("duplicate key"))) {
                            skippedCount++;
                        } else {
                            log.debug("üîÑ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—É {}-{} [{}][{}]: {}",
                                    result.getTickerA(), result.getTickerB(), timeframe, period, saveEx.getMessage());
                            skippedCount++;
                        }
                    }
                } else {
                    skippedCount++;
                }
            } catch (Exception e) {
                log.debug("üîÑ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—É {}-{} [{}][{}] –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è",
                        result.getTickerA(), result.getTickerB(), timeframe, period);
                skippedCount++;
            }
        }

        if (savedCount > 0 || skippedCount > 0) {
            log.info("üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è [{}][{}]: {} –Ω–æ–≤—ã—Ö –ø–∞—Ä, {} –ø—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤",
                    timeframe, period, savedCount, skippedCount);
        }
    }

    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
     */
    @Transactional(propagation = Propagation.REQUIRES_NEW)
    protected void savePairSafely(Pair pair) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—ã –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è SQL –æ—à–∏–±–æ–∫
            boolean exists = pairRepository.existsByTickerAAndTickerBAndTimeframeAndPeriodAndType(
                    pair.getTickerA(), pair.getTickerB(), pair.getTimeframe(), pair.getPeriod(), pair.getType());

            if (exists) {
                log.debug("üîÑ –ü–∞—Ä–∞ {}/{} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º", pair.getTickerA(), pair.getTickerB());
                return;
            }

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å Hibernate session
            Pair detachedPair = new Pair();

            // –ö–æ–ø–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ Pair –∫–ª–∞—Å—Å–∞)
            detachedPair.setType(pair.getType());
            detachedPair.setStatus(pair.getStatus());
            detachedPair.setTickerA(pair.getTickerA());
            detachedPair.setTickerB(pair.getTickerB());
            detachedPair.setPairName(pair.getPairName());
            detachedPair.setTimeframe(pair.getTimeframe());
            detachedPair.setPeriod(pair.getPeriod());
            detachedPair.setSearchDate(pair.getSearchDate());
            detachedPair.setCreatedAt(pair.getCreatedAt());

            // –ö–æ–ø–∏—Ä—É–µ–º StablePair –ø–æ–ª—è
            detachedPair.setTotalScore(pair.getTotalScore());
            detachedPair.setStabilityRating(pair.getStabilityRating());
            detachedPair.setTradeable(pair.isTradeable());
            detachedPair.setDataPoints(pair.getDataPoints());
            detachedPair.setCandleCount(pair.getCandleCount());
            detachedPair.setAnalysisTimeSeconds(pair.getAnalysisTimeSeconds());
            detachedPair.setSearchSettings(pair.getSearchSettings());
            detachedPair.setAnalysisResults(pair.getAnalysisResults());

            // –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            if (pair.getZScoreCurrent() != null) {
                detachedPair.setZScoreCurrent(pair.getZScoreCurrent());
            }
            if (pair.getCorrelationCurrent() != null) {
                detachedPair.setCorrelationCurrent(pair.getCorrelationCurrent());
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∏—Å—Ç—ã–π –æ–±—ä–µ–∫—Ç
            pairRepository.save(detachedPair);

        } catch (Exception e) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            String errorMessage = e.getMessage();
            if (errorMessage != null && (
                    errorMessage.contains("duplicate key value violates unique constraint") ||
                            errorMessage.contains("uk_stable_pairs_unique") ||
                            errorMessage.contains("ConstraintViolationException") ||
                            e.getCause() != null && e.getCause().getMessage() != null &&
                                    e.getCause().getMessage().contains("duplicate key"))) {

                log.info("üîÑ –ü–∞—Ä–∞ {}/{} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç",
                        pair.getTickerA(), pair.getTickerB());
                return; // –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            }

            // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º
            log.debug("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä—ã: {}", errorMessage);
            throw e;
        }
    }

    // ======== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ü–û–ò–°–ö–ê ========

    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç Set —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∏—Å–∫–∞
     */
    @SuppressWarnings("unchecked")
    private Set<String> extractSearchTickers(Map<String, Object> searchSettings) {
        if (searchSettings == null || searchSettings.isEmpty()) {
            return null;
        }

        Object searchTickersObj = searchSettings.get("searchTickers");
        if (searchTickersObj == null) {
            return null;
        }

        if (searchTickersObj instanceof Set<?>) {
            Set<?> tickersSet = (Set<?>) searchTickersObj;
            if (tickersSet.isEmpty()) {
                return null;
            }

            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Set<String> —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
            Set<String> result = new HashSet<>();
            for (Object ticker : tickersSet) {
                if (ticker instanceof String tickerStr) {
                    String trimmed = tickerStr.trim().toUpperCase();
                    if (!trimmed.isEmpty()) {
                        result.add(trimmed);
                    }
                }
            }

            if (result.isEmpty()) {
                log.debug("üîç –§–∏–ª—å—Ç—Ä —Ç–∏–∫–µ—Ä–æ–≤ –ø—É—Å—Ç –ø–æ—Å–ª–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏");
                return null;
            }

            log.info("üéØ –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Ñ–∏–ª—å—Ç—Ä –ø–æ {} —Ç–∏–∫–µ—Ä–∞–º: {}", result.size(), result);
            return result;
        }

        // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç—Ä–æ–∫ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if (searchTickersObj instanceof String tickersStr) {
            String trimmedStr = tickersStr.trim();
            if (trimmedStr.isEmpty()) {
                return null;
            }

            Set<String> result = new HashSet<>();
            String[] tickerArray = trimmedStr.split(",");
            for (String ticker : tickerArray) {
                String trimmed = ticker.trim().toUpperCase();
                if (!trimmed.isEmpty()) {
                    result.add(trimmed);
                }
            }

            if (result.isEmpty()) {
                log.debug("üîç –§–∏–ª—å—Ç—Ä —Ç–∏–∫–µ—Ä–æ–≤ –ø—É—Å—Ç –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏");
                return null;
            }

            log.info("üéØ –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Ñ–∏–ª—å—Ç—Ä –ø–æ {} —Ç–∏–∫–µ—Ä–∞–º –∏–∑ —Å—Ç—Ä–æ–∫–∏: {}", result.size(), result);
            return result;
        }

        log.warn("‚ö†Ô∏è searchTickers –∏–º–µ–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø: {}", searchTickersObj.getClass());
        return null;
    }
}