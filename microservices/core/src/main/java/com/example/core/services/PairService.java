package com.example.core.services;

import com.example.core.client.CandlesFeignClient;
import com.example.core.experemental.stability.dto.StabilityRequestDto;
import com.example.core.experemental.stability.dto.StabilityResponseDto;
import com.example.core.experemental.stability.dto.StabilityResultDto;
import com.example.core.experemental.stability.service.StabilityAnalysisService;
import com.example.core.repositories.PairRepository;
import com.example.shared.dto.Candle;
import com.example.shared.dto.ExtendedCandlesRequest;
import com.example.shared.dto.ZScoreData;
import com.example.shared.enums.PairType;
import com.example.shared.enums.TradeStatus;
import com.example.shared.models.Pair;
import com.example.shared.models.Settings;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é Pair
 * –ó–∞–º–µ–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å StablePairService —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –ø–∞—Ä
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class PairService {

    private final PairRepository pairRepository;
    private final StabilityAnalysisService stabilityAnalysisService;
    private final CandlesFeignClient candlesFeignClient;
    private final SettingsService settingsService;
    private final TradingPairService tradingPairService;
    private final PythonAnalysisService pythonAnalysisService; // –ó–∞–º–µ–Ω–∏–ª–∏ ZScoreService –Ω–∞ PythonAnalysisService
    private final ChartService chartService;

    // ======== –ú–ï–¢–û–î–´ –î–õ–Ø –ü–û–ò–°–ö–ê –°–¢–ê–ë–ò–õ–¨–ù–´–• –ü–ê–† ========

    /**
     * –ü–æ–∏—Å–∫ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (legacy –º–µ—Ç–æ–¥)
     */
    @Transactional
    public StabilityResponseDto searchStablePairs(String timeframe, String period,
                                                  Map<String, Object> searchSettings) {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Set –¥–ª—è –≤—ã–∑–æ–≤–∞ –Ω–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞
        return searchStablePairs(Set.of(timeframe), Set.of(period), searchSettings);
    }

    /**
     * –ü–æ–∏—Å–∫ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º–∏ –∏ –ø–µ—Ä–∏–æ–¥–∞–º–∏
     */
    public StabilityResponseDto searchStablePairs(Set<String> timeframes, Set<String> periods,
                                                  Map<String, Object> searchSettings) {
        log.info("üîç –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä: timeframes={}, periods={}", timeframes, periods);

        try {
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞ –∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–∏–Ω —Ä–∞–∑
            Map<String, Object> analysisSettings = buildAnalysisSettings(searchSettings);
            Settings settings = settingsService.getSettings();
            
            // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∞–∫–∫—É–º—É–ª—è—Ü–∏–∏
            StabilityResponseDto aggregatedResponse = new StabilityResponseDto();
            aggregatedResponse.setSuccess(true);
            aggregatedResponse.setResults(new ArrayList<>());
            int totalPairsFound = 0;
            int totalPairsAnalyzed = 0;
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ timeframe + period
            for (String timeframe : timeframes) {
                for (String period : periods) {
                    log.info("üîç –ü–æ–∏—Å–∫ –¥–ª—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏: timeframe={}, period={}", timeframe, period);
                    
                    try {
                        // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
                        Map<String, List<Candle>> candlesMap = getCandlesForAnalysis(settings, timeframe, period);

                        if (candlesMap.isEmpty()) {
                            log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π –¥–ª—è timeframe={}, period={}", timeframe, period);
                            continue;
                        }

                        // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø
                        Map<String, List<Candle>> validatedCandlesMap = validateCandlesConsistency(candlesMap, timeframe);
                        
                        if (validatedCandlesMap.isEmpty()) {
                            log.warn("‚ö†Ô∏è –ü–æ—Å–ª–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è timeframe={}, period={}", timeframe, period);
                            continue;
                        }
                        
                        log.info("‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø: –ò–∑ {} —Ç–∏–∫–µ—Ä–æ–≤ {} –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è timeframe={}, period={}", 
                                candlesMap.size(), validatedCandlesMap.size(), timeframe, period);

                        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è Python API
                        StabilityRequestDto request = new StabilityRequestDto(validatedCandlesMap, analysisSettings);

                        // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                        StabilityResponseDto response = stabilityAnalysisService.analyzeStability(request);

                        if (response.getSuccess() && response.getResults() != null) {
                            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –æ—Ç–¥–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
                            try {
                                saveSearchResults(response, timeframe, period, searchSettings);
                            } catch (Exception saveEx) {
                                log.warn("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è timeframe={}, period={}: {}", 
                                        timeframe, period, saveEx.getMessage());
                                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É - –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
                            }
                            
                            // –ê–∫–∫—É–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                            aggregatedResponse.getResults().addAll(response.getResults());
                            totalPairsFound += response.getTradeablePairsFound();
                            totalPairsAnalyzed += response.getTotalPairsAnalyzed();
                            
                            log.info("‚úÖ –ü–æ–∏—Å–∫ –¥–ª—è timeframe={}, period={} –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ {} —Ç–æ—Ä–≥—É–µ–º—ã—Ö –ø–∞—Ä –∏–∑ {}",
                                    timeframe, period, response.getTradeablePairsFound(), response.getTotalPairsAnalyzed());
                        } else {
                            log.warn("‚ö†Ô∏è –ü–æ–∏—Å–∫ –¥–ª—è timeframe={}, period={} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ—É—Å–ø–µ—à–Ω–æ", 
                                    timeframe, period);
                        }
                        
                    } catch (Exception e) {
                        log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–ª—è timeframe={}, period={}: {}", 
                                timeframe, period, e.getMessage(), e);
                        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
                    }
                }
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            aggregatedResponse.setTradeablePairsFound(totalPairsFound);
            aggregatedResponse.setTotalPairsAnalyzed(totalPairsAnalyzed);
            
            if (totalPairsAnalyzed > 0) {
                log.info("üèÅ –û–±—â–∏–π –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ {} —Ç–æ—Ä–≥—É–µ–º—ã—Ö –ø–∞—Ä –∏–∑ {} –ø–æ {} –∫–æ–º–±–∏–Ω–∞—Ü–∏—è–º",
                        totalPairsFound, totalPairsAnalyzed, timeframes.size() * periods.size());
            } else {
                log.warn("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –ø–∞—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—è–º");
                aggregatedResponse.setSuccess(false);
            }

            return aggregatedResponse;

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä: {}", e.getMessage(), e);
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä: " + e.getMessage(), e);
        }
    }

    // ======== –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ù–ê–ô–î–ï–ù–ù–´–ú–ò –ü–ê–†–ê–ú–ò ========

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–∞—Ä—ã (–Ω–µ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ)
     */
    public List<Pair> getAllFoundPairs() {
        return pairRepository.findFoundStablePairs();
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä—ã –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
     */
    public List<Pair> getMonitoringPairs() {
        return pairRepository.findStablePairsInMonitoring();
    }

    /**
     * –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
     */
    @Transactional
    public void addToMonitoring(Long pairId) {
        Pair pair = pairRepository.findById(pairId)
                .orElseThrow(() -> new RuntimeException("–ü–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: " + pairId));

        if (!pair.getType().isStable()) {
            throw new IllegalArgumentException("–¢–æ–ª—å–∫–æ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–∞—Ä—ã –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥");
        }

        pair.setInMonitoring(true);
        pairRepository.save(pair);

        log.info("‚ûï –ü–∞—Ä–∞ {}/{} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", pair.getTickerA(), pair.getTickerB());
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å –ø–∞—Ä—É –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    @Transactional
    public void removeFromMonitoring(Long pairId) {
        Pair pair = pairRepository.findById(pairId)
                .orElseThrow(() -> new RuntimeException("–ü–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: " + pairId));

        if (!pair.getType().isStable()) {
            throw new IllegalArgumentException("–¢–æ–ª—å–∫–æ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–∞—Ä—ã –º–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞");
        }

        pair.setInMonitoring(false);
        pairRepository.save(pair);

        log.info("‚ûñ –ü–∞—Ä–∞ {}/{} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", pair.getTickerA(), pair.getTickerB());
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—É—é –ø–∞—Ä—É
     */
    @Transactional
    public void deleteFoundPair(Long pairId) {
        Pair pair = pairRepository.findById(pairId)
                .orElseThrow(() -> new RuntimeException("–ü–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: " + pairId));

        if (pair.getType().isStable() && pair.isInMonitoring()) {
            throw new IllegalArgumentException("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–∞—Ä—É, –Ω–∞—Ö–æ–¥—è—â—É—é—Å—è –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ");
        }

        pairRepository.deleteById(pairId);
        log.info("üóëÔ∏è –ü–∞—Ä–∞ —É–¥–∞–ª–µ–Ω–∞: {}", pairId);
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä—ã –ø–æ –æ–±—ä–µ–∫—Ç—É
     */
    @Transactional
    public void delete(Pair pair) {
        if (pair == null) {
            log.warn("–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è null –ø–∞—Ä—ã");
            return;
        }
        
        if (pair.getType() != null && pair.getType().isStable() && pair.isInMonitoring()) {
            throw new IllegalArgumentException("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–∞—Ä—É, –Ω–∞—Ö–æ–¥—è—â—É—é—Å—è –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ");
        }

        pairRepository.delete(pair);
        log.info("üóëÔ∏è –ü–∞—Ä–∞ —É–¥–∞–ª–µ–Ω–∞: {} (ID: {})", pair.getPairName(), pair.getId());
    }


    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–∞—Ä—ã (–Ω–µ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ)
     */
    @Transactional
    public int clearAllFoundPairs() {
        List<Pair> pairsToDelete = pairRepository.findFoundStablePairs();
        int count = pairsToDelete.size();

        if (count > 0) {
            pairRepository.deleteAll(pairsToDelete);
            log.info("üßπ –û—á–∏—â–µ–Ω–æ {} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ä", count);
        }

        return count;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
     */
    @Transactional
    public int cleanupOldResults(int daysToKeep) {
        LocalDateTime cutoffDate = LocalDateTime.now().minusDays(daysToKeep);
        int deletedCount = pairRepository.deleteOldStablePairs(cutoffDate);

        if (deletedCount > 0) {
            log.info("üßπ –£–¥–∞–ª–µ–Ω–æ {} —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ (—Å—Ç–∞—Ä—à–µ {} –¥–Ω–µ–π)", deletedCount, daysToKeep);
        }

        return deletedCount;
    }

    // ======== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ê–ù–ê–õ–ò–¢–ò–ö–ê ========

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –ø–∞—Ä–∞–º
     */
    public Map<String, Object> getSearchStatistics() {
        LocalDateTime weekAgo = LocalDateTime.now().minusDays(7);
        List<Object[]> stats = pairRepository.getStabilityRatingStats(weekAgo);

        Map<String, Object> result = new HashMap<>();
        result.put("totalFound", pairRepository.findFoundStablePairs().size());
        result.put("totalInMonitoring", pairRepository.findStablePairsInMonitoring().size());

        Map<String, Long> ratingStats = new HashMap<>();
        for (Object[] stat : stats) {
            ratingStats.put((String) stat[0], (Long) stat[1]);
        }
        result.put("ratingDistribution", ratingStats);

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º
        List<Object[]> typeStats = pairRepository.countPairsByType();
        Map<String, Long> typeDistribution = new HashMap<>();
        for (Object[] stat : typeStats) {
            typeDistribution.put(stat[0].toString(), (Long) stat[1]);
        }
        result.put("typeDistribution", typeDistribution);

        return result;
    }

    // ======== Z-SCORE –†–ê–°–ß–ï–¢–´ ========

    /**
     * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å Z-Score –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –ø–∞—Ä—ã –∏ –≤–µ—Ä–Ω—É—Ç—å –≥–æ—Ç–æ–≤—É—é Pair —Å –¥–∞–Ω–Ω—ã–º–∏
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–∞—Ä—ã –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
     */
    public Pair calculateZScoreForStablePair(Pair stablePair) {
        if (!stablePair.getType().isStable()) {
            throw new IllegalArgumentException("–†–∞—Å—á–µ—Ç Z-Score –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä");
        }

        try {
            log.info("üßÆ –†–∞—Å—á–µ—Ç Z-Score –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –ø–∞—Ä—ã {}", stablePair.getPairName());
            
            // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
            Settings settings = settingsService.getSettings();
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω–æ —Ç–µ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —á—Ç–æ –∏ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä
            String timeframe = stablePair.getTimeframe() != null ? stablePair.getTimeframe() : settings.getTimeframe();
            String period = stablePair.getPeriod() != null ? stablePair.getPeriod() : "1 –≥–æ–¥";
            // –ö–†–ò–¢–ò–ß–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –ø–∞—Ä—ã!
            int candleLimit = stablePair.getCandleCount() != null ? stablePair.getCandleCount() : 1000;
            
            log.info("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω–æ —Ç–µ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —á—Ç–æ –∏ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ - timeframe: {}, period: {}, candleCount: {}", 
                    timeframe, period, candleLimit);
            
            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä—ã
            ExtendedCandlesRequest extendedRequest = ExtendedCandlesRequest.builder()
                    .timeframe(timeframe)
                    .candleLimit(candleLimit)
                    .minVolume(settings.getMinVolume())
                    .useMinVolumeFilter(settings.isUseMinVolumeFilter())
                    .minimumLotBlacklist(settings.getMinimumLotBlacklist())
                    .tickers(List.of(stablePair.getTickerA(), stablePair.getTickerB()))
                    .excludeTickers(null)
                    .skipValidation(true) // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–∞—Ä
                    .build();
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ –¥–ª—è –ø–∞—Ä—ã
            Map<String, List<Candle>> candlesMap = candlesFeignClient.getAllCandlesExtended(extendedRequest);
            
            if (candlesMap == null || candlesMap.isEmpty()) {
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π –¥–ª—è –ø–∞—Ä—ã {}", stablePair.getPairName());
                return null;
            }
            
            // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –î–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –û–ë–ê —Ç–∏–∫–µ—Ä–∞!
            if (candlesMap.size() != 2) {
                log.error("‚ùå CANDLES –§–ò–õ–¨–¢–†–ê–¶–ò–Ø: Candles-—Å–µ—Ä–≤–∏—Å –≤–µ—Ä–Ω—É–ª {} —Ç–∏–∫–µ—Ä–æ–≤ –≤–º–µ—Å—Ç–æ 2 –¥–ª—è –ø–∞—Ä—ã {} - –æ–¥–∏–Ω —Ç–∏–∫–µ—Ä –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω!", 
                        candlesMap.size(), stablePair.getPairName());
                log.error("‚ùå –î–û–°–¢–£–ü–ù–´–ï –¢–ò–ö–ï–†–´: {}", candlesMap.keySet());
                throw new IllegalStateException(String.format(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–æ–∏—Ö —Ç–∏–∫–µ—Ä–æ–≤ –ø–∞—Ä—ã %s. Candles-—Å–µ—Ä–≤–∏—Å –≤–µ—Ä–Ω—É–ª —Ç–æ–ª—å–∫–æ %d –∏–∑ 2 —Ç–∏–∫–µ—Ä–æ–≤: %s", 
                    stablePair.getPairName(), candlesMap.size(), candlesMap.keySet()));
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–≤–µ—á–µ–π –¥–ª—è –æ–±–æ–∏—Ö —Ç–∏–∫–µ—Ä–æ–≤
            List<Candle> longCandles = candlesMap.get(stablePair.getTickerA());
            List<Candle> shortCandles = candlesMap.get(stablePair.getTickerB());
            
            if (longCandles == null || longCandles.isEmpty() || 
                shortCandles == null || shortCandles.isEmpty()) {
                log.warn("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è –ø–∞—Ä—ã {} (long: {}, short: {})", 
                        stablePair.getPairName(),
                        longCandles != null ? longCandles.size() : 0,
                        shortCandles != null ? shortCandles.size() : 0);
                return null;
            }
            
            // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º!
            if (longCandles.size() != shortCandles.size()) {
                log.error("‚ùå –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –°–í–ï–ß–ï–ô: –ü–∞—Ä–∞ {} –∏–º–µ–µ—Ç —Ä–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π: {} vs {} - –ë–õ–û–ö–ò–†–£–ï–ú —Ä–∞—Å—á–µ—Ç Z-Score!", 
                        stablePair.getPairName(), longCandles.size(), shortCandles.size());
                throw new IllegalStateException(String.format(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å Z-Score –¥–ª—è –ø–∞—Ä—ã %s: —Ä–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π (%d vs %d)", 
                    stablePair.getPairName(), longCandles.size(), shortCandles.size()));
            }
            
            log.info("‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –°–í–ï–ß–ï–ô: –ü–∞—Ä–∞ {} –∏–º–µ–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π: {}", 
                    stablePair.getPairName(), longCandles.size());
            
            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é Pair –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
            Pair tradingPair = new Pair();
            tradingPair.setType(PairType.TRADING);
            tradingPair.setTickerA(stablePair.getTickerA());
            tradingPair.setTickerB(stablePair.getTickerB());
            tradingPair.setPairName(stablePair.getPairName());
            tradingPair.setStatus(TradeStatus.OBSERVED); // –°—Ç–∞—Ç—É—Å "–Ω–∞–±–ª—é–¥–∞–µ–º–∞—è"
            tradingPair.setLongTickerCandles(longCandles);
            tradingPair.setShortTickerCandles(shortCandles);
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º Z-Score –¥–∞–Ω–Ω—ã–µ
            ZScoreData zScoreData = pythonAnalysisService.calculateZScoreData(settings, candlesMap);
            
            if (zScoreData != null) {
                // –û–±–Ω–æ–≤–ª—è–µ–º Z-Score –¥–∞–Ω–Ω—ã–µ –≤ TradingPair
                tradingPairService.updateZScoreDataCurrent(tradingPair, zScoreData);
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥
                chartService.calculatePixelSpreadIfNeeded(tradingPair);
                chartService.addCurrentPixelSpreadPoint(tradingPair);
                
                log.info("‚úÖ Z-Score —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –¥–ª—è –ø–∞—Ä—ã {}. Latest Z-Score: {}", 
                        stablePair.getPairName(), zScoreData.getLatestZScore());
                
                return tradingPair;
            } else {
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å Z-Score –¥–ª—è –ø–∞—Ä—ã {}", stablePair.getPairName());
                return null;
            }
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ Z-Score –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –ø–∞—Ä—ã {}: {}", 
                    stablePair.getPairName(), e.getMessage(), e);
            return null;
        }
    }

    // ======== –û–ü–ï–†–ê–¶–ò–ò –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–Ø ========

    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—É—é –ø–∞—Ä—É –≤ –∫–æ–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é
     */
    @Transactional
    public Pair convertToCointegrated(Long pairId) {
        Pair pair = pairRepository.findById(pairId)
                .orElseThrow(() -> new RuntimeException("–ü–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: " + pairId));

        if (!pair.getType().canConvertTo(PairType.COINTEGRATED)) {
            throw new IllegalArgumentException("–î–∞–Ω–Ω—ã–π —Ç–∏–ø –ø–∞—Ä—ã –Ω–µ–ª—å–∑—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –∫–æ–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é");
        }

        pair.setType(PairType.COINTEGRATED);
        pair.setStatus(TradeStatus.SELECTED);
        pair.setUpdatedTime(LocalDateTime.now());

        pairRepository.save(pair);
        log.info("üîÑ –ü–∞—Ä–∞ {} –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ COINTEGRATED", pair.getPairName());

        return pair;
    }

    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–∞—Ä—É –≤ —Ç–æ—Ä–≥–æ–≤—É—é
     */
    @Transactional
    public Pair convertToTrading(Long pairId) {
        Pair pair = pairRepository.findById(pairId)
                .orElseThrow(() -> new RuntimeException("–ü–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: " + pairId));

        if (!pair.getType().canConvertTo(PairType.TRADING)) {
            throw new IllegalArgumentException("–î–∞–Ω–Ω—ã–π —Ç–∏–ø –ø–∞—Ä—ã –Ω–µ–ª—å–∑—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ç–æ—Ä–≥–æ–≤—É—é");
        }

        pair.setType(PairType.TRADING);
        pair.setStatus(TradeStatus.TRADING);
        pair.setEntryTime(LocalDateTime.now());
        pair.setUpdatedTime(LocalDateTime.now());

        pairRepository.save(pair);
        log.info("üîÑ –ü–∞—Ä–∞ {} –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ TRADING", pair.getPairName());

        return pair;
    }

    // ======== –ú–ï–¢–û–î–´ –î–õ–Ø –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –ü–ê–† ========

    /**
     * –ò—Å–∫–ª—é—á–∞–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ ZScoreData —Ç–µ –ø–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ —Ç–æ—Ä–≥—É—é—Ç—Å—è
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
     */
    public void excludeExistingPairs(List<ZScoreData> zScoreDataList) {
        if (zScoreDataList == null || zScoreDataList.isEmpty()) {
            log.debug("–°–ø–∏—Å–æ–∫ ZScoreData –ø—É—Å—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä.");
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã
        List<Pair> tradingPairs = pairRepository.findTradingPairsByStatus(TradeStatus.TRADING);
        if (tradingPairs.isEmpty()) {
            log.debug("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä, –≤—Å–µ ZScoreData –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è.");
            return;
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–∞–±–æ—Ä –∫–ª—é—á–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        Set<String> existingKeys = tradingPairs.stream()
                .map(pair -> buildPairKey(pair.getTickerA(), pair.getTickerB()))
                .collect(Collectors.toSet());

        int beforeSize = zScoreDataList.size();

        // –£–¥–∞–ª—è–µ–º ZScoreData –¥–ª—è —É–∂–µ —Ç–æ—Ä–≥—É—é—â–∏—Ö—Å—è –ø–∞—Ä
        zScoreDataList.removeIf(z ->
                existingKeys.contains(buildPairKey(z.getUnderValuedTicker(), z.getOverValuedTicker()))
        );

        int removed = beforeSize - zScoreDataList.size();
        if (removed > 0) {
            log.info("üö´ –ò—Å–∫–ª—é—á–µ–Ω–æ {} —É–∂–µ —Ç–æ—Ä–≥—É—é—â–∏—Ö—Å—è –ø–∞—Ä –∏–∑ ZScoreData", removed);
        } else {
            log.debug("‚úÖ –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Ç–æ—Ä–≥–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–∏ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –∏—Å–∫–ª—é—á–µ–Ω–æ.");
        }
    }

    /**
     * –°—Ç—Ä–æ–∏—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –ø–∞—Ä—ã, –Ω–µ –∑–∞–≤–∏—Å—è—â–∏–π –æ—Ç –ø–æ—Ä—è–¥–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–∞—Ä –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫–æ–π —Ç–∏–∫–µ—Ä —É–∫–∞–∑–∞–Ω –ø–µ—Ä–≤—ã–º
     */
    private String buildPairKey(String ticker1, String ticker2) {
        return Stream.of(ticker1, ticker2)
                .sorted()
                .collect(Collectors.joining("-"));
    }

    // ======== –í–ê–õ–ò–î–ê–¶–ò–Ø –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–ò –°–í–ï–ß–ï–ô ========
    
    /**
     * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Å–≤–µ—á–µ–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Python API
     * –£–±–∏—Ä–∞–µ—Ç —Ç–∏–∫–µ—Ä—ã —Å —Ä–∞–∑–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–≤–µ—á–µ–π, —Ä–∞–∑–Ω—ã–º–∏ —Ç–∞–π–º—à—Ç–∞–º–ø–∞–º–∏ –Ω–∞—á–∞–ª–∞/–∫–æ–Ω—Ü–∞
     */
    private Map<String, List<Candle>> validateCandlesConsistency(Map<String, List<Candle>> candlesMap, String timeframe) {
        if (candlesMap == null || candlesMap.isEmpty()) {
            return new HashMap<>();
        }
        
        log.info("üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–ò: –ü—Ä–æ–≤–µ—Ä—è–µ–º {} —Ç–∏–∫–µ—Ä–æ–≤ (—Ç–∞–π–º—Ñ—Ä–µ–π–º: {})", 
                candlesMap.size(), timeframe);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–π —Ç–∏–∫–µ—Ä (BTC-USDT-SWAP –∏–ª–∏ –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π)
        String referenceTicker = candlesMap.containsKey("BTC-USDT-SWAP") ? 
                "BTC-USDT-SWAP" : candlesMap.keySet().iterator().next();
        
        List<Candle> referenceCandles = candlesMap.get(referenceTicker);
        int referenceCount = referenceCandles.size();
        long referenceStart = referenceCandles.get(0).getTimestamp();
        long referenceEnd = referenceCandles.get(referenceCandles.size() - 1).getTimestamp();
        
        log.info("üéØ –≠–¢–ê–õ–û–ù: {} - {} —Å–≤–µ—á–µ–π, {}-{}", 
                referenceTicker, referenceCount, 
                formatTimestamp(referenceStart), formatTimestamp(referenceEnd));
        
        Map<String, List<Candle>> validatedCandles = new HashMap<>();
        List<String> invalidTickers = new ArrayList<>();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–∫–µ—Ä –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —ç—Ç–∞–ª–æ–Ω—É
        for (Map.Entry<String, List<Candle>> entry : candlesMap.entrySet()) {
            String ticker = entry.getKey();
            List<Candle> candles = entry.getValue();
            
            if (candles.size() == referenceCount &&
                candles.get(0).getTimestamp() == referenceStart &&
                candles.get(candles.size() - 1).getTimestamp() == referenceEnd) {
                
                validatedCandles.put(ticker, candles);
            } else {
                invalidTickers.add(String.format("%s(—Å–≤–µ—á–µ–π:%d‚â†%d, –Ω–∞—á–∞–ª–æ:%s‚â†%s, –∫–æ–Ω–µ—Ü:%s‚â†%s)", 
                        ticker, candles.size(), referenceCount,
                        formatTimestamp(candles.get(0).getTimestamp()), formatTimestamp(referenceStart),
                        formatTimestamp(candles.get(candles.size() - 1).getTimestamp()), formatTimestamp(referenceEnd)));
            }
        }
        
        int validCount = validatedCandles.size();
        double validPercent = (double) validCount / candlesMap.size() * 100;
        
        log.info("üìä –í–ê–õ–ò–î–ê–¶–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢:");
        log.info("   ‚úÖ –í–∞–ª–∏–¥–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã: {} –∏–∑ {} ({}%)", validCount, candlesMap.size(), String.format("%.1f", validPercent));
        
        if (!invalidTickers.isEmpty()) {
            log.warn("   ‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã ({}): {}", invalidTickers.size(), String.join(", ", invalidTickers));
        }
        
        // –ï—Å–ª–∏ –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ –º–µ–Ω–µ–µ 100%, —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
        if (validPercent < 100.0) {
            log.error("üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –¢–æ–ª—å–∫–æ {}% —Ç–∏–∫–µ—Ä–æ–≤ –≤–∞–ª–∏–¥–Ω—ã - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏!", validPercent);
            return new HashMap<>(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∫–∞—Ä—Ç—É
        }
        
        if (validCount < candlesMap.size()) {
            log.warn("üóëÔ∏è –ò–°–ö–õ–Æ–ß–ï–ù–´: {} —Ç–∏–∫–µ—Ä–æ–≤ - {}", invalidTickers.size(), String.join(", ", invalidTickers));
        }
        
        return validatedCandles;
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç timestamp –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö
     */
    private String formatTimestamp(long timestamp) {
        if (timestamp <= 0) return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç timestamp: –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, —Ç–æ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö, –∏–Ω–∞—á–µ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            if (timestamp > 9999999999L) { // –±–æ–ª—å—à–µ —á–µ–º 2001 –≥–æ–¥ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                return java.time.Instant.ofEpochMilli(timestamp).toString();
            } else {
                return java.time.Instant.ofEpochSecond(timestamp).toString();
            }
        } catch (Exception e) {
            return "–æ—à–∏–±–∫–∞_—Ñ–æ—Ä–º–∞—Ç–∞";
        }
    }

    // ======== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ========

    private Map<String, List<Candle>> getCandlesForAnalysis(Settings settings, String timeframe, String period) {
        try {
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –¥–ª—è –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            int candleLimit = calculateCandleLimit(timeframe, period);
            log.info("üìä –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º {} —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ {} –∏ –ø–µ—Ä–∏–æ–¥–∞ {}", candleLimit, timeframe, period);

            // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ candles –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
            return getCandlesExtended(settings, timeframe, candleLimit);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–µ—á–µ–π: {}", e.getMessage(), e);
            return new HashMap<>();
        }
    }

    private Map<String, List<Candle>> getCandlesExtended(Settings settings, String timeframe, int candleLimit) {
        try {
            log.info("üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å {} —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ {} —á–µ—Ä–µ–∑ candles –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å",
                    candleLimit, timeframe);

            ExtendedCandlesRequest request = ExtendedCandlesRequest.builder()
                    .timeframe(timeframe)
                    .candleLimit(candleLimit)
                    .minVolume(settings.getMinVolume())
                    .useMinVolumeFilter(settings.isUseMinVolumeFilter())
                    .minimumLotBlacklist(settings.getMinimumLotBlacklist())
                    .tickers(null) // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã
                    .excludeTickers(null) // –ù–∏–∫–æ–≥–æ –Ω–µ –∏—Å–∫–ª—é—á–∞–µ–º
                    .skipValidation(false) // –í–ê–ñ–ù–û: –í–∫–ª—é—á–∞–µ–º –¥–æ–≥—Ä—É–∑–∫—É –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å OKX
                    .build();

            Map<String, List<Candle>> result = candlesFeignClient.getAllCandlesExtended(request);

            if (result != null && !result.isEmpty()) {
                int totalCandles = result.values().stream().mapToInt(List::size).sum();
                int avgCandles = result.values().stream().mapToInt(List::size).sum() / result.size();
                log.info("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {} —Ç–∏–∫–µ—Ä–æ–≤ —Å–æ —Å—Ä–µ–¥–Ω–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º {} —Å–≤–µ—á–µ–π (–≤—Å–µ–≥–æ {} —Å–≤–µ—á–µ–π)",
                        result.size(), avgCandles, totalCandles);
            }

            return result != null ? result : new HashMap<>();

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–µ—á–µ–π: {}", e.getMessage(), e);
            // Fallback –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º—É –º–µ—Ç–æ–¥—É —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
            log.warn("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º—É –º–µ—Ç–æ–¥—É —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º 300 —Å–≤–µ—á–µ–π");
            ExtendedCandlesRequest fallbackRequest = ExtendedCandlesRequest.builder()
                    .timeframe(timeframe)
                    .candleLimit(300)
                    .minVolume(settings.getMinVolume())
                    .useMinVolumeFilter(settings.isUseMinVolumeFilter())
                    .minimumLotBlacklist(settings.getMinimumLotBlacklist())
                    .tickers(null)
                    .excludeTickers(null)
                    .build();
            return candlesFeignClient.getAllCandlesExtended(fallbackRequest);
        }
    }

    private int calculateCandleLimit(String timeframe, String period) {
        int multiplier = switch (period.toLowerCase()) {
            case "–¥–µ–Ω—å" -> 1;
            case "–Ω–µ–¥–µ–ª—è" -> 7;
            case "–º–µ—Å—è—Ü" -> 30;
            case "6 –º–µ—Å—è—Ü–µ–≤" -> 180;  // 6 –º–µ—Å—è—Ü–µ–≤ = 180 –¥–Ω–µ–π
            case "1 –≥–æ–¥" -> 365;
            case "2 –≥–æ–¥–∞" -> 730;
            case "3 –≥–æ–¥–∞" -> 1095;
            default -> 30;
        };

        int idealLimit = switch (timeframe) {
            case "1m" -> multiplier * 24 * 60;
            case "5m" -> multiplier * 24 * 12;
            case "15m" -> multiplier * 24 * 4;
            case "1H" -> multiplier * 24;
            case "4H" -> multiplier * 6;
            case "1D" -> multiplier;
            case "1W" -> multiplier / 7;
            case "1M" -> multiplier / 30;
            default -> multiplier * 24;
        };

        return Math.max(100, idealLimit);
    }

    private Map<String, Object> buildAnalysisSettings(Map<String, Object> searchSettings) {
        Map<String, Object> settings = new HashMap<>();

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        settings.put("minWindowSize", 100);
        settings.put("minCorrelation", 0.1);
        settings.put("maxPValue", 1.0);
        settings.put("maxAdfValue", 1.0);
        settings.put("minRSquared", 0.1);

        // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if (searchSettings != null) {
            searchSettings.forEach((key, value) -> {
                if (value != null) {
                    settings.put(key, value);
                }
            });
        }

        return settings;
    }

    public void saveSearchResults(StabilityResponseDto response, String timeframe,
                                  String period, Map<String, Object> searchSettings) {
        if (response.getResults() == null || response.getResults().isEmpty()) {
            return;
        }

        int savedCount = 0;
        int skippedCount = 0;

        // –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ - —É–±–∏—Ä–∞–µ–º —Å–ª–æ–∂–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        for (StabilityResultDto result : response.getResults()) {
            try {
                // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—É –ë–ï–ó –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö (–±—ã—Å—Ç—Ä–µ–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ)
                Pair pair = Pair.fromStabilityResult(result, timeframe, period, searchSettings);
                if (pair != null && pair.getTickerA() != null && pair.getTickerB() != null) {
                    try {
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                        savePairSafely(pair);
                        savedCount++;
                    } catch (Exception saveEx) {
                        // –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                        if (saveEx.getMessage() != null && (saveEx.getMessage().contains("unique constraint") || 
                                                           saveEx.getMessage().contains("duplicate key"))) {
                            skippedCount++;
                        } else {
                            log.debug("üîÑ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—É {}-{} [{}][{}]: {}", 
                                     result.getTickerA(), result.getTickerB(), timeframe, period, saveEx.getMessage());
                            skippedCount++;
                        }
                    }
                } else {
                    skippedCount++;
                }
            } catch (Exception e) {
                log.debug("üîÑ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—É {}-{} [{}][{}] –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è", 
                         result.getTickerA(), result.getTickerB(), timeframe, period);
                skippedCount++;
            }
        }

        if (savedCount > 0 || skippedCount > 0) {
            log.info("üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è [{}][{}]: {} –Ω–æ–≤—ã—Ö –ø–∞—Ä, {} –ø—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤", 
                    timeframe, period, savedCount, skippedCount);
        }
    }

    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
     */
    @Transactional(propagation = Propagation.REQUIRES_NEW)
    protected void savePairSafely(Pair pair) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—ã –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è SQL –æ—à–∏–±–æ–∫
            boolean exists = pairRepository.existsByTickerAAndTickerBAndTimeframeAndPeriodAndType(
                    pair.getTickerA(), pair.getTickerB(), pair.getTimeframe(), pair.getPeriod(), pair.getType());
            
            if (exists) {
                log.debug("üîÑ –ü–∞—Ä–∞ {}/{} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º", pair.getTickerA(), pair.getTickerB());
                return;
            }
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å Hibernate session
            Pair detachedPair = new Pair();
            
            // –ö–æ–ø–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ Pair –∫–ª–∞—Å—Å–∞)
            detachedPair.setType(pair.getType());
            detachedPair.setStatus(pair.getStatus());
            detachedPair.setTickerA(pair.getTickerA());
            detachedPair.setTickerB(pair.getTickerB());
            detachedPair.setPairName(pair.getPairName());
            detachedPair.setTimeframe(pair.getTimeframe());
            detachedPair.setPeriod(pair.getPeriod());
            detachedPair.setSearchDate(pair.getSearchDate());
            detachedPair.setCreatedAt(pair.getCreatedAt());
            
            // –ö–æ–ø–∏—Ä—É–µ–º StablePair –ø–æ–ª—è
            detachedPair.setTotalScore(pair.getTotalScore());
            detachedPair.setStabilityRating(pair.getStabilityRating());
            detachedPair.setTradeable(pair.isTradeable());
            detachedPair.setDataPoints(pair.getDataPoints());
            detachedPair.setCandleCount(pair.getCandleCount());
            detachedPair.setAnalysisTimeSeconds(pair.getAnalysisTimeSeconds());
            detachedPair.setSearchSettings(pair.getSearchSettings());
            detachedPair.setAnalysisResults(pair.getAnalysisResults());
            
            // –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            if (pair.getZScoreCurrent() != null) {
                detachedPair.setZScoreCurrent(pair.getZScoreCurrent());
            }
            if (pair.getCorrelationCurrent() != null) {
                detachedPair.setCorrelationCurrent(pair.getCorrelationCurrent());
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∏—Å—Ç—ã–π –æ–±—ä–µ–∫—Ç
            pairRepository.save(detachedPair);
            
        } catch (Exception e) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            String errorMessage = e.getMessage();
            if (errorMessage != null && (
                errorMessage.contains("duplicate key value violates unique constraint") ||
                errorMessage.contains("uk_stable_pairs_unique") ||
                errorMessage.contains("ConstraintViolationException") ||
                e.getCause() != null && e.getCause().getMessage() != null && 
                e.getCause().getMessage().contains("duplicate key"))) {
                
                log.info("üîÑ –ü–∞—Ä–∞ {}/{} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç",
                         pair.getTickerA(), pair.getTickerB());
                return; // –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            }
            
            // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º
            log.debug("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä—ã: {}", errorMessage);
            throw e;
        }
    }

    // ======== –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –†–ê–ó–ù–´–ú–ò –¢–ò–ü–ê–ú–ò –ü–ê–† ========

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä—ã –ø–æ —Ç–∏–ø—É
     */
    public List<Pair> getPairsByType(PairType type) {
        return pairRepository.findByTypeOrderByCreatedAtDesc(type);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã
     */
    public List<Pair> getActiveTradingPairs() {
        return pairRepository.findActiveTradingPairs();
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã
     */
    public List<Pair> getCointegrationPairs() {
        return pairRepository.findCointegrationPairs();
    }
}