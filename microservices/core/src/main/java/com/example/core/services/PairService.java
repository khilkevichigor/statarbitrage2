package com.example.core.services;

import com.example.core.client.CandlesFeignClient;
import com.example.core.experemental.stability.dto.StabilityResponseDto;
import com.example.core.repositories.PairRepository;
import com.example.shared.dto.*;
import com.example.shared.enums.PairType;
import com.example.shared.enums.TradeStatus;
import com.example.shared.models.Pair;
import com.example.shared.models.Settings;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;

@Slf4j
@Service
@RequiredArgsConstructor
public class PairService {
    private final PairRepository pairRepository;
    private final CalculateChangesService calculateChangesServiceImpl;
    private final EntryPointService entryPointService;
    private final UpdateZScoreDataCurrentService updateZScoreDataCurrentService;
    private final ExcludeExistingTradingPairsService excludeExistingTradingPairsService;
    private final UpdateChangesService updateChangesService;
    private final CreatePairDataService createPairDataService;
    private final CalculateUnrealizedProfitTotalService calculateUnrealizedProfitTotalService;
    private final PortfolioService portfolioServiceImpl;
    private final UpdateSettingsParamService updateSettingsParamService;
    private final SearchStablePairService searchStablePairService;
    private final CandlesFeignClient candlesFeignClient;
    private final SettingsService settingsService;
    private final PythonAnalysisService pythonAnalysisService; // –ó–∞–º–µ–Ω–∏–ª–∏ ZScoreService –Ω–∞ PythonAnalysisService
    private final ChartService chartService;

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –ø–∞—Ä–∞–º
     */
    public Map<String, Object> getSearchStatistics() {
        LocalDateTime weekAgo = LocalDateTime.now().minusDays(7);
        List<Object[]> stats = pairRepository.getStabilityRatingStats(weekAgo);

        Map<String, Object> result = new HashMap<>();
        result.put("totalFound", pairRepository.findFoundStablePairs().size());
        result.put("totalInMonitoring", pairRepository.findStablePairsInMonitoring().size());

        Map<String, Long> ratingStats = new HashMap<>();
        for (Object[] stat : stats) {
            ratingStats.put((String) stat[0], (Long) stat[1]);
        }
        result.put("ratingDistribution", ratingStats);

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º
        List<Object[]> typeStats = pairRepository.countPairsByType();
        Map<String, Long> typeDistribution = new HashMap<>();
        for (Object[] stat : typeStats) {
            typeDistribution.put(stat[0].toString(), (Long) stat[1]);
        }
        result.put("typeDistribution", typeDistribution);

        return result;
    }

    // ======== Z-SCORE –†–ê–°–ß–ï–¢–´ ========

    /**
     * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å Z-Score –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –ø–∞—Ä—ã –∏ –≤–µ—Ä–Ω—É—Ç—å –≥–æ—Ç–æ–≤—É—é Pair —Å –¥–∞–Ω–Ω—ã–º–∏
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–∞—Ä—ã –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
     */
    public Pair calculateZScoreForStablePair(Pair stablePair) {
        if (!stablePair.getType().isStable()) {
            throw new IllegalArgumentException("–†–∞—Å—á–µ—Ç Z-Score –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä");
        }

        try {
            log.info("üßÆ –†–∞—Å—á–µ—Ç Z-Score –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –ø–∞—Ä—ã {}", stablePair.getPairName());

            // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
            Settings settings = settingsService.getSettings();

            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω–æ —Ç–µ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —á—Ç–æ –∏ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä
            String timeframe = stablePair.getTimeframe() != null ? stablePair.getTimeframe() : settings.getTimeframe();
            String period = stablePair.getPeriod() != null ? stablePair.getPeriod() : "1 –≥–æ–¥";
            // –ö–†–ò–¢–ò–ß–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –ø–∞—Ä—ã!
            int candleLimit = stablePair.getCandleCount() != null ? stablePair.getCandleCount() : 1000;

            log.info("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω–æ —Ç–µ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —á—Ç–æ –∏ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ - timeframe: {}, period: {}, candleCount: {}",
                    timeframe, period, candleLimit);

            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä—ã
            ExtendedCandlesRequest extendedRequest = ExtendedCandlesRequest.builder()
                    .timeframe(timeframe)
                    .candleLimit(candleLimit)
                    .minVolume(settings.getMinVolume())
                    .useMinVolumeFilter(settings.isUseMinVolumeFilter())
                    .minimumLotBlacklist(settings.getMinimumLotBlacklist())
                    .tickers(List.of(stablePair.getTickerA(), stablePair.getTickerB()))
                    .excludeTickers(null)
                    .build();

            // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ –¥–ª—è –ø–∞—Ä—ã
            Map<String, List<Candle>> candlesMap = candlesFeignClient.getValidatedCandlesExtended(extendedRequest);

            if (candlesMap == null || candlesMap.isEmpty()) {
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π –¥–ª—è –ø–∞—Ä—ã {}", stablePair.getPairName());
                return null;
            }

            // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –î–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –û–ë–ê —Ç–∏–∫–µ—Ä–∞!
            if (candlesMap.size() != 2) {
                log.error("‚ùå CANDLES –§–ò–õ–¨–¢–†–ê–¶–ò–Ø: Candles-—Å–µ—Ä–≤–∏—Å –≤–µ—Ä–Ω—É–ª {} —Ç–∏–∫–µ—Ä–æ–≤ –≤–º–µ—Å—Ç–æ 2 –¥–ª—è –ø–∞—Ä—ã {} - –æ–¥–∏–Ω —Ç–∏–∫–µ—Ä –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω!",
                        candlesMap.size(), stablePair.getPairName());
                log.error("‚ùå –î–û–°–¢–£–ü–ù–´–ï –¢–ò–ö–ï–†–´: {}", candlesMap.keySet());
                throw new IllegalStateException(String.format(
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–æ–∏—Ö —Ç–∏–∫–µ—Ä–æ–≤ –ø–∞—Ä—ã %s. Candles-—Å–µ—Ä–≤–∏—Å –≤–µ—Ä–Ω—É–ª —Ç–æ–ª—å–∫–æ %d –∏–∑ 2 —Ç–∏–∫–µ—Ä–æ–≤: %s",
                        stablePair.getPairName(), candlesMap.size(), candlesMap.keySet()));
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–≤–µ—á–µ–π –¥–ª—è –æ–±–æ–∏—Ö —Ç–∏–∫–µ—Ä–æ–≤
            List<Candle> longCandles = candlesMap.get(stablePair.getTickerA());
            List<Candle> shortCandles = candlesMap.get(stablePair.getTickerB());

            if (longCandles == null || longCandles.isEmpty() ||
                    shortCandles == null || shortCandles.isEmpty()) {
                log.warn("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è –ø–∞—Ä—ã {} (long: {}, short: {})",
                        stablePair.getPairName(),
                        longCandles != null ? longCandles.size() : 0,
                        shortCandles != null ? shortCandles.size() : 0);
                return null;
            }

            // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º!
            if (longCandles.size() != shortCandles.size()) {
                log.error("‚ùå –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –°–í–ï–ß–ï–ô: –ü–∞—Ä–∞ {} –∏–º–µ–µ—Ç —Ä–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π: {} vs {} - –ë–õ–û–ö–ò–†–£–ï–ú —Ä–∞—Å—á–µ—Ç Z-Score!",
                        stablePair.getPairName(), longCandles.size(), shortCandles.size());
                throw new IllegalStateException(String.format(
                        "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å Z-Score –¥–ª—è –ø–∞—Ä—ã %s: —Ä–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π (%d vs %d)",
                        stablePair.getPairName(), longCandles.size(), shortCandles.size()));
            }

            log.info("‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –°–í–ï–ß–ï–ô: –ü–∞—Ä–∞ {} –∏–º–µ–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π: {}",
                    stablePair.getPairName(), longCandles.size());

            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é Pair –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
            Pair tradingPair = new Pair();
            tradingPair.setType(PairType.TRADING);
            tradingPair.setTickerA(stablePair.getTickerA());
            tradingPair.setTickerB(stablePair.getTickerB());
            tradingPair.setPairName(stablePair.getPairName());
            tradingPair.setStatus(TradeStatus.OBSERVED); // –°—Ç–∞—Ç—É—Å "–Ω–∞–±–ª—é–¥–∞–µ–º–∞—è"
            tradingPair.setLongTickerCandles(longCandles);
            tradingPair.setShortTickerCandles(shortCandles);

            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º Z-Score –¥–∞–Ω–Ω—ã–µ
            ZScoreData zScoreData = pythonAnalysisService.calculateZScoreData(settings, candlesMap);

            if (zScoreData != null) {
                // –û–±–Ω–æ–≤–ª—è–µ–º Z-Score –¥–∞–Ω–Ω—ã–µ –≤ TradingPair
                updateZScoreDataCurrent(tradingPair, zScoreData);

                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∏–∫—Å–µ–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥
                chartService.calculatePixelSpreadIfNeeded(tradingPair);
                chartService.addCurrentPixelSpreadPoint(tradingPair);

                log.info("‚úÖ Z-Score —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –¥–ª—è –ø–∞—Ä—ã {}. Latest Z-Score: {}",
                        stablePair.getPairName(), zScoreData.getLatestZScore());

                return tradingPair;
            } else {
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å Z-Score –¥–ª—è –ø–∞—Ä—ã {}", stablePair.getPairName());
                return null;
            }

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ Z-Score –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –ø–∞—Ä—ã {}: {}",
                    stablePair.getPairName(), e.getMessage(), e);
            return null;
        }
    }

    // ======== –ú–ï–¢–û–î–´ –î–õ–Ø –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –ü–ê–† ========

    /**
     * –ò—Å–∫–ª—é—á–∞–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ ZScoreData —Ç–µ –ø–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ —Ç–æ—Ä–≥—É—é—Ç—Å—è
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
     */
    public void excludeExistingPairs(List<ZScoreData> zScoreDataList) {
        if (zScoreDataList == null || zScoreDataList.isEmpty()) {
            log.debug("–°–ø–∏—Å–æ–∫ ZScoreData –ø—É—Å—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä.");
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã
        List<Pair> tradingPairs = pairRepository.findTradingPairsByStatus(TradeStatus.TRADING);
        if (tradingPairs.isEmpty()) {
            log.debug("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä, –≤—Å–µ ZScoreData –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è.");
            return;
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–∞–±–æ—Ä –∫–ª—é—á–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        Set<String> existingKeys = tradingPairs.stream()
                .map(pair -> buildPairKey(pair.getTickerA(), pair.getTickerB()))
                .collect(Collectors.toSet());

        int beforeSize = zScoreDataList.size();

        // –£–¥–∞–ª—è–µ–º ZScoreData –¥–ª—è —É–∂–µ —Ç–æ—Ä–≥—É—é—â–∏—Ö—Å—è –ø–∞—Ä
        zScoreDataList.removeIf(z ->
                existingKeys.contains(buildPairKey(z.getUnderValuedTicker(), z.getOverValuedTicker()))
        );

        int removed = beforeSize - zScoreDataList.size();
        if (removed > 0) {
            log.info("üö´ –ò—Å–∫–ª—é—á–µ–Ω–æ {} —É–∂–µ —Ç–æ—Ä–≥—É—é—â–∏—Ö—Å—è –ø–∞—Ä –∏–∑ ZScoreData", removed);
        } else {
            log.debug("‚úÖ –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Ç–æ—Ä–≥–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–∏ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –∏—Å–∫–ª—é—á–µ–Ω–æ.");
        }
    }

    /**
     * –°—Ç—Ä–æ–∏—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –ø–∞—Ä—ã, –Ω–µ –∑–∞–≤–∏—Å—è—â–∏–π –æ—Ç –ø–æ—Ä—è–¥–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–∞—Ä –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫–æ–π —Ç–∏–∫–µ—Ä —É–∫–∞–∑–∞–Ω –ø–µ—Ä–≤—ã–º
     */
    private String buildPairKey(String ticker1, String ticker2) {
        return Stream.of(ticker1, ticker2)
                .sorted()
                .collect(Collectors.joining("-"));
    }

    /**
     * –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
     */
    @Transactional
    public void addToMonitoring(Long pairId) {
        Pair pair = pairRepository.findById(pairId)
                .orElseThrow(() -> new RuntimeException("–ü–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: " + pairId));

        if (!pair.getType().isStable()) {
            throw new IllegalArgumentException("–¢–æ–ª—å–∫–æ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–∞—Ä—ã –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥");
        }

        pair.setInMonitoring(true);
        pairRepository.save(pair);

        log.info("‚ûï –ü–∞—Ä–∞ {}/{} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", pair.getTickerA(), pair.getTickerB());
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å –ø–∞—Ä—É –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    @Transactional
    public void removeFromMonitoring(Long pairId) {
        Pair pair = pairRepository.findById(pairId)
                .orElseThrow(() -> new RuntimeException("–ü–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: " + pairId));

        if (!pair.getType().isStable()) {
            throw new IllegalArgumentException("–¢–æ–ª—å–∫–æ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–∞—Ä—ã –º–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞");
        }

        pair.setInMonitoring(false);
        pairRepository.save(pair);

        log.info("‚ûñ –ü–∞—Ä–∞ {}/{} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", pair.getTickerA(), pair.getTickerB());
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—É—é –ø–∞—Ä—É
     */
    @Transactional
    public void deleteFoundPair(Long pairId) {
        Pair pair = pairRepository.findById(pairId)
                .orElseThrow(() -> new RuntimeException("–ü–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: " + pairId));

        if (pair.getType().isStable() && pair.isInMonitoring()) {
            throw new IllegalArgumentException("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–∞—Ä—É, –Ω–∞—Ö–æ–¥—è—â—É—é—Å—è –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ");
        }

        pairRepository.deleteById(pairId);
        log.info("üóëÔ∏è –ü–∞—Ä–∞ —É–¥–∞–ª–µ–Ω–∞: {}", pairId);
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä—ã –ø–æ –æ–±—ä–µ–∫—Ç—É
     */
    @Transactional
    public void deletePair(Pair pair) {
        if (pair == null) {
            log.warn("–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è null –ø–∞—Ä—ã");
            return;
        }

        if (pair.getType() != null && pair.getType().isStable() && pair.isInMonitoring()) {
            throw new IllegalArgumentException("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–∞—Ä—É, –Ω–∞—Ö–æ–¥—è—â—É—é—Å—è –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ");
        }

        pairRepository.delete(pair);
        log.info("üóëÔ∏è –ü–∞—Ä–∞ —É–¥–∞–ª–µ–Ω–∞: {} (ID: {})", pair.getPairName(), pair.getId());
    }


    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–∞—Ä—ã (–Ω–µ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ)
     */
    @Transactional
    public int clearAllFoundPairs() {
        List<Pair> pairsToDelete = pairRepository.findFoundStablePairs();
        int count = pairsToDelete.size();

        if (count > 0) {
            pairRepository.deleteAll(pairsToDelete);
            log.info("üßπ –û—á–∏—â–µ–Ω–æ {} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ä", count);
        }

        return count;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä—ã –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
     */
    public List<Pair> getMonitoringPairs() {
        return pairRepository.findStablePairsInMonitoring();
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–∞—Ä—ã (–Ω–µ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ)
     */
    public List<Pair> getAllFoundPairs() {
        return pairRepository.findFoundStablePairs();
    }

    /**
     * –ü–æ–∏—Å–∫ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø–∞—Ä —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º–∏ –∏ –ø–µ—Ä–∏–æ–¥–∞–º–∏
     */
    public StabilityResponseDto searchStablePairs(Set<String> timeframes, Set<String> periods,
                                                  Map<String, Object> searchSettings) {
        return searchStablePairService.searchStablePairs(timeframes, periods, searchSettings);
    }

    public List<Pair> createPairDataList(List<ZScoreData> top, Map<String, List<Candle>> candlesMap) {
        List<Pair> pairs = createPairDataService.createPairs(top, candlesMap);
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        List<Pair> savedPairs = new ArrayList<>();
        for (Pair pair : pairs) {
            try {
                save(pair);
                savedPairs.add(pair);
            } catch (RuntimeException e) {
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä—É {}/{}: {} - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º",
                        pair.getLongTicker(), pair.getShortTicker(), e.getMessage());
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–∞—Ä
            }
        }

        log.debug("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {}/{} –ø–∞—Ä", savedPairs.size(), pairs.size());

        return pairs;
    }

    public void updateZScoreDataCurrent(Pair tradingPair, ZScoreData zScoreData) {
        updateZScoreDataCurrentService.updateCurrent(tradingPair, zScoreData);
    }

    public void save(Pair tradingPair) {
        tradingPair.setUpdatedTime(LocalDateTime.now()); //–ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
        pairRepository.save(tradingPair);
    }

    public void saveAll(List<Pair> tradingPairList) {
        tradingPairList.forEach(pairData -> pairData.setUpdatedTime(LocalDateTime.now()));
        pairRepository.saveAll(tradingPairList);
    }

    public Pair findById(Long id) {
        return pairRepository.findById(id).orElse(null);
    }

    public List<Pair> findAllByStatusOrderByEntryTimeTodayDesc(TradeStatus status) {
        LocalDateTime startOfDay = LocalDate.now().atStartOfDay();
        return pairRepository.findTradingPairsByStatusAndEntryTimeAfter(status, startOfDay);
    }

    public List<Pair> findAllByStatusOrderByEntryTimeDesc(TradeStatus status) {
        return pairRepository.findTradingPairsByStatus(status);
    }

    public List<Pair> findAllByStatusOrderByUpdatedTimeDesc(TradeStatus status) {
        return pairRepository.findTradingPairsByStatus(status);
    }

    public List<Pair> findAllByStatusIn(List<TradeStatus> statuses) {
        List<Pair> result = new ArrayList<>();
        for (TradeStatus status : statuses) {
            result.addAll(pairRepository.findTradingPairsByStatus(status));
        }
        return result;
    }

    public List<Pair> findByTickers(String longTicker, String shortTicker) {
        return pairRepository.findByTickerAAndTickerB(longTicker, shortTicker)
                .stream()
                .filter(pair -> pair.getType() == PairType.TRADING)
                .toList();
    }

    @Transactional
    public int deleteAllByStatus(TradeStatus status) {
        return pairRepository.deleteByTypeAndStatus(PairType.TRADING, status);
    }

    public void delete(Pair tradingPair) {
        pairRepository.delete(tradingPair);
    }

    public void excludeExistingTradingPairs(List<ZScoreData> zScoreDataList) {
        excludeExistingTradingPairsService.exclude(zScoreDataList);
    }

    public BigDecimal getUnrealizedProfitPercentTotal() {
        return calculateUnrealizedProfitTotalService.getUnrealizedProfitPercentTotal();
    }

    public BigDecimal getUnrealizedProfitUSDTTotal() {
        return calculateUnrealizedProfitTotalService.getUnrealizedProfitUSDTTotal();
    }

    public void addEntryPoints(Pair tradingPair, ZScoreData zScoreData, TradeResult openLongTradeResult, TradeResult openShortTradeResult) {
        entryPointService.addEntryPoints(tradingPair, zScoreData, openLongTradeResult, openShortTradeResult);
    }

    public void addChanges(Pair tradingPair) {
        ChangesData changes = calculateChangesServiceImpl.getChanges(tradingPair);
        updateChangesService.update(tradingPair, changes);
    }

    public void updatePortfolioBalanceBeforeTradeUSDT(Pair tradingPair) {
        portfolioServiceImpl.updatePortfolioBalanceBeforeTradeUSDT(tradingPair);
    }

    public void updatePortfolioBalanceAfterTradeUSDT(Pair tradingPair) {
        portfolioServiceImpl.updatePortfolioBalanceAfterTradeUSDT(tradingPair);
    }

    public void updateSettingsParam(Pair tradingPair, Settings settings) {
        updateSettingsParamService.updateSettingsParam(tradingPair, settings);
    }
}
