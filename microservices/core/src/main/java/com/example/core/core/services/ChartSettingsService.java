package com.example.core.core.services;

import com.example.core.common.model.ChartSettings;
import com.example.core.core.repositories.ChartSettingsRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Slf4j
@Service
@RequiredArgsConstructor
@Transactional
public class ChartSettingsService {

    private final ChartSettingsRepository chartSettingsRepository;

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ä—Ç–∞ –ø–æ —Ç–∏–ø—É
     *
     * @param chartType —Ç–∏–ø —á–∞—Ä—Ç–∞
     * @return –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ä—Ç–∞ (—Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã)
     */
    public ChartSettings getChartSettings(String chartType) {
        return chartSettingsRepository.findByChartType(chartType)
                .orElseGet(() -> createDefaultSettings(chartType));
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ä—Ç–∞
     *
     * @param settings –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
     * @return —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
     */
    public ChartSettings saveChartSettings(ChartSettings settings) {
        try {
            ChartSettings savedSettings = chartSettingsRepository.save(settings);
            log.debug("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ä—Ç–∞ —Ç–∏–ø–∞: {}", settings.getChartType());
            return savedSettings;
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ä—Ç–∞ —Ç–∏–ø–∞: {}", settings.getChartType(), e);
            throw e;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É —á–∞—Ä—Ç–∞
     *
     * @param chartType   —Ç–∏–ø —á–∞—Ä—Ç–∞
     * @param settingName –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
     * @param value       –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
     */
    public void updateChartSetting(String chartType, String settingName, boolean value) {
        ChartSettings settings = getChartSettings(chartType);

        switch (settingName.toLowerCase()) {
            case "showzscore":
                settings.setShowZScore(value);
                break;
            case "showcombinedprice":
                settings.setShowCombinedPrice(value);
                break;
            case "showpixelspread":
                settings.setShowPixelSpread(value);
                break;
            case "showema":
                settings.setShowEma(value);
                break;
            case "showstochrsi":
                settings.setShowStochRsi(value);
                break;
            case "showprofit":
                settings.setShowProfit(value);
                break;
            case "showentrypoint":
                settings.setShowEntryPoint(value);
                break;
            default:
                log.warn("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Ä—Ç–∞: {}", settingName);
                return;
        }

        saveChartSettings(settings);
        log.debug("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ {} = {} –¥–ª—è —á–∞—Ä—Ç–∞ —Ç–∏–ø–∞ {}", settingName, value, chartType);
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ä—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     *
     * @param chartType —Ç–∏–ø —á–∞—Ä—Ç–∞
     * @return –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     */
    private ChartSettings createDefaultSettings(String chartType) {
        ChartSettings defaultSettings = ChartSettings.builder()
                .chartType(chartType)
                .showZScore(true)
                .showCombinedPrice(true)
                .showPixelSpread(false)
                .showEma(false)
                .showStochRsi(false)
                .showProfit(false)
                .showEntryPoint(true)
                .build();

        log.debug("üÜï –°–æ–∑–¥–∞–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —á–∞—Ä—Ç–∞ —Ç–∏–ø–∞: {}", chartType);
        return saveChartSettings(defaultSettings);
    }
}