version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: statarbitrage-postgres
    hostname: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: statarbitrage
      POSTGRES_USER: statuser
      POSTGRES_PASSWORD: statpass123
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d
    networks:
      - microservices-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U statuser -d statarbitrage" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # pgAdmin4 for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: statarbitrage-pgadmin
    ports:
      - "8080:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@statarbitrage.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - microservices-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: statarbitrage-rabbitmq
    hostname: rabbitmq
    ports:
      - "5672:5672"     # AMQP порт
      - "15672:15672"   # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
      RABBITMQ_DEFAULT_VHOST: /
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - microservices-network
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data:
    name: statarbitrage_postgres_data
  pgadmin_data:
    name: statarbitrage_pgadmin_data
  rabbitmq_data:
    name: statarbitrage_rabbitmq_data

networks:
  microservices-network:
    driver: bridge
    name: statarbitrage-network