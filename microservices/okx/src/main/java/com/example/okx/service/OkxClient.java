package com.example.okx.service;

import com.example.shared.dto.Candle;
import com.example.shared.dto.okx.OkxTickerDto;
import com.example.shared.models.Settings;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.*;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.stream.IntStream;

@Slf4j
@Service
@RequiredArgsConstructor
public class OkxClient {
    // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π HTTP –∫–ª–∏–µ–Ω—Ç —Å –ø—É–ª–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
    private static final OkHttpClient client = new OkHttpClient.Builder()
            .connectTimeout(10, TimeUnit.SECONDS)
            .readTimeout(30, TimeUnit.SECONDS)
            .writeTimeout(10, TimeUnit.SECONDS)
            .connectionPool(new okhttp3.ConnectionPool(20, 5, TimeUnit.MINUTES))
            .build();
    private static final String BASE_URL = "https://www.okx.com";

    // Rate limiting –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ OKX API
    private static final AtomicLong lastRequestTime = new AtomicLong(0);
    private static final long MIN_REQUEST_INTERVAL_MS = 120; // 120–º—Å –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ = 8.3 RPS (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
    private static final int BATCH_SIZE = 50; // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 50 —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞ —Ä–∞–∑

    // –£–º–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è rate limiting
    private void applyRateLimit() {
        long now = System.currentTimeMillis();
        long timeSinceLastRequest = now - lastRequestTime.get();

        if (timeSinceLastRequest < MIN_REQUEST_INTERVAL_MS) {
            long sleepTime = MIN_REQUEST_INTERVAL_MS - timeSinceLastRequest;
            try {
                Thread.sleep(sleepTime);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }

        lastRequestTime.set(System.currentTimeMillis());
    }

    public List<String> getAllSwapTickers(boolean isSorted) {
        applyRateLimit(); // –î–æ–±–∞–≤–ª—è–µ–º rate limiting
        Request request = new Request.Builder()
                .url(BASE_URL + "/api/v5/public/instruments?instType=SWAP")
                .build();

        try {
            Response response = client.newCall(request).execute();
            String json = response.body().string();
            JsonObject obj = JsonParser.parseString(json).getAsJsonObject();
            JsonArray data = obj.getAsJsonArray("data");

            List<String> result = new ArrayList<>();
            for (JsonElement el : data) {
                String instId = el.getAsJsonObject().get("instId").getAsString();
                if (instId.endsWith("-USDT-SWAP")) {
                    result.add(instId);
                }
            }

            return isSorted ? result.stream().sorted().toList() : result;

        } catch (Exception e) {
            log.error("‚ùå " + e.getMessage(), e);
            throw new RuntimeException(e);
        }
    }

    public List<Double> getCloses(String symbol, String timeFrame, int limit) {
        applyRateLimit(); // –î–æ–±–∞–≤–ª—è–µ–º rate limiting
        JsonArray candles = getCandles(symbol, timeFrame, limit);
        List<Double> closes = new ArrayList<>();
        for (int i = candles.size() - 1; i >= 0; i--) {
            JsonArray candle = candles.get(i).getAsJsonArray();
            double close = Double.parseDouble(candle.get(4).getAsString()); //–Ω–∞—á–∏–Ω–∞–µ–º —Å 300 —Å–≤–µ—á–∏
            closes.add(close);
        }
        return closes;
    }

    private JsonArray getCandles(String symbol, String timeFrame, double limit) {
        applyRateLimit(); // –ü—Ä–∏–º–µ–Ω—è–µ–º rate limiting

        int candlesLimit = (int) limit;
        Request request = new Request.Builder()
                .url(BASE_URL + "/api/v5/market/candles?instId=" + symbol + "&bar=" + timeFrame + "&limit=" + candlesLimit)
                .build();
        try {
            Response response = client.newCall(request).execute();
            String json = response.body().string();
            JsonObject obj = JsonParser.parseString(json).getAsJsonObject();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
            JsonArray data = obj.getAsJsonArray("data");
            if (data == null || data.size() == 0) {
                log.warn("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OKX –¥–ª—è {}", symbol);
                return new JsonArray(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ null
            }

            return data;
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–µ—á–µ–π –¥–ª—è {}: {}", symbol, e.getMessage());
            return new JsonArray(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        }
    }

    public List<Candle> getCandleList(String symbol, String timeFrame, double limit) {
        int candlesLimit = (int) limit;
        JsonArray rawCandles = getCandles(symbol, timeFrame, candlesLimit);
        List<Candle> candles = new ArrayList<>();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ rawCandles –Ω–µ null
        if (rawCandles == null || rawCandles.size() == 0) {
            log.warn("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è {}", symbol);
            return candles; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        }

        for (JsonElement el : rawCandles) {
            JsonArray candleArr = el.getAsJsonArray();
            candles.add(Candle.fromJsonArray(candleArr));
        }
        Collections.reverse(candles);
        return candles;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–µ–π —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º after –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
     * –ò–°–ü–†–ê–í–õ–ï–ù–û: after –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –î–û —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ)
     */
    public List<Candle> getCandlesWithBefore(String symbol, String timeFrame, int limit, long afterTimestamp) {
        applyRateLimit();
        JsonArray rawCandles = getCandlesWithBeforeTimestamp(symbol, timeFrame, limit, afterTimestamp);
        List<Candle> candles = new ArrayList<>();

        if (rawCandles == null || rawCandles.size() == 0) {
            log.debug("‚ö†Ô∏è –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è {} –¥–æ {}", symbol, afterTimestamp);
            return candles;
        }

        for (JsonElement el : rawCandles) {
            JsonArray candleArr = el.getAsJsonArray();
            candles.add(Candle.fromJsonArray(candleArr));
        }
        Collections.reverse(candles);
        return candles;
    }

    /**
     * –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–• —Å–≤–µ—á–µ–π —Å after timestamp
     * –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º AFTER –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –î–û —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã–µ)
     */
    private JsonArray getCandlesWithBeforeTimestamp(String symbol, String timeFrame, int limit, long afterTimestamp) {
        // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º AFTER –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã–µ —á–µ–º —É–∫–∞–∑–∞–Ω–Ω–∞—è —Ç–æ—á–∫–∞)
        String url = BASE_URL + "/api/v5/market/history-candles?instId=" + symbol +
                "&bar=" + timeFrame + "&limit=" + limit + "&after=" + afterTimestamp;

        log.warn("üîç DEBUG: OKX API –∑–∞–ø—Ä–æ—Å = {}", url);
        log.warn("üîç DEBUG: –ò—Å–ø–æ–ª—å–∑—É–µ–º AFTER –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –î–û timestamp = {} ({})",
                afterTimestamp, new java.util.Date(afterTimestamp));

        Request request = new Request.Builder().url(url).build();

        try {
            Response response = client.newCall(request).execute();
            String json = response.body().string();

            log.warn("üîç DEBUG: OKX –æ—Ç–≤–µ—Ç –¥–ª—è {} = {}", symbol, json.length() > 500 ? json.substring(0, 500) + "..." : json);

            JsonObject obj = JsonParser.parseString(json).getAsJsonObject();

            JsonArray data = obj.getAsJsonArray("data");
            if (data == null || data.size() == 0) {
                log.debug("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OKX –¥–ª—è {} —Å after={}", symbol, afterTimestamp);
                return new JsonArray();
            }

            // DEBUG: –ø–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—É—é –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–µ—á—É
            if (data.size() > 0) {
                JsonArray firstCandle = data.get(0).getAsJsonArray();
                JsonArray lastCandle = data.get(data.size() - 1).getAsJsonArray();
                long firstTimestamp = Long.parseLong(firstCandle.get(0).getAsString());
                long lastTimestamp = Long.parseLong(lastCandle.get(0).getAsString());

                log.warn("üîç DEBUG: OKX –≤–µ—Ä–Ω—É–ª {} —Å–≤–µ—á–µ–π. –ü–µ—Ä–≤–∞—è: {} ({}), –ü–æ—Å–ª–µ–¥–Ω—è—è: {} ({})",
                        data.size(), firstTimestamp, new java.util.Date(firstTimestamp),
                        lastTimestamp, new java.util.Date(lastTimestamp));

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã - –≤—Å–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –î–û afterTimestamp
                if (lastTimestamp >= afterTimestamp) {
                    log.error("üö® –ü–†–û–ë–õ–ï–ú–ê: –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞ ({}) >= after ({}). OKX –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!",
                            new java.util.Date(lastTimestamp), new java.util.Date(afterTimestamp));
                } else {
                    log.info("‚úÖ –£–°–ü–ï–•: –í—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–≤–µ—á–∏ –î–û —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ {} < {}",
                            new java.util.Date(lastTimestamp), new java.util.Date(afterTimestamp));
                }
            }

            return data;
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–µ—á–µ–π —Å after –¥–ª—è {}: {}", symbol, e.getMessage());
            return new JsonArray();
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–∏–∫–µ—Ä –≤ –≤–∏–¥–µ DTO
     */
    public OkxTickerDto getTickerDto(String symbol) {
        try {
            applyRateLimit(); // –î–æ–±–∞–≤–ª—è–µ–º rate limiting
            JsonArray tickerData = getTicker(symbol);
            return OkxTickerDto.fromJsonArray(tickerData);
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ DTO —Ç–∏–∫–µ—Ä–∞ –¥–ª—è {}: {}", symbol, e.getMessage(), e);
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ä–∞ –¥–ª—è " + symbol, e);
        }
    }

    private JsonArray getTicker(String symbol) {
        Request request = new Request.Builder()
                .url(BASE_URL + "/api/v5/market/ticker?instId=" + symbol)
                .build();

        try {
            Response response = client.newCall(request).execute();
            String json = response.body().string();
            JsonObject obj = JsonParser.parseString(json).getAsJsonObject();
            return obj.getAsJsonArray("data");
        } catch (IOException e) {
            log.error("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage(), e);
            throw new RuntimeException(e);
        }
    }

    public Map<String, List<Candle>> getCandlesMap(List<String> swapTickers, Settings settings, boolean isSorted) {
        long startTime = System.currentTimeMillis();
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º 5 –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ OKX API
        int threadCount = 5;
        ExecutorService executor = Executors.newFixedThreadPool(threadCount);
        log.debug("üîΩ –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–≤–µ—á–µ–π –≤ {} –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è {} —Ç–∏–∫–µ—Ä–æ–≤ (–±–∞—Ç—á–∞–º–∏ –ø–æ {})", threadCount, swapTickers.size(), BATCH_SIZE);
        Map<String, List<Candle>> candlesMap = Collections.synchronizedMap(new LinkedHashMap<>()); //–≤–∞–∂–µ–Ω –ø–æ—Ä—è–¥–æ–∫ —á—Ç–æ–±—ã —Å–∫—Ä–∏–ø—Ç –Ω–µ –º–µ–Ω—è–ª —Å–≤–µ—á–∏ –∏ –∑–Ω–∞–∫ z
        if (isSorted) {
            swapTickers = swapTickers.stream().sorted().toList();
        }
        int candleLimit = (int) settings.getCandleLimit();
        String timeframe = settings.getTimeframe();
        try {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∏–∫–µ—Ä—ã –±–∞—Ç—á–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è rate limiting
            final List<String> tickersFinal = swapTickers;
            List<List<String>> batches = IntStream.range(0, (tickersFinal.size() + BATCH_SIZE - 1) / BATCH_SIZE)
                    .mapToObj(i -> tickersFinal.subList(i * BATCH_SIZE, Math.min((i + 1) * BATCH_SIZE, tickersFinal.size())))
                    .toList();

            log.debug("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {} –±–∞—Ç—á–µ–π –ø–æ {} —Å–∏–º–≤–æ–ª–æ–≤", batches.size(), BATCH_SIZE);

            for (int batchIndex = 0; batchIndex < batches.size(); batchIndex++) {
                List<String> batch = batches.get(batchIndex);
                final String timeframeFinal = timeframe;
                final int candleLimitFinal = candleLimit;
                log.debug("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á {}/{} ({} —Å–∏–º–≤–æ–ª–æ–≤)", batchIndex + 1, batches.size(), batch.size());

                List<CompletableFuture<Void>> batchFutures = batch.stream()
                        .map(symbol -> CompletableFuture.runAsync(() -> {
                            try {
                                List<Candle> candles = getCandleList(symbol, timeframeFinal, candleLimitFinal);
                                if (candles.size() == candleLimitFinal) {
                                    synchronized (candlesMap) {
                                        candlesMap.put(symbol, candles);
                                    }
                                }
                            } catch (Exception e) {
                                log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {}: {}", symbol, e.getMessage(), e);
                            }
                        }, executor))
                        .toList();

                // –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –±–∞—Ç—á–∞
                CompletableFuture.allOf(batchFutures.toArray(new CompletableFuture[0])).join();

                // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                if (batchIndex < batches.size() - 1) {
                    try {
                        Thread.sleep(200); // 200–º—Å –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                    } catch (InterruptedException e) {
                        Thread.currentThread().interrupt();
                    }
                }
            }
        } finally {
            executor.shutdown();
        }
        long endTime = System.currentTimeMillis();
        log.debug("‚úÖ –°–æ–±—Ä–∞–ª–∏ —Å–≤–µ—á–∏ –¥–ª—è {} –º–æ–Ω–µ—Ç —Å —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–º {} –≤ {} –ø–æ—Ç–æ–∫–æ–≤ –∑–∞ {}—Å", candlesMap.size(), settings.getTimeframe(), threadCount, String.format("%.2f", (endTime - startTime) / 1000.0));
        return candlesMap;
    }

    public List<String> getValidTickersV1(List<String> swapTickers, String timeFrame, double limit, double minVolume, boolean isSorted) {
        long startTime = System.currentTimeMillis();
        AtomicInteger count = new AtomicInteger();
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º 5 –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ OKX API
        int threadCount = 5;
        ExecutorService executor = Executors.newFixedThreadPool(threadCount);
        log.debug("üîç –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ç–∏–∫–µ—Ä–æ–≤ –≤ {} –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è {} —Ç–∏–∫–µ—Ä–æ–≤ (–±–∞—Ç—á–∞–º–∏ –ø–æ {})", threadCount, swapTickers.size(), BATCH_SIZE);
        List<String> result = Collections.synchronizedList(new ArrayList<>());
        int volumeAverageCount = 2; // –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º
        int candleLimit = (int) limit;
        try {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∏–∫–µ—Ä—ã –±–∞—Ç—á–∞–º–∏
            final List<String> validationTickersFinal = swapTickers;
            List<List<String>> batches = IntStream.range(0, (validationTickersFinal.size() + BATCH_SIZE - 1) / BATCH_SIZE)
                    .mapToObj(i -> validationTickersFinal.subList(i * BATCH_SIZE, Math.min((i + 1) * BATCH_SIZE, validationTickersFinal.size())))
                    .toList();

            log.debug("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {} –±–∞—Ç—á–µ–π –ø–æ {} —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏", batches.size(), BATCH_SIZE);

            for (int batchIndex = 0; batchIndex < batches.size(); batchIndex++) {
                List<String> batch = batches.get(batchIndex);
                log.debug("üîÑ –í–∞–ª–∏–¥–∏—Ä—É–µ–º –±–∞—Ç—á {}/{} ({} —Å–∏–º–≤–æ–ª–æ–≤)", batchIndex + 1, batches.size(), batch.size());

                List<CompletableFuture<Void>> batchFutures = batch.stream()
                        .map(symbol -> CompletableFuture.runAsync(() -> {
                            try {
                                List<Candle> candles = getCandleList(symbol, timeFrame, candleLimit);
                                if (candles.size() < volumeAverageCount) {
                                    log.warn("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–µ—á–µ–π –¥–ª—è {}", symbol);
                                    count.getAndIncrement();
                                    return;
                                }

                                // –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–≤–µ—á–µ–π –∏ —Å—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º
                                List<Candle> lastCandles = candles.subList(candles.size() - volumeAverageCount, candles.size());
                                double averageVolume = lastCandles.stream()
                                        .mapToDouble(Candle::getVolume)
                                        .average()
                                        .orElse(0.0);

                                if (averageVolume >= minVolume) {
                                    synchronized (result) {
                                        result.add(symbol);
                                    }
                                } else {
                                    count.getAndIncrement();
                                }
                            } catch (Exception e) {
                                log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {}: {}", symbol, e.getMessage(), e);
                            }
                        }, executor))
                        .toList();

                CompletableFuture.allOf(batchFutures.toArray(new CompletableFuture[0])).join();

                // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                if (batchIndex < batches.size() - 1) {
                    try {
                        Thread.sleep(200); // 200–º—Å –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                    } catch (InterruptedException e) {
                        Thread.currentThread().interrupt();
                    }
                }
            }
        } finally {
            executor.shutdown();
        }

        long endTime = System.currentTimeMillis();
        log.debug("–í—Å–µ–≥–æ –æ—Ç–∫–∏–Ω—É–ª–∏ {} —Ç–∏–∫–µ—Ä–∞ —Å –Ω–∏–∑–∫–∏–º volume", count.intValue());
        log.debug("‚úÖ –í—Å–µ–≥–æ –æ—Ç–æ–±—Ä–∞–Ω–æ {} —Ç–∏–∫–µ—Ä–æ–≤ –≤ {} –ø–æ—Ç–æ–∫–æ–≤ –∑–∞ {}—Å", result.size(), threadCount, String.format("%.2f", (endTime - startTime) / 1000.0));

        return isSorted ? result.stream().sorted().toList() : result;
    }

    public List<String> getValidTickersV2(List<String> swapTickers, String timeFrame, double limit, double minQuoteVolume, boolean isSorted) {
        long startTime = System.currentTimeMillis();
        AtomicInteger skippedCount = new AtomicInteger();
        int threadCount = 5;
        ExecutorService executor = Executors.newFixedThreadPool(threadCount);
        List<String> validTickers = Collections.synchronizedList(new ArrayList<>());
        int volumeAverageCount = 2; // –∫–æ–ª-–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
        int candleLimit = (int) limit;

        // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–∏–∫–µ—Ä—ã –Ω–∞ –±–∞—Ç—á–∏
        List<List<String>> batches = IntStream.range(0, (swapTickers.size() + BATCH_SIZE - 1) / BATCH_SIZE)
                .mapToObj(i -> swapTickers.subList(i * BATCH_SIZE, Math.min((i + 1) * BATCH_SIZE, swapTickers.size())))
                .toList();

        log.debug("üîç –í–∞–ª–∏–¥–∏—Ä—É–µ–º {} —Ç–∏–∫–µ—Ä–æ–≤ –≤ {} –ø–æ—Ç–æ–∫–æ–≤ (–±–∞—Ç—á–µ–π: {})", swapTickers.size(), threadCount, batches.size());

        for (int batchIndex = 0; batchIndex < batches.size(); batchIndex++) {
            List<String> batch = batches.get(batchIndex);
            log.debug("üîÑ –í–∞–ª–∏–¥–∏—Ä—É–µ–º –±–∞—Ç—á {}/{} ({} —Ç–∏–∫–µ—Ä–æ–≤)", batchIndex + 1, batches.size(), batch.size());

            List<CompletableFuture<Void>> futures = batch.stream()
                    .map(symbol -> CompletableFuture.runAsync(() -> {
                        try {
                            List<Candle> candles = getCandleList(symbol, timeFrame, candleLimit);
                            if (candles.size() < volumeAverageCount) {
                                log.warn("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–µ—á–µ–π –¥–ª—è {}", symbol);
                                skippedCount.getAndIncrement();
                                return;
                            }

                            // –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–≤–µ—á–µ–π
                            List<Candle> lastCandles = candles.subList(candles.size() - volumeAverageCount, candles.size());

                            // –°—Ä–µ–¥–Ω–∏–π –æ–±—ä—ë–º –≤ quote –≤–∞–ª—é—Ç–µ (volume * close)
                            double averageQuoteVolume = lastCandles.stream()
                                    .mapToDouble(c -> c.getVolume() * c.getClose()) //–æ–±—ä—ë–º –≤ quote –≤–∞–ª—é—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä USDT)
                                    .average()
                                    .orElse(0.0);

                            if (averageQuoteVolume >= minQuoteVolume) {
                                validTickers.add(symbol);
                            } else {
                                skippedCount.getAndIncrement();
                            }
                        } catch (Exception e) {
                            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {}: {}", symbol, e.getMessage(), e);
                        }
                    }, executor))
                    .toList();

            CompletableFuture.allOf(futures.toArray(new CompletableFuture[0])).join();

            // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ –¥–ª—è rate-limit
            if (batchIndex < batches.size() - 1) {
                try {
                    Thread.sleep(200);
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
            }
        }

        executor.shutdown();

        long endTime = System.currentTimeMillis();
        log.debug("–í—Å–µ–≥–æ –æ—Ç–∫–∏–Ω—É–ª–∏ {} —Ç–∏–∫–µ—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ–±—ä—ë–º–æ–º", skippedCount.get());
        log.debug("‚úÖ –û—Ç–æ–±—Ä–∞–Ω–æ {} —Ç–∏–∫–µ—Ä–æ–≤ –∑–∞ {}—Å", validTickers.size(), String.format("%.2f", (endTime - startTime) / 1000.0));

        return isSorted ? validTickers.stream().sorted().toList() : validTickers;
    }


    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É (last price) –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
     *
     * @param symbol –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC-USDT)
     * @return –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å
     */
    public BigDecimal getCurrentPrice(String symbol) {
        log.info("==> getCurrentPrice: –ù–ê–ß–ê–õ–û –¥–ª—è —Å–∏–º–≤–æ–ª–∞ {}", symbol);
        try {
            applyRateLimit();
            log.info("Rate limit –ø—Ä–∏–º–µ–Ω–µ–Ω.");

            JsonArray tickerData = getTicker(symbol);
            log.info("–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–∞: {}", tickerData);

            if (tickerData != null && tickerData.size() > 0) {
                JsonObject ticker = tickerData.get(0).getAsJsonObject();
                String lastPriceStr = ticker.get("last").getAsString();
                BigDecimal lastPrice = new BigDecimal(lastPriceStr);
                log.info("–ò–∑–≤–ª–µ—á–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {}", lastPrice);
                log.info("<== getCurrentPrice: –ö–û–ù–ï–¶ (–£—Å–ø–µ—Ö) –¥–ª—è —Å–∏–º–≤–æ–ª–∞ {}. –¶–µ–Ω–∞: {}", symbol, lastPrice);
                return lastPrice;
            }

            log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {}: –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API. tickerData: {}", symbol, tickerData);
            log.info("<== getCurrentPrice: –ö–û–ù–ï–¶ (–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç) –¥–ª—è —Å–∏–º–≤–æ–ª–∞ {}", symbol);
            return null;

        } catch (Exception e) {
            log.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã –¥–ª—è {}: {}", symbol, e.getMessage(), e);
            log.info("<== getCurrentPrice: –ö–û–ù–ï–¶ (–û—à–∏–±–∫–∞) –¥–ª—è —Å–∏–º–≤–æ–ª–∞ {}", symbol);
            return null;
        }
    }

}