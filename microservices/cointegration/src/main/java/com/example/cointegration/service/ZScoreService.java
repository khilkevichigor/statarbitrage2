package com.example.cointegration.service;

import com.example.cointegration.client_python.PythonRestClient;
import com.example.shared.dto.Candle;
import com.example.shared.dto.ZScoreData;
import com.example.shared.dto.ZScoreParam;
import com.example.shared.models.Settings;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.*;

@Slf4j
@Service
@RequiredArgsConstructor
public class ZScoreService {

    private final CointPairService cointPairService;
    private final PythonRestClient pythonRestClient;
    private final ObtainTopZScoreDataBeforeCreateNewPairService obtainTopZScoreDataBeforeCreateNewPairService;
    private final FilterZScoreDataForExistingPairBeforeNewTradeService filterZScoreDataForExistingPairBeforeNewTradeService;

    private void checkZScoreParamsSize(List<ZScoreData> rawZScoreList) {
        log.debug("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ ZScore –¥–∞–Ω–Ω—ã—Ö:");
        for (ZScoreData z : rawZScoreList) {
            List<ZScoreParam> params = z.getZScoreHistory();
            int size = params != null ? params.size() : 0;
            String longTicker = z.getUnderValuedTicker();
            String shortTicker = z.getOverValuedTicker();

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–æ–≤–æ–≥–æ API –µ—Å–ª–∏ zscoreParams –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
            double lastZ = size > 0 ? params.get(size - 1).getZscore() :
                    (z.getLatestZScore() != null ? z.getLatestZScore() : 0.0);
            int observations = size > 0 ? size :
                    (z.getTotalObservations() != null ? z.getTotalObservations() : 0);

            String msg = String.format(
                    "üìä –ü–∞—Ä–∞: %s / %s | –ù–∞–±–ª—é–¥–µ–Ω–∏–π: %d | –ü–æ—Å–ª–µ–¥–Ω–∏–π Z: %.2f",
                    longTicker, shortTicker, observations, lastZ
            );
            log.debug(msg);
        }
    }

//    private void filterIncompleteZScoreParams(TradingPair tradingPair, List<ZScoreData> zScoreDataList, Settings settings) {
//        double expected = settings.getExpectedZParamsCount();
//        double maxZScore = zScoreDataList.stream()
//                .map(data -> (data.getZScoreHistory() != null && !data.getZScoreHistory().isEmpty()) ? data.getZScoreHistory().get(data.getZScoreHistory().size() - 1) : null)
//                .filter(Objects::nonNull)
//                .map(ZScoreParam::getZscore)
//                .max(Comparator.naturalOrder())
//                .orElse(0d);
//        log.info("üîç –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º: {}, –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π Z-—Å–∫–æ—Ä: {}", expected, maxZScore);
//
//        int before = zScoreDataList.size();
//
//        zScoreDataList.removeIf(data -> {
//            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö (–∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è API –µ—Å–ª–∏ zscoreParams –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç)
//            List<ZScoreParam> params = data.getZScoreHistory();
//            int actualSize = params != null ? params.size() :
//                    (data.getTotalObservations() != null ? data.getTotalObservations() : 0);
//
//            // –î–ª—è –Ω–æ–≤–æ–≥–æ API –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π - –¥–∞–Ω–Ω—ã–µ —É–∂–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω—ã
//            boolean isIncompleteBySize = false;
//            if (params != null && !params.isEmpty()) {
//                // –¢–æ–ª—å–∫–æ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π
//                isIncompleteBySize = actualSize < expected;
//                if (isIncompleteBySize) {
//                    if (tradingPair != null) {
//                        cointPairService.delete(tradingPair);
//                        log.warn("‚ö†Ô∏è –£–¥–∞–ª–∏–ª–∏ –ø–∞—Ä—É {}/{} ‚Äî –Ω–∞–±–ª—é–¥–µ–Ω–∏–π {} (–æ–∂–∏–¥–∞–ª–æ—Å—å {})",
//                                data.getUnderValuedTicker(), data.getOverValuedTicker(), actualSize, expected);
//                    }
//                }
//            }
//
//            // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π Z-score (–∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è API –µ—Å–ª–∏ zscoreParams –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç)
//            double lastZScore;
//            if (params != null && !params.isEmpty()) {
//                lastZScore = params.get(params.size() - 1).getZscore(); //todo
//            } else if (data.getLatestZScore() != null) {
//                lastZScore = data.getLatestZScore();
//            } else {
//                if (tradingPair != null) {
//                    cointPairService.delete(tradingPair);
//                    log.warn("‚ö†Ô∏è –£–¥–∞–ª–∏–ª–∏ –ø–∞—Ä—É {}/{} ‚Äî –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Z-score",
//                            data.getUnderValuedTicker(), data.getOverValuedTicker());
//                }
//                return true;
//            }
//
//            boolean isIncompleteByZ = settings.isUseMinZFilter() && lastZScore < settings.getMinZ();
//            if (isIncompleteByZ) {
//                if (tradingPair != null) {
//                    cointPairService.delete(tradingPair);
//                    log.warn("‚ö†Ô∏è –£–¥–∞–ª–∏–ª–∏ –ø–∞—Ä—É {}/{} ‚Äî Z-—Å–∫–æ—Ä={} < Z-—Å–∫–æ—Ä Min={}",
//                            data.getUnderValuedTicker(), data.getOverValuedTicker(), lastZScore, settings.getMinZ());
//                }
//            }
//
//            // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ R-squared
//            boolean isIncompleteByRSquared = false;
//            if (settings.isUseMinRSquaredFilter() && data.getAvgRSquared() != null && data.getAvgRSquared() < settings.getMinRSquared()) {
//                isIncompleteByRSquared = true;
//                if (tradingPair != null) {
//                    cointPairService.delete(tradingPair);
//                    log.warn("‚ö†Ô∏è –£–¥–∞–ª–∏–ª–∏ –ø–∞—Ä—É {}/{} ‚Äî RSquared={} < MinRSquared={}",
//                            data.getUnderValuedTicker(), data.getOverValuedTicker(), data.getAvgRSquared(), settings.getMinRSquared());
//                }
//            }
//
//            // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ Correlation
//            boolean isIncompleteByCorrelation = false;
//            if (settings.isUseMinCorrelationFilter() && data.getPearsonCorr() != null && data.getPearsonCorr() < settings.getMinCorrelation()) {
//                isIncompleteByCorrelation = true;
//                if (tradingPair != null) {
//                    cointPairService.delete(tradingPair);
//                    log.warn("‚ö†Ô∏è –£–¥–∞–ª–∏–ª–∏ –ø–∞—Ä—É {}/{} ‚Äî Correlation={} < MinCorrelation={}",
//                            data.getUnderValuedTicker(), data.getOverValuedTicker(), data.getPearsonCorr(), settings.getMinCorrelation());
//                }
//            }
//
//            // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ pValue
//            boolean isIncompleteByPValue = false;
//            if (settings.isUseMaxPValueFilter()) {
//                Double pValue = null;
//                if (params != null && !params.isEmpty()) {
//                    // –î–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º pValue –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
//                    pValue = params.get(params.size() - 1).getPvalue();
//                } else if (data.getPearsonCorrPValue() != null) {
//                    // –î–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º correlation_pvalue
//                    pValue = data.getPearsonCorrPValue();
//                }
//
//                if (pValue != null && pValue > settings.getMaxPValue()) {
//                    isIncompleteByPValue = true;
//                    if (tradingPair != null) {
//                        cointPairService.delete(tradingPair);
//                        log.warn("‚ö†Ô∏è –£–¥–∞–ª–∏–ª–∏ –ø–∞—Ä—É {}/{} ‚Äî pValue={} > MinPValue={}",
//                                data.getUnderValuedTicker(), data.getOverValuedTicker(), pValue, settings.getMaxPValue());
//                    }
//                }
//            }
//
//            // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ adfValue
//            boolean isIncompleteByAdfValue = false;
//            if (settings.isUseMaxAdfValueFilter()) {
//                Double adfValue = null;
//                if (params != null && !params.isEmpty()) {
//                    // –î–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º adfpvalue –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
//                    adfValue = params.get(params.size() - 1).getAdfpvalue(); //todo –∑–¥–µ—Å—å —Å–º–µ—Å—å —Å—Ç–∞—Ä–æ–π –∏ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏! –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å!!!
//                } else if (data.getJohansenCointPValue() != null) {
//                    // –î–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º cointegration_pvalue
//                    adfValue = data.getJohansenCointPValue(); //todo –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —ç—Ç–æ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ???
//                }
//
//                if (adfValue != null && adfValue > settings.getMaxAdfValue()) {
//                    isIncompleteByAdfValue = true;
//                    if (tradingPair != null) {
//                        cointPairService.delete(tradingPair);
//                        log.warn("‚ö†Ô∏è –£–¥–∞–ª–∏–ª–∏ –ø–∞—Ä—É {}/{} ‚Äî adfValue={} > MaxAdfValue={}",
//                                data.getUnderValuedTicker(), data.getOverValuedTicker(), adfValue, settings.getMaxAdfValue());
//                    }
//                }
//            }
//
//            return isIncompleteBySize || isIncompleteByZ || isIncompleteByRSquared || isIncompleteByCorrelation || isIncompleteByPValue || isIncompleteByAdfValue;
//        });
//
//        int after = zScoreDataList.size();
//        log.debug("‚úÖ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å {} –∏–∑ {} –ø–∞—Ä", after, before);
//    }

    public ZScoreData calculateZScoreData(Settings settings, Map<String, List<Candle>> candlesMap) {
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ Python
        ZScoreData zScoreData = pythonRestClient.analyzePair(candlesMap, settings, true);
        if (zScoreData == null) {
            log.warn("‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∞ - zScoreData is null");
            throw new IllegalStateException("‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–¥–∞ - zScoreData is null");
        }

        return zScoreData;
    }

    /**
     * –°—á–∏—Ç–∞–µ—Ç Z –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä –∏–∑ —Å–≤–µ—á–µ–π.
     */
    private List<ZScoreData> calculateZScoreData(Settings settings, Map<String, List<Candle>> candlesMap, boolean excludeExistingPairs) {

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        List<ZScoreData> rawZScoreDataList = pythonRestClient.fetchZScoreData(settings, candlesMap); //todo –≤—ã–Ω–µ—Å—Ç–∏ –≤ –º—Å –∏ –±—Ä–∞—Ç—å –ø–æ —Ä–µ—Å—Ç—É

        if (rawZScoreDataList == null || rawZScoreDataList.isEmpty()) {
            log.warn("‚ö†Ô∏è ZScoreService: –ø–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –æ—Ç Python");
            return Collections.emptyList();
        }
        checkZScoreParamsSize(rawZScoreDataList);
        if (excludeExistingPairs) {
            cointPairService.excludeExistingTradingPairs(rawZScoreDataList);
        }
        return rawZScoreDataList;
    }

//    public Optional<ZScoreData> updateZScoreDataForExistingPairBeforeNewTrade(TradingPair tradingPair, Settings settings, Map<String, List<Candle>> candlesMap) {
//        ZScoreData zScoreData = pythonRestClient.analyzePair(candlesMap, settings, true);
//        if (zScoreData == null) {
//            log.warn("‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ zScoreData –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–π–¥–∞! zScoreData is null");
//            throw new IllegalStateException("‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ zScoreData –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–π–¥–∞! zScoreData is null");
//        }
//
//        List<ZScoreData> zScoreDataSingletonList = new ArrayList<>(Collections.singletonList(zScoreData));
//        checkZScoreParamsSize(zScoreDataSingletonList);
//
//        filterZScoreDataForExistingPairBeforeNewTradeService.filter(zScoreDataSingletonList, settings);
//
//        log.debug("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–∂–µ –æ—Ç–æ–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä—ã {} –ë–ï–ó –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–ò–°–ü–†–ê–í–õ–ï–ù–û)", tradingPair.getPairName());
//
//        // –î–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä –Ω–æ –Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
//        if (!zScoreDataSingletonList.isEmpty()) {
//            // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–≥–æ–≤
//            log.debug("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ: –ø–∞—Ä–∞ {} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏", tradingPair.getPairName());
//        }
//
//        return zScoreDataSingletonList.isEmpty() ? Optional.empty() : Optional.of(zScoreDataSingletonList.get(0));
//    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ø-N –ª—É—á—à–∏—Ö –ø–∞—Ä.
     */
    public List<ZScoreData> getZScoreData(Settings settings,
                                          Map<String, List<Candle>> candlesMap) {

        List<ZScoreData> all = calculateZScoreData(settings, candlesMap, true);
        return obtainUniqueZScoreData(candlesMap, settings, all);
    }

    private List<ZScoreData> obtainUniqueZScoreData(Map<String, List<Candle>> candlesMap, Settings settings, List<ZScoreData> zScoreDataList) {
        if (zScoreDataList == null || zScoreDataList.isEmpty()) {
            return Collections.emptyList();
        }

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–±–æ—Ä–æ–º
        Map<String, Double> maxZScoreData = zScoreDataList.stream()
                .map(data -> {
                    List<ZScoreParam> params = data.getZScoreHistory();
                    double zScore;
                    double pValue;
                    double adf;
                    double r;
                    double corr;

                    if (params != null && !params.isEmpty()) {
                        ZScoreParam last = params.get(params.size() - 1);
                        zScore = last.getZscore();
                        pValue = last.getPvalue();
                        adf = last.getAdfpvalue();
                        r = data.getAvgRSquared();
                        corr = data.getPearsonCorr() != null ? data.getPearsonCorr() : 0.0;
                    } else {
                        zScore = data.getLatestZScore() != null ? data.getLatestZScore() : 0.0;
                        pValue = data.getPearsonCorrPValue() != null ? data.getPearsonCorrPValue() : Double.NaN;
                        adf = data.getJohansenCointPValue() != null ? data.getJohansenCointPValue() : Double.NaN;
                        r = data.getAvgRSquared() != null ? data.getAvgRSquared() : 0.0;
                        corr = data.getPearsonCorr() != null ? data.getPearsonCorr() : 0.0;
                    }

                    return Map.entry(data, Map.of(
                            "maxZScore", zScore,
                            "pValue", pValue,
                            "Adf", adf,
                            "R", r,
                            "Corr", corr
                    ));
                })
                .max(Comparator.comparingDouble(entry -> entry.getValue().get("maxZScore")))
                .map(Map.Entry::getValue)
                .orElse(Map.of(
                        "maxZScore", 0.0,
                        "pValue", Double.NaN,
                        "Adf", Double.NaN,
                        "R", 0.0,
                        "Corr", 0.0
                ));

        Map<String, Double> minPValueData = zScoreDataList.stream()
                .map(data -> {
                    List<ZScoreParam> params = data.getZScoreHistory();
                    double pValue = (params != null && !params.isEmpty())
                            ? params.get(params.size() - 1).getPvalue()
                            : (data.getPearsonCorrPValue() != null ? data.getPearsonCorrPValue() : Double.MAX_VALUE);
                    double zScore = (params != null && !params.isEmpty())
                            ? params.get(params.size() - 1).getZscore()
                            : (data.getLatestZScore() != null ? data.getLatestZScore() : Double.NaN);
                    return Map.entry(data, Map.of(
                            "pValue", pValue,
                            "zScore", zScore
                    ));
                })
                .min(Comparator.comparingDouble(entry -> entry.getValue().get("pValue")))
                .map(Map.Entry::getValue)
                .orElse(Map.of("pValue", Double.MAX_VALUE, "zScore", Double.NaN));


        Map<String, Double> maxRData = zScoreDataList.stream()
                .map(data -> {
                    List<ZScoreParam> params = data.getZScoreHistory();
                    double rSquared = data.getAvgRSquared() != null ? data.getAvgRSquared() : 0.0;
                    double zScore = (params != null && !params.isEmpty())
                            ? params.get(params.size() - 1).getZscore()
                            : (data.getLatestZScore() != null ? data.getLatestZScore() : Double.NaN);
                    return Map.entry(data, Map.of(
                            "maxR", rSquared,
                            "zScore", zScore
                    ));
                })
                .max(Comparator.comparingDouble(entry -> entry.getValue().get("maxR")))
                .map(Map.Entry::getValue)
                .orElse(Map.of(
                        "maxR", 0.0,
                        "zScore", Double.NaN
                ));

        Map<String, Double> minAdfData = zScoreDataList.stream()
                .map(data -> {
                    List<ZScoreParam> params = data.getZScoreHistory();
                    double adfValue = (params != null && !params.isEmpty())
                            ? params.get(params.size() - 1).getAdfpvalue()
                            : (data.getJohansenCointPValue() != null ? data.getJohansenCointPValue() : Double.MAX_VALUE);

                    double zScore = (params != null && !params.isEmpty())
                            ? params.get(params.size() - 1).getZscore()
                            : (data.getLatestZScore() != null ? data.getLatestZScore() : Double.NaN);

                    return Map.entry(data, Map.of(
                            "minAdf", adfValue,
                            "zScore", zScore
                    ));
                })
                .min(Comparator.comparingDouble(entry -> entry.getValue().get("minAdf")))
                .map(Map.Entry::getValue)
                .orElse(Map.of(
                        "minAdf", Double.MAX_VALUE,
                        "zScore", Double.NaN
                ));

        Map<String, Double> maxCorrData = zScoreDataList.stream()
                .map(data -> {
                    List<ZScoreParam> params = data.getZScoreHistory();
                    double corrValue = data.getPearsonCorr() != null ? data.getPearsonCorr() : 0.0;
                    double zScore = (params != null && !params.isEmpty())
                            ? params.get(params.size() - 1).getZscore()
                            : (data.getLatestZScore() != null ? data.getLatestZScore() : Double.NaN);

                    return Map.entry(data, Map.of(
                            "maxCorr", corrValue,
                            "zScore", zScore
                    ));
                })
                .max(Comparator.comparingDouble(entry -> entry.getValue().get("maxCorr")))
                .map(Map.Entry::getValue)
                .orElse(Map.of(
                        "maxCorr", 0.0,
                        "zScore", Double.NaN
                ));

        log.info("–í—Å–µ–≥–æ –∫–æ–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä {}", zScoreDataList.size());
        log.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–±–æ—Ä–æ–º –ø–∞—Ä:");
        log.info("   üî• –õ—É—á—à–∏–π Z-Score: {}, (p={}, r={}, adf={}, corr={})", maxZScoreData.get("maxZScore"), maxZScoreData.get("pValue"), maxZScoreData.get("R"), maxZScoreData.get("Adf"), maxZScoreData.get("Corr"));
        log.info("   üìâ –õ—É—á—à–∏–π P-Value: {}, (z={})", minPValueData.get("pValue"), minPValueData.get("zScore"));
        log.info("   üìà –õ—É—á—à–∏–π R-Squared: {}, (z={})", maxRData.get("maxR"), maxRData.get("zScore"));
        log.info("   üîç –õ—É—á—à–∏–π ADF: {}, (z={})", minAdfData.get("minAdf"), minAdfData.get("zScore"));
        log.info("   üîó –õ—É—á—à–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: {}, (z={})", maxCorrData.get("maxCorr"), maxRData.get("zScore"));

        List<ZScoreData> bestPairs = new ArrayList<>();
        List<ZScoreData> remainingPairs = new ArrayList<>(zScoreDataList);

        Set<String> usedTickers = new HashSet<>();

        while (!remainingPairs.isEmpty()) {
            Optional<ZScoreData> maybeBest = obtainTopZScoreDataBeforeCreateNewPairService.getBestZScoreData(settings, remainingPairs, candlesMap);
            if (maybeBest.isEmpty()) {
                break;
            }

            ZScoreData best = maybeBest.get();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–∏–∫–µ—Ä–æ–≤
            if (usedTickers.contains(best.getUnderValuedTicker()) || usedTickers.contains(best.getOverValuedTicker())) {
                log.debug("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—É {}/{} —Ç.–∫. —Ç–∞–∫–∏–µ —Ç–∏–∫–µ—Ä—ã —É–∂–µ –µ—Å—Ç—å –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ!",
                        best.getUnderValuedTicker(), best.getOverValuedTicker());
                remainingPairs.remove(best);
                continue;
            }

            logLastZ(best);

            // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–∞
            ZScoreData detailedZScoreData = getDetailedZScoreData(best, candlesMap, settings);

            bestPairs.add(detailedZScoreData);
            usedTickers.add(best.getUnderValuedTicker());
            usedTickers.add(best.getOverValuedTicker());
            remainingPairs.remove(best);
        }

        return bestPairs;
    }

    private ZScoreData getDetailedZScoreData(ZScoreData best, Map<String, List<Candle>> candlesMap, Settings settings) {
        String overvalued = best.getOverValuedTicker();
        String undervalued = best.getUnderValuedTicker();

        if (overvalued == null || undervalued == null) {
            throw new IllegalArgumentException("–¢–∏–∫–µ—Ä—ã –≤ –æ–±—ä–µ–∫—Ç–µ 'best' –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã");
        }

        log.debug("üîç –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è: {} (undervalued) / {} (overvalued)", undervalued, overvalued);

        // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É —Ç–æ–ª—å–∫–æ —Å –Ω—É–∂–Ω—ã–º–∏ —Ç–∏–∫–µ—Ä–∞–º–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        Map<String, List<Candle>> filteredCandlesMap = new LinkedHashMap<>();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–∫–µ—Ä–∞
        if (!candlesMap.containsKey(undervalued)) {
            throw new IllegalArgumentException("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π –¥–ª—è undervalued —Ç–∏–∫–µ—Ä–∞: " + undervalued);
        }
        if (!candlesMap.containsKey(overvalued)) {
            throw new IllegalArgumentException("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π –¥–ª—è overvalued —Ç–∏–∫–µ—Ä–∞: " + overvalued);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–∫–µ—Ä—ã –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        filteredCandlesMap.put(undervalued, candlesMap.get(undervalued));
        filteredCandlesMap.put(overvalued, candlesMap.get(overvalued));

        log.debug("üìä –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–∞—è –º–∞–ø–∞ —Å–≤–µ—á–µ–π —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–∏–∫–µ—Ä–æ–≤: {{}} {}", filteredCandlesMap.size(), filteredCandlesMap.keySet());

        // –ü–µ—Ä–µ–¥–∞—ë–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ Python
        ZScoreData zScoreData = pythonRestClient.analyzePair(filteredCandlesMap, settings, true);

        if (zScoreData.getLatestZScore() < 0) {
            String message = String.format("‚ùå –ü–æ—Å–ª–µ–¥–Ω–∏–π Z-—Å–∫–æ—Ä {%.2f} < 0 –ø–æ—Å–ª–µ \"/analyze-pair\" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ—ã –æ –ø–∞—Ä–µ %s - %s!!!", zScoreData.getLatestZScore(), undervalued, overvalued);
            log.error(message);
            throw new IllegalStateException(message);
        }
        return zScoreData;
    }

    private void logLastZ(ZScoreData zScoreData) {
        List<ZScoreParam> params = zScoreData.getZScoreHistory();

        if (params != null && !params.isEmpty()) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            int size = params.size();
            log.debug("üß™ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 Z-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è {}/{}:", zScoreData.getUnderValuedTicker(), zScoreData.getOverValuedTicker());
            log.debug(String.format("% -5s % -8s % -10s % -10s % -20s", "N", "Z", "ADF", "Corr", "Timestamp"));

            for (int i = Math.max(0, size - 5); i < size; i++) {
                ZScoreParam p = params.get(i);
                log.debug(String.format(
                        "%-5d %-8.2f %-10.4f %-10.2f %-20s",
                        i + 1, p.getZscore(), p.getAdfpvalue(), p.getCorrelation(), p.getTimestamp()
                ));
            }
        } else {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            log.debug("üß™ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {}/{}:", zScoreData.getUnderValuedTicker(), zScoreData.getOverValuedTicker());
            log.debug("  Latest Z-Score: {}", zScoreData.getLatestZScore());
            log.debug("  Correlation: {}", zScoreData.getPearsonCorr());
            log.debug("  Correlation P-Value: {}", zScoreData.getPearsonCorrPValue());
            log.debug("  Cointegration P-Value: {}", zScoreData.getJohansenCointPValue());
            log.debug("  Total Observations: {}", zScoreData.getTotalObservations());
            log.debug("  Avg R-Squared: {}", zScoreData.getAvgRSquared());
        }
    }

    public Optional<ZScoreData> getBestByCriteria(Settings settings, List<ZScoreData> dataList) {
        ZScoreData best = null;
        double maxZ = Double.NEGATIVE_INFINITY;

        for (ZScoreData z : dataList) {
            List<ZScoreParam> params = z.getZScoreHistory();

            double zVal, pValue, adf, corr;

            if (params != null && !params.isEmpty()) {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                ZScoreParam last = params.get(params.size() - 1);
                zVal = last.getZscore();
                pValue = last.getPvalue();
                adf = last.getAdfpvalue();
                corr = last.getCorrelation();
            } else {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                if (z.getLatestZScore() == null || z.getPearsonCorr() == null) continue;

                zVal = z.getLatestZScore();
                corr = z.getPearsonCorr();

                // –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                pValue = z.getPearsonCorrPValue() != null ? z.getPearsonCorrPValue() : 0.0;
                adf = z.getJohansenCointPValue() != null ? z.getJohansenCointPValue() : 0.0;
            }

            // 1. Z >= minZ (—Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ Z-score, –∏—Å–∫–ª—é—á–∞–µ–º –∑–µ—Ä–∫–∞–ª—å–Ω—ã–µ –ø–∞—Ä—ã)
            if (settings.isUseMinZFilter() && zVal < settings.getMinZ()) continue;

            // 2. pValue <= minPValue
            if (settings.isUseMaxPValueFilter() && pValue > settings.getMaxPValue()) continue;

            // 3. adfValue <= maxAdfValue
            if (settings.isUseMaxAdfValueFilter() && adf > settings.getMaxAdfValue()) continue;

            // 4. corr >= minCorr
            if (settings.isUseMinCorrelationFilter() && corr < settings.getMinCorrelation()) continue;

            // 5. –í—ã–±–∏—Ä–∞–µ–º —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º Z (—Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ)
            if (zVal > maxZ) {
                maxZ = zVal;
                best = z;
            }
        }

        return Optional.ofNullable(best);
    }
}
