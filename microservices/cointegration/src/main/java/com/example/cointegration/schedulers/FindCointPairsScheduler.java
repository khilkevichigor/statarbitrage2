package com.example.cointegration.schedulers;

import com.example.cointegration.messaging.SendEventService;
import com.example.cointegration.processors.FetchCointPairsProcessor;
import com.example.cointegration.repositories.TradingPairRepository;
import com.example.cointegration.service.CointPairService;
import com.example.cointegration.service.SettingsService;
import com.example.shared.dto.FetchPairsRequest;
import com.example.shared.events.CointegrationEvent;
import com.example.shared.models.CointPair;
import com.example.shared.models.Settings;
import com.example.shared.models.TradeStatus;
import com.example.shared.models.TradingPair;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.util.Collections;
import java.util.List;

@Slf4j
@Component
@RequiredArgsConstructor
public class FindCointPairsScheduler {
    private final SettingsService settingsService;
    private final CointPairService cointPairService;
    private final TradingPairRepository tradingPairRepository;
    private final FetchCointPairsProcessor fetchCointPairsProcessor;
    private final SendEventService sendEventService;

    //todo 1—Ä–∞–∑/–º–∏–Ω –Ω–æ –µ—Å–ª–∏ –¢–§=15–º–∏ —Ç–æ 15 —Ä–∞–∑ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –ª–æ–≥ —Å —Ç–µ–º –∂–µ zScore! –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–∏–µ –ø–æ –¢–§ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –ª–∏—à–Ω–∏–µ –∑–∞—Ö–æ–¥—ã —à–µ–¥—É–ª–ª–µ—Ä–∞
    @Scheduled(cron = "0 */1 * * * *")
    public void maintainCointPairs() {
        long schedulerStart = System.currentTimeMillis();
        List<CointPair> cointPairs = fetchCointPairs();

        long duration = System.currentTimeMillis() - schedulerStart;
        log.info("‚è±Ô∏è –®–µ–¥—É–ª–ª–µ—Ä –ø–æ–∏—Å–∫–∞ –∫–æ–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª —Ä–∞–±–æ—Ç—É –∑–∞ {} —Å–µ–∫. –ù–∞–π–¥–µ–Ω–æ {} –Ω–æ–≤—ã—Ö –ø–∞—Ä", duration / 1000.0, cointPairs.size());

        if (!cointPairs.isEmpty()) {
            log.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ä –≤ —Åore –º—Å...");
            sendEventService.sendCointegrationEvent(new CointegrationEvent(cointPairs, CointegrationEvent.Type.NEW_COINT_PAIRS));
            log.info("–ü–∞—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.");
        }
    }

    private List<CointPair> fetchCointPairs() {
        log.info("üîÑ –®–µ–¥—É–ª–ª–µ—Ä –ø–æ–∏—Å–∫–∞ –∫–æ–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä –∑–∞–ø—É—â–µ–Ω...");
        Settings settings = settingsService.getSettings();
        if (settings == null || !settings.isAutoTradingEnabled()) {
            return Collections.emptyList();
        }
        int missingCointPairs = calculateMissingCointPairs(settings);
        if (missingCointPairs <= 0) {
            return Collections.emptyList();
        }
        return createNewCointPairs(missingCointPairs);
    }

    private int calculateMissingCointPairs(Settings settings) {
        try {
            //todo –±—Ä–∞—Ç—å –≤—Å–µ –∫–æ–∏–Ω—Ç –ø–∞—Ä—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ zScore –∏ –æ—Ç–¥–∞–≤–∞—Ç—å –≤ Core, –∞ —Ç–∞–º —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –º–æ–Ω–µ—Ç–∞–º - —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ - –ª—É—á—à–µ –Ω–µ –º–µ—à–∞—Ç—å –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏!
            List<TradingPair> tradingPairs = tradingPairRepository.findAllByStatusOrderByEntryTimeDesc(TradeStatus.TRADING);
            int maxActive = (int) settings.getUsePairs();
            int currentActive = tradingPairs.size();
            return maxActive - currentActive;
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–∞—Ä: {}", e.getMessage());
            return 0;
        }
    }

    private List<CointPair> createNewCointPairs(int missingCointPairs) {
        log.info("üÜï –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç {} –ø–∞—Ä ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–±–æ—Ä", missingCointPairs);
//        cleanupOldCointPairs(); //–ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª –±–ª–∏–∂–µ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –Ω–æ—ã–≤—ã—Ö —á—Ç–æ –±—ã –Ω–µ–±—ã–ª–æ –ø—É—Å—Ç–æ 30—Å–µ–∫
        List<CointPair> newCointPairs = fetchNewCointPairs(missingCointPairs);
        if (newCointPairs.isEmpty()) {
            log.warn("‚ö†Ô∏è –û—Ç–æ–±—Ä–∞–Ω–æ 0 –ø–∞—Ä!");
            return Collections.emptyList();
        }
        log.info("–û—Ç–æ–±—Ä–∞–Ω–æ {} –ø–∞—Ä", newCointPairs.size());

        return newCointPairs;
    }

    private void cleanupOldCointPairs() {
        try {
            cointPairService.deleteAllByStatus(TradeStatus.SELECTED);
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –ø–∞—Ä SELECTED: {}", e.getMessage());
        }
    }

    private List<CointPair> fetchNewCointPairs(int count) {
        try {
            return fetchCointPairsProcessor.fetchCointPairs(FetchPairsRequest.builder()
                    .countOfPairs(count)
                    .build());
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–æ–≤—ã—Ö –ø–∞—Ä: {}", e.getMessage());
            return List.of();
        }
    }
}