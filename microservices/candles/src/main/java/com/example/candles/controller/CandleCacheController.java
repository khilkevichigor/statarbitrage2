package com.example.candles.controller;

import com.example.candles.scheduler.CandleCacheScheduler;
import com.example.candles.service.CandleCacheService;
import com.example.shared.dto.Candle;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/cache")
@RequiredArgsConstructor
@Slf4j
public class CandleCacheController {

    private final CandleCacheService candleCacheService;
    private final CandleCacheScheduler candleCacheScheduler;

    @Value("${app.candle-cache.default-exchange:OKX}")
    private String defaultExchange;

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏ (–æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–∫—Ä–∏–Ω–µ—Ä–∞)
     */
    @PostMapping("/get")
    public ResponseEntity<Map<String, List<Candle>>> getCachedCandles(@RequestBody CachedCandlesRequest request) {
        log.info("üì• –ó–∞–ø—Ä–æ—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π: {} —Ç–∏–∫–µ—Ä–æ–≤, —Ç–∞–π–º—Ñ—Ä–µ–π–º {}, –ª–∏–º–∏—Ç {}",
                request.getTickers().size(), request.getTimeframe(), request.getCandleLimit());

        try {
            Map<String, List<Candle>> result = candleCacheService.getCachedCandles(
                    request.getTickers(),
                    request.getTimeframe(),
                    request.getCandleLimit(),
                    request.getExchange() != null ? request.getExchange() : defaultExchange
            );

            log.info("üì§ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ —Å–≤–µ—á–µ–π: {} —Ç–∏–∫–µ—Ä–æ–≤", result.size());
            return ResponseEntity.ok(result);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π: {}", e.getMessage(), e);
            return ResponseEntity.internalServerError().body(new HashMap<>());
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
     */
    @GetMapping("/statistics")
    public ResponseEntity<Map<String, Object>> getCacheStatistics(
            @RequestParam(required = false) String exchange) {

        String targetExchange = exchange != null ? exchange : defaultExchange;
        log.info("üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞ –¥–ª—è –±–∏—Ä–∂–∏ {}", targetExchange);

        try {
            Map<String, Object> stats = candleCacheService.getCacheStatistics(targetExchange);
            return ResponseEntity.ok(stats);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞: {}", e.getMessage(), e);

            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("error", e.getMessage());
            return ResponseEntity.internalServerError().body(errorResponse);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —à–µ–¥—É–ª–ª–µ—Ä–∞
     */
    @GetMapping("/scheduler/status")
    public ResponseEntity<Map<String, Object>> getSchedulerStatus() {
        log.info("üîç –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ —à–µ–¥—É–ª–ª–µ—Ä–∞ –∫—ç—à–∞");

        try {
            Map<String, Object> status = candleCacheScheduler.getSchedulerStatus();
            return ResponseEntity.ok(status);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —à–µ–¥—É–ª–ª–µ—Ä–∞: {}", e.getMessage(), e);

            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("error", e.getMessage());
            return ResponseEntity.internalServerError().body(errorResponse);
        }
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–≤–µ—á–µ–π —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
     */
    @PostMapping("/force-load")
    public ResponseEntity<Map<String, String>> forceLoadCandles(@RequestBody ForceLoadRequest request) {
        log.info("üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: –±–∏—Ä–∂–∞={}, —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã={}, —Ç–∏–∫–µ—Ä–æ–≤={}, –ø–æ—Ç–æ–∫–∏={}, –ø–µ—Ä–∏–æ–¥={} –¥–Ω–µ–π", 
                request.getExchange(), request.getTimeframes(), 
                request.getTickers() != null ? request.getTickers().size() : 0, 
                request.getThreadCount(), request.getPeriodDays());

        try {
            // –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            new Thread(() -> {
                try {
                    candleCacheService.forceLoadCandlesCustom(
                            request.getExchange(), 
                            request.getTimeframes(), 
                            request.getTickers(), 
                            request.getThreadCount(),
                            request.getPeriodDays()
                    );
                } catch (Exception e) {
                    log.error("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ: {}", e.getMessage(), e);
                }
            }, "force-load").start();

            Map<String, String> response = new HashMap<>();
            response.put("status", "started");
            response.put("message", "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ");

            return ResponseEntity.ok(response);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏: {}", e.getMessage(), e);

            Map<String, String> response = new HashMap<>();
            response.put("status", "error");
            response.put("message", e.getMessage());

            return ResponseEntity.internalServerError().body(response);
        }
    }

    /**
     * –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
     */
    @PostMapping("/full-preload")
    public ResponseEntity<Map<String, String>> triggerFullPreload(@RequestBody Map<String, Object> request) {
        String exchange = (String) request.getOrDefault("exchange", defaultExchange);
        log.info("üéØ –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ API –¥–ª—è –±–∏—Ä–∂–∏: {}", exchange);

        try {
            // –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å HTTP –∑–∞–ø—Ä–æ—Å
            new Thread(() -> {
                try {
                    candleCacheService.preloadAllCandles(exchange);
                } catch (Exception e) {
                    log.error("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏: {}", e.getMessage(), e);
                }
            }, "manual-preload").start();

            Map<String, String> response = new HashMap<>();
            response.put("status", "started");
            response.put("message", "–ü–æ–ª–Ω–∞—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ");

            return ResponseEntity.ok(response);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–π –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏: {}", e.getMessage(), e);

            Map<String, String> response = new HashMap<>();
            response.put("status", "error");
            response.put("message", e.getMessage());

            return ResponseEntity.internalServerError().body(response);
        }
    }

    /**
     * –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    @PostMapping("/daily-update")
    public ResponseEntity<Map<String, String>> triggerDailyUpdate(@RequestBody Map<String, Object> request) {
        String exchange = (String) request.getOrDefault("exchange", defaultExchange);
        log.info("üéØ –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ API –¥–ª—è –±–∏—Ä–∂–∏: {}", exchange);

        try {
            // –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            new Thread(() -> {
                try {
                    candleCacheService.dailyCandlesUpdate(exchange);
                } catch (Exception e) {
                    log.error("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {}", e.getMessage(), e);
                }
            }, "manual-update").start();

            Map<String, String> response = new HashMap<>();
            response.put("status", "started");
            response.put("message", "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ");

            return ResponseEntity.ok(response);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {}", e.getMessage(), e);

            Map<String, String> response = new HashMap<>();
            response.put("status", "error");
            response.put("message", e.getMessage());

            return ResponseEntity.internalServerError().body(response);
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
     */
    @DeleteMapping("/clear")
    public ResponseEntity<Map<String, String>> clearCache(
            @RequestParam(required = false) String exchange,
            @RequestParam(required = false) String ticker,
            @RequestParam(required = false) String timeframe) {

        String targetExchange = exchange != null ? exchange : defaultExchange;
        log.info("üóëÔ∏è –ó–∞–ø—Ä–æ—Å –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: exchange={}, ticker={}, timeframe={}",
                targetExchange, ticker, timeframe);

        try {
            // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã –æ—á–∏—Å—Ç–∫–∏ –≤ CandleCacheService
            Map<String, String> response = new HashMap<>();
            response.put("status", "success");
            response.put("message", "–ö—ç—à –æ—á–∏—â–µ–Ω (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)");

            return ResponseEntity.ok(response);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {}", e.getMessage(), e);

            Map<String, String> response = new HashMap<>();
            response.put("status", "error");
            response.put("message", e.getMessage());

            return ResponseEntity.internalServerError().body(response);
        }
    }

    /**
     * Health check –¥–ª—è –∫—ç—à–∞
     */
    @GetMapping("/health")
    public ResponseEntity<Map<String, Object>> healthCheck() {
        Map<String, Object> health = new HashMap<>();

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
            Map<String, Object> stats = candleCacheService.getCacheStatistics(defaultExchange);

            health.put("status", "UP");
            health.put("cacheWorking", true);
            health.put("exchange", defaultExchange);
            health.put("timestamp", System.currentTimeMillis());

            // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            @SuppressWarnings("unchecked")
            var exchangeStats = (Map<String, Map<String, Long>>) stats.get("byExchange");

            if (exchangeStats != null && exchangeStats.containsKey(defaultExchange)) {
                long totalCandles = exchangeStats.get(defaultExchange).values().stream()
                        .mapToLong(Long::longValue).sum();
                health.put("totalCachedCandles", totalCandles);
            } else {
                health.put("totalCachedCandles", 0);
            }

            return ResponseEntity.ok(health);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ health check –∫—ç—à–∞: {}", e.getMessage(), e);

            health.put("status", "DOWN");
            health.put("cacheWorking", false);
            health.put("error", e.getMessage());
            health.put("timestamp", System.currentTimeMillis());

            return ResponseEntity.status(503).body(health);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Ç–æ–∫–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    @PostMapping("/thread-count")
    public ResponseEntity<Map<String, String>> updateThreadCount(@RequestBody Map<String, Object> request) {
        try {
            Integer threadCount = (Integer) request.get("threadCount");
            if (threadCount != null && threadCount > 0) {
                candleCacheService.updateThreadPoolSize(threadCount);
                log.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏: {}", threadCount);
                
                Map<String, String> response = new HashMap<>();
                response.put("status", "success");
                response.put("message", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–æ " + threadCount);
                response.put("currentThreads", String.valueOf(candleCacheService.getCurrentThreadPoolSize()));
                return ResponseEntity.ok(response);
            } else {
                Map<String, String> response = new HashMap<>();
                response.put("status", "error");
                response.put("message", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤");
                return ResponseEntity.badRequest().body(response);
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Ç–æ–∫–æ–≤: {}", e.getMessage(), e);
            Map<String, String> response = new HashMap<>();
            response.put("status", "error");
            response.put("message", e.getMessage());
            return ResponseEntity.internalServerError().body(response);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
     */
    @PostMapping("/force-load-period")
    public ResponseEntity<Map<String, String>> updateForceLoadPeriod(@RequestBody Map<String, Object> request) {
        try {
            Integer periodDays = (Integer) request.get("forceLoadPeriodDays");
            if (periodDays != null && periodDays > 0) {
                // TODO: –û–±–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥ –≤ CandleCacheService
                log.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –ø–µ—Ä–∏–æ–¥ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏: {} –¥–Ω–µ–π", periodDays);
                
                Map<String, String> response = new HashMap<>();
                response.put("status", "success");
                response.put("message", "–ü–µ—Ä–∏–æ–¥ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω");
                return ResponseEntity.ok(response);
            } else {
                Map<String, String> response = new HashMap<>();
                response.put("status", "error");
                response.put("message", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥");
                return ResponseEntity.badRequest().body(response);
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞: {}", e.getMessage(), e);
            Map<String, String> response = new HashMap<>();
            response.put("status", "error");
            response.put("message", e.getMessage());
            return ResponseEntity.internalServerError().body(response);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
     */
    @PostMapping("/schedule-update")
    public ResponseEntity<Map<String, String>> updateSchedules(@RequestBody Map<String, Object> request) {
        try {
            String preloadSchedule = (String) request.get("preloadSchedule");
            String dailyUpdateSchedule = (String) request.get("dailyUpdateSchedule");
            
            if (preloadSchedule != null && dailyUpdateSchedule != null) {
                // TODO: –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ CandleCacheScheduler
                log.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞='{}', –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ='{}'", preloadSchedule, dailyUpdateSchedule);
                
                Map<String, String> response = new HashMap<>();
                response.put("status", "success");
                response.put("message", "–†–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã");
                return ResponseEntity.ok(response);
            } else {
                Map<String, String> response = new HashMap<>();
                response.put("status", "error");
                response.put("message", "–ù–µ —É–∫–∞–∑–∞–Ω—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è");
                return ResponseEntity.badRequest().body(response);
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π: {}", e.getMessage(), e);
            Map<String, String> response = new HashMap<>();
            response.put("status", "error");
            response.put("message", e.getMessage());
            return ResponseEntity.internalServerError().body(response);
        }
    }

    /**
     * DTO –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
     */
    public static class ForceLoadRequest {
        private String exchange;
        private java.util.Set<String> timeframes;
        private List<String> tickers;
        private Integer threadCount;
        private Integer periodDays;

        // Getters and setters
        public String getExchange() { return exchange; }
        public void setExchange(String exchange) { this.exchange = exchange; }
        
        public java.util.Set<String> getTimeframes() { return timeframes; }
        public void setTimeframes(java.util.Set<String> timeframes) { this.timeframes = timeframes; }
        
        public List<String> getTickers() { return tickers; }
        public void setTickers(List<String> tickers) { this.tickers = tickers; }
        
        public Integer getThreadCount() { return threadCount; }
        public void setThreadCount(Integer threadCount) { this.threadCount = threadCount; }
        
        public Integer getPeriodDays() { return periodDays; }
        public void setPeriodDays(Integer periodDays) { this.periodDays = periodDays; }
    }

    /**
     * DTO –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π
     */
    public static class CachedCandlesRequest {
        private List<String> tickers;
        private String timeframe;
        private int candleLimit;
        private String exchange;

        // Getters and setters
        public List<String> getTickers() {
            return tickers;
        }

        public void setTickers(List<String> tickers) {
            this.tickers = tickers;
        }

        public String getTimeframe() {
            return timeframe;
        }

        public void setTimeframe(String timeframe) {
            this.timeframe = timeframe;
        }

        public int getCandleLimit() {
            return candleLimit;
        }

        public void setCandleLimit(int candleLimit) {
            this.candleLimit = candleLimit;
        }

        public String getExchange() {
            return exchange;
        }

        public void setExchange(String exchange) {
            this.exchange = exchange;
        }
    }
}