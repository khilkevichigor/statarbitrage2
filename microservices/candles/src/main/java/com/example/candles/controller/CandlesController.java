package com.example.candles.controller;

import com.example.candles.client.OkxFeignClient;
import com.example.candles.dto.ExtendedCandlesRequest;
import com.example.candles.service.CandlesService;
import com.example.shared.dto.Candle;
import com.example.shared.dto.CandlesRequest;
import com.example.shared.models.Settings;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/candles")
@RequiredArgsConstructor
@Slf4j
public class CandlesController {

    private final CandlesService candlesService;
    private final OkxFeignClient okxFeignClient;

    @PostMapping("/applicable-map")
    public Map<String, List<Candle>> getApplicableCandlesMap(@RequestBody CandlesRequest request) {
        if (request.isUsePairData()) {
            return candlesService.getApplicableCandlesMap(request.getTradingPair(), request.getSettings());
        } else {
            return candlesService.getApplicableCandlesMap(request.getSettings(), request.getTradingTickers());
        }
    }

    /**
     * –ù–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ - –ø–æ–ª—É—á–∞–µ—Ç –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–≤–µ—á–∏
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤
     */
    @PostMapping("/all")
    public Map<String, List<Candle>> getAllCandles(@RequestBody Settings settings) {
        log.info("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏...");

        long startTime = System.currentTimeMillis();

        List<String> swapTickers = okxFeignClient.getAllSwapTickers(true);

        // –ü–µ—Ä–µ–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –í–°–ï–• –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        Map<String, List<Candle>> result = candlesService.getCandles(settings, swapTickers, true);

        long elapsed = System.currentTimeMillis() - startTime;

        log.info("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {} —Ç–∏–∫–µ—Ä–æ–≤ —Å —Å–≤–µ—á–∞–º–∏ –∑–∞ {} —Å–µ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏",
                result.size(), String.format("%.2f", elapsed / 1000.0));

        if (!result.isEmpty()) {
            log.info("üìä –ü–µ—Ä–≤—ã–µ —Ç–∏–∫–µ—Ä—ã: {}",
                    result.keySet().stream()
                            .limit(10)
                            .reduce((a, b) -> a + ", " + b)
                            .orElse(""));
        }

        return result;
    }

    /**
     * –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–≤–µ—á–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
     * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –±–æ–ª–µ–µ 300 —Å–≤–µ—á–µ–π —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ OKX API
     */
    @PostMapping("/all-extended")
    public Map<String, List<Candle>> getAllCandlesExtended(@RequestBody ExtendedCandlesRequest request) {
        log.info("üîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å {} —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ {}...",
                request.getCandleLimit(), request.getTimeframe());

        long startTime = System.currentTimeMillis();

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ExtendedCandlesRequest –≤ Settings
        Settings settings = convertToSettings(request);

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã
        List<String> swapTickers = okxFeignClient.getAllSwapTickers(true);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–≤–µ—á–µ–π
        Map<String, List<Candle>> result = candlesService.getCandlesExtended(settings, swapTickers, request.getCandleLimit());

        long elapsed = System.currentTimeMillis() - startTime;

        if (result != null && !result.isEmpty()) {
            int totalCandles = result.values().stream().mapToInt(List::size).sum();
            int avgCandles = totalCandles / result.size();
            log.info("‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {} —Å–µ–∫. –ü–æ–ª—É—á–µ–Ω–æ {} —Ç–∏–∫–µ—Ä–æ–≤ —Å–æ —Å—Ä–µ–¥–Ω–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º {} —Å–≤–µ—á–µ–π (–≤—Å–µ–≥–æ {} —Å–≤–µ—á–µ–π)",
                    String.format("%.2f", elapsed / 1000.0), result.size(), avgCandles, totalCandles);
        } else {
            log.warn("‚ö†Ô∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã—Ö");
        }

        return result != null ? result : Map.of();
    }

    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è ExtendedCandlesRequest –≤ Settings
     */
    private Settings convertToSettings(ExtendedCandlesRequest request) {
        Settings settings = new Settings();
        settings.setTimeframe(request.getTimeframe());
        settings.setCandleLimit(request.getCandleLimit());
        settings.setMinVolume(request.getMinVolume());
        settings.setUseMinVolumeFilter(request.isUseMinVolumeFilter());
        settings.setMinimumLotBlacklist(request.getMinimumLotBlacklist() != null ? request.getMinimumLotBlacklist() : "");

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        settings.setMinCorrelation(0.1);
        settings.setMinWindowSize(100);
        settings.setMaxPValue(1.0);
        settings.setMaxAdfValue(1.0);
        settings.setMinRSquared(0.1);

        return settings;
    }
}