package com.example.candles.controller;

import com.example.candles.client.OkxFeignClient;
import com.example.candles.service.CandlesService;
import com.example.shared.dto.Candle;
import com.example.shared.dto.CandlesRequest;
import com.example.shared.models.Settings;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/candles")
@RequiredArgsConstructor
@Slf4j
public class CandlesController {

    private final CandlesService candlesService;
    private final OkxFeignClient okxFeignClient;

    @PostMapping("/applicable-map")
    public Map<String, List<Candle>> getApplicableCandlesMap(@RequestBody CandlesRequest request) {
        if (request.isUsePairData()) {
            return candlesService.getApplicableCandlesMap(request.getTradingPair(), request.getSettings());
        } else {
            return candlesService.getApplicableCandlesMap(request.getSettings(), request.getTradingTickers());
        }
    }

    /**
     * –ù–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ - –ø–æ–ª—É—á–∞–µ—Ç –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–≤–µ—á–∏
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤
     */
    @PostMapping("/all")
    public Map<String, List<Candle>> getAllCandles(@RequestBody Settings settings) {
        log.info("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏...");
        
        long startTime = System.currentTimeMillis();

        List<String> swapTickers = okxFeignClient.getAllSwapTickers(true);

        // –ü–µ—Ä–µ–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –í–°–ï–• –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        Map<String, List<Candle>> result = candlesService.getCandles(settings, swapTickers, true);
        
        long elapsed = System.currentTimeMillis() - startTime;
        
        log.info("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {} —Ç–∏–∫–µ—Ä–æ–≤ —Å —Å–≤–µ—á–∞–º–∏ –∑–∞ {} —Å–µ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏", 
                result.size(), String.format("%.2f", elapsed / 1000.0));
        
        if (!result.isEmpty()) {
            log.info("üìä –ü–µ—Ä–≤—ã–µ —Ç–∏–∫–µ—Ä—ã: {}", 
                    result.keySet().stream()
                            .limit(10)
                            .reduce((a, b) -> a + ", " + b)
                            .orElse(""));
        }
        
        return result;
    }
}