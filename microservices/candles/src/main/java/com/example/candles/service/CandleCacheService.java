package com.example.candles.service;

import com.example.candles.client.OkxFeignClient;
import com.example.candles.repositories.CachedCandleRepository;
import com.example.shared.dto.Candle;
import com.example.shared.models.CachedCandle;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.stream.Collectors;
import java.util.Comparator;
import org.springframework.data.domain.PageRequest;
import jakarta.annotation.PostConstruct;
import jakarta.annotation.PreDestroy;

@Service
@RequiredArgsConstructor
@Slf4j
public class CandleCacheService {

    private final CachedCandleRepository cachedCandleRepository;
    private final OkxFeignClient okxFeignClient;
    private final CandleTransactionService candleTransactionService;

    @Value("${app.candle-cache.default-exchange:OKX}")
    private String defaultExchange;
    
    @Value("${app.candle-cache.thread-pool-size:5}")
    private int threadPoolSize;
    
    // –ü—É–ª –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ properties)
    private ExecutorService executorService;

    private final Map<String, Integer> defaultCachePeriods = Map.of(
            "1m", 365,    // 1 –≥–æ–¥ –¥–ª—è –º–µ–ª–∫–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
            "5m", 365,
            "15m", 365,
            "1H", 1095,   // 3 –≥–æ–¥–∞ –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤  
            "4H", 1095,
            "1D", 1825,   // 5 –ª–µ—Ç –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
            "1W", 1825,
            "1M", 1825
    );

    @PostConstruct
    public void initializeExecutorService() {
        this.executorService = Executors.newFixedThreadPool(threadPoolSize);
        log.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ExecutorService —Å {} –ø–æ—Ç–æ–∫–∞–º–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∏–∫–µ—Ä–æ–≤", threadPoolSize);
    }

    @PreDestroy
    public void shutdownExecutorService() {
        if (executorService != null && !executorService.isShutdown()) {
            executorService.shutdown();
            log.info("üõë ExecutorService –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –≤ –ø—É–ª–µ
     */
    public synchronized void updateThreadPoolSize(int newThreadPoolSize) {
        if (newThreadPoolSize <= 0 || newThreadPoolSize > 20) {
            log.warn("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤: {}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç 1 –¥–æ 20.", newThreadPoolSize);
            return;
        }

        if (newThreadPoolSize == this.threadPoolSize) {
            log.info("iÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ —É–∂–µ —Ä–∞–≤–Ω–æ {}, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è", newThreadPoolSize);
            return;
        }

        log.info("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤ —Å {} –Ω–∞ {} –ø–æ—Ç–æ–∫–æ–≤", this.threadPoolSize, newThreadPoolSize);
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø—É–ª
        if (executorService != null && !executorService.isShutdown()) {
            executorService.shutdown();
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—É–ª
        this.threadPoolSize = newThreadPoolSize;
        this.executorService = Executors.newFixedThreadPool(threadPoolSize);
        
        log.info("‚úÖ –ü—É–ª –ø–æ—Ç–æ–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ {} –ø–æ—Ç–æ–∫–æ–≤", threadPoolSize);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
     */
    public int getCurrentThreadPoolSize() {
        return threadPoolSize;
    }

    /**
     * üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –°–í–ï–ß–ï–ô –¥–ª—è –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
     * –ò—Å–ø–æ–ª—å–∑—É–µ–º BTC-USDT-SWAP –∫–∞–∫ —ç—Ç–∞–ª–æ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
     * –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π 
     * –∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ç–∞–π–º—à—Ç–∞–º–ø—ã –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏
     * 
     * @return Map<String, List<Candle>> –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ —Ç–æ–ª—å–∫–æ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ —Ç–∏–∫–µ—Ä–∞–º–∏
     */
    private Map<String, List<Candle>> validateAndFilterCandlesConsistency(
            Map<String, List<Candle>> candlesMap, String timeframe, int expectedLimit) {
        if (candlesMap.isEmpty()) {
            log.warn("‚ö†Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø: –ü—É—Å—Ç–∞—è –∫–∞—Ä—Ç–∞ —Å–≤–µ—á–µ–π –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏");
            return new ConcurrentHashMap<>();
        }

        log.info("üîç –í–ê–õ–ò–î–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å {} —Ç–∏–∫–µ—Ä–æ–≤ (—Ç–∞–π–º—Ñ—Ä–µ–π–º: {}, –ª–∏–º–∏—Ç: {})",
                candlesMap.size(), timeframe, expectedLimit);

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        Map<Integer, Integer> candleCountDistribution = new HashMap<>();
        Map<Long, Integer> firstTimestampDistribution = new HashMap<>(); 
        Map<Long, Integer> lastTimestampDistribution = new HashMap<>();
        List<String> validTickers = new ArrayList<>();
        List<String> invalidTickers = new ArrayList<>();
        Map<String, List<Candle>> validCandlesMap = new ConcurrentHashMap<>();

        long expectedFirstTimestamp = -1;
        long expectedLastTimestamp = -1;
        int expectedCandleCount = -1;

        // üéØ –ò–°–ü–û–õ–¨–ó–£–ï–ú BTC-USDT-SWAP –ö–ê–ö –≠–¢–ê–õ–û–ù
        final String btcTicker = "BTC-USDT-SWAP";
        List<Candle> btcCandles = candlesMap.get(btcTicker);
        
        if (btcCandles != null && !btcCandles.isEmpty()) {
            btcCandles.sort(Comparator.comparingLong(Candle::getTimestamp));
            
            // ‚úÖ –≠–¢–ê–õ–û–ù –î–û–õ–ñ–ï–ù –ò–ú–ï–¢–¨ –¢–û–ß–ù–û –ó–ê–ü–†–û–®–ï–ù–ù–û–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –°–í–ï–ß–ï–ô!
            if (btcCandles.size() == expectedLimit) {
                expectedCandleCount = expectedLimit;
                expectedFirstTimestamp = btcCandles.get(0).getTimestamp();
                expectedLastTimestamp = btcCandles.get(btcCandles.size() - 1).getTimestamp();
                
                log.info("üéØ –≠–¢–ê–õ–û–ù: BTC-USDT-SWAP –≤–∞–ª–∏–¥–µ–Ω - {} —Å–≤–µ—á–µ–π (–∫–∞–∫ –∑–∞–ø—Ä–æ—à–µ–Ω–æ), {} - {}", 
                        expectedCandleCount, 
                        formatTimestamp(expectedFirstTimestamp),
                        formatTimestamp(expectedLastTimestamp));
            } else {
                log.error("‚ùå –≠–¢–ê–õ–û–ù: BTC-USDT-SWAP –Ω–µ–≤–∞–ª–∏–¥–µ–Ω - {} —Å–≤–µ—á–µ–π –≤–º–µ—Å—Ç–æ {} –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö! –≠—Ç–∞–ª–æ–Ω –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö!",
                        btcCandles.size(), expectedLimit);
                expectedCandleCount = expectedLimit;
                
                // –î–ª—è —ç—Ç–∞–ª–æ–Ω–∞ —Ç—Ä–µ–±—É–µ–º —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è  
                // –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–æ–π–¥—É—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é —É –Ω–µ–ø–æ–ª–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤
                expectedFirstTimestamp = 0;
                expectedLastTimestamp = Long.MAX_VALUE;
            }
        } else {
            log.error("‚ùå –≠–¢–ê–õ–û–ù: BTC-USDT-SWAP –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö! –≠—Ç–∞–ª–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏!");
            expectedCandleCount = expectedLimit;
            expectedFirstTimestamp = 0;
            expectedLastTimestamp = Long.MAX_VALUE;
        }

        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ç–∏–∫–µ—Ä–∞–º –∏ —Å–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        for (Map.Entry<String, List<Candle>> entry : candlesMap.entrySet()) {
            String ticker = entry.getKey();
            List<Candle> candles = entry.getValue();

            if (candles == null || candles.isEmpty()) {
                invalidTickers.add(ticker + "(–ø—É—Å—Ç–æ–π)");
                continue;
            }

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–≤–µ—á–∏ –ø–æ timestamp –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            candles.sort(Comparator.comparingLong(Candle::getTimestamp));

            int candleCount = candles.size();
            long firstTimestamp = candles.get(0).getTimestamp();
            long lastTimestamp = candles.get(candles.size() - 1).getTimestamp();

            // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            candleCountDistribution.merge(candleCount, 1, Integer::sum);
            firstTimestampDistribution.merge(firstTimestamp, 1, Integer::sum);
            lastTimestampDistribution.merge(lastTimestamp, 1, Integer::sum);

            // ‚ùå –£–ë–ò–†–ê–ï–ú –†–ï–ó–ï–†–í–ù–´–ô –≠–¢–ê–õ–û–ù - —ç—Ç–∞–ª–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¢–û–õ–¨–ö–û BTC —Å —Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º!
            // –ï—Å–ª–∏ BTC –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–∏–µ —Ç–∏–∫–µ—Ä—ã –∫–∞–∫ —ç—Ç–∞–ª–æ–Ω
            if (expectedFirstTimestamp == -1) {
                // –≠—Ç–∞–ª–æ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω = –≤—Å–µ —Ç–∏–∫–µ—Ä—ã –Ω–µ–≤–∞–ª–∏–¥–Ω—ã
                log.error("‚ùå –ù–ï–¢ –í–ê–õ–ò–î–ù–û–ì–û –≠–¢–ê–õ–û–ù–ê: BTC-USDT-SWAP –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å {} —Å–≤–µ—á–µ–π!", expectedLimit);
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —ç—Ç–∞–ª–æ–Ω—É
            boolean isValid = (candleCount == expectedCandleCount && 
                             firstTimestamp == expectedFirstTimestamp &&
                             lastTimestamp == expectedLastTimestamp);

            if (isValid) {
                validTickers.add(ticker);
                validCandlesMap.put(ticker, candles); // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã
            } else {
                // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑–ª–∏—á–∞—é—â–∏—Ö—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                List<String> differences = new ArrayList<>();
                
                if (candleCount != expectedCandleCount) {
                    differences.add(String.format("—Å–≤–µ—á–µ–π:%d‚â†%d", candleCount, expectedCandleCount));
                }
                if (firstTimestamp != expectedFirstTimestamp) {
                    differences.add(String.format("–Ω–∞—á–∞–ª–æ:%s‚â†%s", 
                        formatTimestamp(firstTimestamp), formatTimestamp(expectedFirstTimestamp)));
                }
                if (lastTimestamp != expectedLastTimestamp) {
                    differences.add(String.format("–∫–æ–Ω–µ—Ü:%s‚â†%s", 
                        formatTimestamp(lastTimestamp), formatTimestamp(expectedLastTimestamp)));
                }
                
                String reason = !differences.isEmpty() ? 
                    "(" + String.join(", ", differences) + ")" : 
                    "(–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞)";
                    
                invalidTickers.add(ticker + reason);
            }
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        String firstTimeStr = formatTimestamp(expectedFirstTimestamp);
        String lastTimeStr = formatTimestamp(expectedLastTimestamp);

        // üìä –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –û –í–ê–õ–ò–î–ê–¶–ò–ò
        log.info("üìä –í–ê–õ–ò–î–ê–¶–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢:");
        log.info("   üéØ –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {} —Å–≤–µ—á–µ–π, {} - {}", 
                expectedCandleCount, firstTimeStr, lastTimeStr);
        log.info("   ‚úÖ –í–∞–ª–∏–¥–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã: {} –∏–∑ {} ({}%)", 
                validTickers.size(), candlesMap.size(), 
                Math.round(100.0 * validTickers.size() / candlesMap.size()));

        if (!invalidTickers.isEmpty()) {
            log.warn("   ‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã ({}): {}", 
                    invalidTickers.size(), invalidTickers.size() <= 10 ? 
                    String.join(", ", invalidTickers) : 
                    String.join(", ", invalidTickers.subList(0, 10)) + "...");
        }

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
        log.info("   üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–≤–µ—á–µ–π: {}", candleCountDistribution);
        
        if (firstTimestampDistribution.size() > 1) {
            log.warn("   ‚ö†Ô∏è –†–∞–∑–Ω—ã–µ –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ç–∞–π–º—à—Ç–∞–º–ø—ã: {} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", firstTimestampDistribution.size());
        }
        
        if (lastTimestampDistribution.size() > 1) {
            log.warn("   ‚ö†Ô∏è –†–∞–∑–Ω—ã–µ –∫–æ–Ω–µ—á–Ω—ã–µ —Ç–∞–π–º—à—Ç–∞–º–ø—ã: {} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", lastTimestampDistribution.size());
        }

        // –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        double consistencyRate = (double) validTickers.size() / candlesMap.size();
        String percentStr = String.format("%.1f%%", consistencyRate * 100);
        
        if (consistencyRate >= 0.95) {
            log.info("üéâ –í–ê–õ–ò–î–ê–¶–ò–Ø: –û—Ç–ª–∏—á–Ω–∞—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö ({})", percentStr);
        } else if (consistencyRate >= 0.90) {
            log.warn("‚ö†Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø: –•–æ—Ä–æ—à–∞—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö ({})", percentStr);
        } else if (consistencyRate >= 0.80) {
            log.warn("‚ùå –í–ê–õ–ò–î–ê–¶–ò–Ø: –°—Ä–µ–¥–Ω—è—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö ({})", percentStr);
        } else {
            log.error("üí• –í–ê–õ–ò–î–ê–¶–ò–Ø: –ü–õ–û–•–ê–Ø –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö ({}) - –∏—Å–∫–ª—é—á–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã!", percentStr);
        }
        
        // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Å–µ –≤–∞–ª–∏–¥–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã –º–µ–∂–¥—É —Å–æ–±–æ–π
        if (validCandlesMap.size() > 1) {
            log.info("üîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∑–∞–∏–º–Ω—É—é –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å {} –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤", validCandlesMap.size());
            
            // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä–∞–∑–º–µ—Ä—ã –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤
            Map<String, String> tickerStats = new HashMap<>();
            for (Map.Entry<String, List<Candle>> entry : validCandlesMap.entrySet()) {
                String ticker = entry.getKey();
                List<Candle> candles = entry.getValue();
                String stats = String.format("%d —Å–≤–µ—á–µ–π (%s-%s)", 
                        candles.size(),
                        formatTimestamp(candles.get(0).getTimestamp()),
                        formatTimestamp(candles.get(candles.size() - 1).getTimestamp()));
                tickerStats.put(ticker, stats);
            }
            
            // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥–æ–≥–æ –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞
            log.info("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–ê–õ–ò–î–ù–´–• –¢–ò–ö–ï–†–û–í:");
            for (Map.Entry<String, String> entry : tickerStats.entrySet()) {
                log.info("   ‚úÖ {}: {}", entry.getKey(), entry.getValue());
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É –≤–∞–ª–∏–¥–Ω—ã–º–∏ —Ç–∏–∫–µ—Ä–∞–º–∏
            Set<Integer> candleCounts = validCandlesMap.values().stream()
                    .mapToInt(List::size)
                    .boxed()
                    .collect(Collectors.toSet());
                    
            if (candleCounts.size() > 1) {
                log.error("üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í–ê–õ–ò–î–ê–¶–ò–ò: –í–∞–ª–∏–¥–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã –∏–º–µ—é—Ç –†–ê–ó–ù–û–ï –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π: {}", candleCounts);
                log.error("üí• –≠–¢–û –ù–ï –î–û–õ–ñ–ù–û –ü–†–û–ò–°–•–û–î–ò–¢–¨! –í—Å–µ –≤–∞–ª–∏–¥–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã!");
                
                // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤
                Map<Integer, List<String>> sizeGroups = new HashMap<>();
                for (Map.Entry<String, List<Candle>> entry : validCandlesMap.entrySet()) {
                    int size = entry.getValue().size();
                    sizeGroups.computeIfAbsent(size, k -> new ArrayList<>()).add(entry.getKey());
                }
                
                log.error("üí• –ì–†–£–ü–ü–ò–†–û–í–ö–ê –ü–û –†–ê–ó–ú–ï–†–ê–ú:");
                for (Map.Entry<Integer, List<String>> group : sizeGroups.entrySet()) {
                    log.error("   {} —Å–≤–µ—á–µ–π: {}", group.getKey(), String.join(", ", group.getValue()));
                }
            }
        }
        
        log.info("üîÑ –§–ò–õ–¨–¢–†–ê–¶–ò–Ø: –í–æ–∑–≤—Ä–∞—â–∞–µ–º {} –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ {} –∏—Å—Ö–æ–¥–Ω—ã—Ö",
                validCandlesMap.size(), candlesMap.size());
        
        if (!invalidTickers.isEmpty()) {
            log.warn("üóëÔ∏è –ò–°–ö–õ–Æ–ß–ï–ù–´: {} —Ç–∏–∫–µ—Ä–æ–≤ - {}", 
                    invalidTickers.size(), 
                    invalidTickers.size() <= 5 ? 
                    String.join(", ", invalidTickers) : 
                    String.join(", ", invalidTickers.subList(0, 5)) + "...");
        }
        
        return validCandlesMap; // ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    }
    
    /**
     * üîÑ –í–ê–õ–ò–î–ê–¶–ò–Ø –° –ü–û–í–¢–û–†–ù–û–ô –ü–û–ü–´–¢–ö–û–ô –î–û–ì–†–£–ó–ö–ò
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞–Ω–Ω—ã–µ, –¥–æ–≥—Ä—É–∂–∞–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å–≤–µ—á–∏ –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤,
     * –∑–∞—Ç–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ –∏—Å–∫–ª—é—á–∞–µ—Ç –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã
     */
    private Map<String, List<Candle>> validateAndFilterCandlesWithRetry(
            Map<String, List<Candle>> candlesMap, String timeframe, int candleLimit, 
            List<String> originalTickers, String exchange) {
        
        log.info("üîç –ü–û–≠–¢–ê–ü–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø: –°–Ω–∞—á–∞–ª–∞ —ç—Ç–∞–ª–æ–Ω BTC, –∑–∞—Ç–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ {} —Ç–∏–∫–µ—Ä–æ–≤", 
                candlesMap.size());
        
        final String btcTicker = "BTC-USDT-SWAP";
        
        // –®–ê–ì 1: –û–ë–ï–°–ü–ï–ß–ò–í–ê–ï–ú –ü–û–õ–ù–´–ô –≠–¢–ê–õ–û–ù BTC
        List<Candle> btcCandles = candlesMap.get(btcTicker);
        if (btcCandles == null || btcCandles.isEmpty()) {
            log.error("‚ùå BTC-USDT-SWAP –Ω–µ –Ω–∞–π–¥–µ–Ω - –Ω–µ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å —ç—Ç–∞–ª–æ–Ω!");
            return new ConcurrentHashMap<>();
        }
        
        btcCandles.sort(Comparator.comparingLong(Candle::getTimestamp));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ—Ç—É –∏ —Å–≤–µ–∂–µ—Å—Ç—å —ç—Ç–∞–ª–æ–Ω–∞ BTC
        long currentTimestamp = System.currentTimeMillis() / 1000;
        long lastCandleTimestamp = btcCandles.get(btcCandles.size() - 1).getTimestamp();
        long maxAllowedAge = calculateMaxAllowedAge(timeframe); // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–≥–∏–µ –ª–∏–º–∏—Ç—ã
        boolean isStale = (currentTimestamp - lastCandleTimestamp) > maxAllowedAge;
        
        if (btcCandles.size() < candleLimit || isStale) {
            if (btcCandles.size() < candleLimit) {
                log.warn("üîÑ –≠–¢–ê–õ–û–ù –ù–ï–ü–û–õ–ù–´–ô: BTC –∏–º–µ–µ—Ç {} —Å–≤–µ—á–µ–π –≤–º–µ—Å—Ç–æ {}, –¥–æ–≥—Ä—É–∂–∞–µ–º...", 
                        btcCandles.size(), candleLimit);
            }
            if (isStale) {
                long ageInSeconds = currentTimestamp - lastCandleTimestamp;
                log.warn("üîÑ –≠–¢–ê–õ–û–ù –£–°–¢–ê–†–ï–õ: BTC –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞ {} —Å–µ–∫ –Ω–∞–∑–∞–¥ (–º–∞–∫—Å: {}), –æ–±–Ω–æ–≤–ª—è–µ–º...", 
                        ageInSeconds, maxAllowedAge);
            }
            
            try {
                // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –¥–æ–≥—Ä—É–∑–∫–∞ –¢–û–õ–¨–ö–û –¥–ª—è BTC –¥–æ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                Map<String, Object> btcReloadResult = loadMissingCandlesForTickers(
                        Arrays.asList(btcTicker), timeframe, candleLimit, exchange, 
                        -1L, -1L); // –ë–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–ª—è —ç—Ç–∞–ª–æ–Ω–∞
                
                @SuppressWarnings("unchecked")
                Map<String, List<Candle>> reloadedBtc = 
                        (Map<String, List<Candle>>) btcReloadResult.get("candlesMap");
                Integer addedCount = (Integer) btcReloadResult.get("addedCount");
                
                if (reloadedBtc.containsKey(btcTicker)) {
                    btcCandles = reloadedBtc.get(btcTicker);
                    candlesMap.put(btcTicker, btcCandles); // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –æ–±—â–µ–π –∫–∞—Ä—Ç–µ
                    log.info("‚úÖ –≠–¢–ê–õ–û–ù –î–û–ì–†–£–ñ–ï–ù: BTC —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç {} —Å–≤–µ—á–µ–π (+{} –¥–æ–±–∞–≤–ª–µ–Ω–æ)", 
                            btcCandles.size(), addedCount);
                } else {
                    log.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–≥—Ä—É–∑–∏—Ç—å BTC-USDT-SWAP –¥–æ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞!");
                    return new ConcurrentHashMap<>();
                }
            } catch (Exception e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–≥—Ä—É–∑–∫–µ BTC —ç—Ç–∞–ª–æ–Ω–∞: {}", e.getMessage(), e);
                return new ConcurrentHashMap<>();
            }
        }
        
        // –®–ê–ì 2: –ü–†–û–í–ï–†–Ø–ï–ú –í–ê–õ–ò–î–ù–û–°–¢–¨ –ü–û–õ–ù–û–ì–û –≠–¢–ê–õ–û–ù–ê
        btcCandles.sort(Comparator.comparingLong(Candle::getTimestamp));
        if (btcCandles.size() != candleLimit) {
            log.error("‚ùå –≠–¢–ê–õ–û–ù –í–°–ï –ï–©–ï –ù–ï–ü–û–õ–ù–´–ô: BTC –∏–º–µ–µ—Ç {} —Å–≤–µ—á–µ–π –≤–º–µ—Å—Ç–æ —Ç—Ä–µ–±—É–µ–º—ã—Ö {}!", 
                    btcCandles.size(), candleLimit);
            return new ConcurrentHashMap<>();
        }
        
        long expectedFirstTimestamp = btcCandles.get(0).getTimestamp();
        long expectedLastTimestamp = btcCandles.get(btcCandles.size() - 1).getTimestamp();
        
        log.info("üéØ –≠–¢–ê–õ–û–ù –ì–û–¢–û–í: {} —Å–≤–µ—á–µ–π, {} - {}", 
                candleLimit, 
                formatTimestamp(expectedFirstTimestamp), 
                formatTimestamp(expectedLastTimestamp));
        
        // –®–ê–ì 3: –í–ê–õ–ò–î–ê–¶–ò–Ø –í–°–ï–• –¢–ò–ö–ï–†–û–í –û–¢–ù–û–°–ò–¢–ï–õ–¨–ù–û –ü–û–õ–ù–û–ì–û –≠–¢–ê–õ–û–ù–ê
        Map<String, List<Candle>> validCandlesMap = validateAndFilterCandlesConsistency(
                candlesMap, timeframe, candleLimit);
        
        int validCount = validCandlesMap.size();
        int invalidCount = candlesMap.size() - validCount;
        
        if (invalidCount == 0) {
            log.info("‚ú® –í–°–ï –¢–ò–ö–ï–†–´ –í–ê–õ–ò–î–ù–´: –í–æ–∑–≤—Ä–∞—â–∞–µ–º {} —Ç–∏–∫–µ—Ä–æ–≤", validCount);
            return validCandlesMap;
        }
        
        // –®–ê–ì 4: –î–û–ì–†–£–ó–ö–ê –ù–ï–í–ê–õ–ò–î–ù–´–• –¢–ò–ö–ï–†–û–í
        log.warn("‚ö†Ô∏è –ù–ê–ô–î–ï–ù–´ –ù–ï–í–ê–õ–ò–î–ù–´–ï –¢–ò–ö–ï–†–´: {} –∏–∑ {} —Ç—Ä–µ–±—É—é—Ç –¥–æ–≥—Ä—É–∑–∫–∏", invalidCount, candlesMap.size());
        
        // –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –¥–æ–≥—Ä—É–∑–∫–∏ (–∫—Ä–æ–º–µ BTC - –æ–Ω —É–∂–µ –ø–æ–ª–Ω—ã–π)
        List<String> tickersToReload = new ArrayList<>();
        for (String ticker : originalTickers) {
            if (!validCandlesMap.containsKey(ticker) && !ticker.equals(btcTicker)) {
                tickersToReload.add(ticker);
            }
        }
        
        if (tickersToReload.isEmpty()) {
            log.info("iÔ∏è –í–°–ï –ù–ï–í–ê–õ–ò–î–ù–´–ï –¢–ò–ö–ï–†–´ - –≠–¢–û BTC (—É–∂–µ –¥–æ–≥—Ä—É–∂–µ–Ω): –í–æ–∑–≤—Ä–∞—â–∞–µ–º {} –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤", validCount);
            return validCandlesMap;
        }
        
        log.info("üîÑ –î–û–ì–†–£–ó–ö–ê –û–°–¢–ê–õ–¨–ù–´–• –¢–ò–ö–ï–†–û–í: {} —Ç–∏–∫–µ—Ä–æ–≤ –ø–æ–¥ —ç—Ç–∞–ª–æ–Ω BTC", tickersToReload.size());
        
        try {
            // –î–æ–≥—Ä—É–∑–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ —ç—Ç–∞–ª–æ–Ω—É BTC
            Map<String, Object> reloadResult = loadMissingCandlesForTickers(
                    tickersToReload, timeframe, candleLimit, exchange, 
                    expectedFirstTimestamp, expectedLastTimestamp);
            
            @SuppressWarnings("unchecked")
            Map<String, List<Candle>> reloadedCandles = 
                    (Map<String, List<Candle>>) reloadResult.get("candlesMap");
            Integer addedCount = (Integer) reloadResult.get("addedCount");
            
            log.info("üì• –î–û–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê: –ü–æ–ª—É—á–µ–Ω–æ {} —Ç–∏–∫–µ—Ä–æ–≤, –¥–æ–±–∞–≤–ª–µ–Ω–æ {} —Å–≤–µ—á–µ–π –≤ –ë–î", 
                    reloadedCandles.size(), addedCount);
            
            // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –¥–æ–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏
            Map<String, List<Candle>> combinedMap = new ConcurrentHashMap<>(validCandlesMap);
            combinedMap.putAll(reloadedCandles);
            
            log.info("üîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º {} —Ç–∏–∫–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –¥–æ–≥—Ä—É–∑–∫–∏", 
                    combinedMap.size());
            
            // –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
            Map<String, List<Candle>> finalValidMap = validateAndFilterCandlesConsistency(
                    combinedMap, timeframe, candleLimit);
            
            int finalValidCount = finalValidMap.size();
            int finalInvalidCount = combinedMap.size() - finalValidCount;
            
            if (finalInvalidCount > 0) {
                log.warn("üóëÔ∏è –§–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {} —Ç–∏–∫–µ—Ä–æ–≤ –æ—Å—Ç–∞–ª–∏—Å—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –ø–æ—Å–ª–µ –¥–æ–≥—Ä—É–∑–∫–∏", 
                        finalInvalidCount);
            }
            
            log.info("‚úÖ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {} –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ {} –∏—Å—Ö–æ–¥–Ω—ã—Ö", 
                    finalValidCount, originalTickers.size());
            
            return finalValidMap;
            
        } catch (Exception e) {
            log.error("üí• –û–®–ò–ë–ö–ê –î–û–ì–†–£–ó–ö–ò: {}, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤–∞–ª–∏–¥–Ω—ã–µ {} —Ç–∏–∫–µ—Ä–æ–≤", 
                    e.getMessage(), validCount);
            return validCandlesMap;
        }
    }
    
    /**
     * üì• –î–û–ì–†–£–ó–ö–ê –ö–û–ù–ö–†–ï–¢–ù–´–• –¢–ò–ö–ï–†–û–í —Å —Ç–æ—á–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
     * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –¥–æ–≥—Ä—É–∑–∫–∏ —Ç–∏–∫–µ—Ä–æ–≤ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ timestamp'–∞–º–∏
     */
    private Map<String, Object> loadMissingCandlesForTickers(
            List<String> tickers, String timeframe, int candleLimit, String exchange,
            long expectedFirstTimestamp, long expectedLastTimestamp) {
        
        Map<String, List<Candle>> result = new ConcurrentHashMap<>();
        final int[] totalAddedCount = {0};
        
        if (expectedFirstTimestamp == -1L && expectedLastTimestamp == -1L) {
            log.info("üéØ –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –î–û–ì–†–£–ó–ö–ê: {} —Ç–∏–∫–µ—Ä–æ–≤ –ë–ï–ó –í–†–ï–ú–ï–ù–ù–´–• –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô (–¥–ª—è —ç—Ç–∞–ª–æ–Ω–∞)", 
                    tickers.size());
        } else {
            log.info("üéØ –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –î–û–ì–†–£–ó–ö–ê: {} —Ç–∏–∫–µ—Ä–æ–≤ —Å —Ç–æ—á–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ {}-{}", 
                    tickers.size(), formatTimestamp(expectedFirstTimestamp), formatTimestamp(expectedLastTimestamp));
        }
        
        try {
            // –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è –¥–æ–≥—Ä—É–∑–∫–∞ –≤ 5 –ø–æ—Ç–æ–∫–æ–≤
            List<CompletableFuture<Void>> futures = new ArrayList<>();
            
            for (String ticker : tickers) {
                CompletableFuture<Void> future = CompletableFuture.runAsync(() -> {
                    try {
                        log.info("üîÑ –ü–û–¢–û–ö: –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –¥–æ–≥—Ä—É–∑–∫–∞ {} —Å —Ç–æ—á–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏", ticker);
                        
                        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º –ü–û–õ–ù–û–ï –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –¥–ª—è —ç—Ç–∞–ª–æ–Ω–∞ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏!
                        // –ï—Å–ª–∏ —ç—Ç–æ —ç—Ç–∞–ª–æ–Ω BTC, –Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–µ–ø–æ–ª–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É
                        List<Candle> freshCandles;
                        if ("BTC-USDT-SWAP".equals(ticker)) {
                            // –î–ª—è —ç—Ç–∞–ª–æ–Ω–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                            freshCandles = okxFeignClient.getCandles(ticker, timeframe, candleLimit);
                            log.info("üì• –ü–û–¢–û–ö: {} - –≠–¢–ê–õ–û–ù, –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {} —Å–≤–µ—á–µ–π", 
                                    ticker, candleLimit);
                        } else if (expectedFirstTimestamp != -1L && expectedLastTimestamp != -1L) {
                            // ‚úÖ –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ—á–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –∏—Å–ø–æ–ª—å–∑—É—è –ø–∞–≥–∏–Ω–∞—Ü–∏—é
                            log.info("üì• –ü–û–¢–û–ö: {} - –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ—á–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω {}-{}", 
                                    ticker, formatTimestamp(expectedFirstTimestamp), formatTimestamp(expectedLastTimestamp));
                            freshCandles = loadCandlesInExactRange(ticker, timeframe, expectedFirstTimestamp, expectedLastTimestamp);
                            if (freshCandles == null) {
                                log.error("‚ùå –ü–û–¢–û–ö: {} - loadCandlesInExactRange –≤–µ—Ä–Ω—É–ª null!", ticker);
                                freshCandles = new ArrayList<>();
                            } else if (freshCandles.isEmpty()) {
                                log.warn("‚ö†Ô∏è –ü–û–¢–û–ö: {} - loadCandlesInExactRange –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫!", ticker);
                            } else {
                                log.info("‚úÖ –ü–û–¢–û–ö: {} - loadCandlesInExactRange –≤–µ—Ä–Ω—É–ª {} —Å–≤–µ—á–µ–π", ticker, freshCandles.size());
                            }
                        } else {
                            // –û–±—ã—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
                            freshCandles = okxFeignClient.getCandles(ticker, timeframe, candleLimit);
                            log.info("üì• –ü–û–¢–û–ö: {} - –∑–∞–≥—Ä—É–∂–∞–µ–º {} —Å–≤–µ—á–µ–π –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π", ticker, candleLimit);
                        }
                        
                        if (freshCandles != null && !freshCandles.isEmpty()) {
                            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ–º –∏–∑–º–µ–Ω—è–µ–º—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                            freshCandles = new ArrayList<>(freshCandles);
                            freshCandles.sort(Comparator.comparingLong(Candle::getTimestamp));
                            
                            List<Candle> candlesToSave;
                            if ("BTC-USDT-SWAP".equals(ticker)) {
                                // ‚úÖ –î–ª—è —ç—Ç–∞–ª–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–ï —Å–≤–µ—á–∏ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏!
                                candlesToSave = freshCandles;
                                log.info("üì• –ü–û–¢–û–ö: {} - –≠–¢–ê–õ–û–ù, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ {} —Å–≤–µ—á–µ–π", 
                                        ticker, candlesToSave.size());
                            } else if (expectedFirstTimestamp != -1L && expectedLastTimestamp != -1L) {
                                // ‚úÖ –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ —Ç–æ—á–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏!
                                candlesToSave = freshCandles;
                                log.info("üì• –ü–û–¢–û–ö: {} - –¢–û–ß–ù–´–ô –î–ò–ê–ü–ê–ó–û–ù, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ {} —Å–≤–µ—á–µ–π", 
                                        ticker, candlesToSave.size());
                            } else {
                                // –û–±—ã—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–≤–µ—á–∏
                                candlesToSave = freshCandles;
                                log.info("üì• –ü–û–¢–û–ö: {} - –ë–ï–ó –§–ò–õ–¨–¢–†–ê–¶–ò–ò, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ {} —Å–≤–µ—á–µ–π", 
                                        ticker, candlesToSave.size());
                            }
                            
                            if (!candlesToSave.isEmpty()) {
                                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                                int savedCount = candleTransactionService.saveCandlesToCache(
                                        ticker, timeframe, exchange, candlesToSave);
                                synchronized (totalAddedCount) {
                                    totalAddedCount[0] += savedCount;
                                }
                                
                                log.info("üíæ –ü–û–¢–û–ö: {} - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {} —Å–≤–µ—á–µ–π –≤ –ë–î", ticker, savedCount);
                                
                                // ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏!
                                List<CachedCandle> updatedCachedCandles = cachedCandleRepository
                                        .findLatestByTickerTimeframeExchange(ticker, timeframe, exchange, 
                                                PageRequest.of(0, candleLimit));
                                                
                                List<Candle> updatedCandles = updatedCachedCandles.stream()
                                        .map(CachedCandle::toCandle)
                                        .sorted(Comparator.comparing(Candle::getTimestamp))
                                        .collect(Collectors.toList());
                                        
                                result.put(ticker, updatedCandles);
                                log.info("üîÑ –ü–û–¢–û–ö: {} - –ø–æ–ª—É—á–µ–Ω–æ {} –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –∏–∑ –∫—ç—à–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏", 
                                        ticker, updatedCandles.size());
                            } else {
                                log.warn("‚ö†Ô∏è –ü–û–¢–û–ö: {} - –Ω–µ—Ç —Å–≤–µ—á–µ–π –≤ —Ç—Ä–µ–±—É–µ–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ", ticker);
                            }
                        } else {
                            log.warn("‚ö†Ô∏è –ü–û–¢–û–ö: {} - –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ—á–∏", ticker);
                        }
                        
                    } catch (Exception e) {
                        log.error("üí• –ü–û–¢–û–ö: –û—à–∏–±–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–≥—Ä—É–∑–∫–∏ {}: {}", ticker, e.getMessage(), e);
                    }
                }, executorService);
                
                futures.add(future);
            }
            
            // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
            CompletableFuture.allOf(futures.toArray(new CompletableFuture[0])).join();
            
            log.info("üèÅ –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –î–û–ì–†–£–ó–ö–ê: –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {} —Ç–∏–∫–µ—Ä–æ–≤, –¥–æ–±–∞–≤–ª–µ–Ω–æ {} —Å–≤–µ—á–µ–π –≤ –ë–î",
                    tickers.size(), totalAddedCount[0]);
            
        } catch (Exception e) {
            log.error("üí• –û–®–ò–ë–ö–ê –°–ü–ï–¶–ò–ê–õ–¨–ù–û–ô –î–û–ì–†–£–ó–ö–ò: {}", e.getMessage());
        }
        
        Map<String, Object> resultMap = new HashMap<>();
        resultMap.put("candlesMap", result);
        resultMap.put("addedCount", totalAddedCount[0]);
        
        return resultMap;
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç timestamp –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö
     */
    private String formatTimestamp(long timestamp) {
        if (timestamp <= 0) return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç timestamp: –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, —Ç–æ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö, –∏–Ω–∞—á–µ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            if (timestamp > 9999999999L) { // –±–æ–ª—å—à–µ —á–µ–º 2001 –≥–æ–¥ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                return java.time.Instant.ofEpochMilli(timestamp).toString();
            } else {
                return java.time.Instant.ofEpochSecond(timestamp).toString();
            }
        } catch (Exception e) {
            return "–æ—à–∏–±–∫–∞_—Ñ–æ—Ä–º–∞—Ç–∞";
        }
    }

    public Map<String, List<Candle>> getCachedCandles(List<String> tickers, String timeframe,
                                                      int candleLimit, String exchange) {
        log.info("üîç –ó–∞–ø—Ä–æ—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π: {} —Ç–∏–∫–µ—Ä–æ–≤, —Ç–∞–π–º—Ñ—Ä–µ–π–º {}, –ª–∏–º–∏—Ç {}",
                tickers.size(), timeframe, candleLimit);

        Map<String, List<Candle>> result = new ConcurrentHashMap<>();
        Map<String, Integer> missingCandlesCount = new ConcurrentHashMap<>();
        int cacheHits = 0; // –°—á–µ—Ç—á–∏–∫ —Ç–∏–∫–µ—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞
        int totalCandlesAdded = 0; // –°—á–µ—Ç—á–∏–∫ —Ä–µ–∞–ª—å–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –≤ –ë–î

        long currentTimestamp = System.currentTimeMillis() / 1000;
        long requiredFromTimestamp = calculateFromTimestamp(currentTimestamp, timeframe, candleLimit);
        
        log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –í–†–ï–ú–ï–ù–ò: —Ç–µ–∫—É—â–∞—è timestamp={} ({})", 
                currentTimestamp, formatTimestamp(currentTimestamp));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –≤ –∫—ç—à–µ, –µ—Å–ª–∏ –º–µ–Ω—å—à–µ —á–µ–º –∑–∞–ø—Ä–æ—à–µ–Ω–æ - –¥–æ–≥—Ä—É–∂–∞–µ–º
        // –î–ª—è –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ô chunked loading —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ futures
        List<CompletableFuture<Void>> chunkingFutures = new ArrayList<>();
        
        int debugCount = 0; // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –ø–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ç–∏–∫–µ—Ä–æ–≤
        for (String ticker : tickers) {
            if (debugCount < 5) debugCount++;
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–≤–µ—á–µ–π –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–∫–µ—Ä–∞
            List<CachedCandle> latestCandles = cachedCandleRepository
                    .findLatestByTickerTimeframeExchange(ticker, timeframe, exchange, 
                            PageRequest.of(0, candleLimit));

            log.info("üîç DEBUG: –î–ª—è {} –Ω–∞–π–¥–µ–Ω–æ {} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π –≤ –∫—ç—à–µ (–∑–∞–ø—Ä–æ—à–µ–Ω–æ {})",
                    ticker, latestCandles.size(), candleLimit);

            if (!latestCandles.isEmpty()) {
                // –ï—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à–µ - –≤—Å–µ–≥–¥–∞ –∏—Ö –±–µ—Ä–µ–º
                List<Candle> candlesList = latestCandles.stream()
                        .map(CachedCandle::toCandle)
                        .sorted(Comparator.comparing(Candle::getTimestamp))
                        .collect(Collectors.toList());
                        
                result.put(ticker, candlesList);
                cacheHits++; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∫—ç—à-—Ö–∏—Ç–æ–≤
                
                // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω—å—à–µ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ - –¥–æ–≥—Ä—É–∂–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ
                if (latestCandles.size() < candleLimit) {
                    int missing = candleLimit - latestCandles.size();
                    
                    // –ö–†–ò–¢–ò–ß–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º –±–æ–ª—å—à–∏–µ –æ–±—ä–µ–º—ã –ø–æ —á–∞–Ω–∫–∞–º –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ OutOfMemoryError
                    int chunkSize = getMaxLoadLimitForTimeframe(timeframe);
                    if (missing > chunkSize) {
                        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ –ø–æ —á–∞—Å—Ç—è–º –í –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ú –ü–û–¢–û–ö–ï
                        log.info("üì¶ CHUNKED LOAD: {} - —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–≥—Ä—É–∑–∏—Ç—å {} —Å–≤–µ—á–µ–π, –∑–∞–≥—Ä—É–∑–∏–º –ø–æ {} –∑–∞ —Ä–∞–∑ –í –ü–û–¢–û–ö–ï {}", 
                                ticker, missing, chunkSize, Thread.currentThread().getId());
                        CompletableFuture<Void> future = loadCandlesInChunks(ticker, timeframe, missing, chunkSize);
                        chunkingFutures.add(future); // –°–æ–±–∏—Ä–∞–µ–º –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
                        // –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ —á–∞–Ω–∫–∞–º, –¥–∞–Ω–Ω—ã–µ —É–∂–µ –≤ –ë–î
                        missingCandlesCount.put(ticker, 0); // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
                    } else {
                        // –û–±—ã—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤
                        missingCandlesCount.put(ticker, missing);
                        if (debugCount <= 5) {
                            log.info("üîÑ –ö—ç—à PARTIAL: {} - –µ—Å—Ç—å {}, –Ω—É–∂–Ω–æ {}, –¥–æ–≥—Ä—É–∑–∏–º {}", 
                                    ticker, latestCandles.size(), candleLimit, missing);
                        }
                    }
                } else {
                    if (debugCount <= 5) {
                        log.info("‚úÖ –ö—ç—à HIT: {} - {} —Å–≤–µ—á–µ–π –∏–∑ –∫—ç—à–∞ (–ø–æ–ª–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ)", ticker, latestCandles.size());
                    }
                }
            } else {
                // –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à–µ - –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ —á–∞–Ω–∫–∞–º
                int chunkSize = getMaxLoadLimitForTimeframe(timeframe);
                if (candleLimit > chunkSize) {
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–º –ø–æ —á–∞—Å—Ç—è–º –í –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ú –ü–û–¢–û–ö–ï
                    log.info("üì¶ CHUNKED LOAD: {} - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à–µ, –∑–∞–≥—Ä—É–∑–∏–º {} —Å–≤–µ—á–µ–π –ø–æ {} –∑–∞ —Ä–∞–∑ –í –ü–û–¢–û–ö–ï {}", 
                            ticker, candleLimit, chunkSize, Thread.currentThread().getId());
                    CompletableFuture<Void> future = loadCandlesInChunks(ticker, timeframe, candleLimit, chunkSize);
                    chunkingFutures.add(future); // –°–æ–±–∏—Ä–∞–µ–º –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
                    // –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ —á–∞–Ω–∫–∞–º, –¥–∞–Ω–Ω—ã–µ —É–∂–µ –≤ –ë–î
                    missingCandlesCount.put(ticker, 0); // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
                } else {
                    // –û–±—ã—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤
                    missingCandlesCount.put(ticker, candleLimit);
                    log.info("‚ùå –ö—ç—à MISS: {} - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –∑–∞–≥—Ä—É–∑–∏–º {} —Å–≤–µ—á–µ–π", ticker, candleLimit);
                }
            }
        }

        // –û–ñ–ò–î–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–ò–Ø –í–°–ï–• –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–• CHUNKED LOADING –û–ü–ï–†–ê–¶–ò–ô
        if (!chunkingFutures.isEmpty()) {
            log.info("‚è≥ –û–ñ–ò–î–ê–ù–ò–ï: {} –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö chunked loading –æ–ø–µ—Ä–∞—Ü–∏–π...", chunkingFutures.size());
            try {
                CompletableFuture.allOf(chunkingFutures.toArray(new CompletableFuture[0])).join();
                log.info("üéâ –í–°–ï CHUNKED LOADING –û–ü–ï–†–ê–¶–ò–ò –ó–ê–í–ï–†–®–ï–ù–´: {} —Ç–∏–∫–µ—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ {} –ø–æ—Ç–æ–∫–∞—Ö", 
                        chunkingFutures.size(), threadPoolSize);
            } catch (Exception e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ chunked loading –æ–ø–µ—Ä–∞—Ü–∏–π: {}", e.getMessage(), e);
            }
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å–≤–µ—á–∏
        if (!missingCandlesCount.isEmpty()) {
            log.info("üîÑ –î–æ–≥—Ä—É–∂–∞–µ–º {} —Ç–∏–∫–µ—Ä–æ–≤ —Å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º–∏ —Å–≤–µ—á–∞–º–∏", missingCandlesCount.size());
            Map<String, Object> loadingResult = loadMissingCandles(missingCandlesCount,
                    timeframe, exchange, requiredFromTimestamp);
            @SuppressWarnings("unchecked")
            Map<String, List<Candle>> missingCandles = (Map<String, List<Candle>>) loadingResult.get("candles");
            totalCandlesAdded = (Integer) loadingResult.get("addedCount");
            result.putAll(missingCandles);
        }

        log.info("‚úÖ –ò–¢–û–ì–û: {} —Ç–∏–∫–µ—Ä–æ–≤ (–∫—ç—à: {}, –¥–æ–≥—Ä—É–∂–µ–Ω–æ: {}, –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ë–î: {} —Å–≤–µ—á–µ–π)",
                result.size(), cacheHits, missingCandlesCount.size(), totalCandlesAdded);

        // üîç –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–í–ï–ñ–ï–°–¢–ò BTC –≠–¢–ê–õ–û–ù–ê –ü–ï–†–ï–î –í–ê–õ–ò–î–ê–¶–ò–ï–ô
        final String btcTicker = "BTC-USDT-SWAP";
        log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–≤–µ–∂–µ—Å—Ç–∏ BTC —ç—Ç–∞–ª–æ–Ω–∞ –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ {}", timeframe);
        
        if (result.containsKey(btcTicker)) {
            List<Candle> btcCandles = result.get(btcTicker);
            log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: BTC –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö, {} —Å–≤–µ—á–µ–π", btcCandles.size());
            
            if (!btcCandles.isEmpty()) {
                btcCandles.sort(Comparator.comparingLong(Candle::getTimestamp));
                long lastCandleTimestamp = btcCandles.get(btcCandles.size() - 1).getTimestamp();
                
                // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –ª–∏–º–∏—Ç—ã —Å–≤–µ–∂–µ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
                long maxAllowedAge = calculateMaxAllowedAge(timeframe);
                
                // –ü—Ä–∏–≤–æ–¥–∏–º timestamp'—ã –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É (—Å–µ–∫—É–Ω–¥—ã)
                long lastCandleTimestampInSeconds = lastCandleTimestamp;
                if (lastCandleTimestamp > 9999999999L) { // —ç—Ç–æ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
                    lastCandleTimestampInSeconds = lastCandleTimestamp / 1000;
                }
                
                long ageInSeconds = currentTimestamp - lastCandleTimestampInSeconds;
                boolean isStale = ageInSeconds > maxAllowedAge;
                
                log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–í–ï–ñ–ï–°–¢–ò BTC: –ø–æ—Å–ª–µ–¥–Ω—è—è={} (raw={}), —Ç–µ–∫—É—â–∞—è={} (raw={}), –≤–æ–∑—Ä–∞—Å—Ç={} —Å–µ–∫, –ª–∏–º–∏—Ç={} —Å–µ–∫, —É—Å—Ç–∞—Ä–µ–ª={}",
                        formatTimestamp(lastCandleTimestamp), lastCandleTimestamp,
                        formatTimestamp(currentTimestamp), currentTimestamp,
                        ageInSeconds, maxAllowedAge, isStale);
                
                if (isStale) {
                    long ageInMinutes = ageInSeconds / 60;
                    long ageInHours = ageInMinutes / 60;
                    
                    log.warn("üîÑ –ö–†–ò–¢–ò–ß–ù–û: BTC –≠–¢–ê–õ–û–ù –£–°–¢–ê–†–ï–õ - {} —á. {} –º–∏–Ω. –Ω–∞–∑–∞–¥ (–ª–∏–º–∏—Ç: {} —Å–µ–∫)", 
                            ageInHours, ageInMinutes % 60, maxAllowedAge);
                    
                    try {
                        log.info("üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –°–í–ï–ñ–ò–• –î–ê–ù–ù–´–• BTC (–ë–´–°–¢–†–ê–Ø –ú–ù–û–ì–û–ü–û–¢–û–ß–ù–ê–Ø)...");
                        
                        // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—ã–π –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è BTC —ç—Ç–∞–ª–æ–Ω–∞
                        Map<String, Object> btcReloadResult = loadMissingCandlesForTickers(
                                List.of(btcTicker), timeframe, candleLimit, exchange, -1L, -1L);
                        
                        @SuppressWarnings("unchecked")
                        Map<String, List<Candle>> btcReloadedCandles = 
                                (Map<String, List<Candle>>) btcReloadResult.get("candlesMap");
                        Integer savedCount = (Integer) btcReloadResult.get("addedCount");
                        
                        if (btcReloadedCandles.containsKey(btcTicker)) {
                            List<Candle> updatedCandles = btcReloadedCandles.get(btcTicker);
                            result.put(btcTicker, updatedCandles);
                            
                            long newLastTimestamp = updatedCandles.get(updatedCandles.size() - 1).getTimestamp();
                            long newLastTimestampInSeconds = newLastTimestamp;
                            if (newLastTimestamp > 9999999999L) {
                                newLastTimestampInSeconds = newLastTimestamp / 1000;
                            }
                            long newAge = currentTimestamp - newLastTimestampInSeconds;
                            
                            log.info("‚úÖ BTC –≠–¢–ê–õ–û–ù –ö–†–ò–¢–ò–ß–ù–û –û–ë–ù–û–í–õ–ï–ù: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ +{}, –ø–æ—Å–ª–µ–¥–Ω—è—è: {} (–≤–æ–∑—Ä–∞—Å—Ç: {} –º–∏–Ω)", 
                                    savedCount, formatTimestamp(newLastTimestamp), newAge / 60);
                        } else {
                            log.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ BTC!");
                        }
                    } catch (Exception e) {
                        log.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ BTC: {}", e.getMessage(), e);
                    }
                } else {
                    long ageInMinutes = ageInSeconds / 60;
                    log.info("‚úÖ BTC –≠–¢–ê–õ–û–ù –°–í–ï–ñ: –≤–æ–∑—Ä–∞—Å—Ç {} –º–∏–Ω (–ª–∏–º–∏—Ç: {} —Å–µ–∫)", ageInMinutes, maxAllowedAge);
                }
            } else {
                log.warn("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: BTC –Ω–∞–π–¥–µ–Ω, –Ω–æ —Å–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π –ø—É—Å—Ç!");
            }
        } else {
            log.warn("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: BTC –ù–ï –ù–ê–ô–î–ï–ù –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö! –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã: {}", result.keySet());
        }

        // üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –ò –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –°–í–ï–ß–ï–ô –¥–ª—è –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        return validateAndFilterCandlesWithRetry(result, timeframe, candleLimit, tickers, exchange);
    }

    public void preloadAllCandles(String exchange) {
        log.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–µ—á–µ–π –¥–ª—è –±–∏—Ä–∂–∏ {}", exchange);
        int totalCandlesAdded = 0;

        try {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ SWAP —Ç–∏–∫–µ—Ä—ã
            List<String> allTickers = okxFeignClient.getAllSwapTickers(true);
            log.info("üìä –ù–∞–π–¥–µ–Ω–æ {} SWAP —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏", allTickers.size());

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–∞–π–º—Ñ—Ä–µ–π–º—É
            for (Map.Entry<String, Integer> entry : defaultCachePeriods.entrySet()) {
                String timeframe = entry.getKey();
                int periodDays = entry.getValue();

                log.info("‚è∞ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ {} ({} –¥–Ω–µ–π) –¥–ª—è {} —Ç–∏–∫–µ—Ä–æ–≤",
                        timeframe, periodDays, allTickers.size());

                int addedForTimeframe = preloadTimeframeForTickers(allTickers, timeframe, exchange, periodDays);
                totalCandlesAdded += addedForTimeframe;
                
                log.info("üìä –¢–∞–π–º—Ñ—Ä–µ–π–º {} –∑–∞–≤–µ—Ä—à–µ–Ω: –¥–æ–±–∞–≤–ª–µ–Ω–æ {} —Å–≤–µ—á–µ–π –≤ –ë–î", timeframe, addedForTimeframe);

                // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º–∏
                Thread.sleep(1000);
            }

            log.info("‚úÖ –®–ï–î–£–õ–õ–ï–†: –ü–æ–ª–Ω–∞—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –±–∏—Ä–∂–∏ {} - –¥–æ–±–∞–≤–ª–µ–Ω–æ {} —Å–≤–µ—á–µ–π –≤ –ë–î", 
                    exchange, totalCandlesAdded);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–µ: {}", e.getMessage(), e);
        }
    }

    public void dailyCandlesUpdate(String exchange) {
        log.info("üîÑ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–µ—á–µ–π –¥–ª—è –±–∏—Ä–∂–∏ {}", exchange);
        int totalCandlesAdded = 0;

        try {
            List<String> cachedTickers = cachedCandleRepository.findDistinctTickersByExchange(exchange);
            log.info("üìä –û–±–Ω–æ–≤–ª—è–µ–º {} —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ –∫—ç—à–∞", cachedTickers.size());

            long currentTimestamp = System.currentTimeMillis() / 1000;
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 48 —á–∞—Å–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            long updateFromTimestamp = currentTimestamp - (48 * 3600);

            for (String timeframe : defaultCachePeriods.keySet()) {
                log.info("‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ {} –¥–ª—è {} —Ç–∏–∫–µ—Ä–æ–≤", timeframe, cachedTickers.size());

                int addedForTimeframe = updateCandlesForTickers(cachedTickers, timeframe, exchange, updateFromTimestamp);
                totalCandlesAdded += addedForTimeframe;
                
                log.info("üìä –¢–∞–π–º—Ñ—Ä–µ–π–º {} –æ–±–Ω–æ–≤–ª–µ–Ω: –¥–æ–±–∞–≤–ª–µ–Ω–æ {} —Å–≤–µ—á–µ–π –≤ –ë–î", timeframe, addedForTimeframe);

                Thread.sleep(500);
            }

            log.info("‚úÖ –®–ï–î–£–õ–õ–ï–†: –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è –±–∏—Ä–∂–∏ {} - –¥–æ–±–∞–≤–ª–µ–Ω–æ {} —Å–≤–µ—á–µ–π –≤ –ë–î", 
                    exchange, totalCandlesAdded);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {}", e.getMessage(), e);
        }
    }

    public Map<String, Object> getCacheStatistics(String exchange) {
        Map<String, Object> stats = new HashMap<>();

        try {
            List<Object[]> rawStats = cachedCandleRepository.getCacheStatistics();
            
            // –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
            java.time.LocalDateTime startOfDay = java.time.LocalDate.now().atStartOfDay();
            java.time.LocalDateTime startOfNextDay = startOfDay.plusDays(1);
            
            List<Object[]> todayStats = cachedCandleRepository.getTodayCacheStatistics(startOfDay, startOfNextDay);
            
            Map<String, Map<String, Long>> exchangeStats = new HashMap<>();
            Map<String, Map<String, Long>> exchangeTodayStats = new HashMap<>();

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            for (Object[] row : rawStats) {
                String ex = (String) row[0];
                String tf = (String) row[1];
                Long count = (Long) row[2];

                exchangeStats.computeIfAbsent(ex, k -> new HashMap<>()).put(tf, count);
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            for (Object[] row : todayStats) {
                String ex = (String) row[0];
                String tf = (String) row[1];
                Long todayCount = (Long) row[2];

                exchangeTodayStats.computeIfAbsent(ex, k -> new HashMap<>()).put(tf, todayCount);
            }

            stats.put("byExchange", exchangeStats);
            stats.put("todayByExchange", exchangeTodayStats);

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–∏—Ä–∂–∏
            if (exchange != null) {
                List<String> tickers = cachedCandleRepository.findDistinctTickersByExchange(exchange);
                stats.put("totalTickers", tickers.size());

                Map<String, Long> timeframeStats = new HashMap<>();
                for (String timeframe : defaultCachePeriods.keySet()) {
                    Long count = cachedCandleRepository.countByTickerTimeframeExchange("", timeframe, exchange);
                    timeframeStats.put(timeframe, count);
                }
                stats.put("timeframeStats", timeframeStats);
            }

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞: {}", e.getMessage(), e);
            stats.put("error", e.getMessage());
        }

        return stats;
    }

    public void forceLoadCandlesCustom(String exchange, java.util.Set<String> timeframes, 
                                      List<String> tickers, Integer threadCount, Integer periodDays) {
        log.info("üéØ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê: –±–∏—Ä–∂–∞={}, —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã={}, —Ç–∏–∫–µ—Ä–æ–≤={}, –ø–æ—Ç–æ–∫–∏={}, –ø–µ—Ä–∏–æ–¥={} –¥–Ω–µ–π", 
                exchange, timeframes, tickers != null ? tickers.size() : 0, threadCount, periodDays);
        
        try {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            List<String> targetTickers = tickers;
            if (targetTickers == null || targetTickers.isEmpty()) {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ SWAP —Ç–∏–∫–µ—Ä—ã –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ
                targetTickers = okxFeignClient.getAllSwapTickers(true);
                log.info("üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ {} SWAP —Ç–∏–∫–µ—Ä–æ–≤", targetTickers.size());
            } else {
                log.info("üìä –ó–∞–≥—Ä—É–∂–∞–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–µ {} —Ç–∏–∫–µ—Ä–æ–≤", targetTickers.size());
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–∞–π–º—Ñ—Ä–µ–π–º—É
            int totalCandlesAdded = 0;
            for (String timeframe : timeframes) {
                log.info("‚è∞ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ {} –¥–ª—è {} —Ç–∏–∫–µ—Ä–æ–≤", 
                        timeframe, targetTickers.size());
                
                int candleLimit = calculateCandleLimit(timeframe, periodDays != null ? periodDays : 365);
                int addedForTimeframe = preloadTimeframeForTickers(targetTickers, timeframe, exchange, periodDays != null ? periodDays : 365);
                totalCandlesAdded += addedForTimeframe;
                
                log.info("üìä –¢–∞–π–º—Ñ—Ä–µ–π–º {} –∑–∞–≤–µ—Ä—à–µ–Ω: –¥–æ–±–∞–≤–ª–µ–Ω–æ {} —Å–≤–µ—á–µ–π –≤ –ë–î", timeframe, addedForTimeframe);
                
                // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º–∏
                Thread.sleep(1000);
            }
            
            log.info("‚úÖ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –±–∏—Ä–∂–∏ {} - –¥–æ–±–∞–≤–ª–µ–Ω–æ {} —Å–≤–µ—á–µ–π –≤ –ë–î", 
                    exchange, totalCandlesAdded);
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ: {}", e.getMessage(), e);
        }
    }

    private int preloadTimeframeForTickers(List<String> tickers, String timeframe,
                                            String exchange, int periodDays) {
        int candleLimit = calculateCandleLimit(timeframe, periodDays);
        final int[] totalAddedCount = {0}; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è thread-safe –∏–∑–º–µ–Ω–µ–Ω–∏—è

        log.info("üìà –ú–ù–û–ì–û–ü–û–¢–û–ß–ù–ê–Ø –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ {} —Å–≤–µ—á–µ–π —Ç–∏–ø–∞ {} –¥–ª—è {} —Ç–∏–∫–µ—Ä–æ–≤ ({} –ø–æ—Ç–æ–∫–æ–≤)",
                candleLimit, timeframe, tickers.size(), threadPoolSize);

        // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏
        int batchSize = Math.max(1, getBatchSizeForTimeframe(timeframe, candleLimit) / 2);
        List<CompletableFuture<Void>> futures = new ArrayList<>();
        
        for (int i = 0; i < tickers.size(); i += batchSize) {
            final int batchIndex = i;
            final List<String> batch = tickers.subList(i, Math.min(i + batchSize, tickers.size()));

            CompletableFuture<Void> future = CompletableFuture.runAsync(() -> {
                try {
                    log.info("üöÄ –ü–û–¢–û–ö: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á {}-{}", batchIndex + 1,
                            Math.min(batchIndex + batchSize, tickers.size()));
                    
                    Map<String, List<Candle>> candlesMap = loadCandlesForBatch(batch, timeframe, candleLimit);
                    int batchAddedCount = 0;

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –∫–∞–∂–¥—ã–π —Ç–∏–∫–µ—Ä –æ—Ç–¥–µ–ª—å–Ω–æ
                    for (Map.Entry<String, List<Candle>> entry : candlesMap.entrySet()) {
                        String ticker = entry.getKey();
                        List<Candle> candles = entry.getValue();

                        int addedCount = candleTransactionService.saveCandlesToCache(ticker, timeframe, exchange, candles);
                        batchAddedCount += addedCount;
                        
                        if (addedCount > 0) {
                            log.info("‚úÖ –ü–û–¢–û–ö: {} - –¥–æ–±–∞–≤–ª–µ–Ω–æ {} —Å–≤–µ—á–µ–π –≤ –ë–î", ticker, addedCount);
                        }
                    }

                    synchronized (totalAddedCount) {
                        totalAddedCount[0] += batchAddedCount;
                    }

                    log.info("‚úÖ –ü–û–¢–û–ö: –ë–∞—Ç—á {}-{} –∑–∞–≤–µ—Ä—à–µ–Ω, –¥–æ–±–∞–≤–ª–µ–Ω–æ {} —Å–≤–µ—á–µ–π –≤ –ë–î",
                            batchIndex + 1, Math.min(batchIndex + batchSize, tickers.size()), batchAddedCount);

                } catch (Exception e) {
                    log.error("‚ùå –ü–û–¢–û–ö: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞ {}-{}: {}", batchIndex + 1,
                            Math.min(batchIndex + batchSize, tickers.size()), e.getMessage(), e);
                }
            }, executorService);
            
            futures.add(future);
        }
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        try {
            CompletableFuture.allOf(futures.toArray(new CompletableFuture[0])).get();
            log.info("üèÅ –í–°–ï {} –ü–û–¢–û–ö–û–í: –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ {} —Ç–∏–∫–µ—Ä–æ–≤", threadPoolSize, tickers.size());
        } catch (Exception e) {
            log.error("‚ùå –í–°–ï –ü–û–¢–û–ö–ò: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤: {}", e.getMessage(), e);
        }

        return totalAddedCount[0];
    }

    private int updateCandlesForTickers(List<String> tickers, String timeframe,
                                         String exchange, long fromTimestamp) {
        // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ preloadTimeframeForTickers, –Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–≤–µ—á–µ–π
        int batchSize = 20;
        int totalAddedCount = 0;
        
        for (int i = 0; i < tickers.size(); i += batchSize) {
            List<String> batch = tickers.subList(i, Math.min(i + batchSize, tickers.size()));

            try {
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ —Å–≤–µ—á–µ–π –Ω—É–∂–Ω–æ –¥–ª—è 48 —á–∞—Å–æ–≤
                int candleLimit = calculateCandleLimit(timeframe, 2); // 2 –¥–Ω—è

                Map<String, List<Candle>> candlesMap = loadCandlesForBatch(batch, timeframe, candleLimit);

                for (Map.Entry<String, List<Candle>> entry : candlesMap.entrySet()) {
                    String ticker = entry.getKey();
                    List<Candle> candles = entry.getValue();

                    int addedCount = candleTransactionService.updateCandlesInCache(ticker, timeframe, exchange, candles, fromTimestamp);
                    totalAddedCount += addedCount;
                    
                    if (addedCount > 0) {
                        log.info("‚úÖ –û–ë–ù–û–í–õ–ï–ù–ò–ï: {} - –¥–æ–±–∞–≤–ª–µ–Ω–æ {} —Å–≤–µ—á–µ–π –≤ –ë–î", ticker, addedCount);
                    }
                }

                Thread.sleep(100);

            } catch (Exception e) {
                log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞—Ç—á–∞: {}", e.getMessage());
            }
        }
        
        return totalAddedCount;
    }

    private Map<String, Object> loadMissingCandles(Map<String, Integer> missingCandlesCount,
                                                         String timeframe, String exchange,
                                                         long requiredFromTimestamp) {
        Map<String, List<Candle>> result = new ConcurrentHashMap<>();
        final int[] totalAddedCount = {0}; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è thread-safe –∏–∑–º–µ–Ω–µ–Ω–∏—è

        try {
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–∏–∫–µ—Ä—ã —Å missingCount = 0 (—É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ chunked loading)
            Map<String, Integer> filteredMissingCount = missingCandlesCount.entrySet().stream()
                .filter(entry -> entry.getValue() > 0)
                .collect(Collectors.toMap(
                    Map.Entry::getKey,
                    Map.Entry::getValue,
                    (existing, replacement) -> existing,
                    ConcurrentHashMap::new
                ));

            if (filteredMissingCount.size() != missingCandlesCount.size()) {
                int skippedCount = missingCandlesCount.size() - filteredMissingCount.size();
                log.info("üö´ –§–ò–õ–¨–¢–†–ê–¶–ò–Ø: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {} —Ç–∏–∫–µ—Ä–æ–≤ —Å missingCount = 0 (—É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —á–µ—Ä–µ–∑ chunked loading)", 
                         skippedCount);
            }

            if (filteredMissingCount.isEmpty()) {
                log.info("‚úÖ –í–°–ï –¢–ò–ö–ï–†–´ –£–ñ–ï –û–ë–†–ê–ë–û–¢–ê–ù–´: –ù–µ—Ç —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏");
                Map<String, Object> emptyResult = new HashMap<>();
                emptyResult.put("candles", new ConcurrentHashMap<String, List<Candle>>());
                emptyResult.put("addedCount", 0);
                return emptyResult;
            }
            
            log.info("üöÄ –ú–ù–û–ì–û–ü–û–¢–û–ß–ù–ê–Ø –¥–æ–≥—Ä—É–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Å–≤–µ—á–µ–π –≤ {} –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è {} —Ç–∏–∫–µ—Ä–æ–≤", 
                    threadPoolSize, filteredMissingCount.size());

            // –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
            List<CompletableFuture<Void>> futures = new ArrayList<>();
            
            for (Map.Entry<String, Integer> entry : filteredMissingCount.entrySet()) {
                CompletableFuture<Void> future = CompletableFuture.runAsync(() -> {
                    String ticker = entry.getKey();
                    int missingCount = entry.getValue();

                    try {
                        log.info("üîÑ –ü–û–¢–û–ö: –ó–∞–≥—Ä—É–∂–∞–µ–º {} –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Å–≤–µ—á–µ–π –¥–ª—è {}", missingCount, ticker);

                        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ —Å–≤–µ—á–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
                        List<CachedCandle> existingCandles = cachedCandleRepository
                                .findByTickerTimeframeExchangeFromTimestamp(ticker, timeframe, exchange, requiredFromTimestamp);

                        // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à–µ - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∞–º—É—é —Å—Ç–∞—Ä—É—é –¥–∞—Ç—É –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ –Ω–µ—ë
                        List<Candle> loadedCandles;
                        if (!existingCandles.isEmpty()) {
                            // –ï—Å—Ç—å –¥–∞–Ω–Ω—ã–µ - –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ä—ã–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –î–û —Å–∞–º–æ–π —Å—Ç–∞—Ä–æ–π –∑–∞–ø–∏—Å–∏
                            long oldestTimestamp = existingCandles.stream()
                                    .mapToLong(CachedCandle::getTimestamp)
                                    .min().orElse(System.currentTimeMillis() / 1000);
                            
                            log.info("üîÑ –ü–û–¢–û–ö: –î–ª—è {} –∑–∞–≥—Ä—É–∂–∞–µ–º {} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π –¥–æ {}",
                                    ticker, missingCount, new java.util.Date(oldestTimestamp * 1000));
                            
                            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –î–û oldestTimestamp
                            loadedCandles = loadCandlesBeforeTimestamp(ticker, timeframe, missingCount, oldestTimestamp);
                        } else {
                            // –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö - –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏)
                            log.info("üîÑ –ü–û–¢–û–ö: –î–ª—è {} –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {} —Å–≤–µ—á–µ–π", ticker, missingCount);
                            loadedCandles = loadCandlesWithPagination(ticker, timeframe, missingCount);
                        }

                        if (!loadedCandles.isEmpty()) {
                            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –∏ –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∞–ª—å–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π
                            int addedCount = candleTransactionService.saveCandlesToCache(ticker, timeframe, exchange, loadedCandles);
                            
                            synchronized (totalAddedCount) {
                                totalAddedCount[0] += addedCount;
                            }

                            // –ü–û–õ–£–ß–ê–ï–ú –ê–ö–¢–£–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –ò–ó –ö–≠–®–ê –ü–û–°–õ–ï –°–û–•–†–ê–ù–ï–ù–ò–Ø
                            List<CachedCandle> updatedCachedCandles = cachedCandleRepository
                                    .findLatestByTickerTimeframeExchange(ticker, timeframe, exchange, 
                                            PageRequest.of(0, missingCount + existingCandles.size()));

                            List<Candle> finalCandles = updatedCachedCandles.stream()
                                    .map(CachedCandle::toCandle)
                                    .sorted(Comparator.comparing(Candle::getTimestamp))
                                    .collect(Collectors.toList());

                            result.put(ticker, finalCandles);
                            
                            if (addedCount > 0) {
                                log.info("‚úÖ –ü–û–¢–û–ö: –î–ª—è {} –¥–æ–±–∞–≤–ª–µ–Ω–æ {} —Å–≤–µ—á–µ–π –≤ –ë–î, –ø–æ–ª—É—á–µ–Ω–æ {} –∏–∑ –∫—ç—à–∞",
                                        ticker, addedCount, finalCandles.size());
                            }
                        }

                    } catch (Exception e) {
                        log.error("‚ùå –ü–û–¢–û–ö: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}: {}", ticker, e.getMessage());
                    }
                }, executorService);
                
                futures.add(future);
            }

            // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
            try {
                CompletableFuture.allOf(futures.toArray(new CompletableFuture[0])).get();
                log.info("üèÅ –í–°–ï {} –ü–û–¢–û–ö–û–í: –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è –¥–æ–≥—Ä—É–∑–∫–∞ {} —Ç–∏–∫–µ—Ä–æ–≤", threadPoolSize, missingCandlesCount.size());
            } catch (Exception e) {
                log.error("‚ùå –í–°–ï –ü–û–¢–û–ö–ò: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤ –¥–æ–≥—Ä—É–∑–∫–∏: {}", e.getMessage(), e);
            }

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Å–≤–µ—á–µ–π: {}", e.getMessage(), e);
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Å—á–µ—Ç—á–∏–∫
        Map<String, Object> finalResult = new HashMap<>();
        finalResult.put("candles", result);
        finalResult.put("addedCount", totalAddedCount[0]);
        
        return finalResult;
    }



    private long calculateFromTimestamp(long currentTimestamp, String timeframe, int candleLimit) {
        int timeframeSeconds = getTimeframeInSeconds(timeframe);
        return currentTimestamp - ((long) candleLimit * timeframeSeconds);
    }

    private int calculateCandleLimit(String timeframe, int periodDays) {
        return switch (timeframe) {
            case "1m" -> periodDays * 24 * 60;
            case "5m" -> periodDays * 24 * 12;
            case "15m" -> periodDays * 24 * 4;
            case "1H" -> periodDays * 24;
            case "4H" -> periodDays * 6;
            case "1D" -> periodDays;
            case "1W" -> periodDays / 7;
            case "1M" -> periodDays / 30;
            default -> periodDays * 24; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞–∫ 1H
        };
    }

    private int getTimeframeInSeconds(String timeframe) {
        return switch (timeframe) {
            case "1m" -> 60;
            case "5m" -> 300;
            case "15m" -> 900;
            case "1H" -> 3600;
            case "4H" -> 14400;
            case "1D" -> 86400;
            case "1W" -> 604800;
            case "1M" -> 2592000; // –ø—Ä–∏–º–µ—Ä–Ω–æ 30 –¥–Ω–µ–π
            default -> 3600; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞–∫ 1H
        };
    }

    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
     * –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è —Å–≤–µ–∂–µ—Å—Ç–∏ —ç—Ç–∞–ª–æ–Ω–∞
     */
    private long calculateMaxAllowedAge(String timeframe) {
        return switch (timeframe) {
            case "1m" -> 300;     // 5 –º–∏–Ω—É—Ç –¥–ª—è –º–∏–Ω—É—Ç–Ω—ã—Ö —Å–≤–µ—á–µ–π
            case "5m" -> 900;     // 15 –º–∏–Ω—É—Ç –¥–ª—è 5-–º–∏–Ω—É—Ç–Ω—ã—Ö —Å–≤–µ—á–µ–π  
            case "15m" -> 1800;   // 30 –º–∏–Ω—É—Ç –¥–ª—è 15-–º–∏–Ω—É—Ç–Ω—ã—Ö —Å–≤–µ—á–µ–π
            case "1H" -> 7200;    // 2 —á–∞—Å–∞ –¥–ª—è —á–∞—Å–æ–≤—ã—Ö —Å–≤–µ—á–µ–π
            case "4H" -> 14400;   // 4 —á–∞—Å–∞ –¥–ª—è 4-—á–∞—Å–æ–≤—ã—Ö —Å–≤–µ—á–µ–π
            case "1D" -> 86400;   // 24 —á–∞—Å–∞ –¥–ª—è –¥–Ω–µ–≤–Ω—ã—Ö —Å–≤–µ—á–µ–π
            case "1W" -> 604800;  // 7 –¥–Ω–µ–π –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Å–≤–µ—á–µ–π
            case "1M" -> 2592000; // 30 –¥–Ω–µ–π –¥–ª—è –º–µ—Å—è—á–Ω—ã—Ö —Å–≤–µ—á–µ–π
            default -> 7200;     // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 2 —á–∞—Å–∞
        };
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–æ–ª—å—à–æ–π –æ–±—ä–µ–º —Å–≤–µ—á–µ–π –ø–æ —á–∞—Å—Ç—è–º (—á–∞–Ω–∫–∞–º) –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è OutOfMemoryError
     * –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ - –∫–∞–∂–¥—ã–π —Ç–∏–∫–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç CompletableFuture –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
     */
    private CompletableFuture<Void> loadCandlesInChunks(String ticker, String timeframe, int totalMissing, int chunkSize) {
        // –ó–∞–ø—É—Å–∫–∞–µ–º chunked loading –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–∫–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        return CompletableFuture.runAsync(() -> {
            try {
                int loadedSoFar = 0;
                int totalChunks = (int) Math.ceil((double) totalMissing / chunkSize);
                
                log.info("üöÄ –ü–û–¢–û–ö –ù–ê–ß–ê–õ–û CHUNKED LOAD: {} - –∑–∞–≥—Ä—É–∑–∏–º {} —Å–≤–µ—á–µ–π –∑–∞ {} —á–∞–Ω–∫–æ–≤ –ø–æ {} —Å–≤–µ—á–µ–π", 
                        ticker, totalMissing, totalChunks, chunkSize);
                
                for (int chunkNum = 1; chunkNum <= totalChunks; chunkNum++) {
                    int remainingToLoad = totalMissing - loadedSoFar;
                    int currentChunkSize = Math.min(chunkSize, remainingToLoad);
                    
                    log.info("üì¶ –ü–û–¢–û–ö CHUNK {}/{}: {} - –∑–∞–≥—Ä—É–∂–∞–µ–º {} —Å–≤–µ—á–µ–π (–∑–∞–≥—Ä—É–∂–µ–Ω–æ: {}/{})", 
                            chunkNum, totalChunks, ticker, currentChunkSize, loadedSoFar, totalMissing);
                    
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞–Ω–∫ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î —Å—Ä–∞–∑—É
                    int actuallyLoaded = loadCandlesChunkOptimized(ticker, timeframe, currentChunkSize);
                    loadedSoFar += actuallyLoaded;
                    
                    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —á–∞–Ω–∫–∞
                    System.gc();
                    
                    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —á–∞–Ω–∫–∞–º–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
                    Thread.sleep(1000); // –£–≤–µ–ª–∏—á–∏–ª –ø–∞—É–∑—É –¥–ª—è –ª—É—á—à–µ–π –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏
                    
                    log.info("‚úÖ –ü–û–¢–û–ö CHUNK {}/{} –ó–ê–í–ï–†–®–ï–ù: {} - –∑–∞–≥—Ä—É–∂–µ–Ω–æ {} —Å–≤–µ—á–µ–π (–ø—Ä–æ–≥—Ä–µ—Å—Å: {}/{})", 
                            chunkNum, totalChunks, ticker, actuallyLoaded, loadedSoFar, totalMissing);
                    
                    // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ –¥–∞–Ω–Ω—ã—Ö —á–µ–º –æ–∂–∏–¥–∞–ª–∏ - –ø—Ä–µ—Ä—ã–≤–∞–µ–º
                    if (actuallyLoaded < Math.min(currentChunkSize, 1000)) {
                        log.warn("‚ö†Ô∏è –ü–û–¢–û–ö CHUNK INCOMPLETE: {} - –ø–æ–ª—É—á–µ–Ω–æ {} –∏–∑ {} —Å–≤–µ—á–µ–π, –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É", 
                                ticker, actuallyLoaded, currentChunkSize);
                        break;
                    }
                }
                
                log.info("üéâ –ü–û–¢–û–ö CHUNKED LOAD –ó–ê–í–ï–†–®–ï–ù: {} - –∏—Ç–æ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {} –∏–∑ {} –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π", 
                        ticker, loadedSoFar, totalMissing);
                
            } catch (Exception e) {
                log.error("‚ùå –ü–û–¢–û–ö –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞–Ω–∫–∞–º–∏ –¥–ª—è {}: {}", ticker, e.getMessage(), e);
            }
        }, executorService); // –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º executorService –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
    }

    /**
     * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —á–∞–Ω–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ–¥—Å—á–µ—Ç–æ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π
     */
    private int loadCandlesChunkOptimized(String ticker, String timeframe, int chunkSize) {
        int loadedCount = 0;
        int batchSize = 300; // OKX API –ª–∏–º–∏—Ç
        Long beforeTimestamp = null;

        try {
            // –ü–æ–ª—É—á–∞–µ–º –°–¢–ê–†–ï–ô–®–£–Æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –∏–∑ –∫—ç—à–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            Optional<Long> minTimestamp = cachedCandleRepository
                .findMinTimestampByTickerTimeframeExchange(ticker, timeframe, "OKX");
            if (minTimestamp.isPresent()) {
                beforeTimestamp = minTimestamp.get();
                log.info("üîÑ CHUNK START: {} - –Ω–∞—á–∏–Ω–∞–µ–º —Å —Å–∞–º–æ–π —Å—Ç–∞—Ä–æ–π —Å–≤–µ—á–∏ timestamp={}", 
                        ticker, beforeTimestamp);
            } else {
                log.info("üîÑ CHUNK START: {} - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à–µ, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞", ticker);
            }
            
            while (loadedCount < chunkSize) {
                int remainingCandles = chunkSize - loadedCount;
                int currentBatchSize = Math.min(batchSize, remainingCandles);

                List<Candle> batchCandles;
                if (beforeTimestamp == null) {
                    batchCandles = okxFeignClient.getCandles(ticker, timeframe, currentBatchSize);
                    log.info("üåê API CALL: {} - getCandles(size={})", ticker, currentBatchSize);
                } else {
                    batchCandles = okxFeignClient.getCandlesBefore(ticker, timeframe, currentBatchSize, beforeTimestamp);
                    log.info("üåê API CALL: {} - getCandlesBefore(size={}, before={})", 
                            ticker, currentBatchSize, beforeTimestamp);
                }

                if (batchCandles == null || batchCandles.isEmpty()) {
                    log.warn("‚ö†Ô∏è NO DATA: {} - –ø–æ–ª—É—á–µ–Ω—ã –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É", ticker);
                    break; // –ë–æ–ª—å—à–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
                }

                // –õ–æ–≥–∏—Ä—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π
                long firstTimestamp = batchCandles.get(0).getTimestamp();
                long lastTimestamp = batchCandles.get(batchCandles.size() - 1).getTimestamp();
                log.info("üì• BATCH RECEIVED: {} - {} —Å–≤–µ—á–µ–π [{}...{}]", 
                        ticker, batchCandles.size(), firstTimestamp, lastTimestamp);

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞—Ç—á –≤ –ë–î —Å—Ä–∞–∑—É
                candleTransactionService.saveCandlesToCache(ticker, timeframe, "OKX", batchCandles);
                loadedCount += batchCandles.size();

                // –û–±–Ω–æ–≤–ª—è–µ–º timestamp –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (–±–µ—Ä–µ–º —Å–∞–º—É—é —Å—Ç–∞—Ä—É—é –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –±–∞—Ç—á–∞)
                beforeTimestamp = batchCandles.get(0).getTimestamp(); // –ò–°–ü–†–ê–í–õ–ï–ù–û: –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é (—Å–∞–º—É—é —Å—Ç–∞—Ä—É—é) —Å–≤–µ—á—É
                log.info("üîÑ NEXT TIMESTAMP: {} - —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å before={} (—Å–∞–º–∞—è —Å—Ç–∞—Ä–∞—è –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –±–∞—Ç—á–∞)", 
                        ticker, beforeTimestamp);

                // –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                Thread.sleep(120);

                if (loadedCount % 1500 == 0) { // –ö–∞–∂–¥—ã–µ 5 –±–∞—Ç—á–µ–π
                    log.info("üíæ –ß–∞–Ω–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å: {} - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {} —Å–≤–µ—á–µ–π", ticker, loadedCount);
                }
            }

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞–Ω–∫–∞ –¥–ª—è {}: {}", ticker, e.getMessage(), e);
        }

        return loadedCount; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –¥–ª—è –¥–æ–≥—Ä—É–∑–∫–∏ –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ OutOfMemoryError
     * –£–ú–ï–ù–¨–®–ï–ù–û –¥–ª—è –±–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
     */
    private int getMaxLoadLimitForTimeframe(String timeframe) {
        return switch (timeframe) {
            case "1m" -> 25000;   // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 50K –¥–æ 25K –¥–ª—è 1m
            case "5m" -> 50000;   // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 100K –¥–æ 50K –¥–ª—è 5m
            case "15m" -> 25000;  // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 50K –¥–æ 25K –¥–ª—è 15m
            case "1H" -> 15000;   // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 20K –¥–æ 15K –¥–ª—è 1H
            case "4H" -> 8000;    // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 10K –¥–æ 8K –¥–ª—è 4H
            case "1D" -> 3000;    // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 3650 –¥–æ 3K –¥–ª—è 1D
            default -> 15000;     // –£–º–µ–Ω—å—à–µ–Ω–æ –¥–µ—Ñ–æ–ª—Ç —Å 20K –¥–æ 15K
        };
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –∏ –æ–±—ä–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö
     */
    private int getBatchSizeForTimeframe(String timeframe, int candleLimit) {
        // –î–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö —É–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
        if (candleLimit > 100000) { // > 100K —Å–≤–µ—á–µ–π
            return switch (timeframe) {
                case "1m" -> 1;  // –ü–æ –æ–¥–Ω–æ–º—É —Ç–∏–∫–µ—Ä—É –¥–ª—è –º–∏–Ω—É—Ç–Ω—ã—Ö —Å–≤–µ—á–µ–π
                case "5m", "15m" -> 2;  // –ü–æ 2 —Ç–∏–∫–µ—Ä–∞
                default -> 5;
            };
        } else if (candleLimit > 10000) { // > 10K —Å–≤–µ—á–µ–π
            return switch (timeframe) {
                case "1m", "5m" -> 3;
                case "15m", "1H" -> 5;
                default -> 10;
            };
        } else {
            return 20; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–≤–µ—á–∏ –¥–ª—è –±–∞—Ç—á–∞ —Ç–∏–∫–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É—è –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã OkxFeignClient
     */
    private Map<String, List<Candle>> loadCandlesForBatch(List<String> tickers, String timeframe, int candleLimit) {
        Map<String, List<Candle>> result = new HashMap<>();

        try {
            if (candleLimit <= 300) {
                // –ü—Ä–æ—Å—Ç–æ–π —Å–ª—É—á–∞–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥
                result = okxFeignClient.getCandlesMap(tickers, timeframe, candleLimit, false);
            } else {
                // –°–ª–æ–∂–Ω—ã–π —Å–ª—É—á–∞–π - –Ω—É–∂–Ω–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–∫–µ—Ä–∞
                for (String ticker : tickers) {
                    try {
                        List<Candle> candlesForTicker = loadCandlesWithPagination(ticker, timeframe, candleLimit);
                        if (!candlesForTicker.isEmpty()) {
                            result.put(ticker, candlesForTicker);
                        }

                        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                        Thread.sleep(150);

                    } catch (Exception e) {
                        log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–µ—á–µ–π –¥–ª—è {}: {}", ticker, e.getMessage());
                    }
                }
            }

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞—Ç—á–∞ —Å–≤–µ—á–µ–π: {}", e.getMessage(), e);
        }

        return result;
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–≤–µ—á–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞
     */
    private List<Candle> loadCandlesWithPagination(String ticker, String timeframe, int totalLimit) {
        int loadedCount = 0;
        int batchSize = 300; // –ú–∞–∫—Å–∏–º—É–º –¥–ª—è OKX API
        Long beforeTimestamp = null;
        List<Candle> allSavedCandles = new ArrayList<>(); // –¢–æ–ª—å–∫–æ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö

        try {
            while (loadedCount < totalLimit) {
                int remainingCandles = totalLimit - loadedCount;
                int currentBatchSize = Math.min(batchSize, remainingCandles);

                List<Candle> batchCandles;
                if (beforeTimestamp == null) {
                    // –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å - –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏
                    batchCandles = okxFeignClient.getCandles(ticker, timeframe, currentBatchSize);
                } else {
                    // –ü–æ—Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
                    batchCandles = okxFeignClient.getCandlesBefore(ticker, timeframe, currentBatchSize, beforeTimestamp);
                }

                if (batchCandles == null || batchCandles.isEmpty()) {
                    break; // –ë–æ–ª—å—à–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
                }

                // –ö–†–ò–¢–ò–ß–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞—Ç—á –≤ –ë–î –°–†–ê–ó–£ –≤–º–µ—Å—Ç–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏
                candleTransactionService.saveCandlesToCache(ticker, timeframe, "OKX", batchCandles);
                loadedCount += batchCandles.size();
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                if (allSavedCandles.isEmpty()) {
                    allSavedCandles.addAll(batchCandles.subList(0, Math.min(10, batchCandles.size())));
                }
                if (batchCandles.size() >= 10) {
                    List<Candle> lastCandles = batchCandles.subList(Math.max(0, batchCandles.size() - 10), batchCandles.size());
                    allSavedCandles.addAll(lastCandles);
                }

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º timestamp –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                beforeTimestamp = batchCandles.get(batchCandles.size() - 1).getTimestamp();

                // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è rate limit
                Thread.sleep(120);

                log.info("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –±–∞—Ç—á {} —Å–≤–µ—á–µ–π –¥–ª—è {} (–≤—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {})",
                        batchCandles.size(), ticker, loadedCount);
                
                // –ë–æ–ª–µ–µ —á–∞—Å—Ç–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è OutOfMemoryError
                if ((loadedCount / batchSize) % 2 == 0) { // –ö–∞–∂–¥—ã–µ 2 –±–∞—Ç—á–∞ (–±—ã–ª–æ 5)
                    System.gc();
                    try { Thread.sleep(100); } catch (Exception ignored) {} // –ü–∞—É–∑–∞ –¥–ª—è GC
                }
            }

            // –ü–æ–ª—É—á–∞–µ–º —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100)
            List<CachedCandle> cachedCandles = cachedCandleRepository
                .findLatestByTickerTimeframeExchange(ticker, timeframe, "OKX", PageRequest.of(0, 100));
            List<Candle> savedCandles = cachedCandles.stream()
                .map(CachedCandle::toCandle)
                .collect(Collectors.toList());
            
            log.info("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {}: {} —Å–≤–µ—á–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î", ticker, loadedCount);
            
            return savedCandles; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–≤–µ—á–µ–π –¥–ª—è {}: {}", ticker, e.getMessage(), e);
            return new ArrayList<>();
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–≤–µ—á–∏ –î–û —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ timestamp (–∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫—É—é –∑–∞–≥—Ä—É–∑–∫—É)
     */
    private List<Candle> loadCandlesBeforeTimestamp(String ticker, String timeframe, int totalLimit, long beforeTimestamp) {
        List<Candle> allCandles = new ArrayList<>();
        int batchSize = 300; // –ú–∞–∫—Å–∏–º—É–º –¥–ª—è OKX API
        Long currentBeforeTimestamp = beforeTimestamp;

        try {
            log.info("üîç –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–ï: –ó–∞–≥—Ä—É–∂–∞–µ–º {} —Å–≤–µ—á–µ–π –¥–ª—è {} –î–û {}", 
                    totalLimit, ticker, new java.util.Date(beforeTimestamp * 1000));

            while (allCandles.size() < totalLimit) {
                int remainingCandles = totalLimit - allCandles.size();
                int currentBatchSize = Math.min(batchSize, remainingCandles);

                // –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—Å–µ–≥–¥–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –î–û —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ timestamp
                List<Candle> batchCandles = okxFeignClient.getCandlesBefore(ticker, timeframe, currentBatchSize, currentBeforeTimestamp);

                if (batchCandles == null || batchCandles.isEmpty()) {
                    log.info("üì• –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–ï: –ù–µ—Ç –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–æ {}", new java.util.Date(currentBeforeTimestamp * 1000));
                    break; // –ë–æ–ª—å—à–µ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                }

                // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–≤–µ—á–∏ –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–∞—Ä—à–µ –Ω–∞—à–µ–≥–æ –ø–æ—Ä–æ–≥–∞
                List<Candle> filteredCandles = batchCandles.stream()
                        .filter(candle -> candle.getTimestamp() < beforeTimestamp)
                        .collect(Collectors.toList());

                if (filteredCandles.isEmpty()) {
                    log.info("üì• –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–ï: –í—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–≤–µ—á–∏ –Ω–æ–≤–µ–µ –ø–æ—Ä–æ–≥–∞ {}", new java.util.Date(beforeTimestamp * 1000));
                    break;
                }

                allCandles.addAll(filteredCandles);

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º timestamp –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (—Å–∞–º–∞—è —Å—Ç–∞—Ä–∞—è –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö)
                currentBeforeTimestamp = filteredCandles.get(filteredCandles.size() - 1).getTimestamp();

                // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è rate limit
                Thread.sleep(120);

                log.info("üì• –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–ï: –ó–∞–≥—Ä—É–∂–µ–Ω–æ {} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π –¥–ª—è {} (–≤—Å–µ–≥–æ: {})",
                        filteredCandles.size(), ticker, allCandles.size());
            }

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
            allCandles.sort(Comparator.comparing(Candle::getTimestamp));

            log.info("‚úÖ –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–ï: –ó–∞–≥—Ä—É–∂–µ–Ω–æ {} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π –¥–ª—è {} –¥–æ {}", 
                    allCandles.size(), ticker, new java.util.Date(beforeTimestamp * 1000));

        } catch (Exception e) {
            log.error("‚ùå –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–ï: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π –¥–ª—è {}: {}", ticker, e.getMessage(), e);
        }

        return allCandles;
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–≤–µ—á–∏ –≤ —Ç–æ—á–Ω–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ [firstTimestamp, lastTimestamp]
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é —á–µ—Ä–µ–∑ getCandlesBefore –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    private List<Candle> loadCandlesInExactRange(String ticker, String timeframe, 
                                                 long expectedFirstTimestamp, long expectedLastTimestamp) {
        List<Candle> result = new ArrayList<>();
        int batchSize = 300; // OKX API –ª–∏–º–∏—Ç
        long currentBeforeTimestamp = expectedLastTimestamp + getTimeframeInSeconds(timeframe); // –ù–∞—á–∏–Ω–∞–µ–º —Å –∫–æ–Ω—Ü–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        
        try {
            log.info("üéØ –¢–û–ß–ù–´–ô –î–ò–ê–ü–ê–ó–û–ù: –ó–∞–≥—Ä—É–∂–∞–µ–º {} –æ—Ç {} –¥–æ {}", 
                    ticker, formatTimestamp(expectedFirstTimestamp), formatTimestamp(expectedLastTimestamp));
            
            int totalLoaded = 0;
            while (result.isEmpty() || result.get(0).getTimestamp() > expectedFirstTimestamp) {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ—á–∏ –¥–æ currentBeforeTimestamp
                List<Candle> batch = okxFeignClient.getCandlesBefore(ticker, timeframe, batchSize, currentBeforeTimestamp);
                
                if (batch == null || batch.isEmpty()) {
                    log.warn("‚ö†Ô∏è –¢–û–ß–ù–´–ô –î–ò–ê–ü–ê–ó–û–ù: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–æ {}", formatTimestamp(currentBeforeTimestamp));
                    break;
                }
                
                // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–µ—á–∏ –≤ –Ω—É–∂–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
                List<Candle> filteredBatch = batch.stream()
                        .filter(candle -> candle.getTimestamp() >= expectedFirstTimestamp && 
                                        candle.getTimestamp() <= expectedLastTimestamp)
                        .sorted(Comparator.comparingLong(Candle::getTimestamp))
                        .collect(Collectors.toList());
                
                if (!filteredBatch.isEmpty()) {
                    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞ (—Ç–∞–∫ –∫–∞–∫ –∑–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
                    result.addAll(0, filteredBatch);
                    totalLoaded += filteredBatch.size();
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º timestamp –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (—Å–∞–º–∞—è —Å—Ç–∞—Ä–∞—è –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –±–∞—Ç—á–∞)
                currentBeforeTimestamp = batch.get(batch.size() - 1).getTimestamp();
                
                // –ï—Å–ª–∏ —Å–∞–º–∞—è —Å—Ç–∞—Ä–∞—è —Å–≤–µ—á–∞ –∏–∑ –±–∞—Ç—á–∞ —Å—Ç–∞—Ä—à–µ –Ω—É–∂–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                if (currentBeforeTimestamp < expectedFirstTimestamp) {
                    break;
                }
                
                // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                Thread.sleep(120);
                
                log.info("üì• –¢–û–ß–ù–´–ô –î–ò–ê–ü–ê–ó–û–ù: {} - –∑–∞–≥—Ä—É–∂–µ–Ω–æ {} —Å–≤–µ—á–µ–π –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ (–≤—Å–µ–≥–æ: {})",
                        ticker, filteredBatch.size(), totalLoaded);
                        
                // –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
                if (totalLoaded > 50000) { //todo –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —ç—Ç–æ, –∏–∑–º–µ–Ω–∏–ª —Å 50–∫ –Ω–∞ 150–∫ –∏ —á–∞—Ä—Ç –æ—Ç–∫—Ä—ã–ª—Å—è - —Ö–∑ –≤–∞—â–µ
                    log.warn("‚ö†Ô∏è –¢–û–ß–ù–´–ô –î–ò–ê–ü–ê–ó–û–ù: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è {}, –∑–∞–≤–µ—Ä—à–∞–µ–º", ticker);
                    break;
                }
            }
            
            // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ timestamp
            result = result.stream()
                    .distinct()
                    .sorted(Comparator.comparingLong(Candle::getTimestamp))
                    .collect(Collectors.toList());
                    
            log.info("‚úÖ –¢–û–ß–ù–´–ô –î–ò–ê–ü–ê–ó–û–ù: {} - –∑–∞–≥—Ä—É–∂–µ–Ω–æ {} —Å–≤–µ—á–µ–π –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ {}-{}", 
                    ticker, result.size(), formatTimestamp(expectedFirstTimestamp), formatTimestamp(expectedLastTimestamp));
                    
        } catch (Exception e) {
            log.error("‚ùå –¢–û–ß–ù–´–ô –î–ò–ê–ü–ê–ó–û–ù: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è {}: {}", ticker, e.getMessage(), e);
        }
        
        return result;
    }
}