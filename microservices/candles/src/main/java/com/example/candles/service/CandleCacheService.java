package com.example.candles.service;

import com.example.candles.client.OkxFeignClient;
import com.example.candles.repositories.CachedCandleRepository;
import com.example.shared.dto.Candle;
import com.example.shared.models.CachedCandle;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.stream.Collectors;
import java.util.Comparator;
import org.springframework.data.domain.PageRequest;
import jakarta.annotation.PostConstruct;
import jakarta.annotation.PreDestroy;

@Service
@RequiredArgsConstructor
@Slf4j
public class CandleCacheService {

    private final CachedCandleRepository cachedCandleRepository;
    private final OkxFeignClient okxFeignClient;
    private final CandleTransactionService candleTransactionService;

    @Value("${app.candle-cache.default-exchange:OKX}")
    private String defaultExchange;
    
    @Value("${app.candle-cache.thread-pool-size:5}")
    private int threadPoolSize;
    
    // –ü—É–ª –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ properties)
    private ExecutorService executorService;

    private final Map<String, Integer> defaultCachePeriods = Map.of(
            "1m", 365,    // 1 –≥–æ–¥ –¥–ª—è –º–µ–ª–∫–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
            "5m", 365,
            "15m", 365,
            "1H", 1095,   // 3 –≥–æ–¥–∞ –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤  
            "4H", 1095,
            "1D", 1825,   // 5 –ª–µ—Ç –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
            "1W", 1825,
            "1M", 1825
    );

    @PostConstruct
    public void initializeExecutorService() {
        this.executorService = Executors.newFixedThreadPool(threadPoolSize);
        log.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ExecutorService —Å {} –ø–æ—Ç–æ–∫–∞–º–∏", threadPoolSize);
    }

    @PreDestroy
    public void shutdownExecutorService() {
        if (executorService != null && !executorService.isShutdown()) {
            executorService.shutdown();
            log.info("üõë ExecutorService –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –≤ –ø—É–ª–µ
     */
    public synchronized void updateThreadPoolSize(int newThreadPoolSize) {
        if (newThreadPoolSize <= 0 || newThreadPoolSize > 20) {
            log.warn("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤: {}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç 1 –¥–æ 20.", newThreadPoolSize);
            return;
        }

        if (newThreadPoolSize == this.threadPoolSize) {
            log.info("‚ÑπÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ —É–∂–µ —Ä–∞–≤–Ω–æ {}, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è", newThreadPoolSize);
            return;
        }

        log.info("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤ —Å {} –Ω–∞ {} –ø–æ—Ç–æ–∫–æ–≤", this.threadPoolSize, newThreadPoolSize);
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø—É–ª
        if (executorService != null && !executorService.isShutdown()) {
            executorService.shutdown();
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—É–ª
        this.threadPoolSize = newThreadPoolSize;
        this.executorService = Executors.newFixedThreadPool(threadPoolSize);
        
        log.info("‚úÖ –ü—É–ª –ø–æ—Ç–æ–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ {} –ø–æ—Ç–æ–∫–æ–≤", threadPoolSize);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
     */
    public int getCurrentThreadPoolSize() {
        return threadPoolSize;
    }

    /**
     * üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –°–í–ï–ß–ï–ô –¥–ª—è –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
     * –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π 
     * –∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ç–∞–π–º—à—Ç–∞–º–ø—ã –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏
     */
    private void validateCandlesConsistency(Map<String, List<Candle>> candlesMap, 
                                           String timeframe, int expectedLimit) {
        if (candlesMap.isEmpty()) {
            log.warn("‚ö†Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø: –ü—É—Å—Ç–∞—è –∫–∞—Ä—Ç–∞ —Å–≤–µ—á–µ–π –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏");
            return;
        }

        log.info("üîç –í–ê–õ–ò–î–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å {} —Ç–∏–∫–µ—Ä–æ–≤ (—Ç–∞–π–º—Ñ—Ä–µ–π–º: {}, –ª–∏–º–∏—Ç: {})",
                candlesMap.size(), timeframe, expectedLimit);

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        Map<Integer, Integer> candleCountDistribution = new HashMap<>();
        Map<Long, Integer> firstTimestampDistribution = new HashMap<>(); 
        Map<Long, Integer> lastTimestampDistribution = new HashMap<>();
        List<String> validTickers = new ArrayList<>();
        List<String> invalidTickers = new ArrayList<>();

        long expectedFirstTimestamp = -1;
        long expectedLastTimestamp = -1;
        int expectedCandleCount = -1;

        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ç–∏–∫–µ—Ä–∞–º –∏ —Å–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        for (Map.Entry<String, List<Candle>> entry : candlesMap.entrySet()) {
            String ticker = entry.getKey();
            List<Candle> candles = entry.getValue();

            if (candles == null || candles.isEmpty()) {
                invalidTickers.add(ticker + "(–ø—É—Å—Ç–æ–π)");
                continue;
            }

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–≤–µ—á–∏ –ø–æ timestamp –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            candles.sort(Comparator.comparingLong(Candle::getTimestamp));

            int candleCount = candles.size();
            long firstTimestamp = candles.get(0).getTimestamp();
            long lastTimestamp = candles.get(candles.size() - 1).getTimestamp();

            // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            candleCountDistribution.merge(candleCount, 1, Integer::sum);
            firstTimestampDistribution.merge(firstTimestamp, 1, Integer::sum);
            lastTimestampDistribution.merge(lastTimestamp, 1, Integer::sum);

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å –ø–µ—Ä–≤–æ–≥–æ —Ç–∏–∫–µ—Ä–∞
            if (expectedFirstTimestamp == -1) {
                expectedFirstTimestamp = firstTimestamp;
                expectedLastTimestamp = lastTimestamp;
                expectedCandleCount = candleCount;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —ç—Ç–∞–ª–æ–Ω—É
            boolean isValid = (candleCount == expectedCandleCount && 
                             firstTimestamp == expectedFirstTimestamp &&
                             lastTimestamp == expectedLastTimestamp);

            if (isValid) {
                validTickers.add(ticker);
            } else {
                String reason = String.format("(—Å–≤–µ—á–µ–π:%d‚â†%d, –Ω–∞—á–∞–ª–æ:%d‚â†%d, –∫–æ–Ω–µ—Ü:%d‚â†%d)", 
                    candleCount, expectedCandleCount, 
                    firstTimestamp, expectedFirstTimestamp,
                    lastTimestamp, expectedLastTimestamp);
                invalidTickers.add(ticker + reason);
            }
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        String firstTimeStr = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
        String lastTimeStr = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
        
        if (expectedFirstTimestamp > 0) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç timestamp: –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, —Ç–æ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö, –∏–Ω–∞—á–µ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            if (expectedFirstTimestamp > 9999999999L) { // –±–æ–ª—å—à–µ —á–µ–º 2001 –≥–æ–¥ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                firstTimeStr = java.time.Instant.ofEpochMilli(expectedFirstTimestamp).toString();
            } else {
                firstTimeStr = java.time.Instant.ofEpochSecond(expectedFirstTimestamp).toString();
            }
        }
        
        if (expectedLastTimestamp > 0) {
            if (expectedLastTimestamp > 9999999999L) {
                lastTimeStr = java.time.Instant.ofEpochMilli(expectedLastTimestamp).toString();
            } else {
                lastTimeStr = java.time.Instant.ofEpochSecond(expectedLastTimestamp).toString();
            }
        }

        // üìä –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –û –í–ê–õ–ò–î–ê–¶–ò–ò
        log.info("üìä –í–ê–õ–ò–î–ê–¶–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢:");
        log.info("   üéØ –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {} —Å–≤–µ—á–µ–π, {} - {}", 
                expectedCandleCount, firstTimeStr, lastTimeStr);
        log.info("   ‚úÖ –í–∞–ª–∏–¥–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã: {} –∏–∑ {} ({}%)", 
                validTickers.size(), candlesMap.size(), 
                Math.round(100.0 * validTickers.size() / candlesMap.size()));

        if (!invalidTickers.isEmpty()) {
            log.warn("   ‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã ({}): {}", 
                    invalidTickers.size(), invalidTickers.size() <= 10 ? 
                    String.join(", ", invalidTickers) : 
                    String.join(", ", invalidTickers.subList(0, 10)) + "...");
        }

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
        log.info("   üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–≤–µ—á–µ–π: {}", candleCountDistribution);
        
        if (firstTimestampDistribution.size() > 1) {
            log.warn("   ‚ö†Ô∏è –†–∞–∑–Ω—ã–µ –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ç–∞–π–º—à—Ç–∞–º–ø—ã: {} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", firstTimestampDistribution.size());
        }
        
        if (lastTimestampDistribution.size() > 1) {
            log.warn("   ‚ö†Ô∏è –†–∞–∑–Ω—ã–µ –∫–æ–Ω–µ—á–Ω—ã–µ —Ç–∞–π–º—à—Ç–∞–º–ø—ã: {} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", lastTimestampDistribution.size());
        }

        // –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        double consistencyRate = (double) validTickers.size() / candlesMap.size();
        String percentStr = String.format("%.1f%%", consistencyRate * 100);
        
        if (consistencyRate >= 0.95) {
            log.info("üéâ –í–ê–õ–ò–î–ê–¶–ò–Ø: –û—Ç–ª–∏—á–Ω–∞—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö ({})", percentStr);
        } else if (consistencyRate >= 0.90) {
            log.warn("‚ö†Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø: –•–æ—Ä–æ—à–∞—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö ({})", percentStr);
        } else if (consistencyRate >= 0.80) {
            log.warn("‚ùå –í–ê–õ–ò–î–ê–¶–ò–Ø: –°—Ä–µ–¥–Ω—è—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö ({})", percentStr);
        } else {
            log.error("üí• –í–ê–õ–ò–î–ê–¶–ò–Ø: –ü–õ–û–•–ê–Ø –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö ({}) - –ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø –¥–ª—è –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏!", percentStr);
        }
    }

    public Map<String, List<Candle>> getCachedCandles(List<String> tickers, String timeframe,
                                                      int candleLimit) {
        return getCachedCandles(tickers, timeframe, candleLimit, defaultExchange);
    }

    public Map<String, List<Candle>> getCachedCandles(List<String> tickers, String timeframe,
                                                      int candleLimit, String exchange) {
        log.info("üîç –ó–∞–ø—Ä–æ—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π: {} —Ç–∏–∫–µ—Ä–æ–≤, —Ç–∞–π–º—Ñ—Ä–µ–π–º {}, –ª–∏–º–∏—Ç {}",
                tickers.size(), timeframe, candleLimit);

        Map<String, List<Candle>> result = new ConcurrentHashMap<>();
        Map<String, Integer> missingCandlesCount = new ConcurrentHashMap<>();
        int cacheHits = 0; // –°—á–µ—Ç—á–∏–∫ —Ç–∏–∫–µ—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞
        int totalCandlesAdded = 0; // –°—á–µ—Ç—á–∏–∫ —Ä–µ–∞–ª—å–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –≤ –ë–î

        long currentTimestamp = System.currentTimeMillis() / 1000;
        long requiredFromTimestamp = calculateFromTimestamp(currentTimestamp, timeframe, candleLimit);

        // –ß–ï–¢–ö–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –≤ –∫—ç—à–µ, –µ—Å–ª–∏ –º–µ–Ω—å—à–µ —á–µ–º –∑–∞–ø—Ä–æ—à–µ–Ω–æ - –¥–æ–≥—Ä—É–∂–∞–µ–º
        
        int debugCount = 0; // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –ø–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ç–∏–∫–µ—Ä–æ–≤
        for (String ticker : tickers) {
            if (debugCount < 5) debugCount++;
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–≤–µ—á–µ–π –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–∫–µ—Ä–∞
            List<CachedCandle> latestCandles = cachedCandleRepository
                    .findLatestByTickerTimeframeExchange(ticker, timeframe, exchange, 
                            PageRequest.of(0, candleLimit));

            log.info("üîç DEBUG: –î–ª—è {} –Ω–∞–π–¥–µ–Ω–æ {} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π –≤ –∫—ç—à–µ (–∑–∞–ø—Ä–æ—à–µ–Ω–æ {})",
                    ticker, latestCandles.size(), candleLimit);

            if (!latestCandles.isEmpty()) {
                // –ï—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à–µ - –≤—Å–µ–≥–¥–∞ –∏—Ö –±–µ—Ä–µ–º
                List<Candle> candlesList = latestCandles.stream()
                        .map(CachedCandle::toCandle)
                        .sorted(Comparator.comparing(Candle::getTimestamp))
                        .collect(Collectors.toList());
                        
                result.put(ticker, candlesList);
                cacheHits++; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∫—ç—à-—Ö–∏—Ç–æ–≤
                
                // –ß–ï–¢–ö–û: –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω—å—à–µ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ - –¥–æ–≥—Ä—É–∂–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ
                if (latestCandles.size() < candleLimit) {
                    int missing = candleLimit - latestCandles.size();
                    missingCandlesCount.put(ticker, missing);
                    if (debugCount <= 5) {
                        log.info("üîÑ –ö—ç—à PARTIAL: {} - –µ—Å—Ç—å {}, –Ω—É–∂–Ω–æ {}, –¥–æ–≥—Ä—É–∑–∏–º {}", 
                                ticker, latestCandles.size(), candleLimit, missing);
                    }
                } else {
                    if (debugCount <= 5) {
                        log.info("‚úÖ –ö—ç—à HIT: {} - {} —Å–≤–µ—á–µ–π –∏–∑ –∫—ç—à–∞ (–ø–æ–ª–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ)", ticker, latestCandles.size());
                    }
                }
            } else {
                // –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à–µ - –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                missingCandlesCount.put(ticker, candleLimit);
                log.info("‚ùå –ö—ç—à MISS: {} - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –∑–∞–≥—Ä—É–∑–∏–º {} —Å–≤–µ—á–µ–π", ticker, candleLimit);
            }
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å–≤–µ—á–∏
        if (!missingCandlesCount.isEmpty()) {
            log.info("üîÑ –î–æ–≥—Ä—É–∂–∞–µ–º {} —Ç–∏–∫–µ—Ä–æ–≤ —Å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º–∏ —Å–≤–µ—á–∞–º–∏", missingCandlesCount.size());
            Map<String, Object> loadingResult = loadMissingCandles(missingCandlesCount,
                    timeframe, exchange, requiredFromTimestamp);
            @SuppressWarnings("unchecked")
            Map<String, List<Candle>> missingCandles = (Map<String, List<Candle>>) loadingResult.get("candles");
            totalCandlesAdded = (Integer) loadingResult.get("addedCount");
            result.putAll(missingCandles);
        }

        log.info("‚úÖ –ò–¢–û–ì–û: {} —Ç–∏–∫–µ—Ä–æ–≤ (–∫—ç—à: {}, –¥–æ–≥—Ä—É–∂–µ–Ω–æ: {}, –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ë–î: {} —Å–≤–µ—á–µ–π)",
                result.size(), cacheHits, missingCandlesCount.size(), totalCandlesAdded);

        // üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –°–í–ï–ß–ï–ô –¥–ª—è –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        validateCandlesConsistency(result, timeframe, candleLimit);

        return result;
    }

    public void preloadAllCandles(String exchange) {
        log.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–µ—á–µ–π –¥–ª—è –±–∏—Ä–∂–∏ {}", exchange);
        int totalCandlesAdded = 0;

        try {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ SWAP —Ç–∏–∫–µ—Ä—ã
            List<String> allTickers = okxFeignClient.getAllSwapTickers(true);
            log.info("üìä –ù–∞–π–¥–µ–Ω–æ {} SWAP —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏", allTickers.size());

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–∞–π–º—Ñ—Ä–µ–π–º—É
            for (Map.Entry<String, Integer> entry : defaultCachePeriods.entrySet()) {
                String timeframe = entry.getKey();
                int periodDays = entry.getValue();

                log.info("‚è∞ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ {} ({} –¥–Ω–µ–π) –¥–ª—è {} —Ç–∏–∫–µ—Ä–æ–≤",
                        timeframe, periodDays, allTickers.size());

                int addedForTimeframe = preloadTimeframeForTickers(allTickers, timeframe, exchange, periodDays);
                totalCandlesAdded += addedForTimeframe;
                
                log.info("üìä –¢–∞–π–º—Ñ—Ä–µ–π–º {} –∑–∞–≤–µ—Ä—à–µ–Ω: –¥–æ–±–∞–≤–ª–µ–Ω–æ {} —Å–≤–µ—á–µ–π –≤ –ë–î", timeframe, addedForTimeframe);

                // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º–∏
                Thread.sleep(1000);
            }

            log.info("‚úÖ –®–ï–î–£–õ–õ–ï–†: –ü–æ–ª–Ω–∞—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –±–∏—Ä–∂–∏ {} - –¥–æ–±–∞–≤–ª–µ–Ω–æ {} —Å–≤–µ—á–µ–π –≤ –ë–î", 
                    exchange, totalCandlesAdded);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–µ: {}", e.getMessage(), e);
        }
    }

    public void dailyCandlesUpdate(String exchange) {
        log.info("üîÑ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–µ—á–µ–π –¥–ª—è –±–∏—Ä–∂–∏ {}", exchange);
        int totalCandlesAdded = 0;

        try {
            List<String> cachedTickers = cachedCandleRepository.findDistinctTickersByExchange(exchange);
            log.info("üìä –û–±–Ω–æ–≤–ª—è–µ–º {} —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ –∫—ç—à–∞", cachedTickers.size());

            long currentTimestamp = System.currentTimeMillis() / 1000;
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 48 —á–∞—Å–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            long updateFromTimestamp = currentTimestamp - (48 * 3600);

            for (String timeframe : defaultCachePeriods.keySet()) {
                log.info("‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ {} –¥–ª—è {} —Ç–∏–∫–µ—Ä–æ–≤", timeframe, cachedTickers.size());

                int addedForTimeframe = updateCandlesForTickers(cachedTickers, timeframe, exchange, updateFromTimestamp);
                totalCandlesAdded += addedForTimeframe;
                
                log.info("üìä –¢–∞–π–º—Ñ—Ä–µ–π–º {} –æ–±–Ω–æ–≤–ª–µ–Ω: –¥–æ–±–∞–≤–ª–µ–Ω–æ {} —Å–≤–µ—á–µ–π –≤ –ë–î", timeframe, addedForTimeframe);

                Thread.sleep(500);
            }

            log.info("‚úÖ –®–ï–î–£–õ–õ–ï–†: –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è –±–∏—Ä–∂–∏ {} - –¥–æ–±–∞–≤–ª–µ–Ω–æ {} —Å–≤–µ—á–µ–π –≤ –ë–î", 
                    exchange, totalCandlesAdded);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {}", e.getMessage(), e);
        }
    }

    public Map<String, Object> getCacheStatistics(String exchange) {
        Map<String, Object> stats = new HashMap<>();

        try {
            List<Object[]> rawStats = cachedCandleRepository.getCacheStatistics();
            Map<String, Map<String, Long>> exchangeStats = new HashMap<>();

            for (Object[] row : rawStats) {
                String ex = (String) row[0];
                String tf = (String) row[1];
                Long count = (Long) row[2];

                exchangeStats.computeIfAbsent(ex, k -> new HashMap<>()).put(tf, count);
            }

            stats.put("byExchange", exchangeStats);

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–∏—Ä–∂–∏
            if (exchange != null) {
                List<String> tickers = cachedCandleRepository.findDistinctTickersByExchange(exchange);
                stats.put("totalTickers", tickers.size());

                Map<String, Long> timeframeStats = new HashMap<>();
                for (String timeframe : defaultCachePeriods.keySet()) {
                    Long count = cachedCandleRepository.countByTickerTimeframeExchange("", timeframe, exchange);
                    timeframeStats.put(timeframe, count);
                }
                stats.put("timeframeStats", timeframeStats);
            }

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞: {}", e.getMessage(), e);
            stats.put("error", e.getMessage());
        }

        return stats;
    }

    public void forceLoadCandlesCustom(String exchange, java.util.Set<String> timeframes, 
                                      List<String> tickers, Integer threadCount, Integer periodDays) {
        log.info("üéØ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê: –±–∏—Ä–∂–∞={}, —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã={}, —Ç–∏–∫–µ—Ä–æ–≤={}, –ø–æ—Ç–æ–∫–∏={}, –ø–µ—Ä–∏–æ–¥={} –¥–Ω–µ–π", 
                exchange, timeframes, tickers != null ? tickers.size() : 0, threadCount, periodDays);
        
        try {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            List<String> targetTickers = tickers;
            if (targetTickers == null || targetTickers.isEmpty()) {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ SWAP —Ç–∏–∫–µ—Ä—ã –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ
                targetTickers = okxFeignClient.getAllSwapTickers(true);
                log.info("üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ {} SWAP —Ç–∏–∫–µ—Ä–æ–≤", targetTickers.size());
            } else {
                log.info("üìä –ó–∞–≥—Ä—É–∂–∞–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–µ {} —Ç–∏–∫–µ—Ä–æ–≤", targetTickers.size());
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–∞–π–º—Ñ—Ä–µ–π–º—É
            int totalCandlesAdded = 0;
            for (String timeframe : timeframes) {
                log.info("‚è∞ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ {} –¥–ª—è {} —Ç–∏–∫–µ—Ä–æ–≤", 
                        timeframe, targetTickers.size());
                
                int candleLimit = calculateCandleLimit(timeframe, periodDays != null ? periodDays : 365);
                int addedForTimeframe = preloadTimeframeForTickers(targetTickers, timeframe, exchange, periodDays != null ? periodDays : 365);
                totalCandlesAdded += addedForTimeframe;
                
                log.info("üìä –¢–∞–π–º—Ñ—Ä–µ–π–º {} –∑–∞–≤–µ—Ä—à–µ–Ω: –¥–æ–±–∞–≤–ª–µ–Ω–æ {} —Å–≤–µ—á–µ–π –≤ –ë–î", timeframe, addedForTimeframe);
                
                // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º–∏
                Thread.sleep(1000);
            }
            
            log.info("‚úÖ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –±–∏—Ä–∂–∏ {} - –¥–æ–±–∞–≤–ª–µ–Ω–æ {} —Å–≤–µ—á–µ–π –≤ –ë–î", 
                    exchange, totalCandlesAdded);
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ: {}", e.getMessage(), e);
        }
    }

    private int preloadTimeframeForTickers(List<String> tickers, String timeframe,
                                            String exchange, int periodDays) {
        int candleLimit = calculateCandleLimit(timeframe, periodDays);
        final int[] totalAddedCount = {0}; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è thread-safe –∏–∑–º–µ–Ω–µ–Ω–∏—è

        log.info("üìà –ú–ù–û–ì–û–ü–û–¢–û–ß–ù–ê–Ø –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ {} —Å–≤–µ—á–µ–π —Ç–∏–ø–∞ {} –¥–ª—è {} —Ç–∏–∫–µ—Ä–æ–≤ ({} –ø–æ—Ç–æ–∫–æ–≤)",
                candleLimit, timeframe, tickers.size(), threadPoolSize);

        // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏
        int batchSize = Math.max(1, getBatchSizeForTimeframe(timeframe, candleLimit) / 2);
        List<CompletableFuture<Void>> futures = new ArrayList<>();
        
        for (int i = 0; i < tickers.size(); i += batchSize) {
            final int batchIndex = i;
            final List<String> batch = tickers.subList(i, Math.min(i + batchSize, tickers.size()));

            CompletableFuture<Void> future = CompletableFuture.runAsync(() -> {
                try {
                    log.info("üöÄ –ü–û–¢–û–ö: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á {}-{}", batchIndex + 1,
                            Math.min(batchIndex + batchSize, tickers.size()));
                    
                    Map<String, List<Candle>> candlesMap = loadCandlesForBatch(batch, timeframe, candleLimit);
                    int batchAddedCount = 0;

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –∫–∞–∂–¥—ã–π —Ç–∏–∫–µ—Ä –æ—Ç–¥–µ–ª—å–Ω–æ
                    for (Map.Entry<String, List<Candle>> entry : candlesMap.entrySet()) {
                        String ticker = entry.getKey();
                        List<Candle> candles = entry.getValue();

                        int addedCount = candleTransactionService.saveCandlesToCache(ticker, timeframe, exchange, candles);
                        batchAddedCount += addedCount;
                        
                        if (addedCount > 0) {
                            log.info("‚úÖ –ü–û–¢–û–ö: {} - –¥–æ–±–∞–≤–ª–µ–Ω–æ {} —Å–≤–µ—á–µ–π –≤ –ë–î", ticker, addedCount);
                        }
                    }

                    synchronized (totalAddedCount) {
                        totalAddedCount[0] += batchAddedCount;
                    }

                    log.info("‚úÖ –ü–û–¢–û–ö: –ë–∞—Ç—á {}-{} –∑–∞–≤–µ—Ä—à–µ–Ω, –¥–æ–±–∞–≤–ª–µ–Ω–æ {} —Å–≤–µ—á–µ–π –≤ –ë–î",
                            batchIndex + 1, Math.min(batchIndex + batchSize, tickers.size()), batchAddedCount);

                } catch (Exception e) {
                    log.error("‚ùå –ü–û–¢–û–ö: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞ {}-{}: {}", batchIndex + 1,
                            Math.min(batchIndex + batchSize, tickers.size()), e.getMessage(), e);
                }
            }, executorService);
            
            futures.add(future);
        }
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        try {
            CompletableFuture.allOf(futures.toArray(new CompletableFuture[0])).get();
            log.info("üèÅ –í–°–ï 5 –ü–û–¢–û–ö–û–í: –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ {} —Ç–∏–∫–µ—Ä–æ–≤", tickers.size());
        } catch (Exception e) {
            log.error("‚ùå –í–°–ï –ü–û–¢–û–ö–ò: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤: {}", e.getMessage(), e);
        }

        return totalAddedCount[0];
    }

    private int updateCandlesForTickers(List<String> tickers, String timeframe,
                                         String exchange, long fromTimestamp) {
        // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ preloadTimeframeForTickers, –Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–≤–µ—á–µ–π
        int batchSize = 20;
        int totalAddedCount = 0;
        
        for (int i = 0; i < tickers.size(); i += batchSize) {
            List<String> batch = tickers.subList(i, Math.min(i + batchSize, tickers.size()));

            try {
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ —Å–≤–µ—á–µ–π –Ω—É–∂–Ω–æ –¥–ª—è 48 —á–∞—Å–æ–≤
                int candleLimit = calculateCandleLimit(timeframe, 2); // 2 –¥–Ω—è

                Map<String, List<Candle>> candlesMap = loadCandlesForBatch(batch, timeframe, candleLimit);

                for (Map.Entry<String, List<Candle>> entry : candlesMap.entrySet()) {
                    String ticker = entry.getKey();
                    List<Candle> candles = entry.getValue();

                    int addedCount = candleTransactionService.updateCandlesInCache(ticker, timeframe, exchange, candles, fromTimestamp);
                    totalAddedCount += addedCount;
                    
                    if (addedCount > 0) {
                        log.info("‚úÖ –û–ë–ù–û–í–õ–ï–ù–ò–ï: {} - –¥–æ–±–∞–≤–ª–µ–Ω–æ {} —Å–≤–µ—á–µ–π –≤ –ë–î", ticker, addedCount);
                    }
                }

                Thread.sleep(100);

            } catch (Exception e) {
                log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞—Ç—á–∞: {}", e.getMessage());
            }
        }
        
        return totalAddedCount;
    }

    private Map<String, Object> loadMissingCandles(Map<String, Integer> missingCandlesCount,
                                                         String timeframe, String exchange,
                                                         long requiredFromTimestamp) {
        Map<String, List<Candle>> result = new ConcurrentHashMap<>();
        final int[] totalAddedCount = {0}; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è thread-safe –∏–∑–º–µ–Ω–µ–Ω–∏—è

        try {
            log.info("üöÄ –ú–ù–û–ì–û–ü–û–¢–û–ß–ù–ê–Ø –¥–æ–≥—Ä—É–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Å–≤–µ—á–µ–π –≤ 5 –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è {} —Ç–∏–∫–µ—Ä–æ–≤", 
                    missingCandlesCount.size());

            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ 5 –ø–æ—Ç–æ–∫–æ–≤
            List<CompletableFuture<Void>> futures = new ArrayList<>();
            
            for (Map.Entry<String, Integer> entry : missingCandlesCount.entrySet()) {
                CompletableFuture<Void> future = CompletableFuture.runAsync(() -> {
                    String ticker = entry.getKey();
                    int missingCount = entry.getValue();

                    try {
                        log.info("üîÑ –ü–û–¢–û–ö: –ó–∞–≥—Ä—É–∂–∞–µ–º {} –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Å–≤–µ—á–µ–π –¥–ª—è {}", missingCount, ticker);

                        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ —Å–≤–µ—á–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
                        List<CachedCandle> existingCandles = cachedCandleRepository
                                .findByTickerTimeframeExchangeFromTimestamp(ticker, timeframe, exchange, requiredFromTimestamp);

                        // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à–µ - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∞–º—É—é —Å—Ç–∞—Ä—É—é –¥–∞—Ç—É –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ –Ω–µ—ë
                        List<Candle> loadedCandles;
                        if (!existingCandles.isEmpty()) {
                            // –ï—Å—Ç—å –¥–∞–Ω–Ω—ã–µ - –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ä—ã–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –î–û —Å–∞–º–æ–π —Å—Ç–∞—Ä–æ–π –∑–∞–ø–∏—Å–∏
                            long oldestTimestamp = existingCandles.stream()
                                    .mapToLong(CachedCandle::getTimestamp)
                                    .min().orElse(System.currentTimeMillis() / 1000);
                            
                            log.info("üîÑ –ü–û–¢–û–ö: –î–ª—è {} –∑–∞–≥—Ä—É–∂–∞–µ–º {} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π –¥–æ {}",
                                    ticker, missingCount, new java.util.Date(oldestTimestamp * 1000));
                            
                            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –î–û oldestTimestamp
                            loadedCandles = loadCandlesBeforeTimestamp(ticker, timeframe, missingCount, oldestTimestamp);
                        } else {
                            // –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö - –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏)
                            log.info("üîÑ –ü–û–¢–û–ö: –î–ª—è {} –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {} —Å–≤–µ—á–µ–π", ticker, missingCount);
                            loadedCandles = loadCandlesWithPagination(ticker, timeframe, missingCount);
                        }

                        if (!loadedCandles.isEmpty()) {
                            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –∏ –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∞–ª—å–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π
                            int addedCount = candleTransactionService.saveCandlesToCache(ticker, timeframe, exchange, loadedCandles);
                            
                            synchronized (totalAddedCount) {
                                totalAddedCount[0] += addedCount;
                            }

                            // –ü–û–õ–£–ß–ê–ï–ú –ê–ö–¢–£–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –ò–ó –ö–≠–®–ê –ü–û–°–õ–ï –°–û–•–†–ê–ù–ï–ù–ò–Ø
                            List<CachedCandle> updatedCachedCandles = cachedCandleRepository
                                    .findLatestByTickerTimeframeExchange(ticker, timeframe, exchange, 
                                            PageRequest.of(0, missingCount + existingCandles.size()));

                            List<Candle> finalCandles = updatedCachedCandles.stream()
                                    .map(CachedCandle::toCandle)
                                    .sorted(Comparator.comparing(Candle::getTimestamp))
                                    .collect(Collectors.toList());

                            result.put(ticker, finalCandles);
                            
                            if (addedCount > 0) {
                                log.info("‚úÖ –ü–û–¢–û–ö: –î–ª—è {} –¥–æ–±–∞–≤–ª–µ–Ω–æ {} —Å–≤–µ—á–µ–π –≤ –ë–î, –ø–æ–ª—É—á–µ–Ω–æ {} –∏–∑ –∫—ç—à–∞",
                                        ticker, addedCount, finalCandles.size());
                            }
                        }

                    } catch (Exception e) {
                        log.error("‚ùå –ü–û–¢–û–ö: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}: {}", ticker, e.getMessage());
                    }
                }, executorService);
                
                futures.add(future);
            }

            // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
            try {
                CompletableFuture.allOf(futures.toArray(new CompletableFuture[0])).get();
                log.info("üèÅ –í–°–ï 5 –ü–û–¢–û–ö–û–í: –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è –¥–æ–≥—Ä—É–∑–∫–∞ {} —Ç–∏–∫–µ—Ä–æ–≤", missingCandlesCount.size());
            } catch (Exception e) {
                log.error("‚ùå –í–°–ï –ü–û–¢–û–ö–ò: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤ –¥–æ–≥—Ä—É–∑–∫–∏: {}", e.getMessage(), e);
            }

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Å–≤–µ—á–µ–π: {}", e.getMessage(), e);
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Å—á–µ—Ç—á–∏–∫
        Map<String, Object> finalResult = new HashMap<>();
        finalResult.put("candles", result);
        finalResult.put("addedCount", totalAddedCount[0]);
        
        return finalResult;
    }



    private long calculateFromTimestamp(long currentTimestamp, String timeframe, int candleLimit) {
        int timeframeSeconds = getTimeframeInSeconds(timeframe);
        return currentTimestamp - ((long) candleLimit * timeframeSeconds);
    }

    private int calculateCandleLimit(String timeframe, int periodDays) {
        return switch (timeframe) {
            case "1m" -> periodDays * 24 * 60;
            case "5m" -> periodDays * 24 * 12;
            case "15m" -> periodDays * 24 * 4;
            case "1H" -> periodDays * 24;
            case "4H" -> periodDays * 6;
            case "1D" -> periodDays;
            case "1W" -> periodDays / 7;
            case "1M" -> periodDays / 30;
            default -> periodDays * 24; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞–∫ 1H
        };
    }

    private int getTimeframeInSeconds(String timeframe) {
        return switch (timeframe) {
            case "1m" -> 60;
            case "5m" -> 300;
            case "15m" -> 900;
            case "1H" -> 3600;
            case "4H" -> 14400;
            case "1D" -> 86400;
            case "1W" -> 604800;
            case "1M" -> 2592000; // –ø—Ä–∏–º–µ—Ä–Ω–æ 30 –¥–Ω–µ–π
            default -> 3600; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞–∫ 1H
        };
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –∏ –æ–±—ä–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö
     */
    private int getBatchSizeForTimeframe(String timeframe, int candleLimit) {
        // –î–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö —É–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
        if (candleLimit > 100000) { // > 100K —Å–≤–µ—á–µ–π
            return switch (timeframe) {
                case "1m" -> 1;  // –ü–æ –æ–¥–Ω–æ–º—É —Ç–∏–∫–µ—Ä—É –¥–ª—è –º–∏–Ω—É—Ç–Ω—ã—Ö —Å–≤–µ—á–µ–π
                case "5m", "15m" -> 2;  // –ü–æ 2 —Ç–∏–∫–µ—Ä–∞
                default -> 5;
            };
        } else if (candleLimit > 10000) { // > 10K —Å–≤–µ—á–µ–π
            return switch (timeframe) {
                case "1m", "5m" -> 3;
                case "15m", "1H" -> 5;
                default -> 10;
            };
        } else {
            return 20; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–≤–µ—á–∏ –¥–ª—è –±–∞—Ç—á–∞ —Ç–∏–∫–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É—è –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã OkxFeignClient
     */
    private Map<String, List<Candle>> loadCandlesForBatch(List<String> tickers, String timeframe, int candleLimit) {
        Map<String, List<Candle>> result = new HashMap<>();

        try {
            if (candleLimit <= 300) {
                // –ü—Ä–æ—Å—Ç–æ–π —Å–ª—É—á–∞–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥
                result = okxFeignClient.getCandlesMap(tickers, timeframe, candleLimit, false);
            } else {
                // –°–ª–æ–∂–Ω—ã–π —Å–ª—É—á–∞–π - –Ω—É–∂–Ω–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–∫–µ—Ä–∞
                for (String ticker : tickers) {
                    try {
                        List<Candle> candlesForTicker = loadCandlesWithPagination(ticker, timeframe, candleLimit);
                        if (!candlesForTicker.isEmpty()) {
                            result.put(ticker, candlesForTicker);
                        }

                        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                        Thread.sleep(150);

                    } catch (Exception e) {
                        log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–µ—á–µ–π –¥–ª—è {}: {}", ticker, e.getMessage());
                    }
                }
            }

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞—Ç—á–∞ —Å–≤–µ—á–µ–π: {}", e.getMessage(), e);
        }

        return result;
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–≤–µ—á–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞
     */
    private List<Candle> loadCandlesWithPagination(String ticker, String timeframe, int totalLimit) {
        List<Candle> allCandles = new ArrayList<>();
        int batchSize = 300; // –ú–∞–∫—Å–∏–º—É–º –¥–ª—è OKX API
        Long beforeTimestamp = null;

        try {
            while (allCandles.size() < totalLimit) {
                int remainingCandles = totalLimit - allCandles.size();
                int currentBatchSize = Math.min(batchSize, remainingCandles);

                List<Candle> batchCandles;
                if (beforeTimestamp == null) {
                    // –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å - –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏
                    batchCandles = okxFeignClient.getCandles(ticker, timeframe, currentBatchSize);
                } else {
                    // –ü–æ—Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
                    batchCandles = okxFeignClient.getCandlesBefore(ticker, timeframe, currentBatchSize, beforeTimestamp);
                }

                if (batchCandles == null || batchCandles.isEmpty()) {
                    break; // –ë–æ–ª—å—à–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
                }

                allCandles.addAll(batchCandles);

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º timestamp –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                beforeTimestamp = batchCandles.get(batchCandles.size() - 1).getTimestamp();

                // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è rate limit
                Thread.sleep(120);

                log.info("üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {} —Å–≤–µ—á–µ–π –¥–ª—è {} (–≤—Å–µ–≥–æ: {})",
                        batchCandles.size(), ticker, allCandles.size());
            }

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
            allCandles.sort(Comparator.comparing(Candle::getTimestamp));

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–≤–µ—á–µ–π –¥–ª—è {}: {}", ticker, e.getMessage(), e);
        }

        return allCandles;
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–≤–µ—á–∏ –î–û —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ timestamp (–∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫—É—é –∑–∞–≥—Ä—É–∑–∫—É)
     */
    private List<Candle> loadCandlesBeforeTimestamp(String ticker, String timeframe, int totalLimit, long beforeTimestamp) {
        List<Candle> allCandles = new ArrayList<>();
        int batchSize = 300; // –ú–∞–∫—Å–∏–º—É–º –¥–ª—è OKX API
        Long currentBeforeTimestamp = beforeTimestamp;

        try {
            log.info("üîç –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–ï: –ó–∞–≥—Ä—É–∂–∞–µ–º {} —Å–≤–µ—á–µ–π –¥–ª—è {} –î–û {}", 
                    totalLimit, ticker, new java.util.Date(beforeTimestamp * 1000));

            while (allCandles.size() < totalLimit) {
                int remainingCandles = totalLimit - allCandles.size();
                int currentBatchSize = Math.min(batchSize, remainingCandles);

                // –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—Å–µ–≥–¥–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –î–û —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ timestamp
                List<Candle> batchCandles = okxFeignClient.getCandlesBefore(ticker, timeframe, currentBatchSize, currentBeforeTimestamp);

                if (batchCandles == null || batchCandles.isEmpty()) {
                    log.info("üì• –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–ï: –ù–µ—Ç –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–æ {}", new java.util.Date(currentBeforeTimestamp * 1000));
                    break; // –ë–æ–ª—å—à–µ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                }

                // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–≤–µ—á–∏ –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–∞—Ä—à–µ –Ω–∞—à–µ–≥–æ –ø–æ—Ä–æ–≥–∞
                List<Candle> filteredCandles = batchCandles.stream()
                        .filter(candle -> candle.getTimestamp() < beforeTimestamp)
                        .collect(Collectors.toList());

                if (filteredCandles.isEmpty()) {
                    log.info("üì• –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–ï: –í—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–≤–µ—á–∏ –Ω–æ–≤–µ–µ –ø–æ—Ä–æ–≥–∞ {}", new java.util.Date(beforeTimestamp * 1000));
                    break;
                }

                allCandles.addAll(filteredCandles);

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º timestamp –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (—Å–∞–º–∞—è —Å—Ç–∞—Ä–∞—è –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö)
                currentBeforeTimestamp = filteredCandles.get(filteredCandles.size() - 1).getTimestamp();

                // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è rate limit
                Thread.sleep(120);

                log.info("üì• –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–ï: –ó–∞–≥—Ä—É–∂–µ–Ω–æ {} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π –¥–ª—è {} (–≤—Å–µ–≥–æ: {})",
                        filteredCandles.size(), ticker, allCandles.size());
            }

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
            allCandles.sort(Comparator.comparing(Candle::getTimestamp));

            log.info("‚úÖ –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–ï: –ó–∞–≥—Ä—É–∂–µ–Ω–æ {} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π –¥–ª—è {} –¥–æ {}", 
                    allCandles.size(), ticker, new java.util.Date(beforeTimestamp * 1000));

        } catch (Exception e) {
            log.error("‚ùå –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–ï: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π –¥–ª—è {}: {}", ticker, e.getMessage(), e);
        }

        return allCandles;
    }
}