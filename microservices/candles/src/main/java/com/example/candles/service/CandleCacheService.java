package com.example.candles.service;

import com.example.candles.client.OkxFeignClient;
import com.example.candles.repositories.CachedCandleRepository;
import com.example.shared.dto.Candle;
import com.example.shared.models.CachedCandle;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Slf4j
public class CandleCacheService {

    private final CachedCandleRepository cachedCandleRepository;
    private final OkxFeignClient okxFeignClient;

    @Value("${app.candle-cache.default-exchange:OKX}")
    private String defaultExchange;

    private final Map<String, Integer> defaultCachePeriods = Map.of(
            "1m", 365,    // 1 –≥–æ–¥ –¥–ª—è –º–µ–ª–∫–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
            "5m", 365,
            "15m", 365,
            "1H", 1095,   // 3 –≥–æ–¥–∞ –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤  
            "4H", 1095,
            "1D", 1825,   // 5 –ª–µ—Ç –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
            "1W", 1825,
            "1M", 1825
    );

    public Map<String, List<Candle>> getCachedCandles(List<String> tickers, String timeframe,
                                                      int candleLimit) {
        return getCachedCandles(tickers, timeframe, candleLimit, defaultExchange);
    }

    public Map<String, List<Candle>> getCachedCandles(List<String> tickers, String timeframe,
                                                      int candleLimit, String exchange) {
        log.info("üîç –ó–∞–ø—Ä–æ—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π: {} —Ç–∏–∫–µ—Ä–æ–≤, —Ç–∞–π–º—Ñ—Ä–µ–π–º {}, –ª–∏–º–∏—Ç {}",
                tickers.size(), timeframe, candleLimit);

        Map<String, List<Candle>> result = new ConcurrentHashMap<>();
        Map<String, Integer> missingCandlesCount = new ConcurrentHashMap<>();

        long currentTimestamp = System.currentTimeMillis() / 1000;
        long requiredFromTimestamp = calculateFromTimestamp(currentTimestamp, timeframe, candleLimit);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –≤ –∫—ç—à–µ
        for (String ticker : tickers) {
            List<CachedCandle> cachedCandles = cachedCandleRepository
                    .findByTickerTimeframeExchangeFromTimestamp(ticker, timeframe, exchange, requiredFromTimestamp);

            if (cachedCandles.size() >= candleLimit * 0.9) { // –ü—Ä–∏–Ω–∏–º–∞–µ–º 90% –∫–∞–∫ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
                result.put(ticker, cachedCandles.stream()
                        .map(CachedCandle::toCandle)
                        .collect(Collectors.toList()));
                log.debug("‚úÖ –ö—ç—à HIT: {} - {} —Å–≤–µ—á–µ–π –∏–∑ –∫—ç—à–∞", ticker, cachedCandles.size());
            } else {
                int missing = candleLimit - cachedCandles.size();
                missingCandlesCount.put(ticker, missing);
                log.debug("‚ö†Ô∏è –ö—ç—à MISS: {} - –Ω–µ–¥–æ—Å—Ç–∞–µ—Ç {} —Å–≤–µ—á–µ–π", ticker, missing);
            }
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å–≤–µ—á–∏
        if (!missingCandlesCount.isEmpty()) {
            log.info("üîÑ –î–æ–≥—Ä—É–∂–∞–µ–º {} —Ç–∏–∫–µ—Ä–æ–≤ —Å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º–∏ —Å–≤–µ—á–∞–º–∏", missingCandlesCount.size());
            Map<String, List<Candle>> missingCandles = loadMissingCandles(missingCandlesCount,
                    timeframe, exchange, requiredFromTimestamp);
            result.putAll(missingCandles);
        }

        log.info("‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–≤–µ—á–∏: {} —Ç–∏–∫–µ—Ä–æ–≤ (–∫—ç—à: {}, –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {})",
                result.size(), tickers.size() - missingCandlesCount.size(), missingCandlesCount.size());

        return result;
    }

    @Transactional
    public void preloadAllCandles(String exchange) {
        log.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–µ—á–µ–π –¥–ª—è –±–∏—Ä–∂–∏ {}", exchange);

        try {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ SWAP —Ç–∏–∫–µ—Ä—ã
            List<String> allTickers = okxFeignClient.getAllSwapTickers(true);
            log.info("üìä –ù–∞–π–¥–µ–Ω–æ {} SWAP —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏", allTickers.size());

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–∞–π–º—Ñ—Ä–µ–π–º—É
            for (Map.Entry<String, Integer> entry : defaultCachePeriods.entrySet()) {
                String timeframe = entry.getKey();
                int periodDays = entry.getValue();

                log.info("‚è∞ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ {} ({} –¥–Ω–µ–π) –¥–ª—è {} —Ç–∏–∫–µ—Ä–æ–≤",
                        timeframe, periodDays, allTickers.size());

                preloadTimeframeForTickers(allTickers, timeframe, exchange, periodDays);

                // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º–∏
                Thread.sleep(1000);
            }

            log.info("‚úÖ –ü–æ–ª–Ω–∞—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –±–∏—Ä–∂–∏ {}", exchange);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–µ: {}", e.getMessage(), e);
        }
    }

    @Transactional
    public void dailyCandlesUpdate(String exchange) {
        log.info("üîÑ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–µ—á–µ–π –¥–ª—è –±–∏—Ä–∂–∏ {}", exchange);

        try {
            List<String> cachedTickers = cachedCandleRepository.findDistinctTickersByExchange(exchange);
            log.info("üìä –û–±–Ω–æ–≤–ª—è–µ–º {} —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ –∫—ç—à–∞", cachedTickers.size());

            long currentTimestamp = System.currentTimeMillis() / 1000;
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 48 —á–∞—Å–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            long updateFromTimestamp = currentTimestamp - (48 * 3600);

            for (String timeframe : defaultCachePeriods.keySet()) {
                log.info("‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ {} –¥–ª—è {} —Ç–∏–∫–µ—Ä–æ–≤", timeframe, cachedTickers.size());

                updateCandlesForTickers(cachedTickers, timeframe, exchange, updateFromTimestamp);

                Thread.sleep(500);
            }

            // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–≤–µ—á–µ–π
            cleanupOldCandles(exchange);

            log.info("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è –±–∏—Ä–∂–∏ {}", exchange);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {}", e.getMessage(), e);
        }
    }

    public Map<String, Object> getCacheStatistics(String exchange) {
        Map<String, Object> stats = new HashMap<>();

        try {
            List<Object[]> rawStats = cachedCandleRepository.getCacheStatistics();
            Map<String, Map<String, Long>> exchangeStats = new HashMap<>();

            for (Object[] row : rawStats) {
                String ex = (String) row[0];
                String tf = (String) row[1];
                Long count = (Long) row[2];

                exchangeStats.computeIfAbsent(ex, k -> new HashMap<>()).put(tf, count);
            }

            stats.put("byExchange", exchangeStats);

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–∏—Ä–∂–∏
            if (exchange != null) {
                List<String> tickers = cachedCandleRepository.findDistinctTickersByExchange(exchange);
                stats.put("totalTickers", tickers.size());

                Map<String, Long> timeframeStats = new HashMap<>();
                for (String timeframe : defaultCachePeriods.keySet()) {
                    Long count = cachedCandleRepository.countByTickerTimeframeExchange("", timeframe, exchange);
                    timeframeStats.put(timeframe, count);
                }
                stats.put("timeframeStats", timeframeStats);
            }

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞: {}", e.getMessage(), e);
            stats.put("error", e.getMessage());
        }

        return stats;
    }

    private void preloadTimeframeForTickers(List<String> tickers, String timeframe,
                                            String exchange, int periodDays) {
        long currentTimestamp = System.currentTimeMillis() / 1000;
        int candleLimit = calculateCandleLimit(timeframe, periodDays);

        log.info("üìà –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ {} —Å–≤–µ—á–µ–π —Ç–∏–ø–∞ {} –¥–ª—è {} —Ç–∏–∫–µ—Ä–æ–≤",
                candleLimit, timeframe, tickers.size());

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∏–∫–µ—Ä—ã –±–∞—Ç—á–∞–º–∏ –ø–æ 20 —à—Ç—É–∫
        int batchSize = 20;
        for (int i = 0; i < tickers.size(); i += batchSize) {
            List<String> batch = tickers.subList(i, Math.min(i + batchSize, tickers.size()));

            try {
                Map<String, List<Candle>> candlesMap = loadCandlesForBatch(batch, timeframe, candleLimit);

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                for (Map.Entry<String, List<Candle>> entry : candlesMap.entrySet()) {
                    String ticker = entry.getKey();
                    List<Candle> candles = entry.getValue();

                    saveCandlesToCache(ticker, timeframe, exchange, candles);
                }

                log.debug("‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω –±–∞—Ç—á {}-{} –∏–∑ {} —Ç–∏–∫–µ—Ä–æ–≤", i + 1,
                        Math.min(i + batchSize, tickers.size()), tickers.size());

                // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                Thread.sleep(200);

            } catch (Exception e) {
                log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞ {}-{}: {}", i + 1,
                        Math.min(i + batchSize, tickers.size()), e.getMessage());
            }
        }
    }

    private void updateCandlesForTickers(List<String> tickers, String timeframe,
                                         String exchange, long fromTimestamp) {
        // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ preloadTimeframeForTickers, –Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–≤–µ—á–µ–π
        int batchSize = 20;
        for (int i = 0; i < tickers.size(); i += batchSize) {
            List<String> batch = tickers.subList(i, Math.min(i + batchSize, tickers.size()));

            try {
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ —Å–≤–µ—á–µ–π –Ω—É–∂–Ω–æ –¥–ª—è 48 —á–∞—Å–æ–≤
                int candleLimit = calculateCandleLimit(timeframe, 2); // 2 –¥–Ω—è

                Map<String, List<Candle>> candlesMap = loadCandlesForBatch(batch, timeframe, candleLimit);

                for (Map.Entry<String, List<Candle>> entry : candlesMap.entrySet()) {
                    String ticker = entry.getKey();
                    List<Candle> candles = entry.getValue();

                    updateCandlesInCache(ticker, timeframe, exchange, candles, fromTimestamp);
                }

                Thread.sleep(100);

            } catch (Exception e) {
                log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞—Ç—á–∞: {}", e.getMessage());
            }
        }
    }

    private Map<String, List<Candle>> loadMissingCandles(Map<String, Integer> missingCandlesCount,
                                                         String timeframe, String exchange,
                                                         long requiredFromTimestamp) {
        Map<String, List<Candle>> result = new HashMap<>();

        try {
            List<String> tickersToLoad = new ArrayList<>(missingCandlesCount.keySet());
            int maxCandleLimit = missingCandlesCount.values().stream()
                    .mapToInt(Integer::intValue).max().orElse(100);

            Map<String, List<Candle>> loadedCandles = loadCandlesForBatch(tickersToLoad, timeframe, maxCandleLimit);

            for (Map.Entry<String, List<Candle>> entry : loadedCandles.entrySet()) {
                String ticker = entry.getKey();
                List<Candle> candles = entry.getValue();

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                saveCandlesToCache(ticker, timeframe, exchange, candles);

                result.put(ticker, candles);
            }

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Å–≤–µ—á–µ–π: {}", e.getMessage(), e);
        }

        return result;
    }

    @Transactional
    private void saveCandlesToCache(String ticker, String timeframe, String exchange,
                                    List<Candle> candles) {
        try {
            List<CachedCandle> cachedCandles = candles.stream()
                    .map(candle -> CachedCandle.fromCandle(candle, ticker, timeframe, exchange))
                    .collect(Collectors.toList());

            // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–≤–µ—á–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–∫–µ—Ä–∞/—Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
            cachedCandleRepository.deleteByTickerTimeframeExchange(ticker, timeframe, exchange);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ
            cachedCandleRepository.saveAll(cachedCandles);

            log.debug("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {} —Å–≤–µ—á–µ–π –¥–ª—è {}/{}/{}",
                    cachedCandles.size(), ticker, timeframe, exchange);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤–µ—á–µ–π –≤ –∫—ç—à –¥–ª—è {}: {}", ticker, e.getMessage());
        }
    }

    @Transactional
    private void updateCandlesInCache(String ticker, String timeframe, String exchange,
                                      List<Candle> candles, long fromTimestamp) {
        try {
            // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–µ—á–∏ –Ω–∞—á–∏–Ω–∞—è —Å fromTimestamp
            List<CachedCandle> existingCandles = cachedCandleRepository
                    .findByTickerAndTimeframeAndExchangeOrderByTimestampAsc(ticker, timeframe, exchange);

            List<CachedCandle> toDelete = existingCandles.stream()
                    .filter(cc -> cc.getTimestamp() >= fromTimestamp)
                    .collect(Collectors.toList());

            if (!toDelete.isEmpty()) {
                cachedCandleRepository.deleteAll(toDelete);
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–≤–µ—á–∏
            List<CachedCandle> newCandles = candles.stream()
                    .filter(candle -> candle.getTimestamp() >= fromTimestamp)
                    .map(candle -> CachedCandle.fromCandle(candle, ticker, timeframe, exchange))
                    .collect(Collectors.toList());

            if (!newCandles.isEmpty()) {
                cachedCandleRepository.saveAll(newCandles);
            }

            log.debug("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ {} —Å–≤–µ—á–µ–π –¥–ª—è {}/{}", newCandles.size(), ticker, timeframe);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–µ—á–µ–π –≤ –∫—ç—à–µ –¥–ª—è {}: {}", ticker, e.getMessage());
        }
    }

    private void cleanupOldCandles(String exchange) {
        log.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è –±–∏—Ä–∂–∏ {}", exchange);

        try {
            for (Map.Entry<String, Integer> entry : defaultCachePeriods.entrySet()) {
                String timeframe = entry.getKey();
                int periodDays = entry.getValue();

                long cutoffTimestamp = System.currentTimeMillis() / 1000 - (periodDays * 24 * 3600);
                cachedCandleRepository.deleteOldCandlesByExchangeTimeframe(exchange, timeframe, cutoffTimestamp);

                log.debug("üóëÔ∏è –£–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ —Å–≤–µ—á–∏ {} —Å—Ç–∞—Ä—à–µ {} –¥–Ω–µ–π", timeframe, periodDays);
            }

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–≤–µ—á–µ–π: {}", e.getMessage(), e);
        }
    }

    private long calculateFromTimestamp(long currentTimestamp, String timeframe, int candleLimit) {
        int timeframeSeconds = getTimeframeInSeconds(timeframe);
        return currentTimestamp - (candleLimit * timeframeSeconds);
    }

    private int calculateCandleLimit(String timeframe, int periodDays) {
        return switch (timeframe) {
            case "1m" -> periodDays * 24 * 60;
            case "5m" -> periodDays * 24 * 12;
            case "15m" -> periodDays * 24 * 4;
            case "1H" -> periodDays * 24;
            case "4H" -> periodDays * 6;
            case "1D" -> periodDays;
            case "1W" -> periodDays / 7;
            case "1M" -> periodDays / 30;
            default -> periodDays * 24; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞–∫ 1H
        };
    }

    private int getTimeframeInSeconds(String timeframe) {
        return switch (timeframe) {
            case "1m" -> 60;
            case "5m" -> 300;
            case "15m" -> 900;
            case "1H" -> 3600;
            case "4H" -> 14400;
            case "1D" -> 86400;
            case "1W" -> 604800;
            case "1M" -> 2592000; // –ø—Ä–∏–º–µ—Ä–Ω–æ 30 –¥–Ω–µ–π
            default -> 3600;
        };
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–≤–µ—á–∏ –¥–ª—è –±–∞—Ç—á–∞ —Ç–∏–∫–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É—è –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã OkxFeignClient
     */
    private Map<String, List<Candle>> loadCandlesForBatch(List<String> tickers, String timeframe, int candleLimit) {
        Map<String, List<Candle>> result = new HashMap<>();

        try {
            if (candleLimit <= 300) {
                // –ü—Ä–æ—Å—Ç–æ–π —Å–ª—É—á–∞–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥
                result = okxFeignClient.getCandlesMap(tickers, timeframe, candleLimit, false);
            } else {
                // –°–ª–æ–∂–Ω—ã–π —Å–ª—É—á–∞–π - –Ω—É–∂–Ω–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–∫–µ—Ä–∞
                for (String ticker : tickers) {
                    try {
                        List<Candle> candlesForTicker = loadCandlesWithPagination(ticker, timeframe, candleLimit);
                        if (!candlesForTicker.isEmpty()) {
                            result.put(ticker, candlesForTicker);
                        }

                        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                        Thread.sleep(150);

                    } catch (Exception e) {
                        log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–µ—á–µ–π –¥–ª—è {}: {}", ticker, e.getMessage());
                    }
                }
            }

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞—Ç—á–∞ —Å–≤–µ—á–µ–π: {}", e.getMessage(), e);
        }

        return result;
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–≤–µ—á–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞
     */
    private List<Candle> loadCandlesWithPagination(String ticker, String timeframe, int totalLimit) {
        List<Candle> allCandles = new ArrayList<>();
        int batchSize = 300; // –ú–∞–∫—Å–∏–º—É–º –¥–ª—è OKX API
        Long beforeTimestamp = null;

        try {
            while (allCandles.size() < totalLimit) {
                int remainingCandles = totalLimit - allCandles.size();
                int currentBatchSize = Math.min(batchSize, remainingCandles);

                List<Candle> batchCandles;
                if (beforeTimestamp == null) {
                    // –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å - –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏
                    batchCandles = okxFeignClient.getCandles(ticker, timeframe, currentBatchSize);
                } else {
                    // –ü–æ—Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
                    batchCandles = okxFeignClient.getCandlesBefore(ticker, timeframe, currentBatchSize, beforeTimestamp);
                }

                if (batchCandles == null || batchCandles.isEmpty()) {
                    break; // –ë–æ–ª—å—à–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
                }

                allCandles.addAll(batchCandles);

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º timestamp –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                beforeTimestamp = batchCandles.get(batchCandles.size() - 1).getTimestamp();

                // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è rate limit
                Thread.sleep(120);

                log.debug("üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {} —Å–≤–µ—á–µ–π –¥–ª—è {} (–≤—Å–µ–≥–æ: {})",
                        batchCandles.size(), ticker, allCandles.size());
            }

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
            allCandles.sort(Comparator.comparing(Candle::getTimestamp));

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–≤–µ—á–µ–π –¥–ª—è {}: {}", ticker, e.getMessage(), e);
        }

        return allCandles;
    }
}