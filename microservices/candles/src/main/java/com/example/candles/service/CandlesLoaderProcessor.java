package com.example.candles.service;

import com.example.candles.client.OkxFeignClient;
import com.example.candles.utils.CandleCalculatorUtil;
import com.example.shared.dto.Candle;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.time.Instant;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * –°–µ—Ä–≤–∏—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–µ—á–µ–π —Å OKX –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
 * <p>
 * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
 * - –±–∏—Ä–∂–∞ (exchange)
 * - —Ç–∏–∫–µ—Ä (ticker)
 * - –¥–∞—Ç–∞ –î–û (untilDate) - –æ–±—Ä–µ–∑–∞–Ω–Ω–∞—è –¥–æ –Ω–∞—á–∞–ª–∞ –¥–Ω—è
 * - —Ç–∞–π–º—Ñ—Ä–µ–π–º (timeframe) –≤ —Ñ–æ—Ä–º–∞—Ç–µ 1H, 1D, 1m...
 * - –ø–µ—Ä–∏–æ–¥ (period) –≤ –≤–∏–¥–µ "1year", "6months"...
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class CandlesLoaderProcessor {

    private final OkxFeignClient okxFeignClient;
    private final CandleTransactionService candleTransactionService;

    /**
     * –ì–ª–∞–≤–Ω—ã–π –ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–µ—á–µ–π —Å OKX –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
     */
    public int loadAndSaveCandles(String exchange, String ticker, String untilDate, String timeframe, String period) {
        log.info("üöÄ –ó–ê–ì–†–£–ó–ö–ê –°–í–ï–ß–ï–ô: –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {} –Ω–∞ –±–∏—Ä–∂–µ {}", ticker, exchange);
        log.info("üìä –ü–ê–†–ê–ú–ï–¢–†–´: untilDate={}, timeframe={}, period={}", untilDate, timeframe, period);

        try {
            // –®–∞–≥ 1: –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            int candlesCount = calculateCandlesCount(timeframe, period);
            log.info("üìà –†–ê–°–ß–ï–¢: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å {} —Å–≤–µ—á–µ–π –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ {} —Å —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–º {}",
                    candlesCount, period, timeframe);

            // –®–∞–≥ 2: –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ—á–∏ —Å OKX
            List<Candle> candles = loadCandlesFromOkxWithPagination(ticker, timeframe, candlesCount);
            if (candles == null || candles.isEmpty()) {
                log.error("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–µ—á–∏ –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}", ticker);
                return 0;
            }

            // –®–∞–≥ 3: –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π
            if (!candles.isEmpty()) {
                long actualOldest = candles.get(0).getTimestamp();
                long actualNewest = candles.get(candles.size() - 1).getTimestamp();
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
                long oldestTimestamp = Math.min(actualOldest, actualNewest);
                long newestTimestamp = Math.max(actualOldest, actualNewest);
                
                log.info("üìÖ –§–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –î–ò–ê–ü–ê–ó–û–ù –ó–ê–ì–†–£–ñ–ï–ù–ù–´–• –°–í–ï–ß–ï–ô: {} - {}", 
                        formatTimestamp(oldestTimestamp), formatTimestamp(newestTimestamp));
                
                // –†–∞—Å—Å—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø–æ–∫—Ä—ã–≤–∞—é—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                long daysCovered = (newestTimestamp - oldestTimestamp) / (24 * 60 * 60 * 1000L);
                log.info("‚è∞ –ü–û–ö–†–´–¢–ò–ï: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ {} —Å–≤–µ—á–µ–π –ø–æ–∫—Ä—ã–≤–∞—é—Ç {} –¥–Ω–µ–π", candles.size(), daysCovered);
            }

            // –®–∞–≥ 4: –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            boolean isValid = validateLoadedCandles(candles, untilDate, timeframe, period, candlesCount);
            if (!isValid) {
                log.error("‚ùå –í–ê–õ–ò–î–ê–¶–ò–Ø: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–≤–µ—á–∏ –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}", ticker);
                return 0;
            }

            // –®–∞–≥ 5: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–µ—á–∏ –≤ –ë–î
            int savedCount = saveCandlesToDatabase(ticker, timeframe, exchange, candles);

            log.info("‚úÖ –ó–ê–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê: –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {} —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {} –≤ –ë–î", savedCount, ticker);
            return savedCount;

        } catch (Exception e) {
            log.error("üí• –û–®–ò–ë–ö–ê –ó–ê–ì–†–£–ó–ö–ò: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}: {}", ticker, e.getMessage(), e);
            return 0;
        }
    }

    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –∏—Å—Ö–æ–¥—è –∏–∑ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –∏ –ø–µ—Ä–∏–æ–¥–∞
     */
    private int calculateCandlesCount(String timeframe, String period) {
        return CandleCalculatorUtil.calculateCandlesCount(timeframe, period);
    }


    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–≤–µ—á–∏ —Å OKX —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π (–ø–æ 300 —Å–≤–µ—á–µ–π –∑–∞ –∑–∞–ø—Ä–æ—Å)
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç beforeTimestamp –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
     */
    private List<Candle> loadCandlesFromOkx(String ticker, String timeframe, int candlesCount) {
        log.info("üì° OKX –ó–ê–ü–†–û–°: –ó–∞–≥—Ä—É–∂–∞–µ–º {} —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {} —Å —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–º {} (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π)",
                candlesCount, ticker, timeframe);

        final int MAX_CANDLES_PER_REQUEST = 300;
        List<Candle> allCandles = new ArrayList<>();
        Long beforeTimestamp = null; // –î–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏

        try {
            // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –º–µ–Ω—å—à–µ 300 —Å–≤–µ—á–µ–π - –¥–µ–ª–∞–µ–º –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
            if (candlesCount <= MAX_CANDLES_PER_REQUEST) {
                List<Candle> candles = okxFeignClient.getCandles(ticker, timeframe, candlesCount);
                if (candles != null) {
                    allCandles.addAll(candles);
                    log.info("‚úÖ OKX –û–¢–í–ï–¢: –ü–æ–ª—É—á–µ–Ω–æ {} —Å–≤–µ—á–µ–π –∑–∞ 1 –∑–∞–ø—Ä–æ—Å", candles.size());
                }
                return allCandles;
            }

            // –î–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ - –ø–∞–≥–∏–Ω–∞—Ü–∏—è
            int remainingCandles = candlesCount;
            int requestNumber = 1;
            int emptyRequestsCount = 0; // –°—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –±–µ–∑ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö

            while (remainingCandles > 0 && allCandles.size() < candlesCount) {
                int requestSize = Math.min(MAX_CANDLES_PER_REQUEST, remainingCandles);

                log.info("üì° OKX –ó–ê–ü–†–û–° #{}: –ó–∞–≥—Ä—É–∂–∞–µ–º {} —Å–≤–µ—á–µ–π (–æ—Å—Ç–∞–ª–æ—Å—å {})",
                        requestNumber, requestSize, remainingCandles);

                List<Candle> batchCandles = okxFeignClient.getCandles(ticker, timeframe, requestSize);

                if (batchCandles == null || batchCandles.isEmpty()) {
                    log.warn("‚ö†Ô∏è OKX –ó–ê–ü–†–û–° #{}: –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É", requestNumber);
                    break;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã —Å —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —Å–≤–µ—á–∞–º–∏
                List<Candle> newCandles = filterDuplicates(allCandles, batchCandles);
                allCandles.addAll(newCandles);

                log.info("‚úÖ OKX –ó–ê–ü–†–û–° #{}: –ü–æ–ª—É—á–µ–Ω–æ {} —Å–≤–µ—á–µ–π (–¥–æ–±–∞–≤–ª–µ–Ω–æ {} –Ω–æ–≤—ã—Ö, –≤—Å–µ–≥–æ {})",
                        requestNumber, batchCandles.size(), newCandles.size(), allCandles.size());

                // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ —Å–≤–µ—á–µ–π —á–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ - –∑–Ω–∞—á–∏—Ç –¥–∞–Ω–Ω—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç
                if (batchCandles.size() < requestSize) {
                    log.info("‚ÑπÔ∏è OKX –õ–ò–ú–ò–¢: –ü–æ–ª—É—á–µ–Ω–æ {} —Å–≤–µ—á–µ–π –∏–∑ {}, –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å",
                            batchCandles.size(), requestSize);
                    break;
                }
                
                // –ö–†–ò–¢–ò–ß–ù–û: –ï—Å–ª–∏ –Ω–æ–≤—ã—Ö —Å–≤–µ—á–µ–π –Ω–µ—Ç - API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã
                if (newCandles.isEmpty()) {
                    emptyRequestsCount++;
                    log.warn("‚ö†Ô∏è OKX –î–£–ë–õ–ò–ö–ê–¢–´: API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ –∂–µ –¥–∞–Ω–Ω—ã–µ (–ø–æ–ø—ã—Ç–∫–∞ {}/3)", emptyRequestsCount);
                    
                    // –ü–æ—Å–ª–µ 3 –∑–∞–ø—Ä–æ—Å–æ–≤ –±–µ–∑ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö - –∑–∞–≤–µ—Ä—à–∞–µ–º
                    if (emptyRequestsCount >= 3) {
                        log.warn("‚ö†Ô∏è OKX –ó–ê–í–ï–†–®–ï–ù–ò–ï: 3 –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥—Ä—è–¥ –±–µ–∑ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É");
                        break;
                    }
                } else {
                    emptyRequestsCount = 0; // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                }

                remainingCandles -= newCandles.size();
                requestNumber++;

                // –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
                if (requestNumber > 200) {
                    log.warn("‚ö†Ô∏è –ó–ê–©–ò–¢–ê: –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 200 –∑–∞–ø—Ä–æ—Å–æ–≤, –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É");
                    break;
                }

                // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
                Thread.sleep(100);
            }

            log.info("‚úÖ OKX –ò–¢–û–ì: –ó–∞–≥—Ä—É–∂–µ–Ω–æ {} —Å–≤–µ—á–µ–π –∑–∞ {} –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}",
                    allCandles.size(), requestNumber - 1, ticker);

            return allCandles;

        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            log.error("‚ùå OKX –ü–†–ï–†–í–ê–ù–û: –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}", ticker);
            return allCandles; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á—Ç–æ —É—Å–ø–µ–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å
        } catch (Exception e) {
            log.error("‚ùå OKX –û–®–ò–ë–ö–ê: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}: {}", ticker, e.getMessage(), e);
            return allCandles; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á—Ç–æ —É—Å–ø–µ–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å
        }
    }

    /**
     * –§–∏–ª—å—Ç—Ä—É–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã —Å–≤–µ—á–µ–π –ø–æ timestamp
     */
    private List<Candle> filterDuplicates(List<Candle> existingCandles, List<Candle> newCandles) {
        if (existingCandles.isEmpty()) {
            return new ArrayList<>(newCandles);
        }

        Set<Long> existingTimestamps = existingCandles.stream()
                .map(Candle::getTimestamp)
                .collect(Collectors.toCollection(HashSet::new));

        return newCandles.stream()
                .filter(candle -> !existingTimestamps.contains(candle.getTimestamp()))
                .collect(Collectors.toList());
    }

    /**
     * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–≤–µ—á–∏
     */
    private boolean validateLoadedCandles(List<Candle> candles, String untilDate, String timeframe, String period, int expectedCount) {
        log.info("üîç –í–ê–õ–ò–î–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º {} —Å–≤–µ—á–µ–π", candles.size());

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
        if (candles.size() != expectedCount) {
            log.warn("‚ö†Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø –ö–û–õ–ò–ß–ï–°–¢–í–ê: –û–∂–∏–¥–∞–ª–æ—Å—å {} —Å–≤–µ—á–µ–π, –ø–æ–ª—É—á–µ–Ω–æ {}. –ú–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.",
                    expectedCount, candles.size());
            // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º, –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –±–∏—Ä–∂–µ
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
        if (candles.size() >= 2) {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤–µ–π—à—É—é –∏ —Å—Ç–∞—Ä–µ–π—à—É—é —Å–≤–µ—á–∏ –ø–æ timestamp
            long firstTimestamp = candles.get(0).getTimestamp();
            long lastTimestamp = candles.get(candles.size() - 1).getTimestamp();

            // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∞—è —Å–≤–µ—á–∞ –Ω–æ–≤–µ–µ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é timestamp
            long newestTime = Math.max(firstTimestamp, lastTimestamp);
            long oldestTime = Math.min(firstTimestamp, lastTimestamp);

            log.info("üìÖ –í–†–ï–ú–ï–ù–ù–û–ô –î–ò–ê–ü–ê–ó–û–ù: {} - {}",
                    formatTimestamp(oldestTime), formatTimestamp(newestTime));

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–µ–π—à–∞—è —Å–≤–µ—á–∞ –ø—Ä–∏–º–µ—Ä–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç untilDate
            try {
                long untilTimestamp = Instant.parse(untilDate).toEpochMilli();
                long timeDiff = Math.abs(newestTime - untilTimestamp);
                long maxAllowedDiff = getMaxAllowedTimeDifference(timeframe);

                if (timeDiff > maxAllowedDiff) {
                    log.warn("‚ö†Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø –í–†–ï–ú–ï–ù–ò: –ù–æ–≤–µ–π—à–∞—è —Å–≤–µ—á–∞ {} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π –¥–∞—Ç–µ {} (—Ä–∞–∑–Ω–∏—Ü–∞ {} –º—Å)",
                            formatTimestamp(newestTime), untilDate, timeDiff);
                }

            } catch (Exception e) {
                log.warn("‚ö†Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø –í–†–ï–ú–ï–ù–ò: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã {}: {}", untilDate, e.getMessage());
            }
        }

        log.info("‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê: –°–≤–µ—á–∏ –ø—Ä–æ—à–ª–∏ –±–∞–∑–æ–≤—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é");
        return true;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—É—é —Ä–∞–∑–Ω–æ—Å—Ç—å –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
     */
    private long getMaxAllowedTimeDifference(String timeframe) {
        return switch (timeframe.toLowerCase()) {
            case "1m" -> 60 * 1000L;           // 1 –º–∏–Ω—É—Ç–∞
            case "5m" -> 5 * 60 * 1000L;       // 5 –º–∏–Ω—É—Ç
            case "15m" -> 15 * 60 * 1000L;     // 15 –º–∏–Ω—É—Ç
            case "1h" -> 60 * 60 * 1000L;      // 1 —á–∞—Å
            case "4h" -> 4 * 60 * 60 * 1000L;  // 4 —á–∞—Å–∞
            case "1d" -> 24 * 60 * 60 * 1000L; // 1 –¥–µ–Ω—å
            default -> 60 * 60 * 1000L;        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —á–∞—Å
        };
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–≤–µ—á–∏ –≤ –ë–î —á–µ—Ä–µ–∑ CandleTransactionService
     */
    private int saveCandlesToDatabase(String ticker, String timeframe, String exchange, List<Candle> candles) {
        log.info("üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º {} —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {} –≤ –ë–î", candles.size(), ticker);

        try {
            int savedCount = candleTransactionService.saveCandlesToCache(ticker, timeframe, exchange, candles);
            log.info("‚úÖ –ë–î –°–û–•–†–ê–ù–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {} —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}", savedCount, ticker);
            return savedCount;

        } catch (Exception e) {
            log.error("‚ùå –ë–î –û–®–ò–ë–ö–ê: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}: {}", ticker, e.getMessage(), e);
            return 0;
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç timestamp –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
     */
    private String formatTimestamp(long timestamp) {
        try {
            if (timestamp > 9999999999L) {
                // –ú–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
                return Instant.ofEpochMilli(timestamp).toString();
            } else {
                // –°–µ–∫—É–Ω–¥—ã
                return Instant.ofEpochSecond(timestamp).toString();
            }
        } catch (Exception e) {
            return String.valueOf(timestamp);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–≤–µ—á–∏ —Å OKX —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ beforeTimestamp
     */
    private List<Candle> loadCandlesFromOkxWithPagination(String ticker, String timeframe, int candlesCount) {
        log.info("üì° OKX –ó–ê–ü–†–û–°: –ó–∞–≥—Ä—É–∂–∞–µ–º {} —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {} —Å —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–º {} (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π beforeTimestamp)",
                candlesCount, ticker, timeframe);

        final int MAX_CANDLES_PER_REQUEST = 300;
        List<Candle> allCandles = new ArrayList<>();
        Long beforeTimestamp = null; // –î–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏

        try {
            // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –º–µ–Ω—å—à–µ 300 —Å–≤–µ—á–µ–π - –¥–µ–ª–∞–µ–º –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
            if (candlesCount <= MAX_CANDLES_PER_REQUEST) {
                List<Candle> candles = okxFeignClient.getCandles(ticker, timeframe, candlesCount);
                if (candles != null) {
                    allCandles.addAll(candles);
                    log.info("‚úÖ OKX –û–¢–í–ï–¢: –ü–æ–ª—É—á–µ–Ω–æ {} —Å–≤–µ—á–µ–π –∑–∞ 1 –∑–∞–ø—Ä–æ—Å", candles.size());
                }
                return allCandles;
            }

            // –î–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ - –ø–∞–≥–∏–Ω–∞—Ü–∏—è —Å beforeTimestamp
            int loadedCount = 0;
            int requestNumber = 1;

            while (loadedCount < candlesCount) {
                int remainingCandles = candlesCount - loadedCount;
                int requestSize = Math.min(MAX_CANDLES_PER_REQUEST, remainingCandles);

                log.info("üì° OKX –ó–ê–ü–†–û–° #{}: –ó–∞–≥—Ä—É–∂–∞–µ–º {} —Å–≤–µ—á–µ–π (–∑–∞–≥—Ä—É–∂–µ–Ω–æ {}/{})",
                        requestNumber, requestSize, loadedCount, candlesCount);

                List<Candle> batchCandles;
                if (beforeTimestamp == null) {
                    // –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å - –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏
                    batchCandles = okxFeignClient.getCandles(ticker, timeframe, requestSize);
                } else {
                    // –ü–æ—Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
                    batchCandles = okxFeignClient.getCandlesBefore(ticker, timeframe, requestSize, beforeTimestamp);
                }

                if (batchCandles == null || batchCandles.isEmpty()) {
                    log.info("‚ÑπÔ∏è OKX –ó–ê–í–ï–†–®–ï–ù–ò–ï: –ë–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –Ω–∞ {} –∑–∞–ø—Ä–æ—Å–µ", requestNumber);
                    break;
                }

                allCandles.addAll(batchCandles);
                loadedCount += batchCandles.size();

                log.info("‚úÖ OKX –ó–ê–ü–†–û–° #{}: –ü–æ–ª—É—á–µ–Ω–æ {} —Å–≤–µ—á–µ–π (–≤—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {}/{})",
                        requestNumber, batchCandles.size(), loadedCount, candlesCount);

                // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ —Å–≤–µ—á–µ–π —á–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ - –∑–Ω–∞—á–∏—Ç –¥–∞–Ω–Ω—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç
                if (batchCandles.size() < requestSize) {
                    log.info("‚ÑπÔ∏è OKX –õ–ò–ú–ò–¢: –ü–æ–ª—É—á–µ–Ω–æ {} —Å–≤–µ—á–µ–π –∏–∑ {}, –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å",
                            batchCandles.size(), requestSize);
                    break;
                }

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º timestamp –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (—Å–∞–º–∞—è —Å—Ç–∞—Ä–∞—è —Å–≤–µ—á–∞ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –±–∞—Ç—á–∞)
                beforeTimestamp = batchCandles.get(batchCandles.size() - 1).getTimestamp();
                requestNumber++;

                // –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
                if (requestNumber > 200) {
                    log.warn("‚ö†Ô∏è –ó–ê–©–ò–¢–ê: –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 200 –∑–∞–ø—Ä–æ—Å–æ–≤, –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É");
                    break;
                }

                // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è rate limit
                Thread.sleep(120);
            }

            log.info("‚úÖ OKX –ò–¢–û–ì: –ó–∞–≥—Ä—É–∂–µ–Ω–æ {} —Å–≤–µ—á–µ–π –∑–∞ {} –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}",
                    allCandles.size(), requestNumber - 1, ticker);

            return allCandles;

        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            log.error("‚ùå OKX –ü–†–ï–†–í–ê–ù–û: –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}", ticker);
            return allCandles; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á—Ç–æ —É—Å–ø–µ–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å
        } catch (Exception e) {
            log.error("‚ùå OKX –û–®–ò–ë–ö–ê: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}: {}", ticker, e.getMessage(), e);
            return allCandles; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á—Ç–æ —É—Å–ø–µ–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å
        }
    }
}