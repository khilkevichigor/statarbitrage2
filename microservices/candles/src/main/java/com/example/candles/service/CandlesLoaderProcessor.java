package com.example.candles.service;

import com.example.candles.client.OkxFeignClient;
import com.example.shared.dto.Candle;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.time.Instant;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * –°–µ—Ä–≤–∏—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–µ—á–µ–π —Å OKX –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
 * 
 * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
 * - –±–∏—Ä–∂–∞ (exchange)
 * - —Ç–∏–∫–µ—Ä (ticker) 
 * - –¥–∞—Ç–∞ –î–û (untilDate) - –æ–±—Ä–µ–∑–∞–Ω–Ω–∞—è –¥–æ –Ω–∞—á–∞–ª–∞ –¥–Ω—è
 * - —Ç–∞–π–º—Ñ—Ä–µ–π–º (timeframe) –≤ —Ñ–æ—Ä–º–∞—Ç–µ 1H, 1D, 1m...
 * - –ø–µ—Ä–∏–æ–¥ (period) –≤ –≤–∏–¥–µ "1year", "6months"...
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class CandlesLoaderProcessor {
    
    private final OkxFeignClient okxFeignClient;
    private final CandleTransactionService candleTransactionService;
    
    /**
     * –ì–ª–∞–≤–Ω—ã–π –ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–µ—á–µ–π —Å OKX –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
     */
    public int loadAndSaveCandles(String exchange, String ticker, String untilDate, String timeframe, String period) {
        log.info("üöÄ –ó–ê–ì–†–£–ó–ö–ê –°–í–ï–ß–ï–ô: –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {} –Ω–∞ –±–∏—Ä–∂–µ {}", ticker, exchange);
        log.info("üìä –ü–ê–†–ê–ú–ï–¢–†–´: untilDate={}, timeframe={}, period={}", untilDate, timeframe, period);
        
        try {
            // –®–∞–≥ 1: –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            int candlesCount = calculateCandlesCount(timeframe, period);
            log.info("üìà –†–ê–°–ß–ï–¢: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å {} —Å–≤–µ—á–µ–π –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ {} —Å —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–º {}", 
                    candlesCount, period, timeframe);
            
            // –®–∞–≥ 2: –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ—á–∏ —Å OKX
            List<Candle> candles = loadCandlesFromOkx(ticker, timeframe, candlesCount);
            if (candles == null || candles.isEmpty()) {
                log.error("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–µ—á–∏ –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}", ticker);
                return 0;
            }
            
            // –®–∞–≥ 3: –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            boolean isValid = validateLoadedCandles(candles, untilDate, timeframe, period, candlesCount);
            if (!isValid) {
                log.error("‚ùå –í–ê–õ–ò–î–ê–¶–ò–Ø: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–≤–µ—á–∏ –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}", ticker);
                return 0;
            }
            
            // –®–∞–≥ 4: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–µ—á–∏ –≤ –ë–î
            int savedCount = saveCandlesToDatabase(ticker, timeframe, exchange, candles);
            
            log.info("‚úÖ –ó–ê–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê: –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {} —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {} –≤ –ë–î", savedCount, ticker);
            return savedCount;
            
        } catch (Exception e) {
            log.error("üí• –û–®–ò–ë–ö–ê –ó–ê–ì–†–£–ó–ö–ò: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}: {}", ticker, e.getMessage(), e);
            return 0;
        }
    }
    
    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –∏—Å—Ö–æ–¥—è –∏–∑ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –∏ –ø–µ—Ä–∏–æ–¥–∞
     */
    private int calculateCandlesCount(String timeframe, String period) {
        log.info("üî¢ –†–ê–°–ß–ï–¢ –°–í–ï–ß–ï–ô: timeframe={}, period={}", timeframe, period);
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø–µ—Ä–∏–æ–¥–µ
        int periodUnits = parsePeriod(period);
        
        // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
        int candlesCount = switch (timeframe) {
            case "1m" -> periodUnits * 365 * 24 * 60;        // –º–∏–Ω—É—Ç—ã –≤ –≥–æ–¥—É
            case "5m" -> periodUnits * 365 * 24 * 12;        // 5-–º–∏–Ω—É—Ç–∫–∏ –≤ –≥–æ–¥—É
            case "15m" -> periodUnits * 365 * 24 * 4;        // 15-–º–∏–Ω—É—Ç–∫–∏ –≤ –≥–æ–¥—É  
            case "1H" -> periodUnits * 365 * 24;             // —á–∞—Å—ã –≤ –≥–æ–¥—É
            case "4H" -> periodUnits * 365 * 6;              // 4-—á–∞—Å–æ–≤–∫–∏ –≤ –≥–æ–¥—É
            case "1D" -> periodUnits * 365;                  // –¥–Ω–∏ –≤ –≥–æ–¥—É
            case "1W" -> periodUnits * 52;                   // –Ω–µ–¥–µ–ª–∏ –≤ –≥–æ–¥—É
            case "1M" -> periodUnits * 12;                   // –º–µ—Å—è—Ü—ã –≤ –≥–æ–¥—É (–µ—Å–ª–∏ —ç—Ç–æ –º–µ—Å—è—á–Ω—ã–π –¢–§)
            default -> {
                log.warn("‚ö†Ô∏è –ù–ï–ò–ó–í–ï–°–¢–ù–´–ô –¢–ê–ô–ú–§–†–ï–ô–ú: {}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—á–µ—Ç –¥–ª—è 1H", timeframe);
                yield periodUnits * 365 * 24;
            }
        };
        
        log.info("‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢ –†–ê–°–ß–ï–¢–ê: {} —Å–≤–µ—á–µ–π –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ {} –ª–µ—Ç —Å —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–º {}", 
                candlesCount, periodUnits, timeframe);
        return candlesCount;
    }
    
    /**
     * –ü–∞—Ä—Å–∏—Ç –ø–µ—Ä–∏–æ–¥ —Ç–∏–ø–∞ "1year", "6months", "30days" –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç
     */
    private int parsePeriod(String period) {
        period = period.toLowerCase().trim();
        
        if (period.contains("1 –≥–æ–¥")) {
            String number = period.replaceAll("[^0-9]", "");
            return Integer.parseInt(number.isEmpty() ? "1" : number);
        } else if (period.contains("–º–µ—Å—è—Ü")) {
            String number = period.replaceAll("[^0-9]", "");
            int months = Integer.parseInt(number.isEmpty() ? "6" : number);
            return Math.max(1, months / 12); // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –≥–æ–¥–∞, –º–∏–Ω–∏–º—É–º 1 –≥–æ–¥
        } else if (period.contains("–¥–µ–Ω—å")) {
            String number = period.replaceAll("[^0-9]", "");
            int days = Integer.parseInt(number.isEmpty() ? "365" : number);
            return Math.max(1, days / 365); // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –≥–æ–¥–∞, –º–∏–Ω–∏–º—É–º 1 –≥–æ–¥
        } else {
            log.warn("‚ö†Ô∏è –ù–ï–ò–ó–í–ï–°–¢–ù–´–ô –ü–ï–†–ò–û–î: {}, –∏—Å–ø–æ–ª—å–∑—É–µ–º 1 –≥–æ–¥", period);
            return 1;
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–≤–µ—á–∏ —Å OKX
     */
    private List<Candle> loadCandlesFromOkx(String ticker, String timeframe, int candlesCount) {
        log.info("üì° OKX –ó–ê–ü–†–û–°: –ó–∞–≥—Ä—É–∂–∞–µ–º {} —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {} —Å —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–º {}", 
                candlesCount, ticker, timeframe);
        
        try {
            List<Candle> candles = okxFeignClient.getCandles(ticker, timeframe, candlesCount);
            
            if (candles != null && !candles.isEmpty()) {
                log.info("‚úÖ OKX –û–¢–í–ï–¢: –ü–æ–ª—É—á–µ–Ω–æ {} —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}", candles.size(), ticker);
            } else {
                log.warn("‚ö†Ô∏è OKX –û–¢–í–ï–¢: –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}", ticker);
            }
            
            return candles;
            
        } catch (Exception e) {
            log.error("‚ùå OKX –û–®–ò–ë–ö–ê: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}: {}", ticker, e.getMessage(), e);
            return null;
        }
    }
    
    /**
     * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–≤–µ—á–∏
     */
    private boolean validateLoadedCandles(List<Candle> candles, String untilDate, String timeframe, String period, int expectedCount) {
        log.info("üîç –í–ê–õ–ò–î–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º {} —Å–≤–µ—á–µ–π", candles.size());
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
        if (candles.size() != expectedCount) {
            log.warn("‚ö†Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø –ö–û–õ–ò–ß–ï–°–¢–í–ê: –û–∂–∏–¥–∞–ª–æ—Å—å {} —Å–≤–µ—á–µ–π, –ø–æ–ª—É—á–µ–Ω–æ {}. –ú–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.", 
                    expectedCount, candles.size());
            // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º, –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –±–∏—Ä–∂–µ
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
        if (candles.size() >= 2) {
            long oldestTime = candles.get(candles.size() - 1).getTimestamp(); // –ü–æ—Å–ª–µ–¥–Ω—è—è = —Å–∞–º–∞—è —Å—Ç–∞—Ä–∞—è
            long newestTime = candles.get(0).getTimestamp(); // –ü–µ—Ä–≤–∞—è = —Å–∞–º–∞—è –Ω–æ–≤–∞—è
            
            log.info("üìÖ –í–†–ï–ú–ï–ù–ù–û–ô –î–ò–ê–ü–ê–ó–û–ù: {} - {}", 
                    formatTimestamp(oldestTime), formatTimestamp(newestTime));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–µ–π—à–∞—è —Å–≤–µ—á–∞ –ø—Ä–∏–º–µ—Ä–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç untilDate
            try {
                long untilTimestamp = Instant.parse(untilDate).toEpochMilli();
                long timeDiff = Math.abs(newestTime - untilTimestamp);
                long maxAllowedDiff = getMaxAllowedTimeDifference(timeframe);
                
                if (timeDiff > maxAllowedDiff) {
                    log.warn("‚ö†Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø –í–†–ï–ú–ï–ù–ò: –ù–æ–≤–µ–π—à–∞—è —Å–≤–µ—á–∞ {} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π –¥–∞—Ç–µ {} (—Ä–∞–∑–Ω–∏—Ü–∞ {} –º—Å)", 
                            formatTimestamp(newestTime), untilDate, timeDiff);
                }
                
            } catch (Exception e) {
                log.warn("‚ö†Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø –í–†–ï–ú–ï–ù–ò: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã {}: {}", untilDate, e.getMessage());
            }
        }
        
        log.info("‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê: –°–≤–µ—á–∏ –ø—Ä–æ—à–ª–∏ –±–∞–∑–æ–≤—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é");
        return true;
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—É—é —Ä–∞–∑–Ω–æ—Å—Ç—å –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
     */
    private long getMaxAllowedTimeDifference(String timeframe) {
        return switch (timeframe.toLowerCase()) {
            case "1m" -> 60 * 1000L;           // 1 –º–∏–Ω—É—Ç–∞
            case "5m" -> 5 * 60 * 1000L;       // 5 –º–∏–Ω—É—Ç
            case "15m" -> 15 * 60 * 1000L;     // 15 –º–∏–Ω—É—Ç
            case "1h" -> 60 * 60 * 1000L;      // 1 —á–∞—Å
            case "4h" -> 4 * 60 * 60 * 1000L;  // 4 —á–∞—Å–∞
            case "1d" -> 24 * 60 * 60 * 1000L; // 1 –¥–µ–Ω—å
            default -> 60 * 60 * 1000L;        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —á–∞—Å
        };
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–≤–µ—á–∏ –≤ –ë–î —á–µ—Ä–µ–∑ CandleTransactionService
     */
    private int saveCandlesToDatabase(String ticker, String timeframe, String exchange, List<Candle> candles) {
        log.info("üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º {} —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {} –≤ –ë–î", candles.size(), ticker);
        
        try {
            int savedCount = candleTransactionService.saveCandlesToCache(ticker, timeframe, exchange, candles);
            log.info("‚úÖ –ë–î –°–û–•–†–ê–ù–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {} —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}", savedCount, ticker);
            return savedCount;
            
        } catch (Exception e) {
            log.error("‚ùå –ë–î –û–®–ò–ë–ö–ê: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}: {}", ticker, e.getMessage(), e);
            return 0;
        }
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç timestamp –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
     */
    private String formatTimestamp(long timestamp) {
        try {
            if (timestamp > 9999999999L) {
                // –ú–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
                return Instant.ofEpochMilli(timestamp).toString();
            } else {
                // –°–µ–∫—É–Ω–¥—ã
                return Instant.ofEpochSecond(timestamp).toString();
            }
        } catch (Exception e) {
            return String.valueOf(timestamp);
        }
    }
}