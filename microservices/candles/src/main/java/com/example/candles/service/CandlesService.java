package com.example.candles.service;

import com.example.candles.client.OkxFeignClient;
import com.example.candles.service.CandleCacheService;
import com.example.shared.dto.Candle;
import com.example.shared.models.Settings;
import com.example.shared.models.Pair;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Slf4j
@Service
@RequiredArgsConstructor
public class CandlesService {

    private final OkxFeignClient okxFeignClient;
    private final CandleCacheService candleCacheService;
    
    @Value("${app.candle-cache.enabled:true}")
    private boolean cacheEnabled;
    
    @Value("${app.candle-cache.default-exchange:OKX}")
    private String defaultExchange;

    public Map<String, List<Candle>> getApplicableCandlesMap(Pair tradingPair, Settings settings) {
        List<String> tickers = List.of(tradingPair.getTickerA(), tradingPair.getTickerB());

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –±–æ–ª—å—à–µ 300 —Å–≤–µ—á–µ–π
        Map<String, List<Candle>> candlesMap;
        if (settings.getCandleLimit() > 300) {
            log.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è {} —Å–≤–µ—á–µ–π –¥–ª—è –ø–∞—Ä—ã {}",
                    (int) settings.getCandleLimit(), tradingPair.getPairName());
            candlesMap = getCandlesExtended(settings, tickers, (int) settings.getCandleLimit());
        } else {
            candlesMap = getCandles(settings, tickers, false);
        }

        validateCandlesLimitAndThrow(candlesMap, settings);
        return candlesMap;
    }

    //todo —Å–¥–µ–ª–∞—Ç—å —É–º–Ω–µ–µ - —á–µ—Ä–µ–∑ –∫—ç—à –∏–ª–∏ –±–¥ - –∑–∞—á–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É —ç—Ç–æ –¥–µ–ª–∞—Ç—å! –µ—Å–ª–∏ –æ–±—ä–µ–º –µ—Å—Ç—å —Ç–æ –º–æ–∂–Ω–æ —Ü–µ–ª—ã–π –¥–µ–Ω—å —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω—É –∏–ª–∏ —á–µ–∫–∞—Ç—å 1—Ä–∞–∑/—á–∞—Å
    public Map<String, List<Candle>> getApplicableCandlesMap(Settings settings, List<String> tradingTickers) {
        List<String> applicableTickers = getApplicableTickers(settings, tradingTickers, "1D", true);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –±–æ–ª—å—à–µ 300 —Å–≤–µ—á–µ–π
        Map<String, List<Candle>> candlesMap;
        if (settings.getCandleLimit() > 300) {
            log.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è {} —Å–≤–µ—á–µ–π –¥–ª—è {} —Ç–∏–∫–µ—Ä–æ–≤",
                    (int) settings.getCandleLimit(), applicableTickers.size());
            candlesMap = getCandlesExtended(settings, applicableTickers, (int) settings.getCandleLimit());
        } else {
            candlesMap = getCandles(settings, applicableTickers, true);
        }

        validateCandlesLimitAndThrow(candlesMap, settings);
        return candlesMap;
    }

    public Map<String, List<Candle>> getCandles(Settings settings, List<String> swapTickers, boolean isSorted) {
        try {
            log.debug("üì° –ó–∞–ø—Ä–æ—Å –∫ OKX –¥–ª—è {} —Ç–∏–∫–µ—Ä–æ–≤ (—Ç–∞–π–º—Ñ—Ä–µ–π–º: {}, –ª–∏–º–∏—Ç: {}, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: {})",
                    swapTickers.size(), settings.getTimeframe(), (int) settings.getCandleLimit(), isSorted);

            Map<String, List<Candle>> result = okxFeignClient.getCandlesMap(swapTickers, settings.getTimeframe(), (int) settings.getCandleLimit(), isSorted);

            log.debug("üìà –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OKX: {} —Ç–∏–∫–µ—Ä–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏", result.size());

            return result;
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OKX —Å–µ—Ä–≤–∏—Å—É: {}", e.getMessage(), e);
            return new HashMap<>();
        }
    }

    private List<String> getApplicableTickers(Settings settings, List<String> tradingTickers, String timeFrame, boolean isSorted) {
        List<String> swapTickers = okxFeignClient.getAllSwapTickers(isSorted);
        List<String> filteredTickers = swapTickers.stream()
                .filter(ticker -> !tradingTickers.contains(ticker))
                .toList();
        double minVolume = settings.isUseMinVolumeFilter() ? settings.getMinVolume() * 1_000_000 : 0.0;
        return okxFeignClient.getValidTickers(filteredTickers, timeFrame, (int) settings.getCandleLimit(), minVolume, isSorted);
    }

    /**
     * –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–≤–µ—á–µ–π —Å —É–º–Ω—ã–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     * –ü–†–ò–û–†–ò–¢–ï–¢ –ö–≠–®–ê: –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω—è–µ—Ç –∏–∑ API
     */
    public Map<String, List<Candle>> getCandlesExtended(Settings settings, List<String> swapTickers, int totalLimit) {
        long requestStartTime = System.currentTimeMillis();
        
        log.info("üéØ –ê–ö-47 –ó–ê–ü–†–û–°: {} —Å–≤–µ—á–µ–π, {} —Ç–∏–∫–µ—Ä–æ–≤, —Ç–∞–π–º—Ñ—Ä–µ–π–º '{}', –∫—ç—à={}", 
                totalLimit, swapTickers.size(), settings.getTimeframe(), cacheEnabled ? "–í–ö–õ" : "–í–´–ö–õ");

        Map<String, List<Candle>> result = new HashMap<>();
        
        try {
            if (cacheEnabled) {
                log.info("üíæ –ö–≠–®–ò–†–û–í–ê–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ –∏–∑ –∫—ç—à–∞ –¥–ª—è {} —Ç–∏–∫–µ—Ä–æ–≤", swapTickers.size());
                
                // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ (—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –¥–æ–≥—Ä—É–∑–∫–æ–π –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö)
                result = candleCacheService.getCachedCandles(swapTickers, settings.getTimeframe(), 
                        totalLimit, defaultExchange);
                
                // –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—ç—à—É
                long cacheHits = result.size();
                int totalCandlesFromCache = result.values().stream().mapToInt(List::size).sum();
                
                log.info("üéØ –ö–≠–®–ê –†–ï–ó–£–õ–¨–¢–ê–¢: {} –∏–∑ {} —Ç–∏–∫–µ—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ, –≤—Å–µ–≥–æ —Å–≤–µ—á–µ–π: {}", 
                        cacheHits, swapTickers.size(), totalCandlesFromCache);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞
                validateCacheResults(result, totalLimit, settings.getTimeframe());
                
            } else {
                log.info("‚ö†Ô∏è –ö–≠–®–ò–†–û–í–ê–ù–ò–ï –û–¢–ö–õ–Æ–ß–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ API");
                result = getCandlesDirectFromAPI(settings, swapTickers, totalLimit);
            }
            
            // –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            long requestDuration = System.currentTimeMillis() - requestStartTime;
            logFinalResults(result, totalLimit, requestDuration, cacheEnabled);
            
        } catch (Exception e) {
            log.error("üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ getCandlesExtended: {}", e.getMessage(), e);
            
            // FALLBACK: –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ö–æ—Ç—è –±—ã –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            log.warn("üõ°Ô∏è –ê–í–ê–†–ò–ô–ù–´–ô –†–ï–ñ–ò–ú: Fallback –∫ –ø—Ä—è–º–æ–º—É API –±–µ–∑ –∫—ç—à–∞");
            result = getCandlesDirectFromAPI(settings, swapTickers, Math.min(300, totalLimit));
        }
        
        return result;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–µ–π –Ω–∞–ø—Ä—è–º—É—é –∏–∑ API (fallback –º–µ—Ç–æ–¥)
     */
    private Map<String, List<Candle>> getCandlesDirectFromAPI(Settings settings, List<String> swapTickers, int totalLimit) {
        log.info("üì° –ü–†–Ø–ú–û–ô API –ó–ê–ü–†–û–°: {} —Å–≤–µ—á–µ–π –¥–ª—è {} —Ç–∏–∫–µ—Ä–æ–≤", totalLimit, swapTickers.size());
        
        if (totalLimit <= 300) {
            return getCandles(settings, swapTickers, true);
        }
        
        // –î–ª—è –±–æ–ª—å—à–∏—Ö –ª–∏–º–∏—Ç–æ–≤ - —Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        return getCandlesWithPagination(settings, swapTickers, totalLimit);
    }
    
    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫—ç—à–∞
     */
    private void validateCacheResults(Map<String, List<Candle>> cacheResults, int expectedCandleCount, String timeframe) {
        if (cacheResults.isEmpty()) {
            log.warn("‚ö†Ô∏è –ö–≠–®–ê –ü–£–°–¢–û–ô: –ù–µ –ø–æ–ª—É—á–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞ –∏–∑ –∫—ç—à–∞");
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
        int tickersWithGoodData = 0;
        int tickersWithPartialData = 0;
        int tickersWithBadData = 0;
        
        for (Map.Entry<String, List<Candle>> entry : cacheResults.entrySet()) {
            String ticker = entry.getKey();
            List<Candle> candles = entry.getValue();
            
            double completeness = (double) candles.size() / expectedCandleCount;
            
            if (completeness >= 0.95) {
                tickersWithGoodData++;
                log.debug("‚úÖ {}: –æ—Ç–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ({}% = {}/{})", ticker, 
                        String.format("%.1f", completeness * 100), candles.size(), expectedCandleCount);
            } else if (completeness >= 0.80) {
                tickersWithPartialData++;
                log.debug("‚ö†Ô∏è {}: —á–∞—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ({}% = {}/{})", ticker, 
                        String.format("%.1f", completeness * 100), candles.size(), expectedCandleCount);
            } else {
                tickersWithBadData++;
                log.warn("‚ùå {}: –ø–ª–æ—Ö–∏–µ –¥–∞–Ω–Ω—ã–µ ({}% = {}/{})", ticker, 
                        String.format("%.1f", completeness * 100), candles.size(), expectedCandleCount);
            }
        }
        
        log.info("üìä –ö–ê–ß–ï–°–¢–í–û –ö–≠–®–ê: ‚úÖ{}(–æ—Ç–ª–∏—á–Ω–æ) ‚ö†Ô∏è{}(—á–∞—Å—Ç–∏—á–Ω–æ) ‚ùå{}(–ø–ª–æ—Ö–æ) –∏–∑ {} —Ç–∏–∫–µ—Ä–æ–≤",
                tickersWithGoodData, tickersWithPartialData, tickersWithBadData, cacheResults.size());
    }
    
    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
     */
    private void logFinalResults(Map<String, List<Candle>> result, int expectedCandleCount, 
                               long requestDuration, boolean usedCache) {
        if (result.isEmpty()) {
            log.error("üí• –ü–†–û–í–ê–õ: –ù–µ –ø–æ–ª—É—á–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞ —Å –¥–∞–Ω–Ω—ã–º–∏!");
            return;
        }
        
        int totalCandles = result.values().stream().mapToInt(List::size).sum();
        int avgCandles = totalCandles / result.size();
        double avgCompleteness = (double) avgCandles / expectedCandleCount * 100;
        
        String cacheStatus = usedCache ? "üíæ–ö–≠–®–ê" : "üì°API";
        
        log.info("üèÅ –ê–ö-47 –†–ï–ó–£–õ–¨–¢–ê–¢ [{}]: {} —Ç–∏–∫–µ—Ä–æ–≤, {} —Å–≤–µ—á–µ–π (—Å—Ä–µ–¥.{}, {}%), –∑–∞ {} –º—Å",
                cacheStatus, result.size(), totalCandles, avgCandles, 
                String.format("%.1f", avgCompleteness), requestDuration);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if (result.size() <= 10) {
            log.info("üîç –¢–ò–ö–ï–†–´: {}", String.join(", ", result.keySet()));
        } else {
            String firstFew = result.keySet().stream().limit(5).reduce((a, b) -> a + ", " + b).orElse("");
            log.info("üîç –ü–ï–†–í–´–ï –¢–ò–ö–ï–†–´: {}... (–≤—Å–µ–≥–æ {})", firstFew, result.size());
        }
    }
    
    /**
     * –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (fallback –¥–ª—è –ø—Ä—è–º—ã—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤)
     */
    private Map<String, List<Candle>> getCandlesWithPagination(Settings settings, List<String> swapTickers, int totalLimit) {
        log.info("üì° –ü–ê–ì–ò–ù–ê–¶–ò–Ø API: {} —Å–≤–µ—á–µ–π –¥–ª—è {} —Ç–∏–∫–µ—Ä–æ–≤", totalLimit, swapTickers.size());
        
        Map<String, List<Candle>> result = new HashMap<>();
        int batchSize = 300; // –ú–∞–∫—Å–∏–º—É–º –¥–ª—è OKX API
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –ø–∞—á–∫—É
            Settings initialSettings = new Settings();
            initialSettings.copyFrom(settings);
            initialSettings.setCandleLimit(Math.min(batchSize, totalLimit));
            
            Map<String, List<Candle>> initialBatch = getCandles(initialSettings, swapTickers, true);
            
            if (initialBatch.isEmpty()) {
                log.warn("‚ö†Ô∏è –ü–ê–ì–ò–ù–ê–¶–ò–Ø: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ");
                return result;
            }
            
            // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–∫–µ—Ä–∞ —Å–æ–±–∏—Ä–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            for (Map.Entry<String, List<Candle>> entry : initialBatch.entrySet()) {
                String ticker = entry.getKey();
                List<Candle> allCandles = new ArrayList<>(entry.getValue());
                
                if (allCandles.isEmpty()) continue;
                
                int remainingCandles = totalLimit - allCandles.size();
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                while (remainingCandles > 0 && allCandles.size() < totalLimit) {
                    try {
                        long oldestTimestamp = allCandles.get(0).getTimestamp();
                        int batchLimit = Math.min(batchSize, remainingCandles);
                        
                        List<Candle> historicalBatch = getCandlesPaginated(ticker, settings.getTimeframe(), 
                                batchLimit, oldestTimestamp);
                        
                        if (historicalBatch.isEmpty()) {
                            break;
                        }
                        
                        allCandles.addAll(0, historicalBatch);
                        remainingCandles -= historicalBatch.size();
                        
                        Thread.sleep(150); // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                        
                    } catch (Exception e) {
                        log.warn("‚ö†Ô∏è –ü–ê–ì–ò–ù–ê–¶–ò–Ø: –û—à–∏–±–∫–∞ –¥–ª—è {}: {}", ticker, e.getMessage());
                        break;
                    }
                }
                
                // –û–±—Ä–µ–∑–∞–µ–º –¥–æ –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                if (allCandles.size() > totalLimit) {
                    allCandles = allCandles.subList(allCandles.size() - totalLimit, allCandles.size());
                }
                
                result.put(ticker, allCandles);
            }
            
        } catch (Exception e) {
            log.error("‚ùå –ü–ê–ì–ò–ù–ê–¶–ò–Ø: –û—à–∏–±–∫–∞ {}", e.getMessage(), e);
        }
        
        return result;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ before –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
     */
    private List<Candle> getCandlesPaginated(String ticker, String timeframe, int limit, long beforeTimestamp) {
        try {
            log.debug("üîç –ó–∞–ø—Ä–æ—Å {} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π –¥–ª—è {} –¥–æ timestamp {}",
                    limit, ticker, beforeTimestamp);

            // –í—ã–∑—ã–≤–∞–µ–º OKX API —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º before –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            List<Candle> historicalCandles = okxFeignClient.getCandlesBefore(ticker, timeframe, limit, beforeTimestamp);

            log.debug("üìä –ü–æ–ª—É—á–µ–Ω–æ {} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π –¥–ª—è {} –¥–æ timestamp {}",
                    historicalCandles.size(), ticker, beforeTimestamp);

            return historicalCandles;

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π –¥–ª—è {} –¥–æ {}: {}",
                    ticker, beforeTimestamp, e.getMessage());
            return new ArrayList<>();
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫ —Å–≤–µ—á–µ–π –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã
     */
    private void validateCandlesTimeOrder(String ticker, List<Candle> candles) {
        if (candles == null || candles.size() < 2) {
            return;
        }

        boolean hasTimeOrderIssues = false;
        long prevTimestamp = candles.get(0).getTimestamp();

        for (int i = 1; i < candles.size(); i++) {
            long currentTimestamp = candles.get(i).getTimestamp();
            if (currentTimestamp <= prevTimestamp) {
                if (!hasTimeOrderIssues) {
                    log.warn("‚ùå {}: –Ω–∞—Ä—É—à–µ–Ω–∏–µ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ —Å–≤–µ—á–µ–π!", ticker);
                    hasTimeOrderIssues = true;
                }
                log.warn("‚ùå {}: —Å–≤–µ—á–∞ {} (timestamp={}) <= –ø—Ä–µ–¥—ã–¥—É—â–µ–π {} (timestamp={})",
                        ticker, i, currentTimestamp, i - 1, prevTimestamp);
            }
            prevTimestamp = currentTimestamp;
        }

        if (!hasTimeOrderIssues) {
            log.info("‚úÖ {}: —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫ {} —Å–≤–µ—á–µ–π –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –î–∏–∞–ø–∞–∑–æ–Ω: {} - {}",
                    ticker, candles.size(),
                    candles.get(0).getTimestamp(),
                    candles.get(candles.size() - 1).getTimestamp());
        } else {
            log.error("‚ùå {}: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê - –Ω–∞—Ä—É—à–µ–Ω —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫ —Å–≤–µ—á–µ–π! –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ–≤–µ—Ä–Ω—ã–º —Ä–∞—Å—á–µ—Ç–∞–º Z-Score –∏ –≥—Ä–∞—Ñ–∏–∫–∞–º!", ticker);
        }
    }

    private void validateCandlesLimitAndThrow(Map<String, List<Candle>> candlesMap, Settings settings) {
        if (candlesMap == null) {
            throw new IllegalArgumentException("–ú–∞–ø–∞ —Å–≤–µ—á–µ–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null!");
        }

        double candleLimit = settings.getCandleLimit();
        int minAcceptableCandles = (int) (candleLimit * 0.9); // –ü—Ä–∏–Ω–∏–º–∞–µ–º 90% –æ—Ç —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞

        candlesMap.forEach((ticker, candles) -> {
            if (candles == null) {
                log.error("‚ùå –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {} —Ä–∞–≤–µ–Ω null!", ticker);
                throw new IllegalArgumentException("–°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null –¥–ª—è —Ç–∏–∫–µ—Ä–∞: " + ticker);
            }

            // –ì–∏–±–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è - –ø—Ä–∏–Ω–∏–º–∞–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 90% –æ—Ç —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            if (candles.size() < minAcceptableCandles) {
                log.error(
                        "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}: –ø–æ–ª—É—á–µ–Ω–æ {}, –º–∏–Ω–∏–º—É–º —Ç—Ä–µ–±—É–µ—Ç—Å—è {}",
                        ticker, candles.size(), minAcceptableCandles
                );
                throw new IllegalArgumentException(
                        String.format(
                                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ %s: %d, –º–∏–Ω–∏–º—É–º —Ç—Ä–µ–±—É–µ—Ç—Å—è: %d (90%% –æ—Ç %.0f)",
                                ticker, candles.size(), minAcceptableCandles, candleLimit
                        )
                );
            }

            // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ —Ç–æ—á–Ω–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –Ω–æ –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
            if (candles.size() != (int) candleLimit) {
                log.warn("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {} –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –∑–∞–¥–∞–Ω–Ω–æ–≥–æ: –ø–æ–ª—É—á–µ–Ω–æ {}, –æ–∂–∏–¥–∞–ª–æ—Å—å {}",
                        ticker, candles.size(), (int) candleLimit);
            }
        });
    }
}
