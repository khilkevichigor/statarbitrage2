//package com.example.candles.service;
//
//import com.example.candles.client.OkxFeignClient;
//import com.example.candles.service.CandleCacheService;
//import com.example.shared.dto.Candle;
//import com.example.shared.dto.ExtendedCandlesRequest;
//import com.example.shared.models.Settings;
//import com.example.shared.models.Pair;
//import lombok.RequiredArgsConstructor;
//import lombok.extern.slf4j.Slf4j;
//import org.springframework.beans.factory.annotation.Value;
//import org.springframework.stereotype.Service;
//import org.springframework.web.bind.annotation.RequestBody;
//
//import java.util.ArrayList;
//import java.util.HashMap;
//import java.util.List;
//import java.util.Map;
//import java.util.stream.Collectors;
//
//@Slf4j
//@Service
//@RequiredArgsConstructor
//public class CandlesService {
//
//    private final OkxFeignClient okxFeignClient;
//    private final CandleCacheService candleCacheService;
//    private final DirectCandlesService directCandlesService;
//
////    public Map<String, List<Candle>> getAllCandlesExtended(ExtendedCandlesRequest request) {
////        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –∫—ç—à (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true)
////        boolean useCache = request.getUseCache() != null ? request.getUseCache() : true;
////
////        if (useCache) {
////            log.info("üíæ –ó–∞–ø—Ä–æ—Å {} —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ {} –ò–ó –ö–≠–®–ê",
////                    request.getCandleLimit(), request.getTimeframe());
////            return getAllCandlesFromCache(request);
////        } else {
////            log.info("üöÄ –ó–∞–ø—Ä–æ—Å {} —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ {} –ù–ê–ü–†–Ø–ú–£–Æ –° OKX (–±–µ–∑ –∫—ç—à–∞)",
////                    request.getCandleLimit(), request.getTimeframe());
////            return directCandlesService.loadCandlesDirectly(request);
////        }
////    }
//
////    /**
////     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–µ–π –∏–∑ –∫—ç—à–∞ (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥)
////     */
////    private Map<String, List<Candle>> getAllCandlesFromCache(ExtendedCandlesRequest request) {
////        long startTime = System.currentTimeMillis();
////
////        // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ä—ã: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ
////        List<String> swapTickers;
////        final List<String> originalRequestedTickers; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
////
////        if (request.getTickers() != null && !request.getTickers().isEmpty()) {
////            log.info("üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ {} —Ç–∏–∫–µ—Ä–æ–≤", request.getTickers().size());
////            originalRequestedTickers = new ArrayList<>(request.getTickers()); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
////            swapTickers = new ArrayList<>(request.getTickers());
////
////            // –î–æ–±–∞–≤–ª—è–µ–º BTC-USDT-SWAP –∫–∞–∫ —ç—Ç–∞–ª–æ–Ω –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ
////            if (!swapTickers.contains("BTC-USDT-SWAP")) {
////                swapTickers.add("BTC-USDT-SWAP");
////                log.info("üéØ –î–æ–±–∞–≤–ª–µ–Ω BTC-USDT-SWAP –∫–∞–∫ —ç—Ç–∞–ª–æ–Ω –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–≤—Å–µ–≥–æ {} —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏)", swapTickers.size());
////            }
////        } else {
////            log.info("üåê –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã");
////            originalRequestedTickers = null; // –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞
////            swapTickers = okxFeignClient.getAllSwapTickers(true);
////
////            // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–∏–∫–µ—Ä—ã –∏–∑ excludeTickers –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
////            if (request.getExcludeTickers() != null && !request.getExcludeTickers().isEmpty()) {
////                log.info("‚ùå –ò—Å–∫–ª—é—á–∞–µ–º {} —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", request.getExcludeTickers().size());
////                swapTickers = swapTickers.stream()
////                        .filter(ticker -> !request.getExcludeTickers().contains(ticker))
////                        .toList();
////                log.info("‚úÖ –ü–æ—Å–ª–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å {} —Ç–∏–∫–µ—Ä–æ–≤", swapTickers.size());
////            }
////        }
////
////        Map<String, List<Candle>> result;
////
////        // –ò–¥–µ–º –≤ –ö–≠–®
////        result = candleCacheService.getCachedCandles(
////                swapTickers,
////                request.getTimeframe(),
////                request.getCandleLimit(),
////                "OKX"
////        );
////
////        long elapsed = System.currentTimeMillis() - startTime;
////
////        if (result != null && !result.isEmpty()) {
////            int totalCandles = result.values().stream().mapToInt(List::size).sum();
////            int avgCandles = totalCandles / result.size();
////            log.info("üíæ –ó–∞–ø—Ä–æ—Å –ò–ó –ö–≠–®–ê –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {} –º—Å! –ü–æ–ª—É—á–µ–Ω–æ {} —Ç–∏–∫–µ—Ä–æ–≤ —Å–æ —Å—Ä–µ–¥–Ω–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º {} —Å–≤–µ—á–µ–π (–≤—Å–µ–≥–æ {} —Å–≤–µ—á–µ–π)",
////                    elapsed, result.size(), avgCandles, totalCandles);
////
////            // –ï—Å–ª–∏ –±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Ö (–∏—Å–∫–ª—é—á–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π BTC —ç—Ç–∞–ª–æ–Ω)
////            if (originalRequestedTickers != null) {
////                Map<String, List<Candle>> filteredResult = result.entrySet().stream()
////                        .filter(entry -> originalRequestedTickers.contains(entry.getKey()))
////                        .collect(Collectors.toMap(
////                                Map.Entry::getKey,
////                                Map.Entry::getValue
////                        ));
////
////                log.info("üéØ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º {} –∏–∑ {} —Ç–∏–∫–µ—Ä–æ–≤ (–∏—Å–∫–ª—é—á–µ–Ω BTC —ç—Ç–∞–ª–æ–Ω)",
////                        filteredResult.size(), result.size());
////                return filteredResult;
////            }
////        } else {
////            log.warn("‚ö†Ô∏è –ö—ç—à –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏!");
////        }
////
////        return result != null ? result : Map.of();
////    }
//
//}
