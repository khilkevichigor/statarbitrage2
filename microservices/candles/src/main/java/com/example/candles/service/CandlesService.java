package com.example.candles.service;

import com.example.candles.client.OkxFeignClient;
import com.example.shared.dto.Candle;
import com.example.shared.models.Settings;
import com.example.shared.models.TradingPair;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Slf4j
@Service
@RequiredArgsConstructor
public class CandlesService {

    private final OkxFeignClient okxFeignClient;

    public Map<String, List<Candle>> getApplicableCandlesMap(TradingPair tradingPair, Settings settings) {
        List<String> tickers = List.of(tradingPair.getLongTicker(), tradingPair.getShortTicker());

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –±–æ–ª—å—à–µ 300 —Å–≤–µ—á–µ–π
        Map<String, List<Candle>> candlesMap;
        if (settings.getCandleLimit() > 300) {
            log.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è {} —Å–≤–µ—á–µ–π –¥–ª—è –ø–∞—Ä—ã {}",
                    (int) settings.getCandleLimit(), tradingPair.getPairName());
            candlesMap = getCandlesExtended(settings, tickers, (int) settings.getCandleLimit());
        } else {
            candlesMap = getCandles(settings, tickers, false);
        }

        validateCandlesLimitAndThrow(candlesMap, settings);
        return candlesMap;
    }

    //todo —Å–¥–µ–ª–∞—Ç—å —É–º–Ω–µ–µ - —á–µ—Ä–µ–∑ –∫—ç—à –∏–ª–∏ –±–¥ - –∑–∞—á–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É —ç—Ç–æ –¥–µ–ª–∞—Ç—å! –µ—Å–ª–∏ –æ–±—ä–µ–º –µ—Å—Ç—å —Ç–æ –º–æ–∂–Ω–æ —Ü–µ–ª—ã–π –¥–µ–Ω—å —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω—É –∏–ª–∏ —á–µ–∫–∞—Ç—å 1—Ä–∞–∑/—á–∞—Å
    public Map<String, List<Candle>> getApplicableCandlesMap(Settings settings, List<String> tradingTickers) {
        List<String> applicableTickers = getApplicableTickers(settings, tradingTickers, "1D", true);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –±–æ–ª—å—à–µ 300 —Å–≤–µ—á–µ–π
        Map<String, List<Candle>> candlesMap;
        if (settings.getCandleLimit() > 300) {
            log.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è {} —Å–≤–µ—á–µ–π –¥–ª—è {} —Ç–∏–∫–µ—Ä–æ–≤",
                    (int) settings.getCandleLimit(), applicableTickers.size());
            candlesMap = getCandlesExtended(settings, applicableTickers, (int) settings.getCandleLimit());
        } else {
            candlesMap = getCandles(settings, applicableTickers, true);
        }

        validateCandlesLimitAndThrow(candlesMap, settings);
        return candlesMap;
    }

    public Map<String, List<Candle>> getCandles(Settings settings, List<String> swapTickers, boolean isSorted) {
        try {
            log.debug("üì° –ó–∞–ø—Ä–æ—Å –∫ OKX –¥–ª—è {} —Ç–∏–∫–µ—Ä–æ–≤ (—Ç–∞–π–º—Ñ—Ä–µ–π–º: {}, –ª–∏–º–∏—Ç: {}, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: {})",
                    swapTickers.size(), settings.getTimeframe(), (int) settings.getCandleLimit(), isSorted);

            Map<String, List<Candle>> result = okxFeignClient.getCandlesMap(swapTickers, settings.getTimeframe(), (int) settings.getCandleLimit(), isSorted);

            log.debug("üìà –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OKX: {} —Ç–∏–∫–µ—Ä–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏", result.size());

            return result;
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OKX —Å–µ—Ä–≤–∏—Å—É: {}", e.getMessage(), e);
            return new HashMap<>();
        }
    }

    private List<String> getApplicableTickers(Settings settings, List<String> tradingTickers, String timeFrame, boolean isSorted) {
        List<String> swapTickers = okxFeignClient.getAllSwapTickers(isSorted);
        List<String> filteredTickers = swapTickers.stream()
                .filter(ticker -> !tradingTickers.contains(ticker))
                .toList();
        double minVolume = settings.isUseMinVolumeFilter() ? settings.getMinVolume() * 1_000_000 : 0.0;
        return okxFeignClient.getValidTickers(filteredTickers, timeFrame, (int) settings.getCandleLimit(), minVolume, isSorted);
    }

    /**
     * –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–≤–µ—á–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
     * –°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ OKX API –¥–ª—è –æ–±—Ö–æ–¥–∞ –ª–∏–º–∏—Ç–∞ –≤ 300 —Å–≤–µ—á–µ–π
     */
    public Map<String, List<Candle>> getCandlesExtended(Settings settings, List<String> swapTickers, int totalLimit) {
        log.info("üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å {} —Å–≤–µ—á–µ–π –¥–ª—è {} —Ç–∏–∫–µ—Ä–æ–≤ (—Ç–∞–π–º—Ñ—Ä–µ–π–º: {})",
                totalLimit, swapTickers.size(), settings.getTimeframe());

        if (totalLimit <= 300) {
            // –ï—Å–ª–∏ –ª–∏–º–∏—Ç 300 –∏–ª–∏ –º–µ–Ω—å—à–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥
            return getCandles(settings, swapTickers, true);
        }

        Map<String, List<Candle>> result = new HashMap<>();
        int batchSize = 300; // –ú–∞–∫—Å–∏–º—É–º –¥–ª—è OKX API
        int remainingCandles = totalLimit;

        try {
            // –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–µ—Ä–≤–æ–π –ø–∞—á–∫–∏ (–º–∞–∫—Å–∏–º—É–º 300 —Å–≤–µ—á–µ–π)
            Settings initialSettings = new Settings();
            initialSettings.copyFrom(settings);
            initialSettings.setCandleLimit(Math.min(batchSize, remainingCandles));

            log.debug("üîÑ –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –ø–∞—á–∫—É –∏–∑ {} —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–æ–≤: {}",
                    initialSettings.getCandleLimit(), swapTickers);
            Map<String, List<Candle>> initialBatch = getCandles(initialSettings, swapTickers, true);

            if (initialBatch.isEmpty()) {
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∏–∫–µ—Ä–æ–≤: {} (—Ç–∞–π–º—Ñ—Ä–µ–π–º: {}, –ª–∏–º–∏—Ç: {})",
                        swapTickers, settings.getTimeframe(), initialSettings.getCandleLimit());
                return result;
            }

            log.debug("‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –ø–µ—Ä–≤–∞—è –ø–∞—á–∫–∞: {} —Ç–∏–∫–µ—Ä–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏", initialBatch.size());

            // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–∫–µ—Ä–∞ —Å–æ–±–∏—Ä–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            for (Map.Entry<String, List<Candle>> entry : initialBatch.entrySet()) {
                String ticker = entry.getKey();
                List<Candle> allCandles = new ArrayList<>(entry.getValue());

                if (allCandles.isEmpty()) {
                    continue;
                }

                remainingCandles = totalLimit - allCandles.size();

                // –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—á–∫–∞–º–∏
                while (remainingCandles > 0 && allCandles.size() < totalLimit) {
                    try {
                        // –ü–æ–ª—É—á–∞–µ–º timestamp —Å–∞–º–æ–π —Å—Ç–∞—Ä–æ–π —Å–≤–µ—á–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
                        long oldestTimestamp = allCandles.get(0).getTimestamp();

                        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é –ø–∞—á–∫—É
                        int batchLimit = Math.min(batchSize, remainingCandles);
                        List<Candle> historicalBatch = getCandlesPaginated(ticker, settings.getTimeframe(),
                                batchLimit, oldestTimestamp);

                        if (historicalBatch.isEmpty()) {
                            log.debug("üìâ –ù–µ—Ç –±–æ–ª—å—à–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {}", ticker);
                            break;
                        }

                        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞ (–±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ)
                        allCandles.addAll(0, historicalBatch);
                        remainingCandles -= historicalBatch.size();

                        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                        Thread.sleep(150);

                    } catch (Exception e) {
                        log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {}: {}",
                                ticker, e.getMessage());
                        break;
                    }
                }

                // –û–±—Ä–µ–∑–∞–µ–º –¥–æ –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (–±–µ—Ä—ë–º —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ)
                if (allCandles.size() > totalLimit) {
                    allCandles = allCandles.subList(allCandles.size() - totalLimit, allCandles.size());
                }

                result.put(ticker, allCandles);
            }

            log.info("‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω. –ü–æ–ª—É—á–µ–Ω–æ {} —Ç–∏–∫–µ—Ä–æ–≤ —Å–æ —Å—Ä–µ–¥–Ω–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º {} —Å–≤–µ—á–µ–π",
                    result.size(),
                    result.values().stream().mapToInt(List::size).average().orElse(0));

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ —Å–≤–µ—á–µ–π: {}", e.getMessage(), e);
            // Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –º–µ—Ç–æ–¥—É —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –≤ 300 —Å–≤–µ—á–µ–π
            log.warn("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –º–µ—Ç–æ–¥—É —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º 300 —Å–≤–µ—á–µ–π");
            Settings fallbackSettings = new Settings();
            fallbackSettings.copyFrom(settings);
            fallbackSettings.setCandleLimit(300);
            return getCandles(fallbackSettings, swapTickers, true);
        }

        return result;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ before –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
     */
    private List<Candle> getCandlesPaginated(String ticker, String timeframe, int limit, long beforeTimestamp) {
        try {
            log.debug("üîç –ó–∞–ø—Ä–æ—Å {} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π –¥–ª—è {} –¥–æ timestamp {}",
                    limit, ticker, beforeTimestamp);

            // –í—ã–∑—ã–≤–∞–µ–º OKX API —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º before –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            List<Candle> historicalCandles = okxFeignClient.getCandlesBefore(ticker, timeframe, limit, beforeTimestamp);

            log.debug("üìä –ü–æ–ª—É—á–µ–Ω–æ {} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π –¥–ª—è {} –¥–æ timestamp {}",
                    historicalCandles.size(), ticker, beforeTimestamp);

            return historicalCandles;

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π –¥–ª—è {} –¥–æ {}: {}",
                    ticker, beforeTimestamp, e.getMessage());
            return new ArrayList<>();
        }
    }

    private void validateCandlesLimitAndThrow(Map<String, List<Candle>> candlesMap, Settings settings) {
        if (candlesMap == null) {
            throw new IllegalArgumentException("–ú–∞–ø–∞ —Å–≤–µ—á–µ–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null!");
        }

        double candleLimit = settings.getCandleLimit();
        int minAcceptableCandles = (int) (candleLimit * 0.9); // –ü—Ä–∏–Ω–∏–º–∞–µ–º 90% –æ—Ç —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞

        candlesMap.forEach((ticker, candles) -> {
            if (candles == null) {
                log.error("‚ùå –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {} —Ä–∞–≤–µ–Ω null!", ticker);
                throw new IllegalArgumentException("–°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null –¥–ª—è —Ç–∏–∫–µ—Ä–∞: " + ticker);
            }

            // –ì–∏–±–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è - –ø—Ä–∏–Ω–∏–º–∞–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 90% –æ—Ç —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            if (candles.size() < minAcceptableCandles) {
                log.error(
                        "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}: –ø–æ–ª—É—á–µ–Ω–æ {}, –º–∏–Ω–∏–º—É–º —Ç—Ä–µ–±—É–µ—Ç—Å—è {}",
                        ticker, candles.size(), minAcceptableCandles
                );
                throw new IllegalArgumentException(
                        String.format(
                                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ %s: %d, –º–∏–Ω–∏–º—É–º —Ç—Ä–µ–±—É–µ—Ç—Å—è: %d (90%% –æ—Ç %.0f)",
                                ticker, candles.size(), minAcceptableCandles, candleLimit
                        )
                );
            }

            // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ —Ç–æ—á–Ω–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –Ω–æ –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
            if (candles.size() != (int) candleLimit) {
                log.warn("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {} –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –∑–∞–¥–∞–Ω–Ω–æ–≥–æ: –ø–æ–ª—É—á–µ–Ω–æ {}, –æ–∂–∏–¥–∞–ª–æ—Å—å {}",
                        ticker, candles.size(), (int) candleLimit);
            }
        });
    }
}
