package com.example.candles.controller;

import com.example.candles.service.CacheValidatedCandlesProcessor;
import com.example.candles.service.CandlesLoaderProcessor;
import com.example.shared.dto.Candle;
import com.example.shared.dto.ExtendedCandlesRequest;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;
import java.util.List;
import java.util.Map;
import java.util.concurrent.*;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤-–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤
 */
@RestController
@RequestMapping("/api/candles-processor")
@RequiredArgsConstructor
@Slf4j
public class CandlesProcessorController {

    private final CacheValidatedCandlesProcessor cacheValidatedCandlesProcessor;
    private final CandlesLoaderProcessor candlesLoaderProcessor;

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏ –∏–∑ –∫—ç—à–∞
     * <p>
     * GET /api/candles-processor/validated-cache?exchange=OKX&ticker=BTC-USDT-SWAP&timeframe=1H&period=1 –≥–æ–¥
     */
    @GetMapping("/validated-cache")
    public ResponseEntity<?> getValidatedCandlesFromCache(
            @RequestParam(defaultValue = "OKX") String exchange,
            @RequestParam String ticker,
            @RequestParam(defaultValue = "1H") String timeframe,
            @RequestParam(defaultValue = "1 –≥–æ–¥") String period
    ) {
        log.info("üîç API –ó–ê–ü–†–û–°: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –∏–∑ –∫—ç—à–∞");
        log.info("üìä –ü–ê–†–ê–ú–ï–¢–†–´: exchange={}, ticker={}, timeframe={}, period={}", exchange, ticker, timeframe, period);

        try {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—É "–¥–æ" –∫–∞–∫ –Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
            String untilDate = generateUntilDate();
            log.info("üìÖ –î–ê–¢–ê –î–û: {}", untilDate);

            // –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏
            List<Candle> candles = cacheValidatedCandlesProcessor.getValidatedCandlesFromCache(
                    exchange, ticker, untilDate, timeframe, period);

            if (candles.isEmpty()) {
                log.warn("‚ö†Ô∏è API –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏");
                return ResponseEntity.ok(Map.of(
                        "success", false,
                        "message", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏",
                        "candlesCount", 0,
                        "candles", List.of()
                ));
            }

            log.info("‚úÖ API –†–ï–ó–£–õ–¨–¢–ê–¢: –í–æ–∑–≤—Ä–∞—â–∞–µ–º {} –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π", candles.size());
            return ResponseEntity.ok(Map.of(
                    "success", true,
                    "message", "–í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ",
                    "candlesCount", candles.size(),
                    "parameters", Map.of(
                            "exchange", exchange,
                            "ticker", ticker,
                            "timeframe", timeframe,
                            "period", period,
                            "untilDate", untilDate
                    ),
                    "timeRange", Map.of(
                            "oldest", candles.get(0).getTimestamp(),
                            "newest", candles.get(candles.size() - 1).getTimestamp()
                    ),
                    "candles", candles
            ));

        } catch (Exception e) {
            log.error("‚ùå API –û–®–ò–ë–ö–ê: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π: {}", e.getMessage(), e);
            return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π: " + e.getMessage(),
                    "candlesCount", 0
            ));
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–≤–µ—á–∏ —Å OKX
     * <p>
     * POST /api/candles-processor/load-and-save
     * Body: {"exchange": "OKX", "ticker": "BTC-USDT-SWAP", "timeframe": "1H", "period": "1year"}
     */
    @PostMapping("/load-and-save")
    public ResponseEntity<?> loadAndSaveCandles(@RequestBody Map<String, String> request) {
        String exchange = request.getOrDefault("exchange", "OKX");
        String ticker = request.get("ticker");
        String timeframe = request.getOrDefault("timeframe", "1H");
        String period = request.getOrDefault("period", "1year");

        log.info("üöÄ API –ó–ê–ü–†–û–°: –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≤–µ—á–µ–π");
        log.info("üìä –ü–ê–†–ê–ú–ï–¢–†–´: exchange={}, ticker={}, timeframe={}, period={}", exchange, ticker, timeframe, period);

        if (ticker == null || ticker.trim().isEmpty()) {
            return ResponseEntity.badRequest().body(Map.of(
                    "success", false,
                    "message", "–ü–∞—Ä–∞–º–µ—Ç—Ä ticker –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"
            ));
        }

        try {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—É "–¥–æ"
            String untilDate = generateUntilDate();
            log.info("üìÖ –î–ê–¢–ê –î–û: {}", untilDate);

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–µ—á–∏
            int savedCount = candlesLoaderProcessor.loadAndSaveCandles(exchange, ticker, untilDate, timeframe, period);

            if (savedCount > 0) {
                log.info("‚úÖ API –†–ï–ó–£–õ–¨–¢–ê–¢: –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {} —Å–≤–µ—á–µ–π", savedCount);
                return ResponseEntity.ok(Map.of(
                        "success", true,
                        "message", "–°–≤–µ—á–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
                        "savedCount", savedCount,
                        "parameters", Map.of(
                                "exchange", exchange,
                                "ticker", ticker,
                                "timeframe", timeframe,
                                "period", period,
                                "untilDate", untilDate
                        )
                ));
            } else {
                log.warn("‚ö†Ô∏è API –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–µ—á–∏");
                return ResponseEntity.ok(Map.of(
                        "success", false,
                        "message", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–µ—á–∏",
                        "savedCount", 0
                ));
            }

        } catch (Exception e) {
            log.error("‚ùå API –û–®–ò–ë–ö–ê: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–≤–µ—á–µ–π: {}", e.getMessage(), e);
            return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–≤–µ—á–µ–π: " + e.getMessage(),
                    "savedCount", 0
            ));
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏ –∏–∑ –∫—ç—à–∞ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Ç–∏–∫–µ—Ä–æ–≤ (–∞–Ω–∞–ª–æ–≥ /all-extended)
     * <p>
     * POST /api/candles-processor/validated-cache-extended
     */
    @PostMapping("/validated-cache-extended")
    public ResponseEntity<?> getValidatedCandlesExtended(@RequestBody ExtendedCandlesRequest request) {
        log.info("üîç API –ó–ê–ü–†–û–°: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –∏–∑ –∫—ç—à–∞ (extended)");
        log.info("üìä –ü–ê–†–ê–ú–ï–¢–†–´: timeframe={}, period={}, untilDate={}, tickers={}",
                request.getTimeframe(), request.getPeriod(), request.getUntilDate(),
                request.getTickers() != null ? request.getTickers().size() + " —Ç–∏–∫–µ—Ä–æ–≤" : "–≤—Å–µ —Ç–∏–∫–µ—Ä—ã");

        try {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            String exchange = request.getExchange() != null ? request.getExchange() : "OKX";
            String timeframe = request.getTimeframe() != null ? request.getTimeframe() : "1H";
            String period = request.getPeriod() != null ? request.getPeriod() : "1 –≥–æ–¥";
            String untilDate = request.getUntilDate() != null ? request.getUntilDate() : generateUntilDate();

            log.info("üìÖ –î–ê–¢–ê –î–û: {}", untilDate);

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            List<String> tickersToProcess = request.getTickers();
            if (tickersToProcess == null || tickersToProcess.isEmpty()) {
                log.error("‚ùå API –û–®–ò–ë–ö–ê: –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –¥–ª—è extended –∑–∞–ø—Ä–æ—Å–∞");
                return ResponseEntity.badRequest().body(Map.of(
                        "success", false,
                        "message", "–°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
                ));
            }

            // –°–æ–∑–¥–∞–µ–º –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤ (–º–∞–∫—Å–∏–º—É–º 5 –ø–æ—Ç–æ–∫–æ–≤)
            ExecutorService executor = Executors.newFixedThreadPool(Math.min(5, tickersToProcess.size()));

            // –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç thread-safe
            Map<String, List<Candle>> result = new ConcurrentHashMap<>();
            AtomicInteger totalCandlesCount = new AtomicInteger(0);
            AtomicInteger processedTickers = new AtomicInteger(0);
            AtomicInteger successfulTickers = new AtomicInteger(0);

            log.info("üöÄ –ú–ù–û–ì–û–ü–û–¢–û–ß–ù–û–°–¢–¨: –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {} —Ç–∏–∫–µ—Ä–æ–≤ –≤ {} –ø–æ—Ç–æ–∫–∞—Ö",
                    tickersToProcess.size(), Math.min(5, tickersToProcess.size()));

            try {
                // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–∫–µ—Ä–∞
                List<Future<Void>> futures = new java.util.ArrayList<>();

                for (String ticker : tickersToProcess) {
                    Future<Void> future = executor.submit(() -> {
                        int tickerNumber = processedTickers.incrementAndGet();
                        String threadName = Thread.currentThread().getName();

                        log.info("üîÑ [{}/{}] –ü–æ—Ç–æ–∫ {}: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∏–∫–µ—Ä {}",
                                tickerNumber, tickersToProcess.size(), threadName, ticker);

                        try {
                            long startTime = System.currentTimeMillis();

                            List<Candle> candles = cacheValidatedCandlesProcessor.getValidatedCandlesFromCache(
                                    exchange, ticker, untilDate, timeframe, period);

                            long duration = System.currentTimeMillis() - startTime;

                            if (!candles.isEmpty()) {
                                result.put(ticker, candles);
                                totalCandlesCount.addAndGet(candles.size());
                                successfulTickers.incrementAndGet();
                                log.info("‚úÖ [{}/{}] –ü–æ—Ç–æ–∫ {}: –ü–æ–ª—É—á–µ–Ω–æ {} —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {} –∑–∞ {} –º—Å",
                                        tickerNumber, tickersToProcess.size(), threadName, candles.size(), ticker, duration);
                            } else {
                                log.warn("‚ö†Ô∏è [{}/{}] –ü–æ—Ç–æ–∫ {}: –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {} –∑–∞ {} –º—Å",
                                        tickerNumber, tickersToProcess.size(), threadName, ticker, duration);
                            }
                        } catch (Exception e) {
                            log.error("‚ùå [{}/{}] –ü–æ—Ç–æ–∫ {}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}: {}",
                                    tickerNumber, tickersToProcess.size(), threadName, ticker, e.getMessage());
                        }

                        return null;
                    });

                    futures.add(future);
                }

                // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á (–º–∞–∫—Å–∏–º—É–º 2 –º–∏–Ω—É—Ç—ã –Ω–∞ –≤—Å–µ —Ç–∏–∫–µ—Ä—ã)
                executor.shutdown();
                if (!executor.awaitTermination(1, TimeUnit.HOURS)) {
                    log.warn("‚ö†Ô∏è –¢–ê–ô–ú–ê–£–¢: –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–¥–∞—á–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –∑–∞ 1 —á–∞—Å, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º");
                    executor.shutdownNow();
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å–µ—Ö –∑–∞–¥–∞—á
                for (Future<Void> future : futures) {
                    try {
                        future.get(1, TimeUnit.SECONDS); // –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç —Ç–∞–∫ –∫–∞–∫ –∑–∞–¥–∞—á–∏ —É–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω—ã
                    } catch (TimeoutException | ExecutionException e) {
                        log.warn("‚ö†Ô∏è –û–¥–Ω–∞ –∏–∑ –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {}", e.getMessage());
                    }
                }

            } catch (InterruptedException e) {
                log.error("‚ùå –ü–†–ï–†–´–í–ê–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞: {}", e.getMessage());
                executor.shutdownNow();
                Thread.currentThread().interrupt();
            } finally {
                // –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º executor
                if (!executor.isShutdown()) {
                    executor.shutdownNow();
                }
            }

            log.info("‚úÖ API –†–ï–ó–£–õ–¨–¢–ê–¢: –í–æ–∑–≤—Ä–∞—â–∞–µ–º {} —Å–≤–µ—á–µ–π –¥–ª—è {}/{} —Ç–∏–∫–µ—Ä–æ–≤ (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ)",
                    totalCandlesCount.get(), successfulTickers.get(), tickersToProcess.size());

            // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º API –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ
            // —á—Ç–æ –∏ /all-extended: –ø—Ä–æ—Å—Ç–æ Map<String, List<Candle>>
            return ResponseEntity.ok(result);

        } catch (Exception e) {
            log.error("‚ùå API –û–®–ò–ë–ö–ê: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π (extended): {}", e.getMessage(), e);
            return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π: " + e.getMessage(),
                    "candlesCount", 0
            ));
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞—Ç—É "–¥–æ" –∫–∞–∫ –Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 2025-09-27T00:00:00Z
     */
    private String generateUntilDate() {
        return LocalDate.now().atStartOfDay() + ":00Z";
    }
}