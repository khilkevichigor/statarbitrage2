package com.example.candles.controller;

import com.example.candles.service.CacheValidatedCandlesProcessor;
import com.example.candles.service.CandlesLoaderProcessor;
import com.example.shared.dto.Candle;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤-–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤
 */
@RestController
@RequestMapping("/api/candles-processor")
@RequiredArgsConstructor
@Slf4j
public class CandlesProcessorController {
    
    private final CacheValidatedCandlesProcessor cacheValidatedCandlesProcessor;
    private final CandlesLoaderProcessor candlesLoaderProcessor;
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏ –∏–∑ –∫—ç—à–∞
     * 
     * GET /api/candles-processor/validated-cache?exchange=OKX&ticker=BTC-USDT-SWAP&timeframe=1H&period=1year
     */
    @GetMapping("/validated-cache")
    public ResponseEntity<?> getValidatedCandlesFromCache(
            @RequestParam(defaultValue = "OKX") String exchange,
            @RequestParam String ticker,
            @RequestParam(defaultValue = "1H") String timeframe,
            @RequestParam(defaultValue = "1 –≥–æ–¥") String period
    ) {
        log.info("üîç API –ó–ê–ü–†–û–°: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –∏–∑ –∫—ç—à–∞");
        log.info("üìä –ü–ê–†–ê–ú–ï–¢–†–´: exchange={}, ticker={}, timeframe={}, period={}", exchange, ticker, timeframe, period);
        
        try {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—É "–¥–æ" –∫–∞–∫ –Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
            String untilDate = generateUntilDate();
            log.info("üìÖ –î–ê–¢–ê –î–û: {}", untilDate);
            
            // –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏
            List<Candle> candles = cacheValidatedCandlesProcessor.getValidatedCandlesFromCache(
                    exchange, ticker, untilDate, timeframe, period);
            
            if (candles.isEmpty()) {
                log.warn("‚ö†Ô∏è API –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏");
                return ResponseEntity.ok(Map.of(
                        "success", false,
                        "message", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏",
                        "candlesCount", 0,
                        "candles", List.of()
                ));
            }
            
            log.info("‚úÖ API –†–ï–ó–£–õ–¨–¢–ê–¢: –í–æ–∑–≤—Ä–∞—â–∞–µ–º {} –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π", candles.size());
            return ResponseEntity.ok(Map.of(
                    "success", true,
                    "message", "–í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ",
                    "candlesCount", candles.size(),
                    "parameters", Map.of(
                            "exchange", exchange,
                            "ticker", ticker,
                            "timeframe", timeframe,
                            "period", period,
                            "untilDate", untilDate
                    ),
                    "timeRange", Map.of(
                            "oldest", candles.get(0).getTimestamp(),
                            "newest", candles.get(candles.size() - 1).getTimestamp()
                    ),
                    "candles", candles
            ));
            
        } catch (Exception e) {
            log.error("‚ùå API –û–®–ò–ë–ö–ê: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π: {}", e.getMessage(), e);
            return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π: " + e.getMessage(),
                    "candlesCount", 0
            ));
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–≤–µ—á–∏ —Å OKX
     * 
     * POST /api/candles-processor/load-and-save
     * Body: {"exchange": "OKX", "ticker": "BTC-USDT-SWAP", "timeframe": "1H", "period": "1year"}
     */
    @PostMapping("/load-and-save")
    public ResponseEntity<?> loadAndSaveCandles(@RequestBody Map<String, String> request) {
        String exchange = request.getOrDefault("exchange", "OKX");
        String ticker = request.get("ticker");
        String timeframe = request.getOrDefault("timeframe", "1H");
        String period = request.getOrDefault("period", "1year");
        
        log.info("üöÄ API –ó–ê–ü–†–û–°: –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≤–µ—á–µ–π");
        log.info("üìä –ü–ê–†–ê–ú–ï–¢–†–´: exchange={}, ticker={}, timeframe={}, period={}", exchange, ticker, timeframe, period);
        
        if (ticker == null || ticker.trim().isEmpty()) {
            return ResponseEntity.badRequest().body(Map.of(
                    "success", false,
                    "message", "–ü–∞—Ä–∞–º–µ—Ç—Ä ticker –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"
            ));
        }
        
        try {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—É "–¥–æ"
            String untilDate = generateUntilDate();
            log.info("üìÖ –î–ê–¢–ê –î–û: {}", untilDate);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–µ—á–∏
            int savedCount = candlesLoaderProcessor.loadAndSaveCandles(exchange, ticker, untilDate, timeframe, period);
            
            if (savedCount > 0) {
                log.info("‚úÖ API –†–ï–ó–£–õ–¨–¢–ê–¢: –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {} —Å–≤–µ—á–µ–π", savedCount);
                return ResponseEntity.ok(Map.of(
                        "success", true,
                        "message", "–°–≤–µ—á–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
                        "savedCount", savedCount,
                        "parameters", Map.of(
                                "exchange", exchange,
                                "ticker", ticker,
                                "timeframe", timeframe,
                                "period", period,
                                "untilDate", untilDate
                        )
                ));
            } else {
                log.warn("‚ö†Ô∏è API –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–µ—á–∏");
                return ResponseEntity.ok(Map.of(
                        "success", false,
                        "message", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–µ—á–∏",
                        "savedCount", 0
                ));
            }
            
        } catch (Exception e) {
            log.error("‚ùå API –û–®–ò–ë–ö–ê: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–≤–µ—á–µ–π: {}", e.getMessage(), e);
            return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–≤–µ—á–µ–π: " + e.getMessage(),
                    "savedCount", 0
            ));
        }
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞—Ç—É "–¥–æ" –∫–∞–∫ –Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 2025-09-27T00:00:00Z
     */
    private String generateUntilDate() {
        return LocalDate.now().atStartOfDay().toString() + ":00.000Z";
    }
}