package com.example.candles.controller;

import com.example.candles.client.OkxFeignClient;
import com.example.candles.processors.GetValidatedCandlesExtendedProcessor;
import com.example.candles.service.CacheValidatedCandlesProcessor;
import com.example.candles.service.CandlesLoaderProcessor;
import com.example.shared.dto.Candle;
import com.example.shared.dto.ExtendedCandlesRequest;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.*;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Collectors;

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤-–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤
 */
@RestController
@RequestMapping("/api/candles-processor")
@RequiredArgsConstructor
@Slf4j
public class CandlesProcessorController {

    private final CacheValidatedCandlesProcessor cacheValidatedCandlesProcessor;
    private final CandlesLoaderProcessor candlesLoaderProcessor;
    private final OkxFeignClient okxFeignClient;
    private final GetValidatedCandlesExtendedProcessor getValidatedCandlesExtendedProcessor;

    //todo –ø–µ—Ä–≤—ã–π —Ä–∞–±–æ—á–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å —ç—Ç–∏–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º! —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏ –∏–∑ –∫—ç—à–∞
     * <p>
     * GET /api/candles-processor/validated-cache?exchange=OKX&ticker=BTC-USDT-SWAP&timeframe=1H&period=1 –≥–æ–¥
     */
    @GetMapping("/validated-cache")
    public ResponseEntity<?> getValidatedCandlesFromCache(
            @RequestParam(defaultValue = "OKX") String exchange,
            @RequestParam String ticker,
            @RequestParam(defaultValue = "1H") String timeframe,
            @RequestParam(defaultValue = "1 –≥–æ–¥") String period
    ) {
        log.info("üîç API –ó–ê–ü–†–û–°: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –∏–∑ –∫—ç—à–∞");
        log.info("üìä –ü–ê–†–ê–ú–ï–¢–†–´: exchange={}, ticker={}, timeframe={}, period={}", exchange, ticker, timeframe, period);

        try {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—É "–¥–æ" –∫–∞–∫ –Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
            String untilDate = generateUntilDate();
            log.info("üìÖ –î–ê–¢–ê –î–û: {}", untilDate);

            // –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏
            List<Candle> candles = cacheValidatedCandlesProcessor.getValidatedCandlesFromCache(
                    exchange, ticker, untilDate, timeframe, period);

            if (candles.isEmpty()) {
                log.warn("‚ö†Ô∏è API –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏");
                return ResponseEntity.ok(Map.of(
                        "success", false,
                        "message", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏",
                        "candlesCount", 0,
                        "candles", List.of()
                ));
            }

            log.info("‚úÖ API –†–ï–ó–£–õ–¨–¢–ê–¢: –í–æ–∑–≤—Ä–∞—â–∞–µ–º {} –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π", candles.size());
            return ResponseEntity.ok(Map.of(
                    "success", true,
                    "message", "–í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ",
                    "candlesCount", candles.size(),
                    "parameters", Map.of(
                            "exchange", exchange,
                            "ticker", ticker,
                            "timeframe", timeframe,
                            "period", period,
                            "untilDate", untilDate
                    ),
                    "timeRange", Map.of(
                            "oldest", candles.get(0).getTimestamp(),
                            "newest", candles.get(candles.size() - 1).getTimestamp()
                    ),
                    "candles", candles
            ));

        } catch (Exception e) {
            log.error("‚ùå API –û–®–ò–ë–ö–ê: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π: {}", e.getMessage(), e);
            return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π: " + e.getMessage(),
                    "candlesCount", 0
            ));
        }
    }

    //todo —Å–≥–µ–Ω–µ—Ä–∏–ª —ç—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –≤ –¥–æ–≤–µ—Å–æ–∫ –∫ "/validated-cache". —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–≤–µ—á–∏ —Å OKX
     * <p>
     * POST /api/candles-processor/load-and-save
     * Body: {"exchange": "OKX", "ticker": "BTC-USDT-SWAP", "timeframe": "1H", "period": "1year"}
     */
    @PostMapping("/load-and-save")
    public ResponseEntity<?> loadAndSaveCandles(@RequestBody Map<String, String> request) {
        String exchange = request.getOrDefault("exchange", "OKX");
        String ticker = request.get("ticker");
        String timeframe = request.getOrDefault("timeframe", "1H");
        String period = request.getOrDefault("period", "1year");

        log.info("üöÄ API –ó–ê–ü–†–û–°: –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≤–µ—á–µ–π");
        log.info("üìä –ü–ê–†–ê–ú–ï–¢–†–´: exchange={}, ticker={}, timeframe={}, period={}", exchange, ticker, timeframe, period);

        if (ticker == null || ticker.trim().isEmpty()) {
            return ResponseEntity.badRequest().body(Map.of(
                    "success", false,
                    "message", "–ü–∞—Ä–∞–º–µ—Ç—Ä ticker –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"
            ));
        }

        try {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—É "–¥–æ"
            String untilDate = generateUntilDate();
            log.info("üìÖ –î–ê–¢–ê –î–û: {}", untilDate);

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–µ—á–∏
            int savedCount = candlesLoaderProcessor.loadAndSaveCandles(exchange, ticker, untilDate, timeframe, period);

            if (savedCount > 0) {
                log.info("‚úÖ API –†–ï–ó–£–õ–¨–¢–ê–¢: –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {} —Å–≤–µ—á–µ–π", savedCount);
                return ResponseEntity.ok(Map.of(
                        "success", true,
                        "message", "–°–≤–µ—á–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
                        "savedCount", savedCount,
                        "parameters", Map.of(
                                "exchange", exchange,
                                "ticker", ticker,
                                "timeframe", timeframe,
                                "period", period,
                                "untilDate", untilDate
                        )
                ));
            } else {
                log.warn("‚ö†Ô∏è API –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–µ—á–∏");
                return ResponseEntity.ok(Map.of(
                        "success", false,
                        "message", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–µ—á–∏",
                        "savedCount", 0
                ));
            }

        } catch (Exception e) {
            log.error("‚ùå API –û–®–ò–ë–ö–ê: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–≤–µ—á–µ–π: {}", e.getMessage(), e);
            return ResponseEntity.ok(Map.of(
                    "success", false,
                    "message", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–≤–µ—á–µ–π: " + e.getMessage(),
                    "savedCount", 0
            ));
        }
    }

    //todo –≥–ª–∞–≤–Ω—ã–π –Ω–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å –≤—Å—é —Ä–∞–±–æ—Ç—É!!!
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏ –∏–∑ –∫—ç—à–∞ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Ç–∏–∫–µ—Ä–æ–≤ (–∞–Ω–∞–ª–æ–≥ /all-extended) —Å –¥–æ–≥—Ä—É–∑–∫–æ–π –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
     * <p>
     * POST /api/candles-processor/validated-cache-extended
     */
    @PostMapping("/validated-cache-extended")
    public ResponseEntity<?> getValidatedCandlesExtended(@RequestBody ExtendedCandlesRequest request) {
        Map<String, Object> result = getValidatedCandlesExtendedProcessor.process(request);

        return ResponseEntity.ok(result);
//        try {
//            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
//            String exchange = request.getExchange() != null ? request.getExchange() : "OKX";
//            String timeframe = request.getTimeframe() != null ? request.getTimeframe() : "1H";
//            String period = request.getPeriod() != null ? request.getPeriod() : "1 –≥–æ–¥";
//            String untilDate = request.getUntilDate() != null ? request.getUntilDate() : generateUntilDate();
//
//            log.info("üìÖ –î–ê–¢–ê –î–û: {}", untilDate);
//
//            // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ä—ã: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ
//            List<String> tickersToProcess;
//            final List<String> originalRequestedTickers; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
//
//            if (request.getTickers() != null && !request.getTickers().isEmpty()) {
//                log.info("üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ {} —Ç–∏–∫–µ—Ä–æ–≤", request.getTickers().size());
//                originalRequestedTickers = new ArrayList<>(request.getTickers()); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
//                tickersToProcess = new ArrayList<>(request.getTickers());
//
//                // –î–æ–±–∞–≤–ª—è–µ–º BTC-USDT-SWAP –∫–∞–∫ —ç—Ç–∞–ª–æ–Ω –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ
//                if (!tickersToProcess.contains("BTC-USDT-SWAP")) {
//                    tickersToProcess.add("BTC-USDT-SWAP");
//                    log.info("üéØ –î–æ–±–∞–≤–ª–µ–Ω BTC-USDT-SWAP –∫–∞–∫ —ç—Ç–∞–ª–æ–Ω –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–≤—Å–µ–≥–æ {} —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏)", tickersToProcess.size());
//                }
//            } else {
//                log.info("üåê –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã");
//                originalRequestedTickers = null; // –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞
//                tickersToProcess = okxFeignClient.getAllSwapTickers(true);
//
//                // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–∏–∫–µ—Ä—ã –∏–∑ excludeTickers –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
//                if (request.getExcludeTickers() != null && !request.getExcludeTickers().isEmpty()) {
//                    log.info("‚ùå –ò—Å–∫–ª—é—á–∞–µ–º {} —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", request.getExcludeTickers().size());
//                    tickersToProcess = tickersToProcess.stream()
//                            .filter(ticker -> !request.getExcludeTickers().contains(ticker))
//                            .toList();
//                    log.info("‚úÖ –ü–æ—Å–ª–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å {} —Ç–∏–∫–µ—Ä–æ–≤", tickersToProcess.size());
//                }
//            }
//
//            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
//            if (tickersToProcess == null || tickersToProcess.isEmpty()) {
//                log.error("‚ùå API –û–®–ò–ë–ö–ê: –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –¥–ª—è extended –∑–∞–ø—Ä–æ—Å–∞");
//                return ResponseEntity.badRequest().body(Map.of(
//                        "success", false,
//                        "message", "–°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
//                ));
//            }
//
//            // –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç thread-safe
//            Map<String, List<Candle>> result = new ConcurrentHashMap<>();
//            AtomicInteger totalCandlesCount = new AtomicInteger(0);
//            AtomicInteger processedTickers = new AtomicInteger(0);
//            AtomicInteger successfulTickers = new AtomicInteger(0);
//
//            log.info("üöÄ –ú–ù–û–ì–û–ü–û–¢–û–ß–ù–û–°–¢–¨: –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {} —Ç–∏–∫–µ—Ä–æ–≤ –≤ {} –ø–æ—Ç–æ–∫–∞—Ö",
//                    tickersToProcess.size(), Math.min(5, tickersToProcess.size()));
//
//            // –°–æ–∑–¥–∞–µ–º –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤ (–º–∞–∫—Å–∏–º—É–º 5 –ø–æ—Ç–æ–∫–æ–≤)
//            ExecutorService executor = Executors.newFixedThreadPool(Math.min(5, tickersToProcess.size()));
//            try {
//                // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–∫–µ—Ä–∞
//                List<Future<Void>> futures = new ArrayList<>();
//
//                for (String ticker : tickersToProcess) {
//                    List<String> finalTickersToProcess = tickersToProcess;
//                    Future<Void> future = executor.submit(() -> {
//                        int tickerNumber = processedTickers.incrementAndGet();
//                        String threadName = Thread.currentThread().getName();
//
//                        log.info("üîÑ [{}/{}] –ü–æ—Ç–æ–∫ {}: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∏–∫–µ—Ä {}",
//                                tickerNumber, finalTickersToProcess.size(), threadName, ticker);
//
//                        try {
//                            long startTime = System.currentTimeMillis();
//
//                            List<Candle> candles = cacheValidatedCandlesProcessor.getValidatedCandlesFromCache(
//                                    exchange, ticker, untilDate, timeframe, period);
//
//                            long duration = System.currentTimeMillis() - startTime;
//
//                            if (!candles.isEmpty()) {
//                                result.put(ticker, candles);
//                                totalCandlesCount.addAndGet(candles.size());
//                                successfulTickers.incrementAndGet();
//                                log.info("‚úÖ [{}/{}] –ü–æ—Ç–æ–∫ {}: –ü–æ–ª—É—á–µ–Ω–æ {} —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {} –∑–∞ {} –º—Å",
//                                        tickerNumber, finalTickersToProcess.size(), threadName, candles.size(), ticker, duration);
//                            } else {
//                                log.warn("‚ö†Ô∏è [{}/{}] –ü–æ—Ç–æ–∫ {}: –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {} –∑–∞ {} –º—Å",
//                                        tickerNumber, finalTickersToProcess.size(), threadName, ticker, duration);
//                            }
//                        } catch (Exception e) {
//                            log.error("‚ùå [{}/{}] –ü–æ—Ç–æ–∫ {}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}: {}",
//                                    tickerNumber, finalTickersToProcess.size(), threadName, ticker, e.getMessage());
//                        }
//
//                        return null;
//                    });
//
//                    futures.add(future);
//                }
//
//                // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á (–º–∞–∫—Å–∏–º—É–º 2 –º–∏–Ω—É—Ç—ã –Ω–∞ –≤—Å–µ —Ç–∏–∫–µ—Ä—ã)
//                executor.shutdown();
//                if (!executor.awaitTermination(1, TimeUnit.HOURS)) {
//                    log.warn("‚ö†Ô∏è –¢–ê–ô–ú–ê–£–¢: –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–¥–∞—á–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –∑–∞ 1 —á–∞—Å, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º");
//                    executor.shutdownNow();
//                }
//
//                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å–µ—Ö –∑–∞–¥–∞—á
//                for (Future<Void> future : futures) {
//                    try {
//                        future.get(1, TimeUnit.SECONDS); // –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç —Ç–∞–∫ –∫–∞–∫ –∑–∞–¥–∞—á–∏ —É–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω—ã
//                    } catch (TimeoutException | ExecutionException e) {
//                        log.warn("‚ö†Ô∏è –û–¥–Ω–∞ –∏–∑ –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {}", e.getMessage());
//                    }
//                }
//
//            } catch (InterruptedException e) {
//                log.error("‚ùå –ü–†–ï–†–´–í–ê–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞: {}", e.getMessage());
//                Thread.currentThread().interrupt();
//            } finally {
//                // –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º executor
//                if (!executor.isShutdown()) {
//                    executor.shutdownNow();
//                }
//            }
//
//            Map<String, List<Candle>> filteredResult;
//            if (result != null && !result.isEmpty()) {
//                int totalCandles = result.values().stream().mapToInt(List::size).sum();
//                int avgCandles = totalCandles / result.size();
//                log.info("üíæ –ó–∞–ø—Ä–æ—Å –ò–ó –ö–≠–®–ê –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–æ–ª—É—á–µ–Ω–æ {} —Ç–∏–∫–µ—Ä–æ–≤ —Å–æ —Å—Ä–µ–¥–Ω–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º {} —Å–≤–µ—á–µ–π (–≤—Å–µ–≥–æ {} —Å–≤–µ—á–µ–π)",
//                        result.size(), avgCandles, totalCandles);
//
//                // –ï—Å–ª–∏ –±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Ö
//                if (originalRequestedTickers != null) {
//                    filteredResult = result.entrySet().stream()
//                            .filter(entry -> originalRequestedTickers.contains(entry.getKey()))
//                            .collect(Collectors.toMap(
//                                    Map.Entry::getKey,
//                                    Map.Entry::getValue
//                            ));
//
//                    log.info("üéØ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º {} –∏–∑ {} —Ç–∏–∫–µ—Ä–æ–≤",
//                            filteredResult.size(), result.size());
//                }
//            } else {
//                log.warn("‚ö†Ô∏è –ö—ç—à –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏!");
//            }
//
//            log.info("‚úÖ API –†–ï–ó–£–õ–¨–¢–ê–¢: –í–æ–∑–≤—Ä–∞—â–∞–µ–º {} —Å–≤–µ—á–µ–π –¥–ª—è {}/{} —Ç–∏–∫–µ—Ä–æ–≤ (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ)",
//                    totalCandlesCount.get(), successfulTickers.get(), tickersToProcess.size());
//
//            // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Ç–∏–∫–µ—Ä–∞–º–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ–π –¥–æ–≥—Ä—É–∑–∫–æ–π
//            ValidationResult consistencyResult = validateDataConsistencyBetweenTickersWithReload(
//                    result, exchange, untilDate, timeframe, period, tickersToProcess);
//            if (!consistencyResult.isValid) {
//                log.error("‚ùå –í–ê–õ–ò–î–ê–¶–ò–Ø –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–ò: {}", consistencyResult.reason);
//                return ResponseEntity.ok(Map.of(
//                        "success", false,
//                        "message", "–î–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏: " + consistencyResult.reason,
//                        "candlesCount", 0
//                ));
//            }
//
//            // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º API –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ
//            // —á—Ç–æ –∏ /all-extended: –ø—Ä–æ—Å—Ç–æ Map<String, List<Candle>>
//            return ResponseEntity.ok(result);
//
//        } catch (Exception e) {
//            log.error("‚ùå API –û–®–ò–ë–ö–ê: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π (extended): {}", e.getMessage(), e);
//            return ResponseEntity.ok(Map.of(
//                    "success", false,
//                    "message", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π: " + e.getMessage(),
//                    "candlesCount", 0
//            ));
//        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞—Ç—É "–¥–æ" –∫–∞–∫ –Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 2025-09-27T00:00:00Z
     */
    private String generateUntilDate() {
        return LocalDate.now().atStartOfDay() + ":00Z";
    }

    /**
     * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Ç–∏–∫–µ—Ä–∞–º–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –¥–æ–≥—Ä—É–∑–∫–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    private ValidationResult validateDataConsistencyBetweenTickersWithReload(
            Map<String, List<Candle>> tickerData, String exchange, String untilDate, 
            String timeframe, String period, List<String> allTickers) {
        
        log.info("üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –° –î–û–ì–†–£–ó–ö–û–ô: –ü—Ä–æ–≤–µ—Ä—è–µ–º {} —Ç–∏–∫–µ—Ä–æ–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö", tickerData.size());

        if (tickerData.isEmpty()) {
            return new ValidationResult(false, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏");
        }

        // –ú–∞–∫—Å–∏–º—É–º 2 –ø–æ–ø—ã—Ç–∫–∏ –¥–æ–≥—Ä—É–∑–∫–∏
        for (int attempt = 1; attempt <= 2; attempt++) {
            log.info("üîÑ –ü–û–ü–´–¢–ö–ê #{}: –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏", attempt);
            
            ValidationResult basicResult = validateDataConsistencyBetweenTickers(tickerData);
            
            if (basicResult.isValid) {
                log.info("‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –° –î–û–ì–†–£–ó–ö–û–ô: –í—Å–µ —Ç–∏–∫–µ—Ä—ã –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã –ø–æ—Å–ª–µ {} –ø–æ–ø—ã—Ç–æ–∫", attempt);
                return basicResult;
            }
            
            if (attempt == 2) {
                log.error("‚ùå –í–ê–õ–ò–î–ê–¶–ò–Ø –° –î–û–ì–†–£–ó–ö–û–ô: –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∏—Ç—å—Å—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ 2 –ø–æ–ø—ã—Ç–æ–∫");
                return basicResult; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—à–∏–±–∫—É
            }
            
            log.warn("‚ö†Ô∏è –ü–û–ü–´–¢–ö–ê #{}: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è, –∑–∞–ø—É—Å–∫–∞–µ–º –¥–æ–≥—Ä—É–∑–∫—É", attempt);
            
            // –ù–∞—Ö–æ–¥–∏–º —Ç–∏–∫–µ—Ä—ã —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–∞–Ω–Ω—ã—Ö
            List<String> tickersToReload = findTickersNeedingReload(tickerData);
            
            if (tickersToReload.isEmpty()) {
                log.error("‚ùå –î–û–ì–†–£–ó–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–∫–µ—Ä—ã –¥–ª—è –¥–æ–≥—Ä—É–∑–∫–∏");
                return basicResult;
            }
            
            log.info("üîÑ –î–û–ì–†–£–ó–ö–ê: –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è {} —Ç–∏–∫–µ—Ä–æ–≤: {}", 
                    tickersToReload.size(), tickersToReload);
            
            // –î–æ–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤
            boolean reloadSuccess = reloadDataForTickers(tickersToReload, exchange, untilDate, timeframe, period);
            
            if (!reloadSuccess) {
                log.error("‚ùå –î–û–ì–†–£–ó–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ");
                return new ValidationResult(false, "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–≥—Ä—É–∑–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ");
            }
            
            // –ó–∞–Ω–æ–≤–æ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤
            log.info("üîÑ –ü–û–í–¢–û–†–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê: –ó–∞–Ω–æ–≤–æ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤");
            tickerData.clear();
            tickerData.putAll(reloadAllTickersData(allTickers, exchange, untilDate, timeframe, period));
            
            if (tickerData.isEmpty()) {
                log.error("‚ùå –ü–û–í–¢–û–†–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ");
                return new ValidationResult(false, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –¥–æ–≥—Ä—É–∑–∫–∏");
            }
        }
        
        return new ValidationResult(false, "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –¥–æ–≥—Ä—É–∑–∫–æ–π");
    }

    /**
     * –ù–∞—Ö–æ–¥–∏—Ç —Ç–∏–∫–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–∞ –¥–æ–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
     */
    private List<String> findTickersNeedingReload(Map<String, List<Candle>> tickerData) {
        if (tickerData.isEmpty()) {
            return List.of();
        }
        
        // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤
        int maxCandles = tickerData.values().stream()
                .mapToInt(List::size)
                .max()
                .orElse(0);
                
        // –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π —à–∏—Ä–æ–∫–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω (—Å–∞–º—É—é —Å—Ç–∞—Ä—É—é –ø–µ—Ä–≤—É—é —Å–≤–µ—á—É –∏ —Å–∞–º—É—é –Ω–æ–≤—É—é –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–µ—á—É)
        long oldestFirstTimestamp = Long.MAX_VALUE;
        long newestLastTimestamp = Long.MIN_VALUE;
        
        for (List<Candle> candles : tickerData.values()) {
            if (!candles.isEmpty()) {
                long firstTimestamp = candles.get(0).getTimestamp();
                long lastTimestamp = candles.get(candles.size() - 1).getTimestamp();
                oldestFirstTimestamp = Math.min(oldestFirstTimestamp, firstTimestamp);
                newestLastTimestamp = Math.max(newestLastTimestamp, lastTimestamp);
            }
        }
        
        // –î–µ–ª–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ effectively final –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ lambda
        final long finalOldestFirstTimestamp = oldestFirstTimestamp;
        final long finalNewestLastTimestamp = newestLastTimestamp;
        
        log.info("üîç –ê–ù–ê–õ–ò–ó: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π: {}", maxCandles);
        log.info("üîç –ê–ù–ê–õ–ò–ó: –≠—Ç–∞–ª–æ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: {} - {}", 
                formatTimestamp(finalOldestFirstTimestamp), formatTimestamp(finalNewestLastTimestamp));
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–∏–∫–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–∞ –¥–æ–≥—Ä—É–∑–∫–∞ (–º–µ–Ω—å—à–µ —Å–≤–µ—á–µ–π –ò–õ–ò –Ω–µ–ø–æ–ª–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω)
        return tickerData.entrySet().stream()
                .filter(entry -> {
                    List<Candle> candles = entry.getValue();
                    if (candles.isEmpty()) return true;
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
                    boolean needsMoreCandles = candles.size() < maxCandles;
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
                    long firstTimestamp = candles.get(0).getTimestamp();
                    long lastTimestamp = candles.get(candles.size() - 1).getTimestamp();
                    boolean needsOlderData = firstTimestamp > finalOldestFirstTimestamp;
                    boolean needsNewerData = lastTimestamp < finalNewestLastTimestamp;
                    
                    return needsMoreCandles || needsOlderData || needsNewerData;
                })
                .map(Map.Entry::getKey)
                .peek(ticker -> {
                    List<Candle> candles = tickerData.get(ticker);
                    if (!candles.isEmpty()) {
                        long firstTimestamp = candles.get(0).getTimestamp();
                        long lastTimestamp = candles.get(candles.size() - 1).getTimestamp();
                        log.info("üéØ –î–û–ì–†–£–ó–ö–ê –ù–£–ñ–ù–ê: {} ({} —Å–≤–µ—á–µ–π, –¥–∏–∞–ø–∞–∑–æ–Ω {} - {})", 
                                ticker, candles.size(), 
                                formatTimestamp(firstTimestamp), formatTimestamp(lastTimestamp));
                    } else {
                        log.info("üéØ –î–û–ì–†–£–ó–ö–ê –ù–£–ñ–ù–ê: {} (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)", ticker);
                    }
                })
                .toList();
    }

    /**
     * –î–æ–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤
     */
    private boolean reloadDataForTickers(List<String> tickers, String exchange, 
                                       String untilDate, String timeframe, String period) {
        log.info("üöÄ –î–û–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•: –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ–≥—Ä—É–∑–∫—É –¥–ª—è {} —Ç–∏–∫–µ—Ä–æ–≤", tickers.size());
        
        boolean allSuccess = true;
        for (String ticker : tickers) {
            try {
                log.info("üîÑ –î–û–ì–†–£–ó–ö–ê: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∏–∫–µ—Ä {}", ticker);
                int savedCount = candlesLoaderProcessor.loadAndSaveCandles(exchange, ticker, untilDate, timeframe, period);
                
                if (savedCount > 0) {
                    log.info("‚úÖ –î–û–ì–†–£–ó–ö–ê: –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {} —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}", savedCount, ticker);
                } else {
                    log.warn("‚ö†Ô∏è –î–û–ì–†–£–ó–ö–ê: –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–æ–≤—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}", ticker);
                    // –ù–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–æ–π
                }
            } catch (Exception e) {
                log.error("‚ùå –î–û–ì–†–£–ó–ö–ê: –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–≥—Ä—É–∑–∫–µ —Ç–∏–∫–µ—Ä–∞ {}: {}", ticker, e.getMessage(), e);
                allSuccess = false;
            }
        }
        
        return allSuccess;
    }

    /**
     * –ó–∞–Ω–æ–≤–æ –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –¥–æ–≥—Ä—É–∑–∫–∏
     */
    private Map<String, List<Candle>> reloadAllTickersData(List<String> tickers, String exchange, 
                                                          String untilDate, String timeframe, String period) {
        log.info("üîÑ –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê: –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {} —Ç–∏–∫–µ—Ä–æ–≤", tickers.size());
        
        Map<String, List<Candle>> result = new ConcurrentHashMap<>();
        
        for (String ticker : tickers) {
            try {
                List<Candle> candles = cacheValidatedCandlesProcessor.getValidatedCandlesFromCache(
                        exchange, ticker, untilDate, timeframe, period);
                
                if (!candles.isEmpty()) {
                    result.put(ticker, candles);
                    log.info("‚úÖ –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê: –ü–æ–ª—É—á–µ–Ω–æ {} —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}", candles.size(), ticker);
                } else {
                    log.warn("‚ö†Ô∏è –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê: –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}", ticker);
                }
            } catch (Exception e) {
                log.error("‚ùå –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}: {}", ticker, e.getMessage(), e);
            }
        }
        
        log.info("‚úÖ –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {}/{} —Ç–∏–∫–µ—Ä–æ–≤", result.size(), tickers.size());
        return result;
    }

    /**
     * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Ç–∏–∫–µ—Ä–∞–º–∏ (–±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —É –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–∞—Ç –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
     */
    private ValidationResult validateDataConsistencyBetweenTickers(Map<String, List<Candle>> tickerData) {
        log.info("üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–ò: –ü—Ä–æ–≤–µ—Ä—è–µ–º {} —Ç–∏–∫–µ—Ä–æ–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö", tickerData.size());

        if (tickerData.isEmpty()) {
            return new ValidationResult(false, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏");
        }

        // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–ø–µ—Ä–≤–æ–≥–æ —Ç–∏–∫–µ—Ä–∞)
        String referenceTicker = null;
        int referenceCount = -1;
        long referenceFirstTimestamp = -1;
        long referenceLastTimestamp = -1;

        for (Map.Entry<String, List<Candle>> entry : tickerData.entrySet()) {
            String ticker = entry.getKey();
            List<Candle> candles = entry.getValue();

            if (candles.isEmpty()) {
                log.warn("‚ö†Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø: –¢–∏–∫–µ—Ä {} –∏–º–µ–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π", ticker);
                continue;
            }

            int currentCount = candles.size();
            long currentFirstTimestamp = candles.get(0).getTimestamp();
            long currentLastTimestamp = candles.get(candles.size() - 1).getTimestamp();

            log.info("üìä –í–ê–õ–ò–î–ê–¶–ò–Ø: –¢–∏–∫–µ—Ä {}: {} —Å–≤–µ—á–µ–π, –¥–∏–∞–ø–∞–∑–æ–Ω {} - {}", 
                    ticker, currentCount, 
                    formatTimestamp(currentFirstTimestamp), 
                    formatTimestamp(currentLastTimestamp));

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å –ø–µ—Ä–≤–æ–≥–æ —Ç–∏–∫–µ—Ä–∞
            if (referenceTicker == null) {
                referenceTicker = ticker;
                referenceCount = currentCount;
                referenceFirstTimestamp = currentFirstTimestamp;
                referenceLastTimestamp = currentLastTimestamp;
                log.info("üéØ –≠–¢–ê–õ–û–ù: –¢–∏–∫–µ—Ä {} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ —ç—Ç–∞–ª–æ–Ω: {} —Å–≤–µ—á–µ–π, –¥–∏–∞–ø–∞–∑–æ–Ω {} - {}", 
                        referenceTicker, referenceCount,
                        formatTimestamp(referenceFirstTimestamp), 
                        formatTimestamp(referenceLastTimestamp));
                continue;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
            if (currentCount != referenceCount) {
                String reason = String.format("–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–≤–µ—á–µ–π: %s –∏–º–µ–µ—Ç %d —Å–≤–µ—á–µ–π, –∞ —ç—Ç–∞–ª–æ–Ω %s –∏–º–µ–µ—Ç %d —Å–≤–µ—á–µ–π",
                        ticker, currentCount, referenceTicker, referenceCount);
                log.error("‚ùå –í–ê–õ–ò–î–ê–¶–ò–Ø –ö–û–õ–ò–ß–ï–°–¢–í–ê: {}", reason);
                return new ValidationResult(false, reason);
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—É—é —Å–≤–µ—á—É
            if (currentFirstTimestamp != referenceFirstTimestamp) {
                String reason = String.format("–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–µ—Ä–≤–æ–π —Å–≤–µ—á–∏: %s –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å %s, –∞ —ç—Ç–∞–ª–æ–Ω %s —Å %s",
                        ticker, formatTimestamp(currentFirstTimestamp), 
                        referenceTicker, formatTimestamp(referenceFirstTimestamp));
                log.error("‚ùå –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–ï–†–í–û–ô –°–í–ï–ß–ò: {}", reason);
                return new ValidationResult(false, reason);
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–µ—á—É
            if (currentLastTimestamp != referenceLastTimestamp) {
                String reason = String.format("–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏: %s –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ %s, –∞ —ç—Ç–∞–ª–æ–Ω %s –Ω–∞ %s",
                        ticker, formatTimestamp(currentLastTimestamp), 
                        referenceTicker, formatTimestamp(referenceLastTimestamp));
                log.error("‚ùå –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–û–°–õ–ï–î–ù–ï–ô –°–í–ï–ß–ò: {}", reason);
                return new ValidationResult(false, reason);
            }

            log.info("‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø: –¢–∏–∫–µ—Ä {} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —ç—Ç–∞–ª–æ–Ω—É", ticker);
        }

        log.info("‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–ò: –í—Å–µ {} —Ç–∏–∫–µ—Ä–æ–≤ –∏–º–µ—é—Ç –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π", tickerData.size());
        return new ValidationResult(true, "–í—Å–µ —Ç–∏–∫–µ—Ä—ã –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–∞—Ç –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π");
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç timestamp –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
     */
    private String formatTimestamp(long timestamp) {
        try {
            if (timestamp > 9999999999L) {
                // –ú–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
                return java.time.Instant.ofEpochMilli(timestamp).toString();
            } else {
                // –°–µ–∫—É–Ω–¥—ã
                return java.time.Instant.ofEpochSecond(timestamp).toString();
            }
        } catch (Exception e) {
            return String.valueOf(timestamp);
        }
    }

    /**
     * –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     */
    private static class ValidationResult {
        final boolean isValid;
        final String reason;

        ValidationResult(boolean isValid, String reason) {
            this.isValid = isValid;
            this.reason = reason;
        }
    }
}