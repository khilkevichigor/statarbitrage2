package com.example.candles.service;

import com.example.candles.repositories.CachedCandleRepository;
import com.example.candles.utils.CandleCalculatorUtil;
import com.example.shared.dto.Candle;
import com.example.shared.models.CachedCandle;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.time.Instant;
import java.util.List;
import java.util.stream.Collectors;

/**
 * –°–µ—Ä–≤–∏—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π –∏–∑ –∫—ç—à–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
 * <p>
 * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
 * - –±–∏—Ä–∂–∞ (exchange)
 * - —Ç–∏–∫–µ—Ä (ticker)
 * - –¥–∞—Ç–∞ –î–û (untilDate) - –æ–±—Ä–µ–∑–∞–Ω–Ω–∞—è –¥–æ –Ω–∞—á–∞–ª–∞ –¥–Ω—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 2025-09-27T00:00:00Z
 * - —Ç–∞–π–º—Ñ—Ä–µ–π–º (timeframe) –≤ —Ñ–æ—Ä–º–∞—Ç–µ 1H, 1D, 1m...
 * - –ø–µ—Ä–∏–æ–¥ (period) –≤ –≤–∏–¥–µ "1year", "6months"...
 * <p>
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–≤–µ—á–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É.
 * –ü—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–≥—Ä—É–∂–∞–µ—Ç —á–µ—Ä–µ–∑ CandlesLoaderProcessor.
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class CacheValidatedCandlesProcessor {

    private final CachedCandleRepository cachedCandleRepository;
    private final CandlesLoaderProcessor candlesLoaderProcessor;

    // –í—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –≤–æ –≤—Ä–µ–º—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    private String currentTimeframe;

    /**
     * –ì–ª–∞–≤–Ω—ã–π –ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –∏–∑ –∫—ç—à–∞
     */
    public List<Candle> getValidatedCandlesFromCache(String exchange, String ticker, String untilDate, String timeframe, String period) {
        log.info("üîç –ö–≠–® –ó–ê–ü–†–û–°: –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {} –Ω–∞ –±–∏—Ä–∂–µ {}", ticker, exchange);
        log.info("üìä –ü–ê–†–ê–ú–ï–¢–†–´: untilDate={}, timeframe={}, period={}", untilDate, timeframe, period);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        this.currentTimeframe = timeframe;

        try {
            // –®–∞–≥ 1: –í—ã—á–∏—Å–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –° –£–ß–ï–¢–û–ú untilDate
            int expectedCandlesCount = CandleCalculatorUtil.calculateCandlesCountUntilDate(ticker, timeframe, period, untilDate);
            log.info("üéØ –û–ñ–ò–î–ê–ù–ò–Ø: {} —Å–≤–µ—á–µ–π –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ '{}' —Å —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–º {} –¥–æ {}", expectedCandlesCount, period, timeframe, untilDate);

            // –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–≤–µ—á–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
            List<Candle> cachedCandles = getCandlesFromCacheByActualRange(exchange, ticker, timeframe, expectedCandlesCount);

            // –®–∞–≥ 2.5: –û–±—Ä–µ–∑–∞–µ–º —Å–≤–µ—á–∏ —Ç–æ—á–Ω–æ –¥–æ untilDate
            long untilTimestamp = parseUntilDate(untilDate);
            cachedCandles = filterCandlesUntilDate(cachedCandles, untilTimestamp, expectedCandlesCount, timeframe);

            // –®–∞–≥ 3: –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–≤–µ—á–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
            ValidationResult validationResult = validateCandlesByCount(cachedCandles, expectedCandlesCount, ticker, timeframe);

            // –®–∞–≥ 4: –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã - –¥–æ–≥—Ä—É–∂–∞–µ–º
            if (!validationResult.isValid) {
                log.warn("‚ö†Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–†–û–í–ê–õ–ï–ù–ê: {}", validationResult.reason);
                log.info("üîÑ –î–û–ì–†–£–ó–ö–ê: –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}", ticker);

                // –î–æ–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
                int loadedCount = candlesLoaderProcessor.loadAndSaveCandles(exchange, ticker, untilDate, timeframe, period);
                if (loadedCount > 0) {
                    log.info("‚úÖ –î–û–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê: –ó–∞–≥—Ä—É–∂–µ–Ω–æ {} —Å–≤–µ—á–µ–π, –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∏–∑ –∫—ç—à–∞", loadedCount);

                    // –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∏–∑ –∫—ç—à–∞ –ø–æ—Å–ª–µ –¥–æ–≥—Ä—É–∑–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—è —Ä–µ–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
                    cachedCandles = getCandlesFromCacheByActualRange(exchange, ticker, timeframe, expectedCandlesCount);
                    // –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ–±—Ä–µ–∑–∞–µ–º —Å–≤–µ—á–∏ —Ç–æ—á–Ω–æ –¥–æ untilDate
                    cachedCandles = filterCandlesUntilDate(cachedCandles, untilTimestamp, expectedCandlesCount, timeframe);
                    validationResult = validateCandlesByCount(cachedCandles, expectedCandlesCount, ticker, timeframe);

                    if (!validationResult.isValid) {
                        log.error("‚ùå –ü–û–í–¢–û–†–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–†–û–í–ê–õ–ï–ù–ê: {} –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}", validationResult.reason, ticker);
                        return List.of(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
                    }
                } else {
                    log.error("‚ùå –î–û–ì–†–£–ó–ö–ê –ü–†–û–í–ê–õ–ï–ù–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}", ticker);
                    return List.of(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
                }
            }

            // –®–∞–≥ 5: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏
            log.info("‚úÖ –ö–≠–® –†–ï–ó–£–õ–¨–¢–ê–¢: –í–æ–∑–≤—Ä–∞—â–∞–µ–º {} –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}", cachedCandles.size(), ticker);
            return cachedCandles;

        } catch (Exception e) {
            log.error("üí• –ö–≠–® –û–®–ò–ë–ö–ê: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}: {}", ticker, e.getMessage(), e);
            return List.of();
        }
    }

    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     */
    private ExpectedParameters calculateExpectedParameters(String ticker, String untilDate, String timeframe, String period) {
        log.info("üìê –†–ê–°–ß–ï–¢ –ü–ê–†–ê–ú–ï–¢–†–û–í: untilDate={}, timeframe={}, period={}", untilDate, timeframe, period);

        // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É "–¥–æ"
        long untilTimestamp = parseUntilDate(untilDate);

        // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
        int candlesCount = calculateCandlesCount(ticker, timeframe, period);

        // –í—ã—á–∏—Å–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è —Å—Ç–∞—Ä–µ–π—à–µ–π —Å–≤–µ—á–∏
        long timeframeDurationMs = getTimeframeDurationInMillis(timeframe);
        // –ù–æ–≤–µ–π—à–∞—è —Å–≤–µ—á–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ù–ê –û–î–ò–ù –î–ï–ù–¨ –†–ê–ù–¨–®–ï untilDate (–∏—Å–∫–ª—é—á–∞–µ–º –≥—Ä–∞–Ω–∏—á–Ω—É—é —Ç–æ—á–∫—É)
        long expectedNewestTime = untilTimestamp - (24 * 60 * 60 * 1000L); // -1 –¥–µ–Ω—å
        // –°—Ç–∞—Ä–µ–π—à–∞—è —Å–≤–µ—á–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç –Ω–æ–≤–µ–π—à–µ–π
        long expectedOldestTime = expectedNewestTime - ((candlesCount - 1) * timeframeDurationMs);

        return new ExpectedParameters(candlesCount, expectedOldestTime, expectedNewestTime);
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 2025-09-27T00:00:00Z –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
     */
    private long parseUntilDate(String untilDate) {
        try {
            return Instant.parse(untilDate).toEpochMilli();
        } catch (Exception e) {
            log.error("‚ùå –û–®–ò–ë–ö–ê –ü–ê–†–°–ò–ù–ì–ê –î–ê–¢–´: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É {}: {}", untilDate, e.getMessage());
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∫–∞–∫ fallback
            return System.currentTimeMillis();
        }
    }

    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –∏—Å—Ö–æ–¥—è –∏–∑ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –∏ –ø–µ—Ä–∏–æ–¥–∞
     */
    private int calculateCandlesCount(String ticker, String timeframe, String period) {
        return CandleCalculatorUtil.calculateCandlesCount(ticker, timeframe, period);
    }


    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
     */
    private long getTimeframeDurationInMillis(String timeframe) {
        return switch (timeframe) {
            case "1m" -> 60 * 1000L;                    // 1 –º–∏–Ω—É—Ç–∞
            case "5m" -> 5 * 60 * 1000L;                // 5 –º–∏–Ω—É—Ç
            case "15m" -> 15 * 60 * 1000L;              // 15 –º–∏–Ω—É—Ç
            case "1H" -> 60 * 60 * 1000L;               // 1 —á–∞—Å
            case "4H" -> 4 * 60 * 60 * 1000L;           // 4 —á–∞—Å–∞
            case "1D" -> 24 * 60 * 60 * 1000L;          // 1 –¥–µ–Ω—å
            case "1W" -> 7 * 24 * 60 * 60 * 1000L;      // 1 –Ω–µ–¥–µ–ª—è
            case "1M" -> 30L * 24 * 60 * 60 * 1000L;    // 1 –º–µ—Å—è—Ü (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
            default -> {
                log.warn("‚ö†Ô∏è –ù–ï–ò–ó–í–ï–°–¢–ù–´–ô –¢–ê–ô–ú–§–†–ï–ô–ú: {}, –∏—Å–ø–æ–ª—å–∑—É–µ–º 1H", timeframe);
                yield 60 * 60 * 1000L;
            }
        };
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏ –∏–∑ –∫—ç—à–∞ –ø–æ —Ä–µ–∞–ª—å–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É (–ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–≤–µ—á–µ–π)
     */
    private List<Candle> getCandlesFromCacheByActualRange(String exchange, String ticker, String timeframe, int expectedCount) {
        log.info("üóÉÔ∏è –ö–≠–® –ó–ê–ü–†–û–°: –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ {} —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}", expectedCount, ticker);

        try {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–≤–µ—á–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏
            List<CachedCandle> cachedCandles = cachedCandleRepository
                    .findByTickerAndTimeframeAndExchangeOrderByTimestampDesc(ticker, timeframe, exchange);

            log.info("üîç –ö–≠–® –ü–û–ò–°–ö: –ù–∞–π–¥–µ–Ω–æ {} —Å–≤–µ—á–µ–π –≤ –ë–î –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}", cachedCandles.size(), ticker);

            // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π
            List<CachedCandle> limitedCandles = cachedCandles.stream()
                    .limit(expectedCount)
                    .collect(Collectors.toList());

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
            limitedCandles.sort((a, b) -> Long.compare(a.getTimestamp(), b.getTimestamp()));

            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Candle
            List<Candle> candles = limitedCandles.stream()
                    .map(CachedCandle::toCandle)
                    .collect(Collectors.toList());

            log.info("‚úÖ –ö–≠–® –û–¢–í–ï–¢: –ü–æ–ª—É—á–µ–Ω–æ {} —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {} –∏–∑ –∫—ç—à–∞ –ø–æ —Ä–µ–∞–ª—å–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É", candles.size(), ticker);

            if (!candles.isEmpty()) {
                long actualOldest = candles.get(0).getTimestamp();
                long actualNewest = candles.get(candles.size() - 1).getTimestamp();
                log.info("üìÖ –§–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –î–ò–ê–ü–ê–ó–û–ù –ò–ó –ö–≠–®–ê: {} - {}",
                        formatTimestamp(actualOldest), formatTimestamp(actualNewest));
            }

            return candles;

        } catch (Exception e) {
            log.error("‚ùå –ö–≠–® –û–®–ò–ë–ö–ê: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}: {}", ticker, e.getMessage(), e);
            return List.of();
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–≤–µ—á–∏ –∏–∑ –∫—ç—à–∞ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤)
     */
    private List<Candle> getCandlesFromCache(String exchange, String ticker, String timeframe, int limit, long expectedOldestTime, long expectedNewestTime) {
        log.info("üóÉÔ∏è –ö–≠–® –ó–ê–ü–†–û–°: –ü–æ–ª—É—á–∞–µ–º {} —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {} –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ {} - {}",
                limit, ticker, formatTimestamp(expectedOldestTime), formatTimestamp(expectedNewestTime));

        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –Ω–∞–ø—Ä—è–º—É—é - timestamp –≤ –ë–î —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É –≤–º–µ—Å—Ç–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            List<CachedCandle> cachedCandles = cachedCandleRepository
                    .findByTickerAndTimeframeAndExchangeAndTimestampBetweenOrderByTimestampAsc(
                            ticker, timeframe, exchange, expectedOldestTime, expectedNewestTime);

            log.info("üîç –ö–≠–® –ü–û–ò–°–ö: –ü–æ–ª—É—á–µ–Ω–æ {} —Å–≤–µ—á–µ–π –∏–∑ –∫—ç—à–∞ –ø–æ —Ç–æ—á–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É {} - {}",
                    cachedCandles.size(), formatTimestamp(expectedOldestTime), formatTimestamp(expectedNewestTime));

            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Candle (—É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é timestamp)
            List<Candle> candles = cachedCandles.stream()
                    .map(CachedCandle::toCandle)
                    .collect(Collectors.toList());

            log.info("‚úÖ –ö–≠–® –û–¢–í–ï–¢: –ü–æ–ª—É—á–µ–Ω–æ {} —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {} –∏–∑ –∫—ç—à–∞ –ø–æ —Ç–æ—á–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É", candles.size(), ticker);

            if (!candles.isEmpty()) {
                long actualOldest = candles.get(0).getTimestamp();
                long actualNewest = candles.get(candles.size() - 1).getTimestamp();
                log.info("üìÖ –§–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –î–ò–ê–ü–ê–ó–û–ù –ò–ó –ö–≠–®–ê: {} - {}",
                        formatTimestamp(actualOldest), formatTimestamp(actualNewest));
            }

            return candles;

        } catch (Exception e) {
            log.error("‚ùå –ö–≠–® –û–®–ò–ë–ö–ê: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}: {}", ticker, e.getMessage(), e);
            return List.of();
        }
    }

    /**
     * –§–∏–ª—å—Ç—Ä—É–µ—Ç —Å–≤–µ—á–∏ —Ç–æ—á–Ω–æ –¥–æ untilDate –∏ –±–µ—Ä–µ—Ç –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
     */
    private List<Candle> filterCandlesUntilDate(List<Candle> candles, long untilTimestamp, int expectedCount, String timeframe) {
        if (candles.isEmpty()) {
            log.warn("‚ö†Ô∏è –§–ò–õ–¨–¢–† UNTILDATE: –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å");
            return candles;
        }

        log.info("üîç –§–ò–õ–¨–¢–† UNTILDATE: –§–∏–ª—å—Ç—Ä—É–µ–º {} —Å–≤–µ—á–µ–π –¥–æ –¥–∞—Ç—ã {}", candles.size(), formatTimestamp(untilTimestamp));

        // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–≤–µ—á–∏ —Å—Ç—Ä–æ–≥–æ –î–û untilDate (–Ω–µ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
        List<Candle> filteredCandles = candles.stream()
                .filter(candle -> candle.getTimestamp() < untilTimestamp)
                .collect(Collectors.toList());

        log.info("üîç –§–ò–õ–¨–¢–† –†–ï–ó–£–õ–¨–¢–ê–¢: –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ –æ—Å—Ç–∞–ª–æ—Å—å {} —Å–≤–µ—á–µ–π", filteredCandles.size());

        // –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å –±–æ–ª—å—à–µ —á–µ–º –Ω—É–∂–Ω–æ - –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–≤–µ—á–µ–π
        if (filteredCandles.size() > expectedCount) {
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ N, –∑–∞—Ç–µ–º —Å–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
            List<Candle> lastNCandles = filteredCandles.stream()
                    .sorted((a, b) -> Long.compare(b.getTimestamp(), a.getTimestamp())) // –ü–æ —É–±—ã–≤–∞–Ω–∏—é
                    .limit(expectedCount)
                    .sorted((a, b) -> Long.compare(a.getTimestamp(), b.getTimestamp())) // –û–±—Ä–∞—Ç–Ω–æ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
                    .collect(Collectors.toList());

            log.info("üîç –§–ò–õ–¨–¢–† –û–ë–†–ï–ó–ö–ê: –í–∑—è–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {} —Å–≤–µ—á–µ–π –∏–∑ {} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö", expectedCount, filteredCandles.size());
            filteredCandles = lastNCandles;
        }

        if (!filteredCandles.isEmpty()) {
            long actualOldest = filteredCandles.get(0).getTimestamp();
            long actualNewest = filteredCandles.get(filteredCandles.size() - 1).getTimestamp();
            log.info("üìÖ –§–ò–ù–ê–õ–¨–ù–´–ô –î–ò–ê–ü–ê–ó–û–ù –ü–û–°–õ–ï –§–ò–õ–¨–¢–†–ê: {} - {}",
                    formatTimestamp(actualOldest), formatTimestamp(actualNewest));

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ untilDate
            if (actualNewest >= untilTimestamp) {
                log.warn("‚ö†Ô∏è –§–ò–õ–¨–¢–† –ü–†–û–ë–õ–ï–ú–ê: –ù–æ–≤–µ–π—à–∞—è —Å–≤–µ—á–∞ {} >= untilDate {}",
                        formatTimestamp(actualNewest), formatTimestamp(untilTimestamp));
            } else {
                log.info("‚úÖ –§–ò–õ–¨–¢–† –ü–†–û–í–ï–†–ö–ê: –ù–æ–≤–µ–π—à–∞—è —Å–≤–µ—á–∞ {} < untilDate {} - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
                        formatTimestamp(actualNewest), formatTimestamp(untilTimestamp));
            }
        }

        return filteredCandles;
    }

    /**
     * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å–≤–µ—á–∏ —Ç–æ–ª—å–∫–æ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞)
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —É–≤–µ–ª–∏—á–µ–Ω–Ω—É—é –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –¥–ª—è —Å–ª—É—á–∞–µ–≤ —Å untilDate
     */
    private ValidationResult validateCandlesByCount(List<Candle> candles, int expectedCount, String ticker, String timeframe) {
        log.info("üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –ö–≠–®–∞: –ü—Ä–æ–≤–µ—Ä—è–µ–º {} —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}", candles.size(), ticker);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–≤–µ–ª–∏—á–µ–Ω–Ω—É—é –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –¥–ª—è —Å–ª—É—á–∞–µ–≤ —Å untilDate —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
        int allowedDifference = CandleCalculatorUtil.getAllowedDifferenceWithUntilDate(timeframe, expectedCount);
        int actualDifference = Math.abs(candles.size() - expectedCount);
        
        if (actualDifference > allowedDifference) {
            String tolerance = CandleCalculatorUtil.getToleranceDescription(timeframe) + " + untilDate –±—É—Ñ–µ—Ä";

            String reason = String.format("–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å–≤–µ—á–µ–π –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º–æ–µ: –æ–∂–∏–¥–∞–ª–æ—Å—å %d, –ø–æ–ª—É—á–µ–Ω–æ %d (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ %d > –¥–æ–ø—É—Å—Ç–∏–º–æ–µ %d, %s)",
                    expectedCount, candles.size(), actualDifference, allowedDifference, tolerance);
            log.warn("‚ö†Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø –ö–û–õ–ò–ß–ï–°–¢–í–ê: {}", reason);
            return new ValidationResult(false, reason);
        }

        log.info("‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê: –°–≤–µ—á–∏ –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {} –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å untilDate (–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ {})", ticker, allowedDifference);
        return new ValidationResult(true, "–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å untilDate —É—Å–ø–µ—à–Ω–∞");
    }

    /**
     * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ —Å–≤–µ—á–∏ (–ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞)
     */
    private ValidationResult validateCachedCandles(List<Candle> candles, ExpectedParameters expected, String ticker) {
        log.info("üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –ö–≠–®–∞: –ü—Ä–æ–≤–µ—Ä—è–µ–º {} —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}", candles.size(), ticker);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ—á–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–∑ —É—Ç–∏–ª–∏—Ç–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
        if (!CandleCalculatorUtil.isValidCandlesCount(currentTimeframe, expected.candlesCount, candles.size())) {
            int allowedDifference = CandleCalculatorUtil.getAllowedDifference(currentTimeframe, expected.candlesCount);
            int actualDifference = Math.abs(candles.size() - expected.candlesCount);
            String tolerance = CandleCalculatorUtil.getToleranceDescription(currentTimeframe);

            String reason = String.format("–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å–≤–µ—á–µ–π –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º–æ–µ: –æ–∂–∏–¥–∞–ª–æ—Å—å %d, –ø–æ–ª—É—á–µ–Ω–æ %d (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ %d > –¥–æ–ø—É—Å—Ç–∏–º–æ–µ %d, %s)",
                    expected.candlesCount, candles.size(), actualDifference, allowedDifference, tolerance);
            log.warn("‚ö†Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø –ö–û–õ–ò–ß–ï–°–¢–í–ê: {}", reason);
            return new ValidationResult(false, reason);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤–µ—á–∏)
        if (!candles.isEmpty()) {
            long actualOldestTime = candles.get(0).getTimestamp();          // –ü–µ—Ä–≤–∞—è = —Å–∞–º–∞—è —Å—Ç–∞—Ä–∞—è (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é)
            long actualNewestTime = candles.get(candles.size() - 1).getTimestamp(); // –ü–æ—Å–ª–µ–¥–Ω—è—è = —Å–∞–º–∞—è –Ω–æ–≤–∞—è

            log.info("üìÖ –§–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –î–ò–ê–ü–ê–ó–û–ù: {} - {}",
                    formatTimestamp(actualOldestTime), formatTimestamp(actualNewestTime));
            log.info("üìÖ –û–ñ–ò–î–ê–ï–ú–´–ô –î–ò–ê–ü–ê–ó–û–ù: {} - {}",
                    formatTimestamp(expected.expectedOldestTime), formatTimestamp(expected.expectedNewestTime));

            // –î–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –≤ 1% –æ—Ç –æ–±—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            long totalPeriod = expected.expectedNewestTime - expected.expectedOldestTime;
            long allowedDifference = Math.max(totalPeriod / 100, 60 * 60 * 1000L); // –ú–∏–Ω–∏–º—É–º 1 —á–∞—Å

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä–µ–π—à—É—é —Å–≤–µ—á—É
            long oldestTimeDiff = Math.abs(actualOldestTime - expected.expectedOldestTime);
            if (oldestTimeDiff > allowedDifference) {
                String reason = String.format("–î–∏–∞–ø–∞–∑–æ–Ω —Å—ä–µ—Ö–∞–ª: —Å—Ç–∞—Ä–µ–π—à–∞—è —Å–≤–µ—á–∞ %s –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π %s (—Ä–∞–∑–Ω–∏—Ü–∞ %d –º—Å)",
                        formatTimestamp(actualOldestTime), formatTimestamp(expected.expectedOldestTime), oldestTimeDiff);
                log.warn("‚ö†Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø –î–ò–ê–ü–ê–ó–û–ù–ê: {}", reason);
                return new ValidationResult(false, reason);
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤–µ–π—à—É—é —Å–≤–µ—á—É
            long newestTimeDiff = Math.abs(actualNewestTime - expected.expectedNewestTime);
            if (newestTimeDiff > allowedDifference) {
                String reason = String.format("–î–∏–∞–ø–∞–∑–æ–Ω —Å—ä–µ—Ö–∞–ª: –Ω–æ–≤–µ–π—à–∞—è —Å–≤–µ—á–∞ %s –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π %s (—Ä–∞–∑–Ω–∏—Ü–∞ %d –º—Å)",
                        formatTimestamp(actualNewestTime), formatTimestamp(expected.expectedNewestTime), newestTimeDiff);
                log.warn("‚ö†Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø –î–ò–ê–ü–ê–ó–û–ù–ê: {}", reason);
                return new ValidationResult(false, reason);
            }
        }

        log.info("‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê: –°–≤–µ—á–∏ –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {} –ø—Ä–æ—à–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏", ticker);
        return new ValidationResult(true, "–í–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞");
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç timestamp –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
     */
    private String formatTimestamp(long timestamp) {
        try {
            if (timestamp > 9999999999L) {
                // –ú–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
                return Instant.ofEpochMilli(timestamp).toString();
            } else {
                // –°–µ–∫—É–Ω–¥—ã
                return Instant.ofEpochSecond(timestamp).toString();
            }
        } catch (Exception e) {
            return String.valueOf(timestamp);
        }
    }

    /**
     * –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–∂–∏–¥–∞–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     */
    private static class ExpectedParameters {
        final int candlesCount;
        final long expectedOldestTime;
        final long expectedNewestTime;

        ExpectedParameters(int candlesCount, long expectedOldestTime, long expectedNewestTime) {
            this.candlesCount = candlesCount;
            this.expectedOldestTime = expectedOldestTime;
            this.expectedNewestTime = expectedNewestTime;
        }
    }

    /**
     * –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     */
    private static class ValidationResult {
        final boolean isValid;
        final String reason;

        ValidationResult(boolean isValid, String reason) {
            this.isValid = isValid;
            this.reason = reason;
        }
    }
}