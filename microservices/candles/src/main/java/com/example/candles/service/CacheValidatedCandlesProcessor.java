package com.example.candles.service;

import com.example.candles.repositories.CachedCandleRepository;
import com.example.shared.dto.Candle;
import com.example.shared.models.CachedCandle;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;

import java.time.Instant;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

/**
 * –°–µ—Ä–≤–∏—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π –∏–∑ –∫—ç—à–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
 * 
 * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
 * - –±–∏—Ä–∂–∞ (exchange)
 * - —Ç–∏–∫–µ—Ä (ticker)
 * - –¥–∞—Ç–∞ –î–û (untilDate) - –æ–±—Ä–µ–∑–∞–Ω–Ω–∞—è –¥–æ –Ω–∞—á–∞–ª–∞ –¥–Ω—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 2025-09-27T00:00:00Z
 * - —Ç–∞–π–º—Ñ—Ä–µ–π–º (timeframe) –≤ —Ñ–æ—Ä–º–∞—Ç–µ 1H, 1D, 1m...
 * - –ø–µ—Ä–∏–æ–¥ (period) –≤ –≤–∏–¥–µ "1year", "6months"...
 * 
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–≤–µ—á–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É.
 * –ü—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–≥—Ä—É–∂–∞–µ—Ç —á–µ—Ä–µ–∑ CandlesLoaderProcessor.
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class CacheValidatedCandlesProcessor {
    
    private final CachedCandleRepository cachedCandleRepository;
    private final CandlesLoaderProcessor candlesLoaderProcessor;
    
    /**
     * –ì–ª–∞–≤–Ω—ã–π –ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –∏–∑ –∫—ç—à–∞
     */
    public List<Candle> getValidatedCandlesFromCache(String exchange, String ticker, String untilDate, String timeframe, String period) {
        log.info("üîç –ö–≠–® –ó–ê–ü–†–û–°: –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {} –Ω–∞ –±–∏—Ä–∂–µ {}", ticker, exchange);
        log.info("üìä –ü–ê–†–ê–ú–ï–¢–†–´: untilDate={}, timeframe={}, period={}", untilDate, timeframe, period);
        
        try {
            // –®–∞–≥ 1: –í—ã—á–∏—Å–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            ExpectedParameters expected = calculateExpectedParameters(untilDate, timeframe, period);
            log.info("üéØ –û–ñ–ò–î–ê–ù–ò–Ø: {} —Å–≤–µ—á–µ–π –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ {} - {}", 
                    expected.candlesCount, formatTimestamp(expected.expectedOldestTime), formatTimestamp(expected.expectedNewestTime));
            
            // –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ –∏–∑ –∫—ç—à–∞
            List<Candle> cachedCandles = getCandlesFromCache(exchange, ticker, timeframe, expected.candlesCount);
            
            // –®–∞–≥ 3: –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–≤–µ—á–∏
            ValidationResult validationResult = validateCachedCandles(cachedCandles, expected, ticker);
            
            // –®–∞–≥ 4: –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã - –¥–æ–≥—Ä—É–∂–∞–µ–º
            if (!validationResult.isValid) {
                log.warn("‚ö†Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–†–û–í–ê–õ–ï–ù–ê: {}", validationResult.reason);
                log.info("üîÑ –î–û–ì–†–£–ó–ö–ê: –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}", ticker);
                
                // –î–æ–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
                int loadedCount = candlesLoaderProcessor.loadAndSaveCandles(exchange, ticker, untilDate, timeframe, period);
                if (loadedCount > 0) {
                    log.info("‚úÖ –î–û–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê: –ó–∞–≥—Ä—É–∂–µ–Ω–æ {} —Å–≤–µ—á–µ–π, –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∏–∑ –∫—ç—à–∞", loadedCount);
                    
                    // –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∏–∑ –∫—ç—à–∞ –ø–æ—Å–ª–µ –¥–æ–≥—Ä—É–∑–∫–∏
                    cachedCandles = getCandlesFromCache(exchange, ticker, timeframe, expected.candlesCount);
                    validationResult = validateCachedCandles(cachedCandles, expected, ticker);
                    
                    if (!validationResult.isValid) {
                        log.error("‚ùå –ü–û–í–¢–û–†–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–†–û–í–ê–õ–ï–ù–ê: {} –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}", validationResult.reason, ticker);
                        return List.of(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
                    }
                } else {
                    log.error("‚ùå –î–û–ì–†–£–ó–ö–ê –ü–†–û–í–ê–õ–ï–ù–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}", ticker);
                    return List.of(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
                }
            }
            
            // –®–∞–≥ 5: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏
            log.info("‚úÖ –ö–≠–® –†–ï–ó–£–õ–¨–¢–ê–¢: –í–æ–∑–≤—Ä–∞—â–∞–µ–º {} –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}", cachedCandles.size(), ticker);
            return cachedCandles;
            
        } catch (Exception e) {
            log.error("üí• –ö–≠–® –û–®–ò–ë–ö–ê: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}: {}", ticker, e.getMessage(), e);
            return List.of();
        }
    }
    
    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     */
    private ExpectedParameters calculateExpectedParameters(String untilDate, String timeframe, String period) {
        log.info("üìê –†–ê–°–ß–ï–¢ –ü–ê–†–ê–ú–ï–¢–†–û–í: untilDate={}, timeframe={}, period={}", untilDate, timeframe, period);
        
        // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É "–¥–æ"
        long untilTimestamp = parseUntilDate(untilDate);
        
        // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
        int candlesCount = calculateCandlesCount(timeframe, period);
        
        // –í—ã—á–∏—Å–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è —Å—Ç–∞—Ä–µ–π—à–µ–π —Å–≤–µ—á–∏
        long timeframeDurationMs = getTimeframeDurationInMillis(timeframe);
        long expectedOldestTime = untilTimestamp - (candlesCount * timeframeDurationMs);
        
        // –ù–æ–≤–µ–π—à–∞—è —Å–≤–µ—á–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–ª–∏–∑–∫–∞ –∫ untilDate
        long expectedNewestTime = untilTimestamp;
        
        return new ExpectedParameters(candlesCount, expectedOldestTime, expectedNewestTime);
    }
    
    /**
     * –ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 2025-09-27T00:00:00Z –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
     */
    private long parseUntilDate(String untilDate) {
        try {
            return Instant.parse(untilDate).toEpochMilli();
        } catch (Exception e) {
            log.error("‚ùå –û–®–ò–ë–ö–ê –ü–ê–†–°–ò–ù–ì–ê –î–ê–¢–´: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É {}: {}", untilDate, e.getMessage());
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∫–∞–∫ fallback
            return System.currentTimeMillis();
        }
    }
    
    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –∏—Å—Ö–æ–¥—è –∏–∑ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –∏ –ø–µ—Ä–∏–æ–¥–∞
     */
    private int calculateCandlesCount(String timeframe, String period) {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç –≤ –ø–µ—Ä–∏–æ–¥–µ
        int periodYears = parsePeriodToYears(period);
        
        // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
        return switch (timeframe) {
            case "1m" -> periodYears * 365 * 24 * 60;        // –º–∏–Ω—É—Ç—ã –≤ –≥–æ–¥—É
            case "5m" -> periodYears * 365 * 24 * 12;        // 5-–º–∏–Ω—É—Ç–∫–∏ –≤ –≥–æ–¥—É
            case "15m" -> periodYears * 365 * 24 * 4;        // 15-–º–∏–Ω—É—Ç–∫–∏ –≤ –≥–æ–¥—É  
            case "1H" -> periodYears * 365 * 24;             // —á–∞—Å—ã –≤ –≥–æ–¥—É
            case "4H" -> periodYears * 365 * 6;              // 4-—á–∞—Å–æ–≤–∫–∏ –≤ –≥–æ–¥—É
            case "1D" -> periodYears * 365;                  // –¥–Ω–∏ –≤ –≥–æ–¥—É
            case "1W" -> periodYears * 52;                   // –Ω–µ–¥–µ–ª–∏ –≤ –≥–æ–¥—É
            case "1M" -> periodYears * 12;                   // –º–µ—Å—è—Ü—ã –≤ –≥–æ–¥—É (–µ—Å–ª–∏ —ç—Ç–æ –º–µ—Å—è—á–Ω—ã–π –¢–§)
            default -> {
                log.warn("‚ö†Ô∏è –ù–ï–ò–ó–í–ï–°–¢–ù–´–ô –¢–ê–ô–ú–§–†–ï–ô–ú: {}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—á–µ—Ç –¥–ª—è 1H", timeframe);
                yield periodYears * 365 * 24;
            }
        };
    }
    
    /**
     * –ü–∞—Ä—Å–∏—Ç –ø–µ—Ä–∏–æ–¥ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç
     */
    private int parsePeriodToYears(String period) {
        period = period.toLowerCase().trim();
        
        if (period.contains("1 –≥–æ–¥")) {
            String number = period.replaceAll("[^0-9]", "");
            return Integer.parseInt(number.isEmpty() ? "1" : number);
        } else if (period.contains("–º–µ—Å—è—Ü")) {
            String number = period.replaceAll("[^0-9]", "");
            int months = Integer.parseInt(number.isEmpty() ? "6" : number);
            return Math.max(1, months / 12); // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –≥–æ–¥–∞, –º–∏–Ω–∏–º—É–º 1 –≥–æ–¥
        } else if (period.contains("–¥–µ–Ω—å")) {
            String number = period.replaceAll("[^0-9]", "");
            int days = Integer.parseInt(number.isEmpty() ? "365" : number);
            return Math.max(1, days / 365); // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –≥–æ–¥–∞, –º–∏–Ω–∏–º—É–º 1 –≥–æ–¥
        } else {
            log.warn("‚ö†Ô∏è –ù–ï–ò–ó–í–ï–°–¢–ù–´–ô –ü–ï–†–ò–û–î: {}, –∏—Å–ø–æ–ª—å–∑—É–µ–º 1 –≥–æ–¥", period);
            return 1;
        }
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
     */
    private long getTimeframeDurationInMillis(String timeframe) {
        return switch (timeframe) {
            case "1m" -> 60 * 1000L;                    // 1 –º–∏–Ω—É—Ç–∞
            case "5m" -> 5 * 60 * 1000L;                // 5 –º–∏–Ω—É—Ç
            case "15m" -> 15 * 60 * 1000L;              // 15 –º–∏–Ω—É—Ç
            case "1H" -> 60 * 60 * 1000L;               // 1 —á–∞—Å
            case "4H" -> 4 * 60 * 60 * 1000L;           // 4 —á–∞—Å–∞
            case "1D" -> 24 * 60 * 60 * 1000L;          // 1 –¥–µ–Ω—å
            case "1W" -> 7 * 24 * 60 * 60 * 1000L;      // 1 –Ω–µ–¥–µ–ª—è
            case "1M" -> 30L * 24 * 60 * 60 * 1000L;    // 1 –º–µ—Å—è—Ü (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
            default -> {
                log.warn("‚ö†Ô∏è –ù–ï–ò–ó–í–ï–°–¢–ù–´–ô –¢–ê–ô–ú–§–†–ï–ô–ú: {}, –∏—Å–ø–æ–ª—å–∑—É–µ–º 1H", timeframe);
                yield 60 * 60 * 1000L;
            }
        };
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–≤–µ—á–∏ –∏–∑ –∫—ç—à–∞
     */
    private List<Candle> getCandlesFromCache(String exchange, String ticker, String timeframe, int limit) {
        log.info("üóÉÔ∏è –ö–≠–® –ó–ê–ü–†–û–°: –ü–æ–ª—É—á–∞–µ–º {} —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {} –∏–∑ –∫—ç—à–∞", limit, ticker);
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–≤–µ—á–µ–π –∏–∑ –∫—ç—à–∞
            List<CachedCandle> cachedCandles = cachedCandleRepository
                    .findLatestByTickerTimeframeExchange(ticker, timeframe, exchange, PageRequest.of(0, limit));
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Candle –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (—Å—Ç–∞—Ä—ã–µ –ø–µ—Ä–≤—ã–µ)
            List<Candle> candles = cachedCandles.stream()
                    .map(CachedCandle::toCandle)
                    .sorted(Comparator.comparingLong(Candle::getTimestamp))
                    .collect(Collectors.toList());
            
            log.info("‚úÖ –ö–≠–® –û–¢–í–ï–¢: –ü–æ–ª—É—á–µ–Ω–æ {} —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {} –∏–∑ –∫—ç—à–∞", candles.size(), ticker);
            return candles;
            
        } catch (Exception e) {
            log.error("‚ùå –ö–≠–® –û–®–ò–ë–ö–ê: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}: {}", ticker, e.getMessage(), e);
            return List.of();
        }
    }
    
    /**
     * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ —Å–≤–µ—á–∏
     */
    private ValidationResult validateCachedCandles(List<Candle> candles, ExpectedParameters expected, String ticker) {
        log.info("üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –ö–≠–®–∞: –ü—Ä–æ–≤–µ—Ä—è–µ–º {} —Å–≤–µ—á–µ–π –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {}", candles.size(), ticker);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
        if (candles.size() != expected.candlesCount) {
            String reason = String.format("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π: –æ–∂–∏–¥–∞–ª–æ—Å—å %d, –ø–æ–ª—É—á–µ–Ω–æ %d", 
                    expected.candlesCount, candles.size());
            log.warn("‚ö†Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø –ö–û–õ–ò–ß–ï–°–¢–í–ê: {}", reason);
            return new ValidationResult(false, reason);
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤–µ—á–∏)
        if (!candles.isEmpty()) {
            long actualOldestTime = candles.get(0).getTimestamp();          // –ü–µ—Ä–≤–∞—è = —Å–∞–º–∞—è —Å—Ç–∞—Ä–∞—è (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é)
            long actualNewestTime = candles.get(candles.size() - 1).getTimestamp(); // –ü–æ—Å–ª–µ–¥–Ω—è—è = —Å–∞–º–∞—è –Ω–æ–≤–∞—è
            
            log.info("üìÖ –§–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –î–ò–ê–ü–ê–ó–û–ù: {} - {}", 
                    formatTimestamp(actualOldestTime), formatTimestamp(actualNewestTime));
            log.info("üìÖ –û–ñ–ò–î–ê–ï–ú–´–ô –î–ò–ê–ü–ê–ó–û–ù: {} - {}", 
                    formatTimestamp(expected.expectedOldestTime), formatTimestamp(expected.expectedNewestTime));
            
            // –î–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –≤ 1% –æ—Ç –æ–±—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            long totalPeriod = expected.expectedNewestTime - expected.expectedOldestTime;
            long allowedDifference = Math.max(totalPeriod / 100, 60 * 60 * 1000L); // –ú–∏–Ω–∏–º—É–º 1 —á–∞—Å
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä–µ–π—à—É—é —Å–≤–µ—á—É
            long oldestTimeDiff = Math.abs(actualOldestTime - expected.expectedOldestTime);
            if (oldestTimeDiff > allowedDifference) {
                String reason = String.format("–î–∏–∞–ø–∞–∑–æ–Ω —Å—ä–µ—Ö–∞–ª: —Å—Ç–∞—Ä–µ–π—à–∞—è —Å–≤–µ—á–∞ %s –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π %s (—Ä–∞–∑–Ω–∏—Ü–∞ %d –º—Å)", 
                        formatTimestamp(actualOldestTime), formatTimestamp(expected.expectedOldestTime), oldestTimeDiff);
                log.warn("‚ö†Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø –î–ò–ê–ü–ê–ó–û–ù–ê: {}", reason);
                return new ValidationResult(false, reason);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤–µ–π—à—É—é —Å–≤–µ—á—É
            long newestTimeDiff = Math.abs(actualNewestTime - expected.expectedNewestTime);
            if (newestTimeDiff > allowedDifference) {
                String reason = String.format("–î–∏–∞–ø–∞–∑–æ–Ω —Å—ä–µ—Ö–∞–ª: –Ω–æ–≤–µ–π—à–∞—è —Å–≤–µ—á–∞ %s –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π %s (—Ä–∞–∑–Ω–∏—Ü–∞ %d –º—Å)", 
                        formatTimestamp(actualNewestTime), formatTimestamp(expected.expectedNewestTime), newestTimeDiff);
                log.warn("‚ö†Ô∏è –í–ê–õ–ò–î–ê–¶–ò–Ø –î–ò–ê–ü–ê–ó–û–ù–ê: {}", reason);
                return new ValidationResult(false, reason);
            }
        }
        
        log.info("‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê: –°–≤–µ—á–∏ –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {} –ø—Ä–æ—à–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏", ticker);
        return new ValidationResult(true, "–í–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞");
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç timestamp –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
     */
    private String formatTimestamp(long timestamp) {
        try {
            if (timestamp > 9999999999L) {
                // –ú–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
                return Instant.ofEpochMilli(timestamp).toString();
            } else {
                // –°–µ–∫—É–Ω–¥—ã
                return Instant.ofEpochSecond(timestamp).toString();
            }
        } catch (Exception e) {
            return String.valueOf(timestamp);
        }
    }
    
    /**
     * –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–∂–∏–¥–∞–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     */
    private static class ExpectedParameters {
        final int candlesCount;
        final long expectedOldestTime;
        final long expectedNewestTime;
        
        ExpectedParameters(int candlesCount, long expectedOldestTime, long expectedNewestTime) {
            this.candlesCount = candlesCount;
            this.expectedOldestTime = expectedOldestTime;
            this.expectedNewestTime = expectedNewestTime;
        }
    }
    
    /**
     * –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     */
    private static class ValidationResult {
        final boolean isValid;
        final String reason;
        
        ValidationResult(boolean isValid, String reason) {
            this.isValid = isValid;
            this.reason = reason;
        }
    }
}