package com.example.candles.service;

import com.example.candles.repositories.CachedCandleRepository;
import com.example.shared.dto.Candle;
import com.example.shared.models.CachedCandle;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.stream.Collectors;

/**
 * –û—Ç–¥–µ–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫—ç—à–µ–º
 * –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É self-invocation –≤ CandleCacheService
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class CandleTransactionService {

    private final CachedCandleRepository cachedCandleRepository;

    /**
     * –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≤–µ—á–µ–π –≤ –∫—ç—à
     * @return –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∞–ª—å–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –≤ –ë–î
     */
    @Transactional
    public int saveCandlesToCache(String ticker, String timeframe, String exchange,
                                   List<Candle> candles) {
        try {
            log.debug("üíæ –î–û–ë–ê–í–õ–Ø–ï–ú: {} —Å–≤–µ—á–µ–π –¥–ª—è {}/{}/{}",
                    candles.size(), ticker, timeframe, exchange);

            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–æ –æ–ø–µ—Ä–∞—Ü–∏–∏
            long countBefore = cachedCandleRepository.countByTickerTimeframeExchangeSimple(ticker, timeframe, exchange);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—Ü–∏—è–º–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
            int batchSize = 1000;

            for (int i = 0; i < candles.size(); i += batchSize) {
                long batchStartTime = System.currentTimeMillis();
                List<Candle> batch = candles.subList(i, Math.min(i + batchSize, candles.size()));

                List<CachedCandle> cachedCandles = batch.stream()
                        .map(candle -> CachedCandle.fromCandle(candle, ticker, timeframe, exchange))
                        .toList();

                // –°—É–ø–µ—Ä-–±—ã—Å—Ç—Ä–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–∞—Ç—á–µ–≤—ã–π INSERT (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã)
                int processedCount = 0;
                
                try {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π saveAll –¥–ª—è –±–∞—Ç—á–µ–≤–æ–π –≤—Å—Ç–∞–≤–∫–∏
                    cachedCandleRepository.saveAll(cachedCandles);
                    processedCount = cachedCandles.size();
                    
                } catch (Exception e) {
                    log.warn("‚ö†Ô∏è BATCH FAILED: {} - –ø–∞–¥–∞–µ–º –Ω–∞ –ø–æ—à—Ç—É—á–Ω—ã–µ –≤—Å—Ç–∞–≤–∫–∏: {}", ticker, e.getMessage());
                    
                    // Fallback: –ø–æ—à—Ç—É—á–Ω—ã–µ –≤—Å—Ç–∞–≤–∫–∏ –µ—Å–ª–∏ –±–∞—Ç—á–µ–≤–∞—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞
                    for (CachedCandle cachedCandle : cachedCandles) {
                        try {
                            cachedCandleRepository.insertIgnoreDuplicates(
                                    cachedCandle.getTicker(),
                                    cachedCandle.getTimeframe(), 
                                    cachedCandle.getExchange(),
                                    cachedCandle.getTimestamp(),
                                    cachedCandle.getOpenPrice(),
                                    cachedCandle.getHighPrice(),
                                    cachedCandle.getLowPrice(),
                                    cachedCandle.getClosePrice(),
                                    cachedCandle.getVolume(),
                                    cachedCandle.getIsValid()
                            );
                            processedCount++;
                            
                        } catch (Exception ex) {
                            log.debug("üîÑ SKIP: {} timestamp={} - –≤–µ—Ä–æ—è—Ç–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç", 
                                    ticker, cachedCandle.getTimestamp());
                        }
                    }
                }
                
                log.info("üíæ BATCH SAVED: {} - –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {} —Å–≤–µ—á–µ–π –∑–∞ {} —Å–µ–∫", 
                        ticker, processedCount, (System.currentTimeMillis() - batchStartTime) / 1000);

                // –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è OutOfMemoryError
                if (i % 1000 == 0) { // –ö–∞–∂–¥—ã–µ 1K —Å–≤–µ—á–µ–π (–±—ã–ª–æ 5K)
                    System.gc();
                    try { Thread.sleep(50); } catch (Exception ignored) {} // –ü–∞—É–∑–∞ –¥–ª—è GC
                }
            }

            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            long countAfter = cachedCandleRepository.countByTickerTimeframeExchangeSimple(ticker, timeframe, exchange);
            int reallyAdded = (int)(countAfter - countBefore);

            if (reallyAdded > 0) {
                log.debug("üíæ –î–û–ë–ê–í–õ–ï–ù–û: {} –Ω–æ–≤—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è {}/{}/{}", reallyAdded, ticker, timeframe, exchange);
            }

            return reallyAdded;

        } catch (Exception e) {
            log.error("‚ùå –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤–µ—á–µ–π –≤ –∫—ç—à –¥–ª—è {}: {}", ticker, e.getMessage(), e);
            throw e; // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è rollback
        }
    }

    /**
     * –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–µ—á–µ–π –≤ –∫—ç—à–µ
     * @return –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∞–ª—å–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –≤ –ë–î
     */
    @Transactional
    public int updateCandlesInCache(String ticker, String timeframe, String exchange,
                                     List<Candle> candles, long fromTimestamp) {
        try {
            log.debug("üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï: {} —Å–≤–µ—á–µ–π –¥–ª—è {}/{}/{} —Å timestamp {}",
                    candles.size(), ticker, timeframe, exchange, fromTimestamp);

            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–æ –æ–ø–µ—Ä–∞—Ü–∏–∏
            long countBefore = cachedCandleRepository.countByTickerTimeframeExchangeSimple(ticker, timeframe, exchange);

            // –¢–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–≤–µ—á–∏, —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç –¥—É–±–ª–∏
            List<CachedCandle> newCandles = candles.stream()
                    .filter(candle -> candle.getTimestamp() >= fromTimestamp)
                    .map(candle -> CachedCandle.fromCandle(candle, ticker, timeframe, exchange))
                    .collect(Collectors.toList());

            if (!newCandles.isEmpty()) {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º INSERT ... ON CONFLICT DO NOTHING –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                for (CachedCandle cachedCandle : newCandles) {
                    try {
                        cachedCandleRepository.insertIgnoreDuplicates(
                                cachedCandle.getTicker(),
                                cachedCandle.getTimeframe(), 
                                cachedCandle.getExchange(),
                                cachedCandle.getTimestamp(),
                                cachedCandle.getOpenPrice(),
                                cachedCandle.getHighPrice(),
                                cachedCandle.getLowPrice(),
                                cachedCandle.getClosePrice(),
                                cachedCandle.getVolume(),
                                cachedCandle.getIsValid()
                        );
                    } catch (Exception e) {
                        log.warn("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–≤–µ—á—É –¥–ª—è {}: {}", ticker, e.getMessage());
                        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å–≤–µ—á–µ–π
                    }
                }
            }

            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            long countAfter = cachedCandleRepository.countByTickerTimeframeExchangeSimple(ticker, timeframe, exchange);
            int reallyAdded = (int)(countAfter - countBefore);

            if (reallyAdded > 0) {
                log.debug("üíæ –î–û–ë–ê–í–õ–ï–ù–û: {} –Ω–æ–≤—ã—Ö —Å–≤–µ—á–µ–π –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ {}/{}/{}", reallyAdded, ticker, timeframe, exchange);
            }

            return reallyAdded;

        } catch (Exception e) {
            log.error("‚ùå –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–µ—á–µ–π –≤ –∫—ç—à–µ –¥–ª—è {}: {}", ticker, e.getMessage());
            throw e; // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è rollback
        }
    }
}