package com.example.candles.service;

import com.example.candles.repositories.CachedCandleRepository;
import com.example.shared.dto.Candle;
import com.example.shared.models.CachedCandle;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.stream.Collectors;

/**
 * –û—Ç–¥–µ–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫—ç—à–µ–º
 * –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É self-invocation –≤ CandleCacheService
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class CandleTransactionService {

    private final CachedCandleRepository cachedCandleRepository;

    /**
     * –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≤–µ—á–µ–π –≤ –∫—ç—à
     */
    @Transactional
    public void saveCandlesToCache(String ticker, String timeframe, String exchange,
                                   List<Candle> candles) {
        try {
            log.debug("üíæ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {} —Å–≤–µ—á–µ–π –¥–ª—è {}/{}/{}",
                    candles.size(), ticker, timeframe, exchange);

            // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–≤–µ—á–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–∫–µ—Ä–∞/—Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
            cachedCandleRepository.deleteByTickerTimeframeExchange(ticker, timeframe, exchange);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—Ü–∏—è–º–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
            int batchSize = 1000;
            int totalSaved = 0;

            for (int i = 0; i < candles.size(); i += batchSize) {
                List<Candle> batch = candles.subList(i, Math.min(i + batchSize, candles.size()));

                List<CachedCandle> cachedCandles = batch.stream()
                        .map(candle -> CachedCandle.fromCandle(candle, ticker, timeframe, exchange))
                        .collect(Collectors.toList());

                cachedCandleRepository.saveAll(cachedCandles);
                totalSaved += cachedCandles.size();

                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –±–∞—Ç—á–∞
                if (i % 5000 == 0) { // –ö–∞–∂–¥—ã–µ 5K —Å–≤–µ—á–µ–π
                    System.gc();
                }
            }

            log.info("üíæ –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø: –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {} —Å–≤–µ—á–µ–π –¥–ª—è {}/{}/{} (–±–∞—Ç—á–∞–º–∏ –ø–æ {})",
                    totalSaved, ticker, timeframe, exchange, batchSize);

        } catch (Exception e) {
            log.error("‚ùå –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤–µ—á–µ–π –≤ –∫—ç—à –¥–ª—è {}: {}", ticker, e.getMessage(), e);
            throw e; // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è rollback
        }
    }

    /**
     * –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–µ—á–µ–π –≤ –∫—ç—à–µ
     */
    @Transactional
    public void updateCandlesInCache(String ticker, String timeframe, String exchange,
                                     List<Candle> candles, long fromTimestamp) {
        try {
            log.debug("üîÑ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–µ—á–µ–π –¥–ª—è {}/{}/{} —Å timestamp {}",
                    ticker, timeframe, exchange, fromTimestamp);

            // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–µ—á–∏ –Ω–∞—á–∏–Ω–∞—è —Å fromTimestamp
            List<CachedCandle> existingCandles = cachedCandleRepository
                    .findByTickerAndTimeframeAndExchangeOrderByTimestampAsc(ticker, timeframe, exchange);

            List<CachedCandle> toDelete = existingCandles.stream()
                    .filter(cc -> cc.getTimestamp() >= fromTimestamp)
                    .collect(Collectors.toList());

            if (!toDelete.isEmpty()) {
                cachedCandleRepository.deleteAll(toDelete);
                log.debug("üóëÔ∏è –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø: –£–¥–∞–ª–µ–Ω–æ {} —Å—Ç–∞—Ä—ã—Ö —Å–≤–µ—á–µ–π", toDelete.size());
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–≤–µ—á–∏
            List<CachedCandle> newCandles = candles.stream()
                    .filter(candle -> candle.getTimestamp() >= fromTimestamp)
                    .map(candle -> CachedCandle.fromCandle(candle, ticker, timeframe, exchange))
                    .collect(Collectors.toList());

            if (!newCandles.isEmpty()) {
                cachedCandleRepository.saveAll(newCandles);
                log.debug("üíæ –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø: –î–æ–±–∞–≤–ª–µ–Ω–æ {} –Ω–æ–≤—ã—Ö —Å–≤–µ—á–µ–π", newCandles.size());
            }

            log.info("üîÑ –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø: –û–±–Ω–æ–≤–ª–µ–Ω–æ {} —Å–≤–µ—á–µ–π –¥–ª—è {}/{}", newCandles.size(), ticker, timeframe);

        } catch (Exception e) {
            log.error("‚ùå –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–µ—á–µ–π –≤ –∫—ç—à–µ –¥–ª—è {}: {}", ticker, e.getMessage());
            throw e; // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è rollback
        }
    }
}