package com.example.candles.service;

import com.example.candles.repositories.CachedCandleRepository;
import com.example.shared.dto.Candle;
import com.example.shared.models.CachedCandle;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.stream.Collectors;

/**
 * –û—Ç–¥–µ–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫—ç—à–µ–º
 * –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É self-invocation –≤ CandleCacheService
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class CandleTransactionService {

    private final CachedCandleRepository cachedCandleRepository;

    /**
     * –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≤–µ—á–µ–π –≤ –∫—ç—à
     */
    @Transactional
    public void saveCandlesToCache(String ticker, String timeframe, String exchange,
                                   List<Candle> candles) {
        try {
            log.info("üíæ –¢–û–õ–¨–ö–û –î–û–ë–ê–í–õ–Ø–ï–ú: {} –Ω–æ–≤—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è {}/{}/{}",
                    candles.size(), ticker, timeframe, exchange);

            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ò–ö–û–ì–î–ê –ù–ï –£–î–ê–õ–Ø–ï–ú! –¢–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–≤–µ—á–∏
            // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç –¥—É–±–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—Ü–∏—è–º–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
            int batchSize = 1000;
            int totalSaved = 0;

            for (int i = 0; i < candles.size(); i += batchSize) {
                List<Candle> batch = candles.subList(i, Math.min(i + batchSize, candles.size()));

                List<CachedCandle> cachedCandles = batch.stream()
                        .map(candle -> CachedCandle.fromCandle(candle, ticker, timeframe, exchange))
                        .collect(Collectors.toList());

                // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º INSERT ... ON CONFLICT DO NOTHING –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                for (CachedCandle cachedCandle : cachedCandles) {
                    try {
                        cachedCandleRepository.insertIgnoreDuplicates(
                                cachedCandle.getTicker(),
                                cachedCandle.getTimeframe(), 
                                cachedCandle.getExchange(),
                                cachedCandle.getTimestamp(),
                                cachedCandle.getOpenPrice(),
                                cachedCandle.getHighPrice(),
                                cachedCandle.getLowPrice(),
                                cachedCandle.getClosePrice(),
                                cachedCandle.getVolume(),
                                cachedCandle.getIsValid()
                        );
                        totalSaved++;
                    } catch (Exception e) {
                        log.warn("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–≤–µ—á—É –¥–ª—è {}: {}", ticker, e.getMessage());
                        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å–≤–µ—á–µ–π –±–µ–∑ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    }
                }

                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –±–∞—Ç—á–∞
                if (i % 5000 == 0) { // –ö–∞–∂–¥—ã–µ 5K —Å–≤–µ—á–µ–π
                    System.gc();
                }
            }

            log.info("üíæ –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø: –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {} —Å–≤–µ—á–µ–π –¥–ª—è {}/{}/{} (–±–∞—Ç—á–∞–º–∏ –ø–æ {})",
                    totalSaved, ticker, timeframe, exchange, batchSize);

        } catch (Exception e) {
            log.error("‚ùå –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤–µ—á–µ–π –≤ –∫—ç—à –¥–ª—è {}: {}", ticker, e.getMessage(), e);
            throw e; // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è rollback
        }
    }

    /**
     * –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–µ—á–µ–π –≤ –∫—ç—à–µ
     * –£–ü–†–û–©–ï–ù–û: –¢–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–≤–µ—á–∏, –¥—É–±–ª–∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å
     */
    @Transactional
    public void updateCandlesInCache(String ticker, String timeframe, String exchange,
                                     List<Candle> candles, long fromTimestamp) {
        try {
            log.info("üîÑ –¢–û–õ–¨–ö–û –î–û–ë–ê–í–õ–ï–ù–ò–ï: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–µ—á–µ–π –¥–ª—è {}/{}/{} —Å timestamp {}",
                    ticker, timeframe, exchange, fromTimestamp);

            // –£–ü–†–û–©–ï–ù–û: –¢–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–≤–µ—á–∏, —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç –¥—É–±–ª–∏
            List<CachedCandle> newCandles = candles.stream()
                    .filter(candle -> candle.getTimestamp() >= fromTimestamp)
                    .map(candle -> CachedCandle.fromCandle(candle, ticker, timeframe, exchange))
                    .collect(Collectors.toList());

            if (!newCandles.isEmpty()) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞—Ç—á–∞–º–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤
                int batchSize = 1000;
                // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º INSERT ... ON CONFLICT DO NOTHING –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                for (CachedCandle cachedCandle : newCandles) {
                    try {
                        cachedCandleRepository.insertIgnoreDuplicates(
                                cachedCandle.getTicker(),
                                cachedCandle.getTimeframe(), 
                                cachedCandle.getExchange(),
                                cachedCandle.getTimestamp(),
                                cachedCandle.getOpenPrice(),
                                cachedCandle.getHighPrice(),
                                cachedCandle.getLowPrice(),
                                cachedCandle.getClosePrice(),
                                cachedCandle.getVolume(),
                                cachedCandle.getIsValid()
                        );
                    } catch (Exception e) {
                        log.warn("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–≤–µ—á—É –¥–ª—è {}: {}", ticker, e.getMessage());
                        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å–≤–µ—á–µ–π
                    }
                }
                log.info("üíæ –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø: –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å {} –Ω–æ–≤—ã—Ö —Å–≤–µ—á–µ–π", newCandles.size());
            }

            log.info("üîÑ –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è {}/{} –∑–∞–≤–µ—Ä—à–µ–Ω–æ", ticker, timeframe);

        } catch (Exception e) {
            log.error("‚ùå –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–µ—á–µ–π –≤ –∫—ç—à–µ –¥–ª—è {}: {}", ticker, e.getMessage());
            throw e; // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è rollback
        }
    }
}